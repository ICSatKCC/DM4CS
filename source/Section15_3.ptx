<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="s-finite-state-automata">
<title>Finite-State Automata</title>
<idx>Finite-State Automata</idx>
<idx>Finite-State Machines</idx>
<introduction>
    <p> We have seen how regular expressions can be used to generate languages mechanically. How
        might languages be recognized mechanically? The question is of interest because if we can
        mechanically recognize languages like <m>L= \{</m>all legal C++ programs that will not go
        into infinite loops on any input<m>\}</m>, then it would be possible to write uber-compilers
        that can do semantic error-checking like testing for infinite loops, in addition to the
        syntactic error-checking they currently do. </p>
    <p> What formalism might we use to model what it means to recognize a language ``mechanically''?
        We look for inspiration to a language-recognizer with which we are all familiar, and which
        we've already in fact mentioned: a compiler. Consider how a C++ compiler might handle
        recognizing a legal <c>if</c> statement. Having seen the word <c>
            if</c>, the compiler will be in a <em>state</em> or <em>phase of its execution</em>
        where it expects to see a <c>(</c>; in this state, any other character will put the compiler
        in a ``failure" state. If the compiler does in fact see a <c>(</c> next, it will then be in
        an ``expecting a boolean condition" state; if it sees a sequence of symbols that make up a
        legal boolean condition, it will then be in an ``expecting a <c>)</c>" state; and then
        ``expecting a <c>{</c>' or a legal statement"; and so on. Thus one can think of the compiler
        as being in a series of states; on seeing a new input symbol, it moves on to a new state;
        and this sequence of transitions eventually leads to either a ``failure" state (if the <c>if</c>
        statement is not syntactically correct) or a ``success" state (if the <c>if</c> statement is
        legal). We isolate these three concepts---states, input-inspired transitions from state to
        state, and ``accepting" vs ``non-accepting" states---as the key features of a mechanical
        language-recognizer, and capture them in a model called a <term>finite-state
            automaton</term>. (Whether this is a successful distillation of the essence of
        mechanical language recognition remains to be seen; the question will be taken up later in
        this chapter.) <aside>
            <title>Automata</title>
            <p> The term <term>automata</term> is the plural form of <term>automaton</term>. In some
        texts, <term>machine</term> is used in place of automaton. </p>
        </aside>
    </p>
    <p> A <term>finite-state automaton (FSA)</term><idx>
            <h>finite-state automaton</h>
        </idx>, then, is a machine which takes, as input, a
        finite string of symbols from some alphabet <m>\Sigma</m>. There is a finite set of <term>
        states</term> in which the machine can find itself. The state it is in before consuming any
        input is called the <term>start state</term>. Some of the states are <term>accepting</term>
        or <term>final</term>. If the machine ends in such a state after completely consuming an
        input string, the string is said to be <term>accepted</term> by the machine. The actual
        functioning of the machine is described by something called a <term>transition
            function</term>, which specifies what happens if the machine is in a particular state
        and looking at a particular input symbol. (``What happens" means ``in which state does the
        machine end up".) </p>

    <example xml:id="ex-transition-funct">
        <title>A transition function</title>
        <statement>
            <p> Below is a table that describes the transition function of a finite-state automaton
                with states <m>p</m>, <m>q</m>, and <m>r</m>, on inputs <m>0</m> and <m>
                    1</m>. <table>
                    <title></title>
                    <tabular>
                        <row header="yes" bottom="major">
                            <cell> </cell>
                            <cell>
                                <m>p</m>
                            </cell>
                            <cell>
                                <m>q</m>
                            </cell>
                            <cell>
                                <m>r</m>
                            </cell>
                        </row>
                        <row>
                            <cell right="major">
                                <m>0</m>
                            </cell>
                            <cell>
                                <m>p</m>
                            </cell>
                            <cell>
                                <m>q</m>
                            </cell>
                            <cell>
                                <m>r</m>
                            </cell>
                        </row>
                        <row>
                            <cell right="major">
                                <m>1</m>
                            </cell>
                            <cell>
                                <m>q</m>
                            </cell>
                            <cell>
                                <m>r</m>
                            </cell>
                            <cell>
                                <m>r</m>
                            </cell>
                        </row>
                    </tabular>
                </table>
                The table indicates, for example, that if the FSA were in state <m>p</m> and
                consumed a <m>1</m>, it would move to state <m>q</m>.</p>
        </statement>
    </example>


</introduction>

<subsection xml:id="subsec-deterministic-fsa">
    <title>Deterministic Finite-State Automata</title>
    <idx>
        <h>Deterministic Finite-State Automata</h>
    </idx>
    <idx>
        <h>DFSA</h>
    </idx>
    <p> FSAs actually come in two flavors depending on what properties you require of the transition
        function. We will look first at a class of FSAs called deterministic finite-state automata
        (DFAs). In these machines, the current state of the machine and the current input symbol
        together determine exactly which state the machine ends up in: for every <m>\lt</m> current
        state, current input symbol<m>\gt</m> pair, there is exactly one possible next state for the
        machine. </p>
    <definition xml:id="def-deterministic-fsa">
        <title>Deterministic Finite-State Automaton</title>
        <idx>
            <h>Deterministic Finite-State Automata</h>
        </idx>
        <statement>
            <p>Formally, a <term>deterministic finite-state automaton</term> <m>M</m> is specified by
                5 components: <m>M=(Q, \Sigma, q_0, \delta, F)</m> where </p>
            <p>
                <ul>
                    <li>
                        <p>
                            <m>Q</m> is a finite set of states; </p>
                    </li>
                    <li>
                        <p>
                            <m>\Sigma</m> is an alphabet called the <em>input alphabet</em>; </p>
                    </li>
                    <li>
                        <p>
                            <m>q_0 \in Q</m> is a state which is designated as the <em>start
                                state</em>; </p>
                    </li>
                    <li>
                        <p>
                            <m>F</m> is a subset of <m>Q</m>; the states in <m>F</m> are states
                            designated as <em>final</em> or <em>accepting</em> states; </p>
                    </li>
                    <li>
                        <p>
                            <m>\delta</m> is a transition function that takes <m>\lt</m>state, input
                            symbol <m>\gt</m> pairs and maps each one to a state: <m>\delta
                                : Q \times
                                \Sigma \rightarrow Q</m>. <ul>
                                <li>
                                    <p> To say <m>\delta(q,a) = q'</m> means that if the machine is
                            in state <m>q</m> and the input symbol <m>a</m> is consumed, then the
                            machine will move into state <m>q'</m>. </p>
                                </li>
                                <li>
                                    <p> The function <m>\delta</m> must be a total function, meaning
                            that <m>\delta(q,a)</m> must be defined for every state <m>q</m> and
                            every input symbol <m>a</m>. </p>
                                </li>
                                <li>
                                    <p> Recall also that, according to the definition of a function,
                            there can be only one output for any particular input. This means that
                            for any given <m>q</m> and <m>a</m>, <m>\delta(q,a)</m> can have only
                            one value. This is what makes the finite-state automaton <em>
                            deterministic</em>: given the current state and input symbol, there is
                            only one possible move the machine can make. </p>
                                </li>
                            </ul>
                        </p>
                    </li>
                </ul>
            </p>
        </statement>
    </definition>

    <example>
        <p> The transition function described by the table in the preceding example is that of a
            DFA. If we take <m>p</m> to be the start state and <m>r</m> to be a final state, then
            the formal description of the resulting machine is <m>M= (\{p,q,r\}, \{0,1\},
                p, \delta, \{r\})</m>, where <m>\delta</m> is given by </p>


        <sidebyside widths="50% 50%" margins="auto" valign="bottom">
            <dl>
                <li>
                    <p>
                        <m>\delta(p,0)=p</m>

                    </p>
                </li>
                <li>
                    <p>
                        <m>\delta(q,0)=q</m>

                    </p>
                </li>
                <li>
                    <p>
                        <m>\delta(r,0)=r</m>

                    </p>
                </li>
            </dl>

            <dl>
                <li>
                    <p>
                        <m>\delta(p,1)=q</m>
                    </p>
                </li>
                <li>
                    <p>
                        <m>\delta(q,1)=r</m>
                    </p>
                </li>
                <li>
                    <p>
                        <m>\delta(r,1)=r</m>
                    </p>
                </li>
            </dl>
        </sidebyside>
    </example>
    <p> The transition function <m>\delta</m> describes only individual steps of the machine as
        individual input symbols are consumed. However, we will often want to refer to``the state
        the automaton will be in if it starts in state <m>q</m> and consumes input string <m>
            w</m>", where <m>w</m> is a string of input symbols rather than a single symbol.
        Following the usual practice of using <m>^*</m> to designate ``0 or more", we define <term>
            <m>\delta^*(q,w)</m>
        </term> as a convenient shorthand for ``the state that the
        automaton will be in if it starts in state <m>q</m> and consumes the input string <m>w</m>".
        For any string, it is easy to see, based on <m>\delta</m>, what steps the machine will make
        as those symbols are consumed, and what <m>\delta^*(q,w)</m> will be for any <m>q</m> and <m>
        w</m>. Note that if no input is consumed, a DFA makes no move, and so <m>\delta^*(q,
        \varepsilon) = q</m> for any state <m>q</m>. <aside><m>
                \delta^*</m> can be defined formally by saying that \delta^*(q,\varepsilon)=q for
        every state <m>q</m>, and <m>\delta^*(q,ax)=\delta^*(\delta(q,a),x)</m> for any state <m>q</m>,
        a\in\Sigma and <m>x\in\Sigma^*</m>. Note that this is a recursive definition.</aside>
    </p>

    <example> Let <m>M</m> be the automaton in the preceding example. Then, for example: <md>
            <mrow> \delta^*(p, 001)\amp =q \amp \text{ since }\delta(p,0)=p,
                \delta(p,0)=p,\text{ and }\delta(p,1)=q;</mrow>
            <mrow> \delta^*(p, 01000) \amp = q \amp</mrow>
            <mrow>\delta^*(p, 1111) \amp = r \amp</mrow>
            <mrow> \delta^*(q, 0010) \amp = r \amp</mrow>
        </md>
    </example>
    <p>
        We have divided the states of a DFA into accepting and non-accepting states, with
        the idea that some strings will be recognized as ``legal" by the automaton, and
        some not. Formally:
    </p>
    <definition
        xml:id="def-accepted-language">
        <title>Language Accepted by M</title>
        <statement>
            <p> Let <m>M=(Q, \Sigma, q_0, \delta, F)</m>. A string <m>w \in \Sigma^*</m> is <term>
                accepted</term> by <m>M</m> iff <m>\delta^*(q_0, w) \in F</m>. (Don't get confused
                by the notation. Remember, it's just a shorter and neater way of saying ``<m>w \in
                \Sigma^*</m> is accepted by <m>M</m> if and only if the state that M will end up in
                if it starts in <m>q_0</m> and consumes <m>w</m> is one of the states in <m>F</m>.") </p>
            <p> The <term>language accepted by <m>M</m></term>, denoted <m>L(M)</m>, is the set of
                all strings <m>w \in \Sigma^*</m> that are accepted by <m>M</m>: <m>L(M) = \{
                    w \in\Sigma^* \ | \ \delta^*(q_0, w) \in F\}</m>. </p>
        </statement>
    </definition>
    <p> Note that we sometimes use a slightly different phrasing and say that a language <m>L</m> is
        accepted by some machine <m>M</m>. We don't mean by this that <m>L</m> <em>and
            maybe some other strings</em> are accepted by <m>M</m>; we mean <m>L = L(M)</m>, i.e.\ <m>
        L</m> is <em>exactly</em> the set of strings accepted by <m>M</m>. </p>
    <p> It may not be easy, looking at a formal specification of a DFA, to determine what language
        that automaton accepts. Fortunately, the mathematical description of the automaton <m>M=(Q,
        \Sigma, q_0, \delta, F)</m> can be neatly and helpfully captured in a picture called a <term>transition
        diagram</term>. Consider again the DFA of the two preceding examples. It can be represented
        pictorially as: <figure xml:id="fig-fsa1">
            <image source="images/fsa1" width="80%">
                <description>Transition diagram for above DFA</description>
            </image>
        </figure>
        The arrow on the left indicates that <m>p</m> is the start state; double circles indicate
        that a state is accepting. Looking at this picture, it should be fairly easy to see that the
        language accepted by the DFA <m>M</m> is <m>L(M) = \{ x \in \{0,1\}^* \ | \
            n_1(x) \geq 2\}</m>. </p>


    <example xml:id="find-lang-from-DFA">
        <statement>
            <p> Find the language accepted by the DFA shown below (and describe it using a regular
                expression!) <figure xml:id="fig-fsa2">
                    <image source="images/fsa2" width="80%">
                        <description>Transition diagram to find language</description>
                    </image>
                </figure>
                The start state of <m>M</m> is accepting, which means <m>\varep \in L(M)</m>. If <m>
                M</m> is in state <m>q_0</m>, a sequence of two <m>a</m>'s or three <m>b</m>'s will
                move <m>M</m> back to <m>q_0</m> and hence be accepted. So <m>L(M) = L((aa\REOR
                bbb)^*)</m>. </p>
        </statement>
    </example>

</subsection>

<!-- below is old stuff save for problems ->
    <definition xml:id="def-finite-state-machine">
        <title>Finite-State Machine</title>
        <idx>Finite-State Machine</idx>
        <notation>
            <usage>
                <m>(S, X, Z, w, t)</m>
            </usage>
            <description>A finite-state machine with states <m>S</m>, input alphabet <m>X</m>,
                output alphabet <m>X</m>, and output function <m>w</m> and next-state function <m>t</m></description>
        </notation>
        <statement>
            <p>A finite-state machine is defined by a quintet <m>(S, X, Z, w, t)</m> where <ol
                    marker="(1)">
                    <li>
                        <p>
                            <m>S=\{s_1, s_2,\ldots , s_r\}</m> is the state set, a finite set that
                corresponds to the set of memory configurations that the machine can have at any
                time.</p>
                    </li>
                    <li>
                        <p>
                            <m>X=\{x_1, x_2, \ldots ,x_m\}</m> is the input alphabet.</p>
                    </li>
                    <li>
                        <p>
                            <m>Z=\{z_1,z_2, \ldots ,z_n\}</m> is the output alphabet.</p>
                    </li>
                    <li>
                        <p>
                            <m>w: X\times S \to Z</m> is the output function, which specifies which
                output symbol <m>w(x, s) \in Z</m> is written onto the output tape when the machine
                is in state <m>s</m> and the input symbol <m>x</m> is read.</p>
                    </li>
                    <li>
                        <p>
                            <m>t:X\times S\to S</m> is the next-state (or transition) function,
                which specifies which state <m>t(x, s) \in S</m> the machine should enter when it is
                in state <m>s</m> and it reads the symbol <m>x</m>.</p>
                    </li>
                </ol>
            </p>
        </statement>
    </definition>

    <example xml:id="ex-vending-machine">
        <title>Vending Machine as a Finite-State Machine</title>
        <p>Many mechanical devices, such as simple vending machines, can be thought of as
            finite-state machines. For simplicity, assume that a vending machine dispenses packets
            of gum, spearmint (S), peppermint (P), and bubble (B), for <m>25</m> cents each. We can
            define the input alphabet to be <me>\{\textrm{deposit 25 cents}, \textrm{press S},
            \textrm{press P}, \textrm{press B}\}</me> and the state set to be <m>\{\textrm{Locked},
            \textrm{ Select}\}</m>, where the deposit of a quarter unlocks the release mechanism of
            the machine and allows you to select a flavor of gum. We will leave it to the reader to
            imagine what the output alphabet, output function, and next-state function would be. You
            are also invited to let your imagination run wild and include such features as a
            coin-return lever and change maker.</p>
    </example>


    <example xml:id="ex-parity-checker">
        <title>A Parity Checking Machine</title>
        <p>The following machine is called a parity checker. It recognizes whether or not a string
            in <m>B^*</m> contains an even number of 1s. The memory structure of this machine
            reflects the fact that in order to check the parity of a string, we need only keep track
            of whether an odd or even number of 1's has been detected.</p>

        <p> The input alphabet is <m>B=\{0,1\}</m> and the output alphabet is also <m>B</m>. The
            state set is <m>\{even, odd\}</m>. The following table defines the output and next-state
            functions. <me>\begin{array}{c|ccc}
                x &amp; s &amp; w(x,s) &amp; t(x,s) \\
                \hline

                \begin{array}{c}
                0 \\
                0 \\
                1 \\
                1 \\
                \end{array}
                &amp;
                \begin{array}{c}
                \textrm{ even} \\
                \textrm{ odd} \\
                \textrm{ even} \\
                \textrm{ odd} \\
                \end{array}
                &amp;
                \begin{array}{c}
                0 \\
                1 \\
                1 \\
                0 \\
                \end{array}
                &amp;
                \begin{array}{c}
                \textrm{ even} \\
                \textrm{ odd} \\
                \textrm{ odd} \\
                \textrm{ even} \\
                \end{array}
                \\
                \end{array}</me>
        </p>

        <p>Note how the value of the most recent output at any time is an indication of the current
            state of the machine. Therefore, if we start in the even state and read any finite input
            tape, the last output corresponds to the final state of the parity checker and tells us
            the parity of the string on the input tape. For example, if the string 11001010 is read
            from left to right, the output tape, also from left to right, will be 10001100. Since
            the last character is a 0, we know that the input string has even parity.</p>
    </example>

    <p>An alternate method for defining a finite-state machine is with a transition diagram. A
        transition diagram is a directed graph that contains a node for each state and edges that
        indicate the transition and output functions. An edge <m>\left(s_i,s_j\right)</m> that is
        labeled <m>x/z</m> indicates that in state <m>s_i</m> the input <m>x</m> results in an
        output of <m>z</m> and the next state is <m>s_j</m>. That is, <m>w\left(x, s_i\right)=z</m>
        and <m>t\left(x, s_i\right)=s_j</m>. The transition diagram for the parity checker appears
        in <xref ref="fig-parity-checker" text="type-global" />. In later examples, we will see that
        if there are different inputs, <m>x_i</m> and <m>x_j</m>, while in the same state resulting
        in the same transitions and outputs, we label a single edge <m>x_i, \left.x_j\right/z</m>
        instead of drawing two edges with labels <m>\left.x_i\right/z</m> and <m>\left.x_j\right/z</m>
        .</p>

    <figure xml:id="fig-parity-checker">
        <caption>Transition Diagram for a Parity Checker
        </caption>
        <image width="80%" source="images/fig-parity-checker.png">
            <description>Transition Diagram for a Parity Checker</description>
        </image>
    </figure>

    <p>One of the most significant features of a finite-state machine is that it retains no
        information about its past states that can be accessed by the machine itself. For example,
        after we input a tape encoded with the symbols 01101010 into the parity checker, the current
        state will be even, but we have no indication within the machine whether or not it has
        always been in even state. Note how the output tape is not considered part of the machine's
        memory. In this case, the output tape does contain a <q>history</q> of the parity checker's
        past states. We assume that the finite-state machine has no way of recovering the output
        sequence for later use.</p>


    <example xml:id="ex-baseball-machine">
        <title>A Baseball Machine</title>
        <p>Consider the following simplified version of the game of baseball. To be precise, this
            machine describes one half-inning of a simplified baseball game. Suppose that in
            addition to home plate, there is only one base instead of the usual three bases. Also,
            assume that there are only two outs per inning instead of the usual three. Our input
            alphabet will consist of the types of hits that the batter could have: out (O), double
            play (DP), single (S), and home run (HR). The input DP is meant to represent a batted
            ball that would result in a double play (two outs), if possible. The input DP can then
            occur at any time. The output alphabet is the numbers 0, 1, and 2 for the number of runs
            that can be scored as a result of any input. The state set contains the current
            situation in the inning, the number of outs, and whether a base runner is currently on
            the base. The list of possible states is then 00 (for 0 outs and 0 runners), 01, 10, 11,
            and end (when the half-inning is over). The transition diagram for this machine appears
            in <xref ref="fig-baseball-machine" text="type-global" /></p>

        <figure xml:id="fig-baseball-machine">
            <caption>Transition Diagram for a simplified game of baseball
            </caption>
            <image width="70%" source="images/fig-baseball-machine.png">
                <description>Transition Diagram for a simplified game of baseball</description>
            </image>
        </figure>

        <p>Let's concentrate on one state. If the current state is 01, 0 outs and 1 runner on base,
            each input results in a different combination of output and next-state. If the batter
            hits the ball poorly (a double play) the output is zero runs and the inning is over (the
            limit of two outs has been made). A simple out also results in an output of 0 runs and
            the next state is 11, one out and one runner on base. If the batter hits a single, one
            run scores (output = 1) while the state remains 01. If a home run is hit, two runs are
            scored (output = 2) and the next state is 00. If we had allowed
            three outs per inning, this graph would only be marginally more complicated. The usual
            game with three bases would be quite a bit more complicated, however.</p>
    </example>


    <example xml:id="ex-problem-recognition-in-reg-languages">
        <title>Recognition in Regular Languages</title>
        <p>As we mentioned at the outset of this section, finite-state machines can recognize
            strings in a regular language. Consider the language <m>L</m> over <m>\{a,b,c\}</m> that
            contains the strings of positive length in which each <m>a</m> is followed by <m>b</m>
            and each <m>b</m> is followed by <m>c</m>. One such string is <m>bccabcbc</m>. This
            language is regular. A grammar for the language would be nonterminal symbols <m>
            \{A,B,C\}</m> with starting symbol <m>C</m> and production rules <m>A\to bB</m>, <m>B\to
            cC</m>, <m>C\to aA</m>, <m>C\to bB</m>, <m>C \to cC</m>, <m>C \to c</m>. A finite-state
            machine (<xref ref="fig-recognition-machine" text="type-global" />) that recognizes this
            language can be constructed with one state for each nonterminal symbol and an additional
            state (Reject) that is entered if any invalid production takes place. At the end of an
            input tape that encodes a string in <m>\{a,b,c\}^*</m>, we will know when the string
            belongs to <m>L</m> based on the final output. If the final output is 1, the string
            belongs to <m>L</m> and if it is 0, the string does not belong to <m>L</m>. In addition,
            recognition can be accomplished by examining the final state of the machine. The input
            string belongs to the language if and only if the final state is <m>C</m>.</p>
        <figure xml:id="fig-recognition-machine">
            <caption>
            </caption>
            <image width="70%" source="images/fig-recognition-machine.png">
                <description></description>
            </image>
        </figure>
        <p>The construction of this machine is quite easy: note how each production rule translates
            into an edge between states other than Reject. For example, <m>C\to bB</m> indicates
            that in State <m>C</m>, an input of <m>b</m> places the machine into State <m>B</m>. Not
            all sets of production rules can be as easily translated to a finite-state machine.
            Another set of production rules for <m>L</m> is <m>A\to aB</m>, <m>B\to bC</m>, <m>C\to
            cA</m>, <m>C\to cB</m>, <m>C\to cC</m> and <m>C\to c</m>. Techniques for constructing
            finite-state machines from production rules is not our objective here. Hence we will
            only expect you to experiment with production rules until appropriate ones are found.</p>
    </example>


    <example xml:id="ex-binary-adder">
        <title>A Binary Adder</title>
        <p> A finite-state machine can be designed to add positive integers of any size. Given two
            integers in binary form, <m>a=a_na_{n-1} \cdots a_1a_0</m> and <m>b=b_n b_{n-1}\cdots
            b_1b_0</m>, the machine take as its input sequence the corresponding bits of <m>a</m>
            and <m>b</m> reading from right to left with a <q>parity bit</q> added <me>a_0b_0\left(a_0+_2b_0\right)
            ,a_1b_1\left(a_1+_2b_1\right) \ldots , a_nb_n\left(a_n+_2b_n\right),111</me></p>

        <p>Notice the special input 111 at the end. All possible inputs except the last one must
            even parity (contain an even number of ones). The output sequence is the sum of <m>a</m>
            and <m>b</m>, starting with the units digit, and comes from the set <m>\{0,1,\lambda \}</m>.
            The transition diagram for this machine appears in <xref ref="fig-binary-adder"
                text="type-global" />.</p>

        <figure xml:id="fig-binary-adder">
            <caption>Transition Diagram for a binary adder
            </caption>
            <image width="80%" source="images/fig-binary-adder.png">
                <description>Transition Diagram for a binary adder</description>
            </image>
        </figure>
    </example>

    <exercises xml:id="exercises-15-3">
        <title>Exercises</title>
        <exercise number="1">
            <statement>
                <p> Draw a transition diagram for the vending machine described in <xref
                        ref="ex-vending-machine" text="type-global" />.</p>
            </statement>
            <answer>
                <p>
                    <me>\begin{array}{cccc}
                        x &amp; s &amp; Z(x,s) &amp; t(x,s) \\
                        \textrm{ Deposit} 25\not{c} &amp; \textrm{ Locked} &amp; \textrm{ Nothing}
                        &amp; \textrm{ Select} \\
                        \textrm{ Deposit} 25\not{c} &amp; \textrm{ Select} &amp; \textrm{ Return}
                        25\not{c} &amp; \textrm{ Select} \\
                        \textrm{ Press} S &amp; \textrm{ Locked} &amp; \textrm{ Nothing} &amp;
                        \textrm{ Locked} \\
                        \textrm{ Press} S &amp; \textrm{ Select} &amp; \textrm{ Dispense} S &amp;
                        \textrm{ Locked} \\
                        \textrm{ Press} P &amp; \textrm{ Locked} &amp; \textrm{ Nothing} &amp;
                        \textrm{ Locked} \\
                        \textrm{ Press} P &amp; \textrm{ Select} &amp; \textrm{ Dispense} P &amp;
                        \textrm{ Locked} \\
                        \textrm{ Press} B &amp; \textrm{ Locked} &amp; \textrm{ Nothing} &amp;
                        \textrm{ Locked} \\
                        \textrm{ Press} B &amp; \textrm{ Select} &amp; \textrm{ Dispense} B &amp;
                        \textrm{ Locked} \\
                        \end{array}</me>
                </p>
                <figure xml:id="fig-vending-diagram">
                    <caption>Vending Machine Transitions
                    </caption>
                    <image width="70%" source="images/fig-vending-diagram.png">
                        <description>Vending Machine Transitions</description>
                    </image>
                </figure>
            </answer>
        </exercise>
        <exercise number="2">
            <statement>
                <p> Construct finite-state machines that recognize the regular languages that you
                    identified in Section 14.2.</p>
            </statement>
        </exercise>
        <exercise number="3">
            <statement>
                <p> What is the input set for the binary adding machine in <xref
                        ref="ex-binary-adder" text="type-global" />?</p>
            </statement>
            <answer>
                <p>
                    <m>\{000, 011, 101, 110, 111\}</m>
                </p>
            </answer>
        </exercise>
        <exercise number="4">
            <statement>
                <p> What input sequence would be used to compute the sum of 1101 and 0111 (binary
                    integers)? What would the output sequence be?</p>
            </statement>
        </exercise>
        <exercise number="5">
            <idx>Gray Code Decoder</idx>
            <statement>
                <p>The Gray Code Decoder. The finite-state machine defined by the following figure
                    has an interesting connection with the Gray Code.</p>

                <figure xml:id="fig-gray-code-decoder">
                    <caption>Gray Code Decoder
                    </caption>
                    <image width="70%" source="images/fig-gray-code-decoder.png">
                        <description>Gray Code Decoder</description>
                    </image>
                </figure>


                <p> Given a string <m>x=x_1x_2\cdots x_n\in B^n</m>, we may ask where <m>x</m>
                    appears in <m>G_n</m>. Starting in Copy state, the input string <m>x</m> will
                    result in an output string <m>z\in B^n</m>, which is the binary form of the
                    position of <m>x</m> in <m>G_n</m>. Recall that positions are numbered from 0 to <m>
                    2^n-1</m>. <ol marker="(a)">
                        <li>
                            <p> In what positions <m>(0-31)</m> do 10110, 00100, and 11111 appear in <m>
                    G_5</m>?</p>
                        </li>
                        <li>
                            <p> Prove that the Gray Code Decoder always works.</p>
                        </li>
                    </ol>
                </p>
            </statement>
            <answer>
                <p>
                    <ol marker="(a)">
                        <li>
                            <p>
                                <ul>
                                    <li>
                                        <p>Input: 10110, Output: 11011 <m>\Rightarrow</m> 10110 is
                                            in position 27 </p>
                                    </li>
                                    <li>
                                        <p>Input: 00100, Output: 00111 <m>\Rightarrow</m> 00100 is
                                            in position 7 </p>
                                    </li>
                                    <li>
                                        <p> Input:11111, Output: 10101 <m>\Rightarrow</m> 11111 is
                                            in position 21</p>
                                    </li>
                                </ul>
                            </p>
                        </li>
                        <li>
                            <p> Let <m>x=x_1x_2\ldots x_n</m> and recall that for <m>n\geq 1</m>, <m>G_{n+1}=\left(
                                \begin{array}{c}
                                    0G_n \\
                                    1G_n^r \\
                                    \end{array}
                                    \right)</m>, where <m>G_n^r</m> is the reverse of <m>G_n</m>. To
                                prove that the Gray Code Decoder always works, let <m>p(n)</m> be
                                the proposition <q>Starting in Copy state, <m>x</m>'s output is the
                                position of <m>x</m> in <m>G_n</m>; and starting in Complement
                                state, <m>x</m>'s output is the position of <m>x</m> in <m>G_n^r</m>
                                .</q> That p(1) is true is easy to verify for both possible values
                                of <m>x</m>, 0 and 1. Now assume that for some <m>n\geq 1</m>, <m>
                                p(n)</m> is true and consider <m>x=x_1x_2\ldots x_nx_{n+1}</m>.</p>
                            <p>If <m>x_1=0</m>, <m>x</m>'s output is a zero followed by the output
                                for <m>\left(x_2\ldots x_nx_{n+1}\right)</m> starting in Copy state.
                                By the induction hypothesis, this is zero followed by the position
                                of <m>\left(x_2 \ldots x_n x_{n+1}\right)</m> in <m>G_n</m>, which
                                is the position of <m>x</m> in <m>G_{n+1}</m>, by the definition of <m>
                                G</m>.</p>
                            <p>If <m>x_1=1</m>, <m>x</m>'s output is a one followed by the output
                                for <m>\left(x_2\ldots x_nx_{n+1}\right)</m> starting in Complement
                                state. By the induction hypothesis, this is one followed by the
                                position of <m>\left(x_2\ldots x_nx_{n+1}\right)</m> in <m>G_n^r</m>,
                                which is the position of <m>x</m> in <m>G_{n+1}</m>, by the
                                definition of <m>G</m>. <m>\square</m></p>
                        </li>
                    </ol>
                </p>
            </answer>
        </exercise>
    </exercises>
</section>
