<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="sec-monoids-and-machines">
    <title>Monoids and Machines</title>

    <introduction>
        <p>
            In this section, we will see how every finite-state machine has a monoid associated with
            it and how we can represent any monoid with a finite-state machine.
        </p>
    </introduction>

    <subsection xml:id="subsec-monoid-of-fsm">
        <title>The Monoid of a Finite-State Machine</title>
        <idx>
            <h>Monoid</h>
            <h>of a Finite-State Machine</h>
        </idx>

        <p>For any finite-state machine, the elements of its associated monoid correspond to certain
            input sequences. Because only a finite number of combinations of states and inputs is
            possible for a finite-state machine there is only a finite number of input sequences
            that summarize the machine. This idea is illustrated best with a few examples.</p>

        <p>Consider the parity checker. The following table summarizes the effect on the parity
            checker of strings in <m>B^1</m> and <m>B^2</m>. The row labeled <q>Even</q> contains
            the final state and final output as a result of each input string in <m>B^1</m> and <m>
            B^2</m> when the machine starts in the even state. Similarly, the row labeled <q>Odd</q>
            contains the same information for input sequences when the machine starts in the odd
            state. <me>\begin{array}{c|cccccc}
                \textrm{ Input} \textrm{ String} &amp; 0 &amp; 1 &amp; 00 &amp; 01 &amp; 10 &amp; 11
            \\
                \hline
                \textrm{ Even} &amp; (\textrm{ Even},0) &amp; (\textrm{ Odd},1) &amp; (\textrm{
            Even},0) &amp; (\textrm{ Odd},1) &amp; (\textrm{ Odd},1) &amp; (\textrm{ Even},0) \\
            \textrm{ Odd} &amp; (\textrm{ Odd},1) &amp; (\textrm{ Even},1) &amp; (\textrm{ Odd},1)
            &amp; (\textrm{ Even},1) &amp; (\textrm{ Even},0) &amp; (\textrm{ Odd},1) \\
                \textrm{ Same} \textrm{ Effect} \textrm{ as} &amp; &amp; &amp; 0 &amp; 1 &amp; 1
            &amp; 0 \\
                \end{array}</me></p>

        <p>Note how, as indicated in the last row, the strings in <m>B^2</m> have the same effect as
            certain strings in <m>B^1</m>. For this reason, we can summarize the machine in terms of
            how it is affected by strings of length 1. The actual monoid that we will now describe
            consists of a set of functions, and the operation on the functions will be based on the
            concatenation operation.</p>
        <p>Let <m>T_0</m> be the final effect (state and output) on the parity checker of the input
            0. Similarly, <m>T_1</m> is defined as the final effect on the parity checker of the
            input 1. More precisely, <me>T_0(\textrm{ even})=(\textrm{ even},0) \quad \textrm{and}
            \quad T_0(\textrm{ odd})=(\textrm{ odd},1)\textrm{,}</me> while <me>T_1(\textrm{
            even})=(\textrm{ odd},1) \quad \textrm{and} \quad T_1(\textrm{ odd})=(\textrm{
            even},0)\textrm{.}</me></p>
        <p>In general, we define the operation on a set of such functions as follows: if <m>s</m>, <m>
            t</m> are input sequences and <m>T_s</m> and <m>T_t</m>, are functions as above, then <m>
            T_s*T_t=T_{st}</m>, that is, the result of the function that summarizes the effect on
            the machine by the concatenation of <m>s</m> with <m>t</m>. Since, for example, 01 has
            the same effect on the parity checker as 1, <m>T_0*T_1=T_{01}=T_1</m>. We don't stop our
            calculation at <m>T_{01}</m> because we want to use the shortest string of inputs to
            describe the final result. A complete table for the monoid of the parity checker is <m>\begin{array}{c|c}
            * &amp;
                \begin{array}{cc}
                T_0 &amp; T_1 \\
                \end{array}
                \\
                \hline

                \begin{array}{c}
                T_0 \\
                T_1 \\
                \end{array}
                &amp;
                \begin{array}{cc}
                T_0 &amp; T_1 \\
                T_1 &amp; T_0 \\
                \end{array}
                \\
                \end{array}</m></p>
        <p>What is the identity of this monoid? The monoid of the parity checker is isomorphic to
            the monoid <m>\left[\mathbb{Z}_2; +_2\right]</m>.</p>

        <p>This operation may remind you of the composition operation on functions, but there are
            two principal differences. The domain of <m>T_s</m> is not the codomain of <m>T_t</m>
            and the functions are read from left to right unlike in composition, where they are
            normally read from right to left.</p>

        <p>You may have noticed that the output of the parity checker echoes the state of the
            machine and that we could have looked only at the effect on the machine as the final
            state. The following example has the same property, hence we will only consider the
            final state.</p>

        <example xml:id="ex-no-consecutive-ones-monoid">
            <p>The transition diagram for the machine that recognizes strings in <m>B*</m> that have
                no consecutive 1's appears in <xref ref="fig-no-11s-machine" text="type-global" />.
                Note how it is similar to the graph in <xref ref="fig-directed-graph-ex1"
                    text="type-global" />. Only a <q>reject state</q> has been added, for the case
                when an input of 1 occurs while in State <m>a</m>. We construct a similar table to
                the one in the previous example to study the effect of certain strings on this
                machine. This time, we must include strings of length 3 before we recognize that no <q>new
                effects</q> can be found.</p>

            <figure xml:id="fig-no-11s-machine">
                <caption>No Consecutive Ones Monoid
                </caption>
                <image width="70%" source="images/fig-no-11s-machine.png">
                    <description>No Consecutive Ones Monoid</description>
                </image>
            </figure>

            <p>
                <m>\begin{array}{ccccccccccccccc}
                    \textrm{ Inputs} &amp; 0 &amp; 1 &amp; 00 &amp; 01 &amp; 10 &amp; 11 &amp; 000
                    &amp; 001 &amp; 010 &amp; 011 &amp; 100 &amp; 101 &amp; 110 &amp; 111 \\
                    s &amp; b &amp; a &amp; b &amp; a &amp; b &amp; r &amp; b &amp; a &amp; b &amp;
                    r &amp; b &amp; a &amp; r &amp; r \\
                    a &amp; b &amp; r &amp; b &amp; a &amp; r &amp; r &amp; b &amp; a &amp; b &amp;
                    r &amp; r &amp; r &amp; r &amp; r \\
                    b &amp; b &amp; a &amp; b &amp; a &amp; b &amp; r &amp; b &amp; a &amp; b &amp;
                    r &amp; b &amp; a &amp; r &amp; r \\
                    r &amp; r &amp; r &amp; r &amp; r &amp; r &amp; r &amp; r &amp; r &amp; r &amp;
                    r &amp; r &amp; r &amp; r &amp; r \\
                    \textrm{ Same} \textrm{ as} &amp; &amp; &amp; 0 &amp; &amp; &amp; &amp; 0 &amp;
                    01 &amp; 0 &amp; 11 &amp; 10 &amp; 1 &amp; 11 &amp; 11 \\
                    \end{array}</m>
            </p>

            <p>The following table summarizes how combinations of the strings <m>0,1,01,10, \textrm{
                and } 11</m> affect this machine. <me>\begin{array}{c|c}
                    * &amp;
                    \begin{array}{ccccc}
                    T_0 &amp; T_1 &amp; T_{01} &amp; T_{10} &amp; T_{11} \\
                    \end{array}
                    \\
                    \hline

                    \begin{array}{c}
                    T_0 \\
                    T_1 \\
                    T_{01} \\
                    T_{10} \\
                    T_{11} \\
                    \end{array}
                    &amp;
                    \begin{array}{ccccc}
                    T_0 &amp; T_1 &amp; T_{01} &amp; T_{10} &amp; T_{11} \\
                    T_{10} &amp; T_{11} &amp; T_1 &amp; T_{11} &amp; T_{11} \\
                    T_0 &amp; T_{11} &amp; T_{01} &amp; T_{11} &amp; T_{11} \\
                    T_{10} &amp; T_1 &amp; T_1 &amp; T_{10} &amp; T_{11} \\
                    T_{11} &amp; T_{11} &amp; T_{11} &amp; T_{11} &amp; T_{11} \\
                    \end{array}
                    \\
                    \end{array}</me>
            </p>
            <p>All the results in this table can be obtained using the previous table. For example, <me>\begin{array}{c}
                T_{10}*T_{01}=T_{1001}=T_{100}*T_1=T_{10}*T_1=T_{101}=T_1\\
                    \textrm{ and} \\
                    T_{01}*T_{01}=T_{0101}=T_{010}T_1=T_0T_1=T_{01}\\
                    \end{array}</me>
            </p>

            <p>Note that none of the elements that we have listed in this table serves as the
                identity for our operation. This problem can always be remedied by including the
                function that corresponds to the input of the null string, <m>T_{\lambda }</m>.
                Since the null string is the identity for concatenation of strings, <m>T_sT_{\lambda
                }=T_{\lambda }T_s=T_s</m> for all input strings <m>s</m>.</p>
        </example>

        <example xml:id="ex-unit-time-delay">
            <title>The Unit-time Delay Machine</title>
            <p>A finite-state machine called the unit-time delay machine does not echo its current
                state, but prints its previous state. For this reason, when we find the monoid of
                the unit-time delay machine, we must consider both state and output. The transition
                diagram of this machine appears in <xref ref="fig-unit-time-delay"
                    text="type-global" />.</p>

            <figure xml:id="fig-unit-time-delay">
                <caption />
                <image width="70%" source="images/fig-unit-time-delay.png">
                    <description>Unit time delay graph</description>
                </image>
            </figure>


            <p>
                <m>\begin{array}{c|c}
                    \textrm{ Input} &amp;
                    \begin{array}{cccccccccc}
                    &amp;
                    \begin{array}{cc}
                    0 &amp; 1 \\
                    \end{array}
                    &amp; 00\textrm{ } &amp; 01\textrm{ } &amp; \textrm{ }10\textrm{ } &amp; 11
                    &amp; 100\textrm{ or}000\textrm{
                    } &amp; 101\textrm{ or}001 &amp; 110\textrm{ or}101 &amp; 111\textrm{ or}011 \\
                    \end{array}
                    \\
                    \hline

                    \begin{array}{c}
                    0 \\
                    1 \\
                    \textrm{ Same} \textrm{ as} \\
                    \end{array}
                    &amp;
                    \begin{array}{cccccccccc}
                    (0,0) &amp; (1,0) &amp; (0,0) &amp; (1,0) &amp; (0,1) &amp; (1,1) &amp; (0,0)
                    &amp; (1,0) &amp; (0,1) &amp; (1,1) \\
                    (0,1) &amp; (1,1) &amp; (0,0) &amp; (1,0) &amp; (0,1) &amp; (1,1) &amp; (0,0)
                    &amp; (1,0) &amp; (0,1) &amp; (1,1) \\
                    &amp; &amp; &amp; &amp; &amp; &amp; 00 &amp; 01 &amp; 10 &amp; 11 \\
                    \end{array}
                    \\
                    \end{array}</m>
            </p>
            <p>Again, since no new outcomes were obtained from strings of length 3, only strings of
                length 2 or less contribute to the monoid of the machine. The table for the strings
                of positive length shows that we must add <m>T_{\lambda }</m> to obtain a monoid.</p>

            <p>
                <me>
                    \begin{array}{c|c}
                    * &amp;
                    \begin{array}{cccccc}
                    T_0 &amp; T_1 &amp; T_{00} &amp; T_{01} &amp; T_{10} &amp; T_{11} \\
                    \end{array}
                    \\
                    \hline

                    \begin{array}{c}
                    T_0 \\
                    T_1 \\
                    T_{00} \\
                    T_{01} \\
                    T_{10} \\
                    T_{11} \\
                    \end{array}
                    &amp;
                    \begin{array}{cccccc}
                    T_{00} &amp; T_{01} &amp; T_{00} &amp; T_{01} &amp; T_{10} &amp; T_{11} \\
                    T_{10} &amp; T_{11} &amp; T_{00} &amp; T_{01} &amp; T_{10} &amp; T_{11} \\
                    T_{00} &amp; T_{01} &amp; T_{00} &amp; T_{01} &amp; T_{10} &amp; T_{11} \\
                    T_{10} &amp; T_{11} &amp; T_{00} &amp; T_{01} &amp; T_{10} &amp; T_{11} \\
                    T_{00} &amp; T_{01} &amp; T_{00} &amp; T_{01} &amp; T_{10} &amp; T_{11} \\
                    T_{10} &amp; T_{11} &amp; T_{00} &amp; T_{01} &amp; T_{10} &amp; T_{11} \\
                \end{array}
                    \\
                    \end{array}</me>.</p>
        </example>

    </subsection>

    <subsection xml:id="subsec-machine-of-monoid">
        <title>The Machine of a Monoid</title>
        <idx>Machine of a Monoid</idx>
        <p>Any finite monoid <m>[M;*]</m> can be represented in the form of a finite-state machine
            with input and state sets equal to <m>M</m>. The output of the machine will be ignored
            here, since it would echo the current state of the machine. Machines of this type are
            called <term>state machines</term>. It can be shown that whatever can be done with a
            finite-state machine can be done with a state machine; however, there is a trade-off.
            Usually, state machines that perform a specific function are more complex than general
            finite-state machines.</p>


        <definition xml:id="def-machine-of-monoid">
            <title>Machine of a Monoid</title>
            <idx>Machine of a Monoid</idx>
            <notation>
                <usage>m(M)</usage>
                <description>The machine of monoid <m>M</m></description>
            </notation>
            <statement>
                <p>If <m>[M;*]</m> is a finite monoid, then the machine of <m>M</m>, denoted <m>m(M)</m>,
                    is the state machine with state set <m>M</m>, input set <m>M</m>, and next-state
                    function <m>t : M\times M \to M</m> defined by <m>t(s, x) = s * x</m>.</p>
            </statement>
        </definition>

        <example xml:id="ex-15-4-1">
            <p>We will construct the machine of the monoid <m>\left[\mathbb{Z}_2;+_2\right]</m>. As
                mentioned above, the state set and the input set are both <m>\mathbb{Z}_2</m>. The
                next state function is defined by <m>t(s, x) = s +_2 x</m>. The transition diagram
                for <m>m\left(\mathbb{Z}_2\right)</m> appears in <xref ref="fig-machine-of-z2"
                    text="type-global" />. Note how it is identical to the transition diagram of the
                parity checker, which has an associated monoid that was isomorphic to <m>
                \left[\mathbb{Z}_2;+_2\right].</m>
            </p>
            <figure xml:id="fig-machine-of-z2">
                <caption>The machine of <m>[\mathbb{Z}_2;+_2]</m>
                </caption>
                <image width="70%" source="images/fig-machine-of-z2.png">
                    <description>The machine of <m>[\mathbb{Z}_2;+_2]</m></description>
                </image>
            </figure>
        </example>

        <example xml:id="ex-transition-examples">
            <p>The transition diagram of the monoids <m>\left[\mathbb{Z}_2;\times _2\right]</m> and <m>\left[\mathbb{Z}_3;\times
                _3\right]</m> appear in <xref ref="fig-machine-of-zx2-zx3" text="type-global" />.</p>
            <figure xml:id="fig-machine-of-zx2-zx3">
                <caption>The machines of <m>[\mathbb{Z}_2;\times_2]</m> and <m>[\mathbb{Z}_3;
                    \times_3]</m>
                </caption>
                <image width="70%" source="images/fig-machine-of-zx2-zx3.png">
                    <description>The machines of <m>[\mathbb{Z}_2; \times_2]</m> and <m>
                        [\mathbb{Z}_3;\times_3]</m></description>
                </image>
            </figure>
        </example>

        <example xml:id="ex-15-4-2">
            <p> Let <m>U</m> be the monoid that we obtained from the unit-time delay machine (<xref
                    ref="ex-unit-time-delay" text="type-global" />). We have seen that the machine
                of the monoid of the parity checker is essentially the parity checker. Will we
                obtain a unit-time delay machine when we construct the machine of <m>U</m>? We can't
                expect to get exactly the same machine because the unit-time delay machine is not a
                state machine and the machine of a monoid is a state machine. However, we will see
                that our new machine is capable of telling us what input was received in the
                previous time period. The operation table for the monoid serves as a table to define
                the transition function for the machine. The row headings are the state values,
                while the column headings are the inputs. If we were to draw a transition diagram
                with all possible inputs, the diagram would be too difficult to read. Since <m>U</m>
                is generated by the two elements, <m>T_0</m> and <m>T_1</m>, we will include only
                those inputs. Suppose that we wanted to read the transition function for the input <m>
                T_{01}</m>. Since <m>T_{01}=T_0T_1</m>, in any state <m>s, t\left(s, T_{01}\right) =
                t\left(t\left(s, T_0\right), T_1\right).</m> The transition diagram appears in <xref
                    ref="fig-15-4-3" text="type-global" />.</p>

            <figure xml:id="fig-15-4-3">
                <caption>Unit time delay machine
                </caption>
                <image width="70%" source="images/fig-15-4-3.png">
                    <description>Unit time delay machine</description>
                </image>
            </figure>
            <p>If we start reading a string of 0's and 1's while in state <m>T_{\lambda }</m> and
                are in state <m>T_{ab}</m> at any one time, the input from the previous time period
                (not the input that sent us into <m>T_{ab}</m>, the one before that) is <m>a</m>. In
                states <m>T_{\lambda }, T_0</m> and <m>T_1</m>, no previous input exists. </p>
        </example>
    </subsection>

    <exercises xml:id="exercises-15-4">
        <title>Exercises</title>
        <exercise number="1">
            <statement>
                <p>For each of the transition diagrams in <xref ref="fig-exercise-15-4-1"
                        text="type-local" />, write out tables for their associated monoids.
                    Identify the identity in terms of a string of positive length, if possible.</p>
                <figure xml:id="fig-exercise-15-4-1">
                    <caption>Exercise 1
                    </caption>
                    <image width="70%" source="images/fig-exercise-15-4-1.png">
                        <description>Exercise 1 of section 14.4</description>
                    </image>
                </figure>
            </statement>
            <hint>
                <p>Where the output echoes the current state, the output can be ignored.</p>
            </hint>
            <answer>
                <p>
                    <ol marker="(a)">
                        <li>
                            <p>
                                <m>\begin{array}{c|cccccc}
                                    \textrm{ Input String} &amp; a &amp; b &amp; c &amp; aa &amp; ab
                                    &amp; ac \\
                                    \hline
                                    1 &amp; (a,1) &amp; (a,2) &amp; (c,3) &amp; (a,1) &amp; (a,2)
                                    &amp; (c,3) \\
                                    2 &amp; (a,2) &amp; (a,1) &amp; (c,3) &amp; (a,2) &amp; (a,1)
                                    &amp; (c,3) \\
                                    3 &amp; (c,3) &amp; (c,3) &amp; (c,3) &amp; (c,3) &amp; (c,3)
                                    &amp; (c,3) \\
                                    \end{array}</m>


                                <m>\begin{array}{c|cccccc}
                                    \textrm{ Input String} &amp; ba &amp; bb &amp; bc &amp; ca &amp;
                                    cb &amp; cc \\
                                    \hline
                                    1 &amp; (a,2) &amp; (a,1) &amp; (c,3) &amp; (c,3) &amp; (c,3)
                                    &amp; (c,3) \\
                                    2 &amp; (a,1) &amp; (a,2) &amp; (c,3) &amp; (c,3) &amp; (c,3)
                                    &amp; (c,3) \\
                                    3 &amp; (c,3) &amp; (c,3) &amp; (c,3) &amp; (c,3) &amp; (c,3)
                                    &amp; (c,3) \\
                                    \end{array}</m>
                            </p>


                            <p>We can see that <m>T_aT_a= T_{\textrm{ \textit{aa}}}=T_a</m>, <m>T_aT_b=
                                T_{\textrm{ \textit{ab}}}= T_b</m>, etc. Therefore, we have the
                                following monoid: <me>\begin{array}{c|c}
                                    &amp;
                                    \begin{array}{ccc}
                                    T_{a} &amp; T_b &amp; T_b \\
                                    \end{array}
                                    \\
                                    \hline

                                    \begin{array}{c}
                                    T_a \\
                                    T_b \\
                                    T_c \\
                                    \end{array}
                                    &amp;
                                    \begin{array}{ccc}
                                    T_a &amp; T_b &amp; T_c \\
                                    T_b &amp; T_a &amp; T_c \\
                                    T_c &amp; T_c &amp; T_c \\
                                    \end{array}
                                    \\
                                    \end{array}</me>

                            </p>

                            <p>Notice that <m>T_a</m> is the identity of this monoid.</p>
                        </li>
                        <li>
                            <p>
                                <m>
                                    \begin{array}{c|cccccc}
                                    \textrm{Input String} &amp; 1 &amp; 2 &amp; 11 &amp; 12 &amp; 21
                                    &amp; 22 \\
                                    \hline
                                    A &amp; C &amp; B &amp; A &amp; D &amp; D &amp; A \\
                                    B &amp; D &amp; A &amp; B &amp; C &amp; C &amp; B \\
                                    C &amp; A &amp; D &amp; C &amp; B &amp; B &amp; C \\
                                    D &amp; B &amp; C &amp; D &amp; A &amp; A &amp; D \\
                                    \end{array}</m>
                            </p>
                            <p>
                                <m>
                                    \begin{array}{c|cccccccc}
                                    \textrm{Input String} &amp;111 &amp; 112 &amp; 121 &amp; 122
                                    &amp; 211 &amp; 212 &amp; 221 &amp; 222 \\
                                    \hline
                                    A &amp; C &amp; B &amp; B &amp; C &amp; B &amp; C &amp; C &amp;
                                    B \\
                                    B &amp; D &amp; A &amp; A &amp; D &amp; A &amp; D &amp; D &amp;
                                    A \\
                                    C &amp; B &amp; C &amp; C &amp; B &amp; C &amp; B &amp; B &amp;
                                    C \\
                                    D &amp; B &amp; C &amp; C &amp; B &amp; C &amp; B &amp; B &amp;
                                    C \\
                                    \end{array}</m>
                            </p>
                            <p>We have the following monoid: <me>\begin{array}{c|c}
                                    &amp;
                                    \begin{array}{cccc}
                                    T_1 &amp; T_2 &amp; T_{11} &amp; T_{12} \\
                                    \end{array}
                                    \\
                                    \hline

                                    \begin{array}{c}
                                    T_1 \\
                                    T_2 \\
                                    T_{11} \\
                                    T_{12} \\
                                    \end{array}
                                    &amp;
                                    \begin{array}{cccc}
                                    T_{11} &amp; T_{12} &amp; T_1 &amp; T_2 \\
                                    T_b &amp; T_{11} &amp; T_2 &amp; T_1 \\
                                    T_1 &amp; T_2 &amp; T_{11} &amp; T_{12} \\
                                    T_2 &amp; T_1 &amp; T_{12} &amp; T_{11} \\
                                    \end{array}
                                    \\
                                    \end{array}</me>
                            </p>
                            <p>Notice that <m>T_{11}</m> is the identity of this monoid. </p>
                        </li>
                    </ol>
                </p>
            </answer>
        </exercise>
        <exercise number="2">
            <statement>
                <p> What common monoids are isomorphic to the monoids obtained in the previous
                    exercise?
</p>
            </statement>
        </exercise>
        <exercise number="3">
            <statement>
                <p>Can two finite-state machines with nonisomorphic transition diagrams have
                    isomorphic monoids?</p>
            </statement>
            <answer>
                <p> Yes, just consider the unit time delay machine of <xref
                        ref="fig-unit-time-delay" text="type-global" />. Its monoid is described by
                    the table at the end of Section 14.4 where the <m>T_{\lambda
                        }</m> row and <m>T_{\lambda }</m> column are omitted. Next consider the
                    machine in <xref ref="fig-15-4-3" text="type-global" />. The monoid of this
                    machine is: <me>\begin{array}{c|ccccccc}
                        &amp; T_{\lambda } &amp; T_0 &amp; T_1 &amp; T_{00} &amp; T_{01} &amp;
                    T_{10} &amp; T_{11} \\
                        \hline
                        T_{\lambda } &amp; T_{\lambda } &amp; T_0 &amp; T_1 &amp; T_{00} &amp;
                    T_{01} &amp; T_{10} &amp; T_{11} \\
                        \hline
                        T_0 &amp; T_0 &amp; T_{00} &amp; T_{01} &amp; T_{00} &amp; T_{01} &amp;
                    T_{10} &amp; T_{11} \\
                        T_1 &amp; T_1 &amp; T_{10} &amp; T_{11} &amp; T_{00} &amp; T_{01} &amp;
                    T_{10} &amp; T_{11} \\
                        T_{00} &amp; T_{00} &amp; T_{00} &amp; T_{01} &amp; T_{00} &amp; T_{01}
                    &amp; T_{10} &amp; T_{11} \\
                        T_{01} &amp; T_{01} &amp; T_{10} &amp; T_{11} &amp; T_{00} &amp; T_{01}
                    &amp; T_{10} &amp; T_{11} \\
                        T_{10} &amp; T_{10} &amp; T_{00} &amp; T_{01} &amp; T_{00} &amp; T_{01}
                    &amp; T_{10} &amp; T_{11} \\
                        T_{11} &amp; T_{11} &amp; T_{10} &amp; T_{11} &amp; T_{00} &amp; T_{01}
                    &amp; T_{10} &amp; T_{11} \\
                        \end{array}</me>

                </p>

                <p>Hence both of these machines have the same monoid, however, their transition
                    diagrams are nonisomorphic since the first has two vertices and the
                    second has seven.</p>
            </answer>
        </exercise>

        <exercise number="3">
            <statement>
                <p> Draw the transition diagrams for the machines of the following monoids: <ol
                        marker="(a)">
                        <li>
                            <p>
                                <m>\left[\mathbb{Z}_4;+_4\right]</m>
                            </p>
                        </li>
                        <li>
                            <p> The direct product of <m>\left[\mathbb{Z}_2;\times _2\right]</m>
                    with itself.</p>
                        </li>
                    </ol>
                </p>
            </statement>
            <answer>
                <figure xml:id="fig-sol-15-4-1a">
                    <caption>(a)
                    </caption>
                    <image width="70%" source="images/fig-sol-15-4-1a.png">
                        <description>solution to 14.5.1a</description>
                    </image>
                </figure>
                <figure xml:id="fig-sol-15-4-1b">
                    <caption>(b)
                    </caption>
                    <image width="70%" source="images/fig-sol-15-4-1b.png">
                        <description>solution to 14.5.1b</description>
                    </image>
                </figure>
            </answer>
        </exercise>
        <exercise number="4">
            <statement>
                <p>Even though a monoid may be infinite, we can visualize it as an infinite-state
                    machine provided that it is generated by a finite number of elements. For
                    example, the monoid <m>B^*</m> is generated by 0 and 1. A section of its
                    transition diagram can be obtained by allowing input only from the generating
                    set. The monoid of integers under addition is generated by the set <m>\{-1, 1\}</m>.
                    The transition diagram for this monoid can be visualized by drawing a small
                    portion of it, as in <xref ref="fig-exercise-15-4-2a" text="type-local" />. The
                    same is true for the additive monoid of integers, as seen in <xref
                        ref="fig-exercise-15-4-2b" text="type-local" />.</p>
                <figure xml:id="fig-exercise-15-4-2a">
                    <caption>An infinite machine <m>B^*</m></caption>
                    <image width="70%" source="images/fig-exercise-15-4-2a.png">
                        <description>An infinite machine <m>B^*</m></description>
                    </image>
                </figure>
                <figure xml:id="fig-exercise-15-4-2b">
                    <caption>An infinite machine <m>[\mathbb{Z};+]</m></caption>
                    <image width="70%" source="images/fig-exercise-15-4-2b.png">
                        <description>An infinite machine <m>[\mathbb{Z};+]</m></description>
                    </image>
                </figure>

                <p>
                    <ol marker="(a)">
                        <li>
                            <p> Draw a transition diagram for <m>\{a, b, c\}</m></p>
                        </li>
                        <li>
                            <p> Draw a transition diagram for <m>[\mathbb{Z}\times
                                \mathbb{Z};\textrm{componentwise addition}]</m>.</p>
                        </li>
                        <li>
                            <p> Draw a transition diagram for <m>[\mathbb{Z};+]</m> with generating
                                set <m>\{5,-2\}</m>.</p>
                        </li>
                    </ol>
                </p>
            </statement>
        </exercise>
    </exercises>
</section>
