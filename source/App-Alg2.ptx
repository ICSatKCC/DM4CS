<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="app-alg2"><title>The Invariant Relation Theorem</title>
<subsection><title>Two Exponentiation Algorthms</title>
<p>Consider the following algorithm implemented in Sage to compute <m>a^m mod \, n</m>, given an arbitrary integer <m>a</m>, non-negative exponent <m>m</m>, and a modulus <m>n</m>, <m>n \ge 0</m>.  The default sample evaluation computes <m>2^5\, mod\,7 = 32\,mod\,7 = 4</m>, but you can edit the final line for other inputs. </p>

<sage xml:id="alg-slow-exp">
<input>
def slow_exp(a,m,n):
	b=1
	k=m
	while k>0:
		b=(b*a)%n  # % is integer remainder (mod) operation
		k-=1
	return b
	
slow_exp(2,5,7)
</input>
</sage>

<p>It should be fairly clear that this algorithm will successfully compute <m>a^m (mod\, n)</m> since it mimics the basic definition of exponentiation.  However, this algorithm is highly inefficient.  The algorithm that is most commonly used for the task of exponentiation is the following one, also implemented in Sage.</p>

<sage>
<input>
def fast_exp(a,m,n):
	t=a
	b=1
	k=m
	while k>0:
		if k%2==1: b=(b*t)%n
		t=(t^2)%n
		k=k//2  # // is the integer quotient operation
	return b
	
fast_exp(2,5,7)
</input>
</sage>
<p>The only difficulty with the "fast algorithm" is that it might not be so obvious that it always works.  When implemented, it can be verified by example, but an even more rigorous verification can be done using the Invariant Relation Theorem. Before stating the theorem, we define some terminology.</p> 
</subsection>
<subsection><title>Proving the correctness of the fast algorithm</title>
<definition xml:id="def-pre-post-values"><title>Pre and Post Values</title><notation><usage>\grave x,  \acute x</usage><description>pre and post values of a variable <m>x</m></description></notation><statement>
<p>Given a variable <m>x</m>, the pre value of <m>x</m>, denoted <m>\grave x</m>, is the value before an iteration of a loop.  The post value, denoted \(\acute x\), is the value after the iteration.</p></statement></definition>

<example xml:id="ex-pre-post-fast"><title>Pre and post values in the fast exponentiation algorithm</title><p>In the fast exponentiation algorithm, the relationships between the pre and post values of the three variables are as follows.
<me>\acute{b} \equiv \grave{b} \grave{t}^{\grave{k} mod\,2}(mod\, n)</me>
<me>\acute{t} \equiv \grave t^2(mod\,n)</me>
<me>\acute k = \grave k//2</me>
</p>
</example>

<definition xml:id="def-invariant-relation"><title>Invariant Relation</title><statement><p>Given an algorithm's inputs and a set of variables that are used in the algorithm, an <em>invariant relation</em> is a set of one or more equations that are true prior to entering a loop and remain true in every iteration of the loop.</p></statement>
</definition>

<example xml:id="ex-invariant-fast-expo"><title>Invariant Relation for Fast Exponentiation</title><statement><p>We claim that the invariant relation in the fast algorithm is <m>b t^k = a^m (mod\,n)</m>.  We will prove that his is indeed true below.</p></statement></example>

<theorem xml:id="th-invariant-relation-theorem"><title>The Invariant Relation Theorem</title>
<statement>
<p>Given a loop within an algorithm, if <m>R</m> is a relation with the properties</p>
<p><ol label="(a)">
<li><p>R is true before entering the loop</p></li>
<li><p>the truth of R is maintained in any iteration of the loop</p></li>
<li><p>the condition for exiting the loop will always be reached in a finite number of iterations.</p></li>
</ol></p>
<p>then R will be true upon exiting the loop.</p>
</statement>
<proof><p>The condition that the loop ends in a finite number of iterations lets us apply mathematical induction with the induction variable being the number of iterations.  We leave the details to the reader.</p></proof></theorem>

<p>We can verify the correctness of the fast exponentiation algorithm using the Invariant Relation Theorem.  First we note that prior to entering the loop,  <m>b t^k = 1 a^m = a^m (mod\,n)</m>.  Assuming the relation is true at the start of any iteration, that is <m>\grave{b} \grave{t}^{\grave k} = a^m (mod\,n)</m>, then 
<me>\begin{split}
\acute{b} \acute{t}^{\acute{k}} &amp; \equiv (\grave{b} \grave{t}^{\grave{k}\,mod\,2})(\grave t^2)^{ \grave k//2}(mod\,n)\\
						&amp; \equiv\grave{b} \grave{t}^{2(\grave{k}//2) +\grave{k}\,mod\,2 }(mod\,n) \\
						&amp; \equiv \grave{b} \grave{t}^{\grave{k}}(mod\,n)\\
						&amp; \equiv  a^m (mod\,n)
\end{split}
</me>
Finally, the value of <m>k</m> will decrease to zero in a finite number of steps because the number of binary digits of <m>k</m> decreases by one with each iteration.  At the end of the loop,  
<me>b = b t^0 = b t^k \equiv a^m(mod\,n)</me>
which verifies the correctness of the algorithm.
</p>
</subsection>
<exercises xml:id="exercises-app-alg1">
<title>Exercises for Part 2 of the Algorithms Appendix</title>
<exercise number="1">
<statement><p>How are the pre and post values in the slow exponentiation algorithm related? What is the invariant relation between the variables in the slow algorithm?</p></statement>
</exercise>
<exercise number="2">
<statement><p>Verify the correctness of the following algorithm to compute the greatest common divisor of two integers that are not both zero.</p>
<sage>
<input>
def gcd(a,b):
	r0=a
	r1=b
	while r1 !=0:
		t= r0 % r1
		r0=r1
		r1=t
	return r0
	
gcd(1001,154)  #test
</input>
</sage>
</statement>
<hint><p>The invariant of this algorithm is <m>gcd(r0,r1)=gcd(a,b)</m>.</p>
</hint>
</exercise>
<exercise number="3">
<statement><p>Verify the correctness of the <xref ref="binary-conversion-algorithm" text="title" /> in Chapter 1.</p></statement>
</exercise>
</exercises>
</section>