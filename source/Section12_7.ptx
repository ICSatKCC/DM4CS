<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="s-logic-circuits">
	<title>Logic Gates and Circuits</title>
	<idx>Switching Theory</idx>
	<idx>Logic Gates</idx>
	<idx>Logic Circuits</idx>

	<p>Early computers relied on many switches to perform the logical operations needed for
		computation. This was true as late as the 1970's when early personal computers such as the
		Altair ( <xref ref="fig-altair" text="type-global" />) started to appear. Pioneering
		computer scientists such as Claude Shannon realized that the operation of these computers
		could be simplified by making use of an isomorphism between computer circuits and boolean
		algebra. The term <term>Switching Theory</term> was used at the time. Logical gates realized
		through increasingly smaller and smaller integrated circuits still perform the same
		functions as in early computers, but using purely electronic means. In this section, we give
		examples of some switching circuits. Soon afterward, we will transition to the more modern
		form of circuits that are studied in <term>Logic Design</term>, where gates replace
		switches. Our main goal is to give you an overview of how boolean functions correspond to
		actual computer circuits. We will introduce the common system notation used in logic design
		and show how it corresponds with the mathematical notation of Boolean algebras. Any computer
		scientist should be familiar with both systems.</p>
	<figure xml:id="fig-altair">
		<caption>The Altair Computer, an early PC, by Todd Dailey, Creative Commons
		</caption>
		<image width="80%" source="images/fig-altair.jpg">
			<shortdescription>Image of an Altair computer</shortdescription>
		</image>
	</figure>

	<p>The simplest switching device is the on-off switch. If the switch is closed/ON, electrical
		current will pass through it; if it is open/OFF, current will not pass through it. If we
		designate ON by 1, and OFF by 0, we can describe electrical
		circuits containing switches by Boolean expressions with the variables representing the
		variable states of switches or the variable bits passing through gates.</p>
	<p>The electronics involved in these switches take into account whether we are negating a switch
		or not. For electromagnetic switches, a magnet is used to control whether the switch is open
		or closed. The magnets themselves may be controlled by simple ON/OFF switches. There are two
		types of electromagnetic switches. One is normally open (OFF) when the magnet is not
		activated, but activating the magnet will close the circuit and the switch is then ON. A
		separate type of switch corresponds with a negated switch. For that type, the switch is
		closed (ON) when the magnet is not activated, and when the magnet is activated, the switch
		opens (turns OFF). We won't be overly concerned with the details of these switches or the
		electronics corresponding to logical gates. We will simply assume they are available to plug
		into a circuit. For simplicity, we use the complement symbol on a varible that labels a
		switch to indicate that it is a switch of the second type, as in <xref
			ref="fig-switch-normal-on" text="type-global" />.</p>
	<!--<sidebyside> -->

	<figure xml:id="fig-switch-normal-off">
		<caption>Representation of a normally OFF switch controlled by variable <m>x_1</m>
		</caption>
		<image width="50%" source="images/fig-switch-normal-off.png">
			<shortdescription>Graphical representation of a normally OFF switch</shortdescription>
		</image>
	</figure>
	<figure xml:id="fig-switch-normal-on">
		<caption>Representation of a normally ON switch controlled by variable <m>x_1</m>
		</caption>
		<image width="50%" source="images/fig-switch-normal-on.png">
			<shortdescription>Graphical representation of a normally ON switch</shortdescription>
		</image>
	</figure>
	<!--</sidebyside>-->
	<p> The standard notation used for Boolean algebra operations in switching theory and logic
		design is <m>+</m> for join, instead of <m>\lor </m>; and <m>\cdot </m> for meet, instead of <m>
		\land </m>. Complementation is the same in both notational systems, denoted with an
		overline.</p>
	<p> The expression <m>x_1 \cdot x_2</m> represents the situation in which a series of two
		switches appears in sequence as in <xref ref="fig-and-switch" text="type-global" />. In
		order for current to flow through the circuit, both switches must be ON; that is, <m>x_1</m>
		AND <m>x_2</m> must both have the value 1. Similarly, a pair of parallel switches, as in <xref
			ref="fig-or-switch" text="type-global" />, is described algebraically by <m>x_1 + x_2</m>.
		Here, current flows through this part of the circuit as long as at least one of the
		switches, <m>x_1</m> OR <m>x_2</m>, is ON. </p>
	<!-- <sidebyside> -->
	<figure xml:id="fig-and-switch">
		<caption>Two switches in AND configuration realizing <m>x_1 \cdot x_2</m>
		</caption>
		<image width="50%" source="images/fig-and-switch.png">
			<shortdescription>Graphical representation of two switches in AND configuration</shortdescription>
		</image>
	</figure>


	<!--<figure
	xml:id="fig-and-switch">
  <caption>Two switches in AND configuration realizing <m>x_1 \cdot x_2</m></caption>
  <image width="60%" xml:id="poset">
<latex-image >
\begin{tikzpicture}[circuit ee IEC]
\foreach \i in {1,...,4}{
	\node [contact] (contact \i) at (\i, 0) {};
}
\draw (contact 1) to (contact 2);
\draw (contact 2) to [make contact = {near start, info = x$_1$}]
 (contact 3);
\draw (contact 3) to [make contact = {near start, info = x$_2$}]
 (contact 4);
\end{tikzpicture}
</latex-image>
  </image>
</figure>-->


	<figure xml:id="fig-or-switch">
		<caption>Two switches in OR configuration realizing <m>x_1 + x_2</m>
		</caption>
		<image width="30%" source="images/fig-or-switch.png">
			<shortdescription>Graphical representation of two switches in OR configuration</shortdescription>
		</image>
	</figure>
	<!-- </sidebyside> -->
	<p>

		All laws and concepts developed previously for Boolean algebras hold. The only change is
		purely notational. We make the change in this section solely to introduce the reader to
		another frequently used system of notation.</p>
	<p>Many of the laws of Boolean algebra can be visualized thought switching theory. For example,
		the distributive law of meet over join is expressed as <me>x_1 \cdot \left(x_2+ x_3\right) =
		x_1 \cdot x_2+x_1 \cdot x_3.</me> The switching circuit analogue of the above statement is
		that the circuits in the two images below are equivalent. In circuit (b), the presence of
		two <m>x_1</m>'s might represent two electromagnetic switches controlled by the same magnet.</p>
	<sidebyside>
		<figure xml:id="fig-switches-distributive1">
			<caption>(a) <m>x_1 \cdot \left(x_2+ x_3\right)</m></caption>
			<image width="30%" source="images/fig-switches-distributive1.png">
				<shortdescription>The first of equivalent switching circuits</shortdescription>
			</image>
		</figure>
		<figure xml:id="fig-switches-distributive2">
			<caption>(b) <m>x_1 \cdot x_2+x_1 \cdot x_3</m></caption>
			<image width="20%" source="images/fig-switches-distributive2.png">
				<shortdescription>The second of equivalent switching circuits</shortdescription>
			</image>
		</figure>
	</sidebyside>
	<p>The circuits in a computer are now composed of large quantities of gates, which serve the
		same purpose as switches, but can be miniaturized to a great degree. For example, the OR
		gate, usually drawn as in <xref ref="fig-or-gate" text="type-global" /> implements the
		logical OR function. This happens electronically, but is equivalent to <xref
			ref="fig-or-switch" text="type-global" />. The AND gate, which is equivalent to two
		sequential switches is shown in <xref ref="fig-or-gate" text="type-global" />.</p>

	<figure xml:id="fig-or-gate">
		<caption>An OR gate
		</caption>
		<image width="60%" source="images/fig_tikz_or_gate.png">
			<shortdescription>OR gate symbol</shortdescription>
		</image>
	</figure>
	<figure xml:id="fig-and-gate">
		<caption>An AND gate
		</caption>
		<image width="60%" source="images/fig_tikz_and_gate.png">
			<shortdescription>AND gate symbol</shortdescription>
		</image>
	</figure>

	<p>The complementation process is represented in a gate diagram by an inverter, as pictured in <xref
			ref="fig-inverter" text="type-global" />.</p>
	<figure xml:id="fig-inverter">
		<caption>Inverter, or NOT gate
		</caption>
		<image width="60%" source="images/fig_tikz_not_gate.png">
			<shortdescription>Inverter symbol</shortdescription>
		</image>
	</figure>
	<p>When drawing more complex circuits, multiple AND's or OR's are sometimes depicted using a
		more general gate drawing. For example if we want to depict an OR gate with three inputs
		that is ON as long as at least one input is ON, we would draw it as in <xref
			ref="fig-triple-or" text="type-global" />, although this would really be two binary
		gates, as in <xref ref="fig-triple-or-real" text="type-global" />. Both diagrams are
		realizing the boolean expression <m>x_1 + x_2 + x_3</m>. Strictly speaking, the gates in <xref
			ref="fig-triple-or-real" text="type-global" /> represent <m>(x_1 + x_2 )+ x_3</m>, but
		the associative law for join tells us that the grouping doesn't matter.</p>
	<sidebyside>
		<figure xml:id="fig-triple-or">
			<caption>Simple version of a ternary OR gate
			</caption>
			<image width="40%" source="images/fig_tikz_or3_gate.png">
				<shortdescription>OR gate symbol with three inputs</shortdescription>
			</image>
		</figure>
		<figure xml:id="fig-triple-or-real">
			<caption>A ternary OR gate created with binary OR gates
			</caption>
			<image width="40%" source="images/fig_tikz_or3_2gates.png">
				<shortdescription>A three-input OR created with two binary OR gate symbols</shortdescription>
			</image>
		</figure>
	</sidebyside>
	<p>In <xref ref="fig-gates" />, we show a few other commonly used gates, XOR, NAND, and NOR,
		which correspond to the boolean exressions <m>x_1 \oplus x_2</m>, <m>\overline{x_1 \cdot
		x_2}</m>, and <m>\overline{x_1 + x_2}</m>, respectively.</p>
	<figure xml:id="fig-gates">
		<caption>
		</caption>
		<image width="70%" source="images/fig_tikz_XOR_NAND_NOR.png">
			<shortdescription>Symbols for XOR, NAND, and NOR gates</shortdescription>
		</image>
	</figure>


	<exercises xml:id="exercises-12-7">
		<title>Exercises for Section 12.7 </title>
		<exercise number="1" xml:id="exerc-12_7-1">
			<statement>
				<p>Write the following Boolean expression in the notation of logic design. <me>\left(x_1\land
					\overline{x_2}\right)\lor \left(x_1\land x_2\right)\lor
					\left(\overline{x_1}\land x_2\right).</me>
				</p>
				<p>
					Draw the circuit diagram of the expression using only AND, OR, and NOT gates
					with one or two inputs.
				</p>
			</statement>
			<answer>
				<p>
					<me>(x_1\cdot \overline{x_2})+(x_1\cdot x_2)+(\overline{x_1} \cdot x_2).</me>
				</p>
			</answer>
		</exercise>

		<exercise number="2" xml:id="exerc-circuit-diagram">
			<statement>
				<p>Rewrite the expression from Exercise 1 in two ways: one using only the NOR
					operation and one using only the NAND operation
				</p>
			</statement>
		</exercise>

		<exercise number="3">
			<statement>
				<p>Draw a logic circuit using only AND, OR and NOT gates that realizes an XOR gate.</p>
			</statement>
			<!--
<solution>
</solution>
 -->

		</exercise>

		<exercise number="4">
			<statement>
				<p>
					Draw a logic circuit using only AND, OR and NOT gates that realizes the Boolean
					function on three variables that returns 1 if the majority of inputs are 1 and 0
					otherwise.
				</p>
			</statement>
			<solution>
				<p>

				</p>
			</solution>
		</exercise>
	</exercises>
</section>
