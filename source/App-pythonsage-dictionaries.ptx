<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="app-pythonsage-dictionaries"><title>Dictionaries</title>
<subsection><title>Colors of Fruits</title>
<p>In Python and SageMath, a dictionary is a convenient data structure for establishing a relationship between sets of data.  From the point of view of this text, we can think of a dictionary as a concrete realization of a relation between two sets or on a single set.  A dictionary resembles a function in that there is a set of data values called the <c>keys</c>, and for each key, there is a <c>value</c>.  The value associated with a key can be almost anything, but it is most commonly a list.  </p>
<p>To illustrate the use of dictionaries, we will define a relationship between colors and fruits.  The keys will be a set of colors and values associated with each color will be a list of fruits that can take on that color. We will demonstrate how to initialize the dictionary and how to add to it.  The following series of assignments have no output, so we add a print statement to verify that this cell is completely evaluated.</p>
<sage xml:id="load-dictionary">
<input>
fruit_color={}
fruit_color['Red']=['apple','pomegranate','blood orange']
fruit_color['Yellow']=['banana','apple','lemon']
fruit_color['Green']=['apple','pear','grape','lime']
fruit_color['Purple']=['plum','grape']
fruit_color['Orange']=['orange','pineapple']
print 'done'
</input>
</sage>
<p>We distinguish a color from a fruit by capitalizing colors but not fruit.  The keys of this dictionary are the colors:</p>
<sage>
<input>
fruit_color.keys()
</input>
<output>
['Purple', 'Orange', 'Green', 'Yellow', 'Red']
</output>
</sage>
<p>As an afterthough, we might add the information that a raspberry is red as follows. You have to be careful in that if 'Red' isn't already in the dictionary, it doesn't have a value. This is why we need an if statement.</p>
<sage>
<input>
if 'Red' in fruit_color:
	fruit_color['Red']=fruit_color['Red']+['raspberry']
else:
	fruit_color['Red']=['raspberry']
fruit_color['Red']
</input>
<output>
['apple', 'pomegranate', 'blood orange', 'raspberry', 'raspberry']
</output>
</sage>

<p>A dictionary is iterable, with an iterator taking on values that are the keys.  Here we iterate over the our dictionary to output lists consisting of a color followed by a list of fruits that come in that color.</p> 
<sage>
<input>
for fruit in fruit_color:
    print [fruit,fruit_color[fruit]]
</input>
<output>
['Purple', ['plum', 'grape']]
['Orange', ['orange', 'pineapple']]
['Green', ['apple', 'pear', 'grape', 'lime']]
['Yellow', ['banana', 'apple', 'lemon']]
['Red', ['apple', 'pomegranate', 'blood orange','raspberry']]
</output>
</sage>
<p>We can view a graph of this relation between colors and fruits, but the default view is a bit unconventional.</p>
<sage>
<input>
DiGraph(fruit_color).plot()
</input>
<output>
</output>
</sage>
<p>With a some additional coding we can line up the colors and fruits in their own column. First we set the positions of colors on the left with all <m>x</m>-coordinates equal to -5 using another dictionary called <c>vertex_pos</c>. </p>
<sage>
<input>
vertex_pos={}
k=0
for c in fruit_color.keys():
    vertex_pos[c]=(-5,k)
    k+=1
vertex_pos
</input>
<output>
{'Purple': (-5, 0), 'Orange': (-5, 1), 'Green': (-5, 2), 'Red': (-5, 4), 'Yellow': (-5, 3)}
</output>
</sage>
<p>Next, we place the fruit vertices in another column with <m>x</m>-coordinates all equal to 5. In order to do this, we first collect all the fruit values into one set we call <c>fruits</c>.</p>
<sage>
<input>
fruits=Set([ ])
for v in fruit_color.values():
    fruits=fruits.union(Set(v))
k=0
for f in fruits:
    vertex_pos[f]=(5,k)
    k+=1
vertex_pos
</input>
<output>
{'blood orange': (5, 0), 'grape': (5, 1), 'apple': (5, 2), 'Purple': (-5, 0), 'plum': (5, 10), 'pomegranate': (5, 3), 'pear': (5, 4), 'Yellow': (-5, 3), 'orange': (5, 7), 'Green': (-5, 2), 'pineapple': (5, 6), 'Orange': (-5, 1), 'lemon': (5, 8), 'raspberry': (5, 9), 'banana': (5, 5), 'Red': (-5, 4), 'lime': (5, 11)}
</output>
</sage>
<p>Now the graph looks like a conventional graph for a relation between two different sets.  Notice that it's not a function</p>
<sage>
<input>
DiGraph(fruit_color).plot(pos=vertex_pos,vertex_size=1)
</input>
</sage>

</subsection>
</section>