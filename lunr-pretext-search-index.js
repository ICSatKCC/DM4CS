var ptx_lunr_search_style = "textbook";
var ptx_lunr_docs = [
{
  "id": "frontmatter-2",
  "level": "1",
  "url": "frontmatter-2.html",
  "type": "Colophon",
  "number": "",
  "title": "Colophon",
  "body": " 1st Edition - version 2   https:\/\/icsatkcc.github.io\/DM4CS\/dm4cs.html   copyright   Unless otherwise indicated below, this work is a deriviative of Applied Discrete Structures by Al Doerr and Ken Levasseur licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License .  Webwork exercises marked with WebWork Open Problem are contributions to the WeBWorK Open Problem Library , licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License by the author(s) indicated in the source file for each problem. Source files retrieved from https:\/\/github.com\/openwebwork\/webwork-open-problem-library .  Chapter 2.5 is a deriviative of Chapter 1.5 of Discrete Mathematics: An Open Introduction by Oscar Levin licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .   "
},
{
  "id": "frontmatter-3",
  "level": "1",
  "url": "frontmatter-3.html",
  "type": "Dedication",
  "number": "",
  "title": "Dedication",
  "body": " Dedication   "
},
{
  "id": "book-preface",
  "level": "1",
  "url": "book-preface.html",
  "type": "Preface",
  "number": "",
  "title": "Preface",
  "body": "Preface  "
},
{
  "id": "section1_1-set-Notation-and-Relations",
  "level": "1",
  "url": "section1_1-set-Notation-and-Relations.html",
  "type": "Section",
  "number": "1.1",
  "title": "Set Notation and Relations",
  "body": " Set Notation and Relations   The notion of a set  The term set is intuitively understood by most people to mean a collection of objects that are called elements (of the set). This concept is the starting point on which we will build more complex ideas, much as in geometry where the concepts of point and line are left undefined. Because a set is such a simple notion, you may be surprised to learn that it is one of the most difficult concepts for mathematicians to define to their own liking. For example, the description above is not a proper definition because it requires the definition of a collection. (How would you define collection ?) Even deeper problems arise when you consider the possibility that a set could contain itself. Although these problems are of real concern to some mathematicians, they will not be of any concern to us. Our first concern will be how to describe a set; that is, how do we most conveniently describe a set and the elements that are in it? If we are going to discuss a set for any length of time, we usually give it a name in the form of a capital letter (or occasionally some other symbol). In discussing set , if is an element of , then we will write .    is an element of  On the other hand, if is not an element of , we write .   is not an element of  The most convenient way of describing the elements of a set will vary depending on the specific set.  Enumeration. When the elements of a set are enumerated (or listed) it is traditional to enclose them in braces. For example, the set of binary digits is and the set of decimal digits is . The choice of a name for these sets would be arbitrary; but it would be logical to call them and , respectively. The choice of a set name is much like the choice of an identifier name in programming. Some large sets can be enumerated without actually listing all the elements. For example, the letters of the alphabet and the integers from 1 to 100 could be described as , and . The three consecutive dots are called an ellipsis. We use them when it is clear what elements are included but not listed. An ellipsis is used in two other situations. To enumerate the positive integers, we would write , indicating that the list goes on infinitely. If we want to list a more general set such as the integers between 1 and , where is some undetermined positive integer, we might write .  Standard Symbols . Sets that are frequently encountered are usually given symbols that are reserved for them alone. For example, since we will be referring to the positive integers throughout this book, we will use the symbol instead of writing . A few of the other sets of numbers that we will use frequently are:   : the natural numbers,    : the integers,    or : the positive integers,      : the rational numbers    : the real numbers    : the complex numbers    Set-Builder Notation Set-Builder Notation . Another way of describing sets is to use set-builder notation. For example, we could define the rational numbers as . Note that in the set-builder description for the rational numbers:    indicates that a typical element of the set is a fraction.     The vertical line, , is read such that or where, and is used interchangeably with a colon.     is an abbreviated way of saying and are integers.    Commas in mathematics are read as and.     The important fact to keep in mind in set notation, or in any mathematical notation, is that it is meant to be a help, not a hindrance. We hope that notation will assist us in a more complete understanding of the collection of objects under consideration and will enable us to describe it in a concise manner. However, brevity of notation is not the aim of sets. If you prefer to write and instead of , you should do so. Also, there are frequently many different, and equally good, ways of describing sets. For example, and both describe the solution set .  A proper definition of the real numbers is beyond the scope of this text. It is sufficient to think of the real numbers as the set of points on a number line. The complex numbers can be defined using set-builder notation as , where .  In the following definition we will leave the word finite undefined.   Finite Set   A set is a finite set if it has a finite number of elements. Any set that is not finite is an infinite set.     Cardinality    The number of elements in a finite set .    Let be a finite set. The number of different elements in is called its cardinality. The cardinality of a finite set is denoted .    As we will see later, there are different infinite cardinalities. We can't make this distinction until Chapter 6, so we will restrict cardinality to finite sets for now.    Subsets   Subset      is a subset of .    Let and be sets. We say that is a subset of if and only if every element of is an element of . We write to denote the fact that is a subset of .     Some Subsets     If and , then .         If and , then and .       Set Equality   Let and be sets. We say that is equal to (notation ) if and only if every element of is an element of and conversely every element of is an element of ; that is, and .     Examples illustrating set equality     In , . Note that the ordering of the elements is unimportant.    The number of times that an element appears in an enumeration doesn't affect a set. For example, if and , then . Warning to readers of other texts: Some books introduce the concept of a multiset, in which the number of occurrences of an element matters.      A few comments are in order about the expression if and only if as used in our definitions. This expression means is equivalent to saying, or more exactly, that the word (or concept) being defined can at any time be replaced by the defining expression. Conversely, the expression that defines the word (or concept) can be replaced by the word.  Occasionally there is need to discuss the set that contains no elements, namely the empty set, which is denoted by   the empty set  Empty set . This set is also called the null set.  It is clear, we hope, from the definition of a subset, that given any set we have and . If is nonempty, then is called an improper subset Improper subset of . All other subsets of , including the empty set, are called proper subsets Proper subset of . The empty set is an improper subset of itself.   Not everyone is in agreement on whether the empty set is a proper subset of any set.     Exercises for Section 1.1   List four elements of each of the following sets:                                These answers are not unique.                                 List all elements of the following sets:                                 Describe the following sets using set-builder notation.        the rational numbers that are strictly between and     the even integers                                    Use set-builder notation to describe the following sets:                         Let , , and . Determine which of the following statements are true. Give reasons for your answers.                                                  True    False    True    True    False    True    False    True       One reason that we left the definition of a set vague is Russell's Paradox. Many mathematics and logic books contain an account of this paradox. Two references are and . Find one such reference and read it.    "
},
{
  "id": "section1_1-set-Notation-and-Relations-2-5",
  "level": "2",
  "url": "section1_1-set-Notation-and-Relations.html#section1_1-set-Notation-and-Relations-2-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Set-Builder Notation "
},
{
  "id": "finite-set",
  "level": "2",
  "url": "section1_1-set-Notation-and-Relations.html#finite-set",
  "type": "Definition",
  "number": "1.1.1",
  "title": "Finite Set.",
  "body": " Finite Set   A set is a finite set if it has a finite number of elements. Any set that is not finite is an infinite set.   "
},
{
  "id": "cardinality",
  "level": "2",
  "url": "section1_1-set-Notation-and-Relations.html#cardinality",
  "type": "Definition",
  "number": "1.1.2",
  "title": "Cardinality.",
  "body": " Cardinality    The number of elements in a finite set .    Let be a finite set. The number of different elements in is called its cardinality. The cardinality of a finite set is denoted .   "
},
{
  "id": "def-subset",
  "level": "2",
  "url": "section1_1-set-Notation-and-Relations.html#def-subset",
  "type": "Definition",
  "number": "1.1.3",
  "title": "Subset.",
  "body": " Subset      is a subset of .    Let and be sets. We say that is a subset of if and only if every element of is an element of . We write to denote the fact that is a subset of .   "
},
{
  "id": "some-subsets",
  "level": "2",
  "url": "section1_1-set-Notation-and-Relations.html#some-subsets",
  "type": "Example",
  "number": "1.1.4",
  "title": "Some Subsets.",
  "body": " Some Subsets     If and , then .         If and , then and .     "
},
{
  "id": "set-equality",
  "level": "2",
  "url": "section1_1-set-Notation-and-Relations.html#set-equality",
  "type": "Definition",
  "number": "1.1.5",
  "title": "Set Equality.",
  "body": " Set Equality   Let and be sets. We say that is equal to (notation ) if and only if every element of is an element of and conversely every element of is an element of ; that is, and .   "
},
{
  "id": "set-equality-examples",
  "level": "2",
  "url": "section1_1-set-Notation-and-Relations.html#set-equality-examples",
  "type": "Example",
  "number": "1.1.6",
  "title": "Examples illustrating set equality.",
  "body": " Examples illustrating set equality     In , . Note that the ordering of the elements is unimportant.    The number of times that an element appears in an enumeration doesn't affect a set. For example, if and , then . Warning to readers of other texts: Some books introduce the concept of a multiset, in which the number of occurrences of an element matters.     "
},
{
  "id": "ss-subsets-8",
  "level": "2",
  "url": "section1_1-set-Notation-and-Relations.html#ss-subsets-8",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "improper subset proper subsets "
},
{
  "id": "ss-subsets-9",
  "level": "2",
  "url": "section1_1-set-Notation-and-Relations.html#ss-subsets-9",
  "type": "Note",
  "number": "1.1.7",
  "title": "",
  "body": " Not everyone is in agreement on whether the empty set is a proper subset of any set.  "
},
{
  "id": "section1_1-set-Notation-and-Relations-4-2",
  "level": "2",
  "url": "section1_1-set-Notation-and-Relations.html#section1_1-set-Notation-and-Relations-4-2",
  "type": "Exercise",
  "number": "1.1.3.1",
  "title": "",
  "body": " List four elements of each of the following sets:                                These answers are not unique.                               "
},
{
  "id": "section1_1-set-Notation-and-Relations-4-3",
  "level": "2",
  "url": "section1_1-set-Notation-and-Relations.html#section1_1-set-Notation-and-Relations-4-3",
  "type": "Exercise",
  "number": "1.1.3.2",
  "title": "",
  "body": " List all elements of the following sets:                               "
},
{
  "id": "section1_1-set-Notation-and-Relations-4-4",
  "level": "2",
  "url": "section1_1-set-Notation-and-Relations.html#section1_1-set-Notation-and-Relations-4-4",
  "type": "Exercise",
  "number": "1.1.3.3",
  "title": "",
  "body": " Describe the following sets using set-builder notation.        the rational numbers that are strictly between and     the even integers                                  "
},
{
  "id": "section1_1-set-Notation-and-Relations-4-5",
  "level": "2",
  "url": "section1_1-set-Notation-and-Relations.html#section1_1-set-Notation-and-Relations-4-5",
  "type": "Exercise",
  "number": "1.1.3.4",
  "title": "",
  "body": " Use set-builder notation to describe the following sets:                       "
},
{
  "id": "section1_1-set-Notation-and-Relations-4-6",
  "level": "2",
  "url": "section1_1-set-Notation-and-Relations.html#section1_1-set-Notation-and-Relations-4-6",
  "type": "Exercise",
  "number": "1.1.3.5",
  "title": "",
  "body": " Let , , and . Determine which of the following statements are true. Give reasons for your answers.                                                  True    False    True    True    False    True    False    True     "
},
{
  "id": "section1_1-set-Notation-and-Relations-4-7",
  "level": "2",
  "url": "section1_1-set-Notation-and-Relations.html#section1_1-set-Notation-and-Relations-4-7",
  "type": "Exercise",
  "number": "1.1.3.6",
  "title": "",
  "body": " One reason that we left the definition of a set vague is Russell's Paradox. Many mathematics and logic books contain an account of this paradox. Two references are and . Find one such reference and read it.  "
},
{
  "id": "section1_2-basic_Set_Operations",
  "level": "1",
  "url": "section1_2-basic_Set_Operations.html",
  "type": "Section",
  "number": "1.2",
  "title": "Basic Set Operations",
  "body": " Basic Set Operations  Basic Set Operations   Definitions   Intersection  Intersection      The intersection of and .    Let and be sets. The intersection of and (denoted by ) is the set of all elements that are in both and . That is, .     Some Intersections     Let and . Then .   Solving a system of simultaneous equations such as and can be viewed as an intersection. Let and . These two sets are lines in the plane and their intersection, , is the solution to the system.    .    If and , then .       Disjoint Sets  Disjoint Sets   Two sets are disjoint if they have no elements in common. That is, and are disjoint if .     Union  Union      The union of and .    Let and be sets. The union of and (denoted by ) is the set of all elements that are in or in or in both A and B. That is, .    It is important to note in the set-builder notation for , the word or is used in the inclusive sense; it includes the case where is in both and .   Some Unions     If and , then .          for any set .      Frequently, when doing mathematics, we need to establish a universe or set of elements under discussion. For example, the set contains different elements depending on what kinds of numbers we allow ourselves to use in solving the equation . This set of numbers would be our universe. For example, if the universe is the integers, then is empty. If our universe is the rational numbers, then is and if the universe is the complex numbers, then is .   Universe  Universe   The universe, or universal set, is the set of all elements under discussion for possible membership in a set. We normally reserve the letter for a universe in general discussions.      Set Operations and their Venn Diagrams  When working with sets, as in other branches of mathematics, it is often quite useful to be able to draw a picture or diagram of the situation under consideration. A diagram of a set is called a Venn diagram. The universal set is represented by the interior of a rectangle and the sets by disks inside the rectangle.   Venn Diagram Examples   is illustrated in by shading the appropriate region.   Venn Diagram for the Intersection of Two Sets   Venn Diagram highlighting the overlap of two sets as intersection     The union is illustrated in .   Venn Diagram for the Union    Venn Diagram highlighting all of two sets as union     In a Venn diagram, the region representing does not appear empty; however, in some instances it will represent the empty set. The same is true for any other region in a Venn diagram.    Complement of a set  Complement of a set      The difference of set and set or the complement of relative to .       The complement of relative to the universe.    Let and be sets. The difference of set and set or the complement of relative to (notation ) is the set of elements that are in and not in . That is, . If is the universal set, then is denoted by and is called simply the complement of . .     Venn Diagram for   A Venn Diagram showing the complement of relative to    -->  Some Complements     Let and . Then and .    If , then the complement of the set of rational numbers is the set of irrational numbers.     and .    The Venn diagram of is represented in .    The Venn diagram of is represented in .    If , then the Venn diagram of is as shown in .    In the universe of integers, the set of even integers, , has the set of odd integers as its complement.      Venn Diagram for   A Venn Diagram showing the complement of a set.      Venn Diagram for when is a subset of   A Venn Diagram showing the complement relative to a superset       Symmetric Difference  Symmetric Difference      The symmetric difference of and .    Let and be sets. The symmetric difference of and (denoted by ) is the set of all elements that are in and but not in both. That is, .     Some Symmetric Differences    Let and . Then .  and for any set .  is the set of irrational numbers.   The Venn diagram of is represented in .      Venn Diagram for the symmetric difference   A two set Venn Diagram showing the symmetric difference of two sets.        SageMath Note: Sets   SageMath Note  Sets   To work with sets in Sage, a set is an expression of the form Set( list ). By wrapping a list with Set( ) , the order of elements appearing in the list and their duplication are ignored. For example, L1 and L2 are two different lists, but notice how as sets they are considered equal:   The standard set operations are all methods and\/or functions that can act on Sage sets. You need to evalute the following cell to use the subsequent cell.   We can test membership, asking whether 10 is in each of the sets:   The ampersand is used for the intersection of sets. Change it to the vertical bar, |, for union.   Symmetric difference and set complement are defined as methods in Sage. Here is how to compute the symmetric difference of with , followed by their differences.     Exercises for Section 1.2   Let , , , and let the universal set be . Determine:                                                                                                              Let , , and be as in Exercise 1, let , and let . Determine which of the following are true. Give reasons for your decisions.                                             Let . Give examples of sets , , and for which:                                  These are all true for any sets , , and .    Let . Give examples to illustrate the following facts:   If and , then .    There are sets and such that     If and , it always follows that .      What can you say about if , , and (separately)                                        Suppose that is an infinite universal set, and and are infinite subsets of . Answer the following questions with a brief explanation.     Must be finite?    Must infinite?    Must be infinite?       Given that = all students at a university, = day students, = mathematics majors, and = graduate students. Draw Venn diagrams illustrating this situation and shade in the following sets:     evening students    undergraduate mathematics majors    non-math graduate students    non-math undergraduate students          Four Venn diagrams illustrating the solutions to Exercise 7      Let the sets , , , and be as in exercise 7. Let , , , and . Also assume that there are 250 day students who are mathematics majors, 50 of whom are graduate students, that there are 95 graduate mathematics majors, and that the total number of day graduate students is 700. Determine the number of students who are:   evening students    nonmathematics majors    undergraduates (day or evening)    day graduate nonmathematics majors    evening graduate students    evening graduate mathematics majors    evening undergraduate nonmathematics majors       "
},
{
  "id": "def-intersection",
  "level": "2",
  "url": "section1_2-basic_Set_Operations.html#def-intersection",
  "type": "Definition",
  "number": "1.2.1",
  "title": "Intersection.",
  "body": " Intersection  Intersection      The intersection of and .    Let and be sets. The intersection of and (denoted by ) is the set of all elements that are in both and . That is, .   "
},
{
  "id": "some_intersections",
  "level": "2",
  "url": "section1_2-basic_Set_Operations.html#some_intersections",
  "type": "Example",
  "number": "1.2.2",
  "title": "Some Intersections.",
  "body": " Some Intersections     Let and . Then .   Solving a system of simultaneous equations such as and can be viewed as an intersection. Let and . These two sets are lines in the plane and their intersection, , is the solution to the system.    .    If and , then .     "
},
{
  "id": "def-disjoint-sets",
  "level": "2",
  "url": "section1_2-basic_Set_Operations.html#def-disjoint-sets",
  "type": "Definition",
  "number": "1.2.3",
  "title": "Disjoint Sets.",
  "body": " Disjoint Sets  Disjoint Sets   Two sets are disjoint if they have no elements in common. That is, and are disjoint if .   "
},
{
  "id": "def-union",
  "level": "2",
  "url": "section1_2-basic_Set_Operations.html#def-union",
  "type": "Definition",
  "number": "1.2.4",
  "title": "Union.",
  "body": " Union  Union      The union of and .    Let and be sets. The union of and (denoted by ) is the set of all elements that are in or in or in both A and B. That is, .   "
},
{
  "id": "some_unions",
  "level": "2",
  "url": "section1_2-basic_Set_Operations.html#some_unions",
  "type": "Example",
  "number": "1.2.5",
  "title": "Some Unions.",
  "body": " Some Unions     If and , then .          for any set .     "
},
{
  "id": "universe",
  "level": "2",
  "url": "section1_2-basic_Set_Operations.html#universe",
  "type": "Definition",
  "number": "1.2.6",
  "title": "Universe.",
  "body": " Universe  Universe   The universe, or universal set, is the set of all elements under discussion for possible membership in a set. We normally reserve the letter for a universe in general discussions.   "
},
{
  "id": "venn_diagram_examples",
  "level": "2",
  "url": "section1_2-basic_Set_Operations.html#venn_diagram_examples",
  "type": "Example",
  "number": "1.2.7",
  "title": "Venn Diagram Examples.",
  "body": " Venn Diagram Examples   is illustrated in by shading the appropriate region.   Venn Diagram for the Intersection of Two Sets   Venn Diagram highlighting the overlap of two sets as intersection     The union is illustrated in .   Venn Diagram for the Union    Venn Diagram highlighting all of two sets as union     In a Venn diagram, the region representing does not appear empty; however, in some instances it will represent the empty set. The same is true for any other region in a Venn diagram.  "
},
{
  "id": "set_complement",
  "level": "2",
  "url": "section1_2-basic_Set_Operations.html#set_complement",
  "type": "Definition",
  "number": "1.2.10",
  "title": "Complement of a set.",
  "body": " Complement of a set  Complement of a set      The difference of set and set or the complement of relative to .       The complement of relative to the universe.    Let and be sets. The difference of set and set or the complement of relative to (notation ) is the set of elements that are in and not in . That is, . If is the universal set, then is denoted by and is called simply the complement of . .   "
},
{
  "id": "venn_diagram_complement1",
  "level": "2",
  "url": "section1_2-basic_Set_Operations.html#venn_diagram_complement1",
  "type": "Figure",
  "number": "1.2.11",
  "title": "",
  "body": " Venn Diagram for   A Venn Diagram showing the complement of relative to    "
},
{
  "id": "complements",
  "level": "2",
  "url": "section1_2-basic_Set_Operations.html#complements",
  "type": "Example",
  "number": "1.2.12",
  "title": "Some Complements.",
  "body": " Some Complements     Let and . Then and .    If , then the complement of the set of rational numbers is the set of irrational numbers.     and .    The Venn diagram of is represented in .    The Venn diagram of is represented in .    If , then the Venn diagram of is as shown in .    In the universe of integers, the set of even integers, , has the set of odd integers as its complement.      Venn Diagram for   A Venn Diagram showing the complement of a set.      Venn Diagram for when is a subset of   A Venn Diagram showing the complement relative to a superset     "
},
{
  "id": "symmetric-difference",
  "level": "2",
  "url": "section1_2-basic_Set_Operations.html#symmetric-difference",
  "type": "Definition",
  "number": "1.2.15",
  "title": "Symmetric Difference.",
  "body": " Symmetric Difference  Symmetric Difference      The symmetric difference of and .    Let and be sets. The symmetric difference of and (denoted by ) is the set of all elements that are in and but not in both. That is, .   "
},
{
  "id": "some_symmetric_differences",
  "level": "2",
  "url": "section1_2-basic_Set_Operations.html#some_symmetric_differences",
  "type": "Example",
  "number": "1.2.16",
  "title": "Some Symmetric Differences.",
  "body": " Some Symmetric Differences    Let and . Then .  and for any set .  is the set of irrational numbers.   The Venn diagram of is represented in .      Venn Diagram for the symmetric difference   A two set Venn Diagram showing the symmetric difference of two sets.     "
},
{
  "id": "exercises-1-2-2",
  "level": "2",
  "url": "section1_2-basic_Set_Operations.html#exercises-1-2-2",
  "type": "Exercise",
  "number": "1.2.4.1",
  "title": "",
  "body": " Let , , , and let the universal set be . Determine:                                                                                                            "
},
{
  "id": "exercises-1-2-3",
  "level": "2",
  "url": "section1_2-basic_Set_Operations.html#exercises-1-2-3",
  "type": "Exercise",
  "number": "1.2.4.2",
  "title": "",
  "body": " Let , , and be as in Exercise 1, let , and let . Determine which of the following are true. Give reasons for your decisions.                                           "
},
{
  "id": "exercises-1-2-4",
  "level": "2",
  "url": "section1_2-basic_Set_Operations.html#exercises-1-2-4",
  "type": "Exercise",
  "number": "1.2.4.3",
  "title": "",
  "body": " Let . Give examples of sets , , and for which:                                  These are all true for any sets , , and .  "
},
{
  "id": "exercises-1-2-5",
  "level": "2",
  "url": "section1_2-basic_Set_Operations.html#exercises-1-2-5",
  "type": "Exercise",
  "number": "1.2.4.4",
  "title": "",
  "body": " Let . Give examples to illustrate the following facts:   If and , then .    There are sets and such that     If and , it always follows that .    "
},
{
  "id": "exercises-1-2-6",
  "level": "2",
  "url": "section1_2-basic_Set_Operations.html#exercises-1-2-6",
  "type": "Exercise",
  "number": "1.2.4.5",
  "title": "",
  "body": " What can you say about if , , and (separately)                                      "
},
{
  "id": "exercises-1-2-7",
  "level": "2",
  "url": "section1_2-basic_Set_Operations.html#exercises-1-2-7",
  "type": "Exercise",
  "number": "1.2.4.6",
  "title": "",
  "body": " Suppose that is an infinite universal set, and and are infinite subsets of . Answer the following questions with a brief explanation.     Must be finite?    Must infinite?    Must be infinite?     "
},
{
  "id": "exercises-1-2-8",
  "level": "2",
  "url": "section1_2-basic_Set_Operations.html#exercises-1-2-8",
  "type": "Exercise",
  "number": "1.2.4.7",
  "title": "",
  "body": " Given that = all students at a university, = day students, = mathematics majors, and = graduate students. Draw Venn diagrams illustrating this situation and shade in the following sets:     evening students    undergraduate mathematics majors    non-math graduate students    non-math undergraduate students          Four Venn diagrams illustrating the solutions to Exercise 7    "
},
{
  "id": "exercises-1-2-9",
  "level": "2",
  "url": "section1_2-basic_Set_Operations.html#exercises-1-2-9",
  "type": "Exercise",
  "number": "1.2.4.8",
  "title": "",
  "body": " Let the sets , , , and be as in exercise 7. Let , , , and . Also assume that there are 250 day students who are mathematics majors, 50 of whom are graduate students, that there are 95 graduate mathematics majors, and that the total number of day graduate students is 700. Determine the number of students who are:   evening students    nonmathematics majors    undergraduates (day or evening)    day graduate nonmathematics majors    evening graduate students    evening graduate mathematics majors    evening undergraduate nonmathematics majors    "
},
{
  "id": "section1_3-cartesian_Products_and_Power_Sets",
  "level": "1",
  "url": "section1_3-cartesian_Products_and_Power_Sets.html",
  "type": "Section",
  "number": "1.3",
  "title": "Cartesian Products and Power Sets",
  "body": " Cartesian Products and Power Sets   Cartesian Products   Cartesian Product Cartesian Product    The cartesian product of with .   Let and be sets. The Cartesian product of and , denoted by , is defined as follows: , that is, is the set of all possible ordered pairs whose first component comes from and whose second component comes from .    Some Cartesian Products  Notation in mathematics is often developed for good reason. In this case, a few examples will make clear why the symbol is used for Cartesian products.   Let and . Then . Note that .   . Note that .    These two examples illustrate the general rule that if and are finite sets, then .  We can define the Cartesian product of three (or more) sets similarly. This will be the set of all ordered -tuples where the first component comes from the first set, the second component comes from the second set, ... and the component comes from the set. For example, .  It is common to use exponents if the sets in a Cartesian product are the same:  and in general, .    Power Sets   Power Set Power Set    The power set of , the set of all subsets of .   If is any set, the power set of is the set of all subsets of , denoted .   The two extreme cases, the empty set and all of , are both included in .   Some Power Sets         .   We will leave it to you to guess at a general formula for the number of elements in the power set of a finite set. In Chapter 2, we will discuss counting rules that will help us derive this formula.     SageMath Note: Cartesian Products and Power Sets SageMath Note Cartesian Products and Power Sets  The second and fourth cells depend on the cells preceeding them, please evaluate from top to bottom.  Here is a simple example of a cartesian product of two sets:   Here is the cardinality of the cartesian product.   The power set of a set is an iterable, as you can see from the output of this next cell   You can iterate over a powerset. Here is a trivial example.     EXERCISES FOR SECTION 1.3   Let , , , and let the universal set be . List the elements of                                         Suppose that you are about to flip a coin and then roll a die. Let and .   What is ?  How could you interpret the set ?    List all two-element sets in     List all three-element sets in .    How many singleton (one-element) sets are there in if ?  There are singleton subsets, one for each element.    A person has four coins in his pocket: a penny, a nickel, a dime, and a quarter. How many different sums of money can he take out if he removes 3 coins at a time?    Let and .   List the elements of   How many elements do and have?           Let and .   List the elements of and . The parentheses and comma in an ordered pair are not necessary in cases such as this where the elements of each set are individual symbols.  Identify the intersection of and for the case above, and then guess at a general rule for the intersection of and , where and are any two sets.     Let and be nonempty sets. When are and equal?  They are equal when .    "
},
{
  "id": "cartesian-product",
  "level": "2",
  "url": "section1_3-cartesian_Products_and_Power_Sets.html#cartesian-product",
  "type": "Definition",
  "number": "1.3.1",
  "title": "Cartesian Product.",
  "body": " Cartesian Product Cartesian Product    The cartesian product of with .   Let and be sets. The Cartesian product of and , denoted by , is defined as follows: , that is, is the set of all possible ordered pairs whose first component comes from and whose second component comes from .   "
},
{
  "id": "Cartesian-products-3",
  "level": "2",
  "url": "section1_3-cartesian_Products_and_Power_Sets.html#Cartesian-products-3",
  "type": "Example",
  "number": "1.3.2",
  "title": "Some Cartesian Products.",
  "body": "Some Cartesian Products  Notation in mathematics is often developed for good reason. In this case, a few examples will make clear why the symbol is used for Cartesian products.   Let and . Then . Note that .   . Note that .   "
},
{
  "id": "power-set",
  "level": "2",
  "url": "section1_3-cartesian_Products_and_Power_Sets.html#power-set",
  "type": "Definition",
  "number": "1.3.3",
  "title": "Power Set.",
  "body": " Power Set Power Set    The power set of , the set of all subsets of .   If is any set, the power set of is the set of all subsets of , denoted .  "
},
{
  "id": "Some_Power_Sets",
  "level": "2",
  "url": "section1_3-cartesian_Products_and_Power_Sets.html#Some_Power_Sets",
  "type": "Example",
  "number": "1.3.4",
  "title": "Some Power Sets.",
  "body": " Some Power Sets         .   We will leave it to you to guess at a general formula for the number of elements in the power set of a finite set. In Chapter 2, we will discuss counting rules that will help us derive this formula.  "
},
{
  "id": "exercises-1-3-2",
  "level": "2",
  "url": "section1_3-cartesian_Products_and_Power_Sets.html#exercises-1-3-2",
  "type": "Exercise",
  "number": "1.3.4.1",
  "title": "",
  "body": " Let , , , and let the universal set be . List the elements of                                        "
},
{
  "id": "exercises-1-3-3",
  "level": "2",
  "url": "section1_3-cartesian_Products_and_Power_Sets.html#exercises-1-3-3",
  "type": "Exercise",
  "number": "1.3.4.2",
  "title": "",
  "body": "Suppose that you are about to flip a coin and then roll a die. Let and .   What is ?  How could you interpret the set ?   "
},
{
  "id": "exercises-1-3-4",
  "level": "2",
  "url": "section1_3-cartesian_Products_and_Power_Sets.html#exercises-1-3-4",
  "type": "Exercise",
  "number": "1.3.4.3",
  "title": "",
  "body": "List all two-element sets in   "
},
{
  "id": "exercises-1-3-5",
  "level": "2",
  "url": "section1_3-cartesian_Products_and_Power_Sets.html#exercises-1-3-5",
  "type": "Exercise",
  "number": "1.3.4.4",
  "title": "",
  "body": " List all three-element sets in .  "
},
{
  "id": "exercises-1-3-6",
  "level": "2",
  "url": "section1_3-cartesian_Products_and_Power_Sets.html#exercises-1-3-6",
  "type": "Exercise",
  "number": "1.3.4.5",
  "title": "",
  "body": " How many singleton (one-element) sets are there in if ?  There are singleton subsets, one for each element.  "
},
{
  "id": "exercises-1-3-7",
  "level": "2",
  "url": "section1_3-cartesian_Products_and_Power_Sets.html#exercises-1-3-7",
  "type": "Exercise",
  "number": "1.3.4.6",
  "title": "",
  "body": " A person has four coins in his pocket: a penny, a nickel, a dime, and a quarter. How many different sums of money can he take out if he removes 3 coins at a time?  "
},
{
  "id": "exercises-1-3-8",
  "level": "2",
  "url": "section1_3-cartesian_Products_and_Power_Sets.html#exercises-1-3-8",
  "type": "Exercise",
  "number": "1.3.4.7",
  "title": "",
  "body": " Let and .   List the elements of   How many elements do and have?         "
},
{
  "id": "exercises-1-3-9",
  "level": "2",
  "url": "section1_3-cartesian_Products_and_Power_Sets.html#exercises-1-3-9",
  "type": "Exercise",
  "number": "1.3.4.8",
  "title": "",
  "body": " Let and .   List the elements of and . The parentheses and comma in an ordered pair are not necessary in cases such as this where the elements of each set are individual symbols.  Identify the intersection of and for the case above, and then guess at a general rule for the intersection of and , where and are any two sets.   "
},
{
  "id": "exercises-1-3-10",
  "level": "2",
  "url": "section1_3-cartesian_Products_and_Power_Sets.html#exercises-1-3-10",
  "type": "Exercise",
  "number": "1.3.4.9",
  "title": "",
  "body": " Let and be nonempty sets. When are and equal?  They are equal when .  "
},
{
  "id": "section1_4-binary_Representation_of_Positive_Integers",
  "level": "1",
  "url": "section1_4-binary_Representation_of_Positive_Integers.html",
  "type": "Section",
  "number": "1.4",
  "title": "Binary Representation of Positive Integers",
  "body": " Binary Representation of Positive Integers Binary Representation   Grouping by Twos  Recall that the set of positive integers, , is . Positive integers are naturally used to count things. There are many ways to count and many ways to record, or represent, the results of counting. For example, if we wanted to count five hundred twenty-three apples, we might group the apples by tens. There would be fifty-two groups of ten with three single apples left over. The fifty-two groups of ten could be put into five groups of ten tens (hundreds), with two tens left over. The five hundreds, two tens, and three units is recorded as 523. This system of counting is called the base ten positional system, or decimal system. It is quite natural for us to do grouping by tens, hundreds, thousands, since it is the method that all of us use in everyday life.  The term positional refers to the fact that each digit in the decimal representation of a number has a significance based on its position. Of course this means that rearranging digits will change the number being described. You may have learned of numeration systems in which the position of symbols does not have any significance (e.g., the ancient Egyptian system). Most of these systems are merely curiosities to us now.  The binary number system differs from the decimal number system in that units are grouped by twos, fours, eights, etc. That is, the group sizes are powers of two instead of powers of ten. For example, twenty-three can be grouped into eleven groups of two with one left over. The eleven twos can be grouped into five groups of four with one group of two left over. Continuing along the same lines, we find that twenty-three can be described as one sixteen, zero eights, one four, one two, and one one, which is abbreviated , or simply if the context is clear.    A Conversion Algorithm  The process that we used to determine the binary representation of can be described in general terms to determine the binary representation of any positive integer . A general description of a process such as this one is called an algorithm. Since this is the first algorithm in the book, we will first write it out using less formal language than usual, and then introduce some algorithmic notation. We will cover algorithms specifically in   Start with an empty list of bits.  Step Two: Assign the variable the value .  Step Three: While 's value is positive, continue performing the following three steps until becomes zero and then stop.   divide by 2, obtaining a quotient (often denoted ) and a remainder (denoted ).  attach to the left-hand side of the list of bits.  assign the variable the value .     An example of conversion to binary  To determine the binary representation of 41 we take the following steps:              Therefore,   The notation that we will use to describe this algorithm and all others is called pseudocode, an informal variation of the instructions that are commonly used in many computer languages. Read the following description carefully, comparing it with the informal description above. , which contains a general discussion of the components of the algorithms in this book, should clear up any lingering questions. Anything after \/\/ are comments.   Binary Conversion Algorithm Binary Conversion Algorithm  An algorithm for determining the binary representation of a positive integer.  Input: a positive integer n.  Output: the binary representation of n in the form of a list of bits, with units bit last, twos bit next to last, etc.   k := n \/\/initialize k  L := { } \/\/initialize L to an empty list  While k > 0 do   q := k div 2 \/\/divide k by 2  r:= k mod 2  L: = prepend r to L \/\/add r to the front of L  k:= q \/\/reassign k        SageMath Note: Binary Conversion Algorithm SageMath Note Binary Conversion Algorithm  Here is a Sage version of the algorithm with two alterations. It outputs the binary representation as a string, and it handles all integers, not just positive ones.   Now that you've read this section, you should get this joke.   With permission from Randall Munroe http:\/\/xkcd.com    Comic making a joke about 10 in binary from http:\/\/xkcd.com      Exercises for Section 1.4   Find the binary representation of each of the following positive integers by working through the algorithm by hand. You can check your answer using the sage cell above.  31 32 10 100             Find the binary representation of each of the following positive integers by working through the algorithm by hand. You can check your answer using the sage cell above.  64 67 28 256    What positive integers have the following binary representations?  10010 10011 101010 10011110000             What positive integers have the following binary representations? 100001 1001001 1000000000 1001110000    The number of bits in the binary representations of integers increases by one as the numbers double. Using this fact, determine how many bits the binary representations of the following decimal numbers have without actually doing the full conversion. 2017 4000 4500  There is a bit for each power of 2 up to the largest one needed to represent an integer, and you start counting with the zeroth power. For example, 2017 is between and , and so the largest power needed is . Therefore there are bits in binary 2017.         51     Let be a positive integer with -bit binary representation: with What are the smallest and largest values that could have?    If a positive integer is a multiple of 100, we can identify this fact from its decimal representation, since it will end with two zeros. What can you say about a positive integer if its binary representation ends with two zeros? What if it ends in zeros?  A number must be a multiple of four if its binary representation ends in two zeros. If it ends in zeros, it must be a multiple of .    Can a multiple of ten be easily identified from its binary representation?    "
},
{
  "id": "An_example_of_conversion_to_binary",
  "level": "2",
  "url": "section1_4-binary_Representation_of_Positive_Integers.html#An_example_of_conversion_to_binary",
  "type": "Example",
  "number": "1.4.1",
  "title": "An example of conversion to binary.",
  "body": " An example of conversion to binary  To determine the binary representation of 41 we take the following steps:              Therefore,  "
},
{
  "id": "binary-conversion-algorithm",
  "level": "2",
  "url": "section1_4-binary_Representation_of_Positive_Integers.html#binary-conversion-algorithm",
  "type": "Algorithm",
  "number": "1.4.2",
  "title": "Binary Conversion Algorithm.",
  "body": " Binary Conversion Algorithm Binary Conversion Algorithm  An algorithm for determining the binary representation of a positive integer.  Input: a positive integer n.  Output: the binary representation of n in the form of a list of bits, with units bit last, twos bit next to last, etc.   k := n \/\/initialize k  L := { } \/\/initialize L to an empty list  While k > 0 do   q := k div 2 \/\/divide k by 2  r:= k mod 2  L: = prepend r to L \/\/add r to the front of L  k:= q \/\/reassign k     "
},
{
  "id": "onetoten",
  "level": "2",
  "url": "section1_4-binary_Representation_of_Positive_Integers.html#onetoten",
  "type": "Figure",
  "number": "1.4.3",
  "title": "",
  "body": " With permission from Randall Munroe http:\/\/xkcd.com    Comic making a joke about 10 in binary from http:\/\/xkcd.com   "
},
{
  "id": "exercises-1-4-2",
  "level": "2",
  "url": "section1_4-binary_Representation_of_Positive_Integers.html#exercises-1-4-2",
  "type": "Exercise",
  "number": "1.4.4.1",
  "title": "",
  "body": " Find the binary representation of each of the following positive integers by working through the algorithm by hand. You can check your answer using the sage cell above.  31 32 10 100           "
},
{
  "id": "exercises-1-4-3",
  "level": "2",
  "url": "section1_4-binary_Representation_of_Positive_Integers.html#exercises-1-4-3",
  "type": "Exercise",
  "number": "1.4.4.2",
  "title": "",
  "body": " Find the binary representation of each of the following positive integers by working through the algorithm by hand. You can check your answer using the sage cell above.  64 67 28 256  "
},
{
  "id": "exercises-1-4-4",
  "level": "2",
  "url": "section1_4-binary_Representation_of_Positive_Integers.html#exercises-1-4-4",
  "type": "Exercise",
  "number": "1.4.4.3",
  "title": "",
  "body": " What positive integers have the following binary representations?  10010 10011 101010 10011110000           "
},
{
  "id": "exercises-1-4-5",
  "level": "2",
  "url": "section1_4-binary_Representation_of_Positive_Integers.html#exercises-1-4-5",
  "type": "Exercise",
  "number": "1.4.4.4",
  "title": "",
  "body": " What positive integers have the following binary representations? 100001 1001001 1000000000 1001110000  "
},
{
  "id": "exercises-1-4-6",
  "level": "2",
  "url": "section1_4-binary_Representation_of_Positive_Integers.html#exercises-1-4-6",
  "type": "Exercise",
  "number": "1.4.4.5",
  "title": "",
  "body": " The number of bits in the binary representations of integers increases by one as the numbers double. Using this fact, determine how many bits the binary representations of the following decimal numbers have without actually doing the full conversion. 2017 4000 4500  There is a bit for each power of 2 up to the largest one needed to represent an integer, and you start counting with the zeroth power. For example, 2017 is between and , and so the largest power needed is . Therefore there are bits in binary 2017.         51   "
},
{
  "id": "exercises-1-4-7",
  "level": "2",
  "url": "section1_4-binary_Representation_of_Positive_Integers.html#exercises-1-4-7",
  "type": "Exercise",
  "number": "1.4.4.6",
  "title": "",
  "body": " Let be a positive integer with -bit binary representation: with What are the smallest and largest values that could have?  "
},
{
  "id": "exercises-1-4-8",
  "level": "2",
  "url": "section1_4-binary_Representation_of_Positive_Integers.html#exercises-1-4-8",
  "type": "Exercise",
  "number": "1.4.4.7",
  "title": "",
  "body": " If a positive integer is a multiple of 100, we can identify this fact from its decimal representation, since it will end with two zeros. What can you say about a positive integer if its binary representation ends with two zeros? What if it ends in zeros?  A number must be a multiple of four if its binary representation ends in two zeros. If it ends in zeros, it must be a multiple of .  "
},
{
  "id": "exercises-1-4-9",
  "level": "2",
  "url": "section1_4-binary_Representation_of_Positive_Integers.html#exercises-1-4-9",
  "type": "Exercise",
  "number": "1.4.4.8",
  "title": "",
  "body": " Can a multiple of ten be easily identified from its binary representation?  "
},
{
  "id": "section1_5-summation_Notation_and_Generalizations",
  "level": "1",
  "url": "section1_5-summation_Notation_and_Generalizations.html",
  "type": "Section",
  "number": "1.5",
  "title": "Summation Notation and Generalizations",
  "body": " Summation Notation and Generalizations Summation Notation and Generalizations   Sums  Most operations such as addition of numbers are introduced as binary operations. That is, we are taught that two numbers may be added together to give us a single number. Before long, we run into situations where more than two numbers are to be added. For example, if four numbers, , , , and are to be added, their sum may be written down in several ways, such as  or . In the first expression, the first two numbers are added, the result is added to the third number, and that result is added to the fourth number. In the second expression the first two numbers and the last two numbers are added and the results of these additions are added. Of course, we know that the final results will be the same. This is due to the fact that addition of numbers is an associative operation. For such operations, there is no need to describe how more than two objects will be operated on. A sum of numbers such as is called a series and is often written in what is called summation notation .  We first recall some basic facts about series that you probably have seen before. A more formal treatment of sequences and series is covered in . The purpose here is to give the reader a working knowledge of summation notation and to carry this notation through to intersection and union of sets and other mathematical operations.  A finite series is an expression such as  In the expression :   The variable is referred to as the index , or the index of summation.  The expression is the general term of the series. It defines the numbers that are being added together in the series.  The value of below the summation symbol is the initial index and the value above the summation symbol is the terminal index .  It is understood that the series is a sum of the general terms where the index start with the initial index and increases by one up to and including the terminal index.    Some finite series            More finite series  If the general terms in a series are more specific, the sum can often be simplified. For example,        .      Generalizations  Summation notation can be generalized to many mathematical operations, for example, set intersection:    Generalized Set Operations  Generalized Set Operations Let be sets. Then:              Some generalized operations  If , , and , then and . With this notation it is quite easy to write lengthy expressions in a fairly compact form. For example, the statement becomes .     Exercises for Section 1.5   Calculate the following series:         for   for                Calculate the following series:    for       for    for       Express the formula without using summation notation.  Verify this formula for .  Repeat parts (a) and (b) for            Verify the following properties for .           Rewrite the following without summation sign for . It is not necessary that you understand or expand the notation at this point. .      Draw the Venn diagram for .  Express in expanded format : .     For any positive integer , let and . What are the following sets?                            For any positive integer , let and . What are the following sets?              The symbol is used for the product of numbers in the same way that is used for sums. For example, . Evaluate the following:               Evaluate           "
},
{
  "id": "some_finite_series",
  "level": "2",
  "url": "section1_5-summation_Notation_and_Generalizations.html#some_finite_series",
  "type": "Example",
  "number": "1.5.1",
  "title": "Some finite series.",
  "body": " Some finite series          "
},
{
  "id": "more_finite_series",
  "level": "2",
  "url": "section1_5-summation_Notation_and_Generalizations.html#more_finite_series",
  "type": "Example",
  "number": "1.5.2",
  "title": "More finite series.",
  "body": " More finite series  If the general terms in a series are more specific, the sum can often be simplified. For example,        .   "
},
{
  "id": "generalized-set-operations",
  "level": "2",
  "url": "section1_5-summation_Notation_and_Generalizations.html#generalized-set-operations",
  "type": "Definition",
  "number": "1.5.3",
  "title": "Generalized Set Operations.",
  "body": " Generalized Set Operations  Generalized Set Operations Let be sets. Then:            "
},
{
  "id": "some_generalized_operations",
  "level": "2",
  "url": "section1_5-summation_Notation_and_Generalizations.html#some_generalized_operations",
  "type": "Example",
  "number": "1.5.4",
  "title": "Some generalized operations.",
  "body": " Some generalized operations  If , , and , then and . With this notation it is quite easy to write lengthy expressions in a fairly compact form. For example, the statement becomes .  "
},
{
  "id": "exercises-1-5-2",
  "level": "2",
  "url": "section1_5-summation_Notation_and_Generalizations.html#exercises-1-5-2",
  "type": "Exercise",
  "number": "1.5.3.1",
  "title": "",
  "body": " Calculate the following series:         for   for               "
},
{
  "id": "exercises-1-5-3",
  "level": "2",
  "url": "section1_5-summation_Notation_and_Generalizations.html#exercises-1-5-3",
  "type": "Exercise",
  "number": "1.5.3.2",
  "title": "",
  "body": "Calculate the following series:    for       for    for    "
},
{
  "id": "exercises-1-5-4",
  "level": "2",
  "url": "section1_5-summation_Notation_and_Generalizations.html#exercises-1-5-4",
  "type": "Exercise",
  "number": "1.5.3.3",
  "title": "",
  "body": "  Express the formula without using summation notation.  Verify this formula for .  Repeat parts (a) and (b) for           "
},
{
  "id": "exercises-1-5-5",
  "level": "2",
  "url": "section1_5-summation_Notation_and_Generalizations.html#exercises-1-5-5",
  "type": "Exercise",
  "number": "1.5.3.4",
  "title": "",
  "body": "Verify the following properties for .         "
},
{
  "id": "exercises-1-5-6",
  "level": "2",
  "url": "section1_5-summation_Notation_and_Generalizations.html#exercises-1-5-6",
  "type": "Exercise",
  "number": "1.5.3.5",
  "title": "",
  "body": " Rewrite the following without summation sign for . It is not necessary that you understand or expand the notation at this point. .   "
},
{
  "id": "exercises-1-5-7",
  "level": "2",
  "url": "section1_5-summation_Notation_and_Generalizations.html#exercises-1-5-7",
  "type": "Exercise",
  "number": "1.5.3.6",
  "title": "",
  "body": "  Draw the Venn diagram for .  Express in expanded format : .   "
},
{
  "id": "exercises-1-5-8",
  "level": "2",
  "url": "section1_5-summation_Notation_and_Generalizations.html#exercises-1-5-8",
  "type": "Exercise",
  "number": "1.5.3.7",
  "title": "",
  "body": " For any positive integer , let and . What are the following sets?                          "
},
{
  "id": "exercises-1-5-9",
  "level": "2",
  "url": "section1_5-summation_Notation_and_Generalizations.html#exercises-1-5-9",
  "type": "Exercise",
  "number": "1.5.3.8",
  "title": "",
  "body": " For any positive integer , let and . What are the following sets?            "
},
{
  "id": "exercises-1-5-10",
  "level": "2",
  "url": "section1_5-summation_Notation_and_Generalizations.html#exercises-1-5-10",
  "type": "Exercise",
  "number": "1.5.3.9",
  "title": "",
  "body": " The symbol is used for the product of numbers in the same way that is used for sums. For example, . Evaluate the following:             "
},
{
  "id": "exercises-1-5-11",
  "level": "2",
  "url": "section1_5-summation_Notation_and_Generalizations.html#exercises-1-5-11",
  "type": "Exercise",
  "number": "1.5.3.10",
  "title": "",
  "body": " Evaluate        "
},
{
  "id": "section2_1-the-rule-of-products",
  "level": "1",
  "url": "section2_1-the-rule-of-products.html",
  "type": "Section",
  "number": "2.1",
  "title": "Basic Counting Techniques - The Rule of Products",
  "body": " Basic Counting Techniques - The Rule of Products  What is Combinatorics?  One of the first concepts our parents taught us was the art of counting. We were taught to raise three fingers to indicate that we were three years old. The question of how many is a natural and frequently asked question. Combinatorics is the art of counting. It is the study of techniques that will help us to count the number of objects in a set quickly. Highly sophisticated results can be obtained with this simple concept. The following examples will illustrate that many questions concerned with counting involve the same process.  How many lunches can you have? A snack bar serves five different sandwiches and three different beverages. How many different lunches can a person order? One way of determining the number of possible lunches is by listing or enumerating all the possibilities. One systematic way of doing this is by means of a tree, as in the following figure.   Tree diagram to enumerate the number of possible lunches.   Tree diagram illustrating branching at each choice of sandwich and beverage.    Every path that begins at the position labeled START and goes to the right can be interpreted as a choice of one of the five sandwiches followed by a choice of one of the three beverages. Note that considerable work is required to arrive at the number fifteen this way; but we also get more than just a number. The result is a complete list of all possible lunches. If we need to answer a question that starts with How many . . . , enumeration would be done only as a last resort. In a later chapter we will examine more enumeration techniques.  An alternative method of solution for this example is to make the simple observation that there are five different choices for sandwiches and three different choices for beverages, so there are different lunches that can be ordered.    Counting elements in a cartesian product  Let and . From Chapter 1 we know how to list the elements in . Since the first entry of each pair can be any one of the five elements , and , and since the second can be any one of the three numbers 1, 2, and 3, it is quite clear there are different elements in .   A True-False Questionnaire A person is to complete a true-false questionnaire consisting of ten questions. How many different ways are there to answer the questionnaire? Since each question can be answered in either of two ways (true or false), and there are ten questions, there are different ways of answering the questionnaire. The reader is encouraged to visualize the tree diagram of this example, but not to draw it!   We formalize the procedures developed in the previous examples with the following rule and its extension.    The Rule Of Products Rule Of Products, The  If two operations must be performed, and if the first operation can always be performed different ways and the second operation can always be performed different ways, then there are different ways that the two operations can be performed.   Note: It is important that does not depend on the option that is chosen in the first operation. Another way of saying this is that is independent of the first operation. If is dependent on the first operation, then the rule of products does not apply.  Note: The Rule of Products is also known as the Product Rule  Reduced Lunch Possibilities Assume in , coffee is not served with a beef or a chicken sandwich. Then by inspection of we see that there are only thirteen different choices for lunch. The rule of products does not apply, since the choice of beverage depends on one's choice of a sandwich.   Extended Rule Of Products. The rule of products can be extended to include sequences of more than two operations. If operations must be performed, and the number of options for each operation is , respectively, with each independent of previous choices, then the operations can be performed different ways.  A Multiple Choice Questionnaire A questionnaire contains four questions that have two possible answers and three questions with five possible answers. Since the answer to each question is independent of the answers to the other questions, the extended rule of products applies and there are different ways to answer the questionnaire.   In Chapter 1 we introduced the power set of a set , , which is the set of all subsets of . Can we predict how many elements are in for a given finite set ? The answer is yes, and in fact if , then . The ease with which we can prove this fact demonstrates the power and usefulness of the rule of products. Do not underestimate the usefulness of simple ideas.  Power Set Cardinality Theorem Power Set Cardinality Theorem  If is a finite set, then .  Proof: Consider how we might determine any , where . For each element there are two choices, either or . Since there are elements of we have, by the rule of products, different subsets of . Therefore, .     In horse racing, to bet the daily double is to select the winners of the first two races of the day. You win only if both selections are correct. In terms of the number of horses that are entered in the first two races, how many different daily double bets could be made?  If there are horses in race 1 and horses in race 2 then there are possible daily doubles.    Professor Shortcut records his grades using only his students' first and last initials. What is the smallest class size that will definitely force Prof. S. to use a different system?  A certain shirt comes in four sizes and six colors. One also has the choice of a dragon, an alligator, or no emblem on the pocket. How many different shirts could you order?    A builder of modular homes would like to impress his potential customers with the variety of styles of his houses. For each house there are blueprints for three different living rooms, four different bedroom configurations, and two different garage styles. In addition, the outside can be finished in cedar shingles or brick. How many different houses can be designed from these plans?  The Pi Mu Epsilon mathematics honorary society of Outstanding University wishes to have a picture taken of its six officers. There will be two rows of three people. How many different way can the six officers be arranged?      An automobile dealer has several options available for each of three different packages of a particular model car: a choice of two styles of seats in three different colors, a choice of four different radios, and five different exteriors. How many choices of automobile does a customer have?  A clothing manufacturer has put out a mix-and-match collection consisting of two blouses, two pairs of pants, a skirt, and a blazer. How many outfits can you make? Did you consider that the blazer is optional? How many outfits can you make if the manufacturer adds a sweater to the collection?  If we always include the blazer in the outfit we would have 6 outfits. If we consider the blazer optional then there would be 12 outfits. When we add a sweater we have the same type of choice. Considering the sweater optional produces 24 outfits.   As a freshman, suppose you had to take two of four lab science courses, one of two literature courses, two of three math courses, and one of seven physical education courses. Disregarding possible time conflicts, how many different schedules do you have to choose from?  (a) Suppose each single character stored in a computer uses eight bits. Then each character is represented by a different sequence of eight 0's and l's called a bit pattern. How many different bit patterns are there? (That is, how many different characters could be represented?)  (b) How many bit patterns are palindromes (the same backwards as forwards)?  (c) How many different bit patterns have an even number of 1's?    . Here we are concerned only with the first four bits, since the last four must be the same.   , you have no choice in the last bit.     Automobile license plates in Massachusetts usually consist of three digits followed by three letters. The first digit is never zero. How many different plates of this type could be made?  (a) Let . Determine the number of different subsets of .  (b) Let . Determine the number of proper subsets of .        How many integers from 100 to 999 can be written in base ten without using the digit 7?  Consider three persons, A, B, and C, who are to be seated in a row of three chairs. Suppose A and B are identical twins. How many seating arrangements of these persons can there be   If you are a total stranger?  If you are A and B's mother?   This problem is designed to show you that different people can have different correct answers to the same problem.       How many ways can a student do a ten-question true-false exam if he or she can choose not to answer any number of questions?  Suppose you have a choice of fish, lamb, or beef for a main course, a choice of peas or carrots for a vegetable, and a choice of pie, cake, or ice cream for dessert. If you must order one item from each category, how many different dinners are possible?   Suppose you have a choice of vanilla, chocolate, or strawberry for ice cream, a choice of peanuts or walnuts for chopped nuts, and a choice of hot fudge or marshmallow for topping. If you must order one item from each category, how many different sundaes are possible?  A questionnaire contains six questions each having yes-no answers. For each yes response, there is a follow-up question with four possible responses.   Draw a tree diagram that illustrates how many ways a single question in the questionnaire can be answered.  How many ways can the questionnaire be answered?     Solution to 17(a)   Tree diagram illustrating the five possible ways a question can be answered.      See     Ten people are invited to a dinner party. How many ways are there of seating them at a round table? If the ten people consist of five men and five women, how many ways are there of seating them if each man must be surrounded by two women around the table?  How many ways can you separate a set with elements into two nonempty subsets if the order of the subsets is immaterial? What if the order of the subsets is important? and   A gardener has three flowering shrubs and four nonflowering shrubs, where all shrubs are distinguishable from one another. He must plant these shrubs in a row using an alternating pattern, that is, a shrub must be of a different type from that on either side. How many ways can he plant these shrubs? If he has to plant these shrubs in a circle using the same pattern, how many ways can he plant this circle? Note that one nonflowering shrub will be left out at the end.   "
},
{
  "id": "lunch-possibilies1",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#lunch-possibilies1",
  "type": "Example",
  "number": "2.1.1",
  "title": "How many lunches can you have?",
  "body": "How many lunches can you have? A snack bar serves five different sandwiches and three different beverages. How many different lunches can a person order? One way of determining the number of possible lunches is by listing or enumerating all the possibilities. One systematic way of doing this is by means of a tree, as in the following figure.   Tree diagram to enumerate the number of possible lunches.   Tree diagram illustrating branching at each choice of sandwich and beverage.    Every path that begins at the position labeled START and goes to the right can be interpreted as a choice of one of the five sandwiches followed by a choice of one of the three beverages. Note that considerable work is required to arrive at the number fifteen this way; but we also get more than just a number. The result is a complete list of all possible lunches. If we need to answer a question that starts with How many . . . , enumeration would be done only as a last resort. In a later chapter we will examine more enumeration techniques.  An alternative method of solution for this example is to make the simple observation that there are five different choices for sandwiches and three different choices for beverages, so there are different lunches that can be ordered.  "
},
{
  "id": "cartesian-cardinality",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#cartesian-cardinality",
  "type": "Example",
  "number": "2.1.3",
  "title": "Counting elements in a cartesian product.",
  "body": " Counting elements in a cartesian product  Let and . From Chapter 1 we know how to list the elements in . Since the first entry of each pair can be any one of the five elements , and , and since the second can be any one of the three numbers 1, 2, and 3, it is quite clear there are different elements in .  "
},
{
  "id": "questionnaire",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#questionnaire",
  "type": "Example",
  "number": "2.1.4",
  "title": "A True-False Questionnaire.",
  "body": "A True-False Questionnaire A person is to complete a true-false questionnaire consisting of ten questions. How many different ways are there to answer the questionnaire? Since each question can be answered in either of two ways (true or false), and there are ten questions, there are different ways of answering the questionnaire. The reader is encouraged to visualize the tree diagram of this example, but not to draw it!  "
},
{
  "id": "lunch-possibilites2",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#lunch-possibilites2",
  "type": "Example",
  "number": "2.1.5",
  "title": "Reduced Lunch Possibilities.",
  "body": "Reduced Lunch Possibilities Assume in , coffee is not served with a beef or a chicken sandwich. Then by inspection of we see that there are only thirteen different choices for lunch. The rule of products does not apply, since the choice of beverage depends on one's choice of a sandwich.  "
},
{
  "id": "another_questionnaire",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#another_questionnaire",
  "type": "Example",
  "number": "2.1.6",
  "title": "A Multiple Choice Questionnaire.",
  "body": "A Multiple Choice Questionnaire A questionnaire contains four questions that have two possible answers and three questions with five possible answers. Since the answer to each question is independent of the answers to the other questions, the extended rule of products applies and there are different ways to answer the questionnaire.  "
},
{
  "id": "power-set-cardinality-theorem",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#power-set-cardinality-theorem",
  "type": "Theorem",
  "number": "2.1.7",
  "title": "Power Set Cardinality Theorem.",
  "body": "Power Set Cardinality Theorem Power Set Cardinality Theorem  If is a finite set, then .  Proof: Consider how we might determine any , where . For each element there are two choices, either or . Since there are elements of we have, by the rule of products, different subsets of . Therefore, .  "
},
{
  "id": "EXERCISES-FOR-SECTION-2-1-1",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#EXERCISES-FOR-SECTION-2-1-1",
  "type": "Exercise",
  "number": "2.1.3.1",
  "title": "",
  "body": "In horse racing, to bet the daily double is to select the winners of the first two races of the day. You win only if both selections are correct. In terms of the number of horses that are entered in the first two races, how many different daily double bets could be made?  If there are horses in race 1 and horses in race 2 then there are possible daily doubles.  "
},
{
  "id": "exercise-shortcut",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#exercise-shortcut",
  "type": "Exercise",
  "number": "2.1.3.2",
  "title": "",
  "body": " Professor Shortcut records his grades using only his students' first and last initials. What is the smallest class size that will definitely force Prof. S. to use a different system? "
},
{
  "id": "EXERCISES-FOR-SECTION-2-1-3",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#EXERCISES-FOR-SECTION-2-1-3",
  "type": "Exercise",
  "number": "2.1.3.3",
  "title": "",
  "body": "A certain shirt comes in four sizes and six colors. One also has the choice of a dragon, an alligator, or no emblem on the pocket. How many different shirts could you order?   "
},
{
  "id": "EXERCISES-FOR-SECTION-2-1-4",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#EXERCISES-FOR-SECTION-2-1-4",
  "type": "Exercise",
  "number": "2.1.3.4",
  "title": "",
  "body": "A builder of modular homes would like to impress his potential customers with the variety of styles of his houses. For each house there are blueprints for three different living rooms, four different bedroom configurations, and two different garage styles. In addition, the outside can be finished in cedar shingles or brick. How many different houses can be designed from these plans? "
},
{
  "id": "EXERCISES-FOR-SECTION-2-1-5",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#EXERCISES-FOR-SECTION-2-1-5",
  "type": "Exercise",
  "number": "2.1.3.5",
  "title": "",
  "body": "The Pi Mu Epsilon mathematics honorary society of Outstanding University wishes to have a picture taken of its six officers. There will be two rows of three people. How many different way can the six officers be arranged?    "
},
{
  "id": "EXERCISES-FOR-SECTION-2-1-6",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#EXERCISES-FOR-SECTION-2-1-6",
  "type": "Exercise",
  "number": "2.1.3.6",
  "title": "",
  "body": " An automobile dealer has several options available for each of three different packages of a particular model car: a choice of two styles of seats in three different colors, a choice of four different radios, and five different exteriors. How many choices of automobile does a customer have? "
},
{
  "id": "EXERCISES-FOR-SECTION-2-1-7",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#EXERCISES-FOR-SECTION-2-1-7",
  "type": "Exercise",
  "number": "2.1.3.7",
  "title": "",
  "body": "A clothing manufacturer has put out a mix-and-match collection consisting of two blouses, two pairs of pants, a skirt, and a blazer. How many outfits can you make? Did you consider that the blazer is optional? How many outfits can you make if the manufacturer adds a sweater to the collection?  If we always include the blazer in the outfit we would have 6 outfits. If we consider the blazer optional then there would be 12 outfits. When we add a sweater we have the same type of choice. Considering the sweater optional produces 24 outfits.  "
},
{
  "id": "EXERCISES-FOR-SECTION-2-1-8",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#EXERCISES-FOR-SECTION-2-1-8",
  "type": "Exercise",
  "number": "2.1.3.8",
  "title": "",
  "body": "As a freshman, suppose you had to take two of four lab science courses, one of two literature courses, two of three math courses, and one of seven physical education courses. Disregarding possible time conflicts, how many different schedules do you have to choose from? "
},
{
  "id": "EXERCISES-FOR-SECTION-2-1-9",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#EXERCISES-FOR-SECTION-2-1-9",
  "type": "Exercise",
  "number": "2.1.3.9",
  "title": "",
  "body": "(a) Suppose each single character stored in a computer uses eight bits. Then each character is represented by a different sequence of eight 0's and l's called a bit pattern. How many different bit patterns are there? (That is, how many different characters could be represented?)  (b) How many bit patterns are palindromes (the same backwards as forwards)?  (c) How many different bit patterns have an even number of 1's?    . Here we are concerned only with the first four bits, since the last four must be the same.   , you have no choice in the last bit.    "
},
{
  "id": "EXERCISES-FOR-SECTION-2-1-10",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#EXERCISES-FOR-SECTION-2-1-10",
  "type": "Exercise",
  "number": "2.1.3.10",
  "title": "",
  "body": "Automobile license plates in Massachusetts usually consist of three digits followed by three letters. The first digit is never zero. How many different plates of this type could be made? "
},
{
  "id": "EXERCISES-FOR-SECTION-2-1-11",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#EXERCISES-FOR-SECTION-2-1-11",
  "type": "Exercise",
  "number": "2.1.3.11",
  "title": "",
  "body": "(a) Let . Determine the number of different subsets of .  (b) Let . Determine the number of proper subsets of .       "
},
{
  "id": "EXERCISES-FOR-SECTION-2-1-12",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#EXERCISES-FOR-SECTION-2-1-12",
  "type": "Exercise",
  "number": "2.1.3.12",
  "title": "",
  "body": "How many integers from 100 to 999 can be written in base ten without using the digit 7? "
},
{
  "id": "EXERCISES-FOR-SECTION-2-1-13",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#EXERCISES-FOR-SECTION-2-1-13",
  "type": "Exercise",
  "number": "2.1.3.13",
  "title": "",
  "body": "Consider three persons, A, B, and C, who are to be seated in a row of three chairs. Suppose A and B are identical twins. How many seating arrangements of these persons can there be   If you are a total stranger?  If you are A and B's mother?   This problem is designed to show you that different people can have different correct answers to the same problem.     "
},
{
  "id": "EXERCISES-FOR-SECTION-2-1-14",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#EXERCISES-FOR-SECTION-2-1-14",
  "type": "Exercise",
  "number": "2.1.3.14",
  "title": "",
  "body": " How many ways can a student do a ten-question true-false exam if he or she can choose not to answer any number of questions? "
},
{
  "id": "EXERCISES-FOR-SECTION-2-1-15",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#EXERCISES-FOR-SECTION-2-1-15",
  "type": "Exercise",
  "number": "2.1.3.15",
  "title": "",
  "body": "Suppose you have a choice of fish, lamb, or beef for a main course, a choice of peas or carrots for a vegetable, and a choice of pie, cake, or ice cream for dessert. If you must order one item from each category, how many different dinners are possible?  "
},
{
  "id": "EXERCISES-FOR-SECTION-2-1-16",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#EXERCISES-FOR-SECTION-2-1-16",
  "type": "Exercise",
  "number": "2.1.3.16",
  "title": "",
  "body": "Suppose you have a choice of vanilla, chocolate, or strawberry for ice cream, a choice of peanuts or walnuts for chopped nuts, and a choice of hot fudge or marshmallow for topping. If you must order one item from each category, how many different sundaes are possible? "
},
{
  "id": "EXERCISES-FOR-SECTION-2-1-17",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#EXERCISES-FOR-SECTION-2-1-17",
  "type": "Exercise",
  "number": "2.1.3.17",
  "title": "",
  "body": "A questionnaire contains six questions each having yes-no answers. For each yes response, there is a follow-up question with four possible responses.   Draw a tree diagram that illustrates how many ways a single question in the questionnaire can be answered.  How many ways can the questionnaire be answered?     Solution to 17(a)   Tree diagram illustrating the five possible ways a question can be answered.      See    "
},
{
  "id": "EXERCISES-FOR-SECTION-2-1-18",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#EXERCISES-FOR-SECTION-2-1-18",
  "type": "Exercise",
  "number": "2.1.3.18",
  "title": "",
  "body": "Ten people are invited to a dinner party. How many ways are there of seating them at a round table? If the ten people consist of five men and five women, how many ways are there of seating them if each man must be surrounded by two women around the table? "
},
{
  "id": "EXERCISES-FOR-SECTION-2-1-19",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#EXERCISES-FOR-SECTION-2-1-19",
  "type": "Exercise",
  "number": "2.1.3.19",
  "title": "",
  "body": "How many ways can you separate a set with elements into two nonempty subsets if the order of the subsets is immaterial? What if the order of the subsets is important? and  "
},
{
  "id": "EXERCISES-FOR-SECTION-2-1-20",
  "level": "2",
  "url": "section2_1-the-rule-of-products.html#EXERCISES-FOR-SECTION-2-1-20",
  "type": "Exercise",
  "number": "2.1.3.20",
  "title": "",
  "body": "A gardener has three flowering shrubs and four nonflowering shrubs, where all shrubs are distinguishable from one another. He must plant these shrubs in a row using an alternating pattern, that is, a shrub must be of a different type from that on either side. How many ways can he plant these shrubs? If he has to plant these shrubs in a circle using the same pattern, how many ways can he plant this circle? Note that one nonflowering shrub will be left out at the end. "
},
{
  "id": "section2_2-permutations",
  "level": "1",
  "url": "section2_2-permutations.html",
  "type": "Section",
  "number": "2.2",
  "title": "Permutations",
  "body": " Permutations   Ordering Things  A number of applications of the rule of products are of a specific type, and because of their frequent appearance they are given their own designation, permutations. Consider the following examples.  Ordering the elements of a set How many different ways can we order the three different elements of the set ? Since we have three choices for position one, two choices for position two, and one choice for the third position, we have, by the rule of products, different ways of ordering the three letters. We illustrate through a tree diagram.   A tree to enumerate permutations of a three element set.   A tree diagram illustrating permutations of a three element set.    Each of the six orderings is called a permutation of the set .   Ordering a schedule A student is taking five courses in the fall semester. How many different ways can the five courses be listed? There are different permutations of the set of courses.   In each of the above examples of the rule of products we observe that:   We are asked to order or arrange elements from a single set.  Each element is listed exactly once in each list (permutation). So if there are choices for position one in a list, there are choices for position two, choices for position three, etc.   Some orderings of a baseball team The alphabetical ordering of the players of a baseball team is one permutation of the set of players. Other orderings of the players' names might be done by batting average, age, or height. The information that determines the ordering is called the key. We would expect that each key would give a different permutation of the names. If there are twenty-five players on the team, there are different permutations of the players.  This number of permutations is huge. In fact it is 15511210043330985984000000, but writing it like this isn't all that instructive, while leaving it as a product as we originally had makes it easier to see where the number comes from. We just need to find a more compact way of writing these products.   We now develop notation that will be useful for permutation problems.  Factorial  Factorial factorial, the product of the first positive integers  If is a positive integer then factorial is the product of the first positive integers and is denoted . Additionally, we define zero factorial, , to be 1.   The first few factorials are .  Note that is 4 times , or 24, and is 5 times , or 120. In addition, note that as grows in size, grows extremely quickly. For example, . If the answer to a problem happens to be , as in the previous example, you would never be expected to write that number out completely. However, a problem with an answer of can be reduced to , or 600.  If , there are ways of permuting all elements of . We next consider the more general situation where we would like to permute elements out of a set of objects, where .  Choosing Club Officers A club of twenty-five members will hold an election for president, secretary, and treasurer in that order. Assume a person can hold only one position. How many ways are there of choosing these three officers? By the rule of products there are ways of making a selection.   Permutation Permutation An ordered arrangement of elements selected from a set of elements, , where no two elements of the arrangement are the same, is called a permutation of objects taken at a time. The total number of such permutations is denoted by .    Permutation Counting Formula Permutation Counting Formula The number of possible permutations of elements taken from a set of elements is .    Case I: If we have .  Case II: If ,then we have positions to fill using elements and   Position 1 can be filled by any one of elements  Position 2 can be filled by any one of elements     Position k can be filled by any one of elements   Hence, by the rule of products, .    It is important to note that the derivation of the permutation formula given above was done solely through the rule of products. This serves to reiterate our introductory remarks in this section that permutation problems are really rule-of-products problems. We close this section with several examples.  Another example of choosing officers  A club has eight members eligible to serve as president, vice-president, and treasurer. How many ways are there of choosing these officers?  Solution 1: Using the rule of products. There are eight possible choices for the presidency, seven for the vice-presidency, and six for the office of treasurer. By the rule of products there are ways of choosing these officers.  Solution 2: Using the permutation formula. We want the total number of permutations of eight objects taken three at a time:      Course ordering, revisited  To count the number of ways to order five courses, we can use the permutation formula. We want the number of permutations of five courses taken five at a time: .   Ordering of digits under different conditions  Consider only the digits 1, 2, 3, 4, and 5.   How many three-digit numbers can be formed if no repetition of digits can occur?  How many three-digit numbers can be formed if repetition of digits is allowed?  How many three-digit numbers can be formed if only non-consecutive repetition of digits are allowed?   Solutions to (a): Solution 1: Using the rule of products. We have any one of five choices for digit one, any one of four choices for digit two, and three choices for digit three. Hence, different three-digit numbers can be formed.  Solution 2; Using the permutation formula. We want the total number of permutations of five digits taken three at a time: .  Solution to (b): The definition of permutation indicates ...no two elements in each list are the same. Here we are forming what are informally called permutations with repetition these are actually ordered triples or 3-tuples and the permutation formula cannot be used. However, the rule of products still applies. We have any one of five choices for the first digit, five choices for the second, and five for the third. So there are possible different three-digit numbers if repetition is allowed.  Solution to (c): Again, the rule of products applies here. We have any one of five choices for the first digit, but then for the next two digits we have four choices since we are not allowed to repeat the previous digit So there are possible different three-digit numbers if only non-consecutive repetitions are allowed.      If a raffle has three different prizes and there are 1,000 raffle tickets sold, how many different ways can the prizes be distributed?     How many three-digit numbers can be formed from the digits 1, 2, 3 if no repetition of digits is allowed? List the three-digit numbers.  How many two-digit numbers can be formed if no repetition of digits is allowed? List them.  How many two-digit numbers can be obtained if repetition is allowed?    How many eight-letter words can be formed from the 26 letters in the alphabet? Even without concerning ourselves about whether the words make sense, there are two interpretations of this problem. Answer both.  With repetition:  Without repetition:    Let be a set with . Determine       The state finals of a high school track meet involves fifteen schools. How many ways can these schools be listed in the program?   Consider the three-digit numbers that can be formed from the digits 1, 2, 3, 4, and 5 with no repetition of digits allowed.  a. How many of these are even numbers?  b. How many are greater than 250?    All 15 players on the Tall U. basketball team are capable of playing any position.  How many ways can the coach at Tall U. fill the five starting positions in a game?  What is the answer if the center must be one of two players?        How many ways can a gardener plant five different species of shrubs in a circle?  What is the answer if two of the shrubs are the same?  What is the answer if all the shrubs are identical?    The president of the Math and Computer Club would like to arrange a meeting with six attendees, the president included. There will be three computer science majors and three math majors at the meeting. How many ways can the six people be seated at a circular table if the president does not want people with the same majors to sit next to one other?    Six people apply for three identical jobs and all are qualified for the positions. Two will work in New York and the other one will work in San Diego. How many ways can the positions be filled?   Let . Determine the cardinality of    What is the answer to the previous part if  If , determine the number of -tuples in , , where each coordinate is different from the other coordinates.      Case 1: . Since the coordinates must be different, this case is impossible.  Case 2: .     "
},
{
  "id": "ordering_a_set",
  "level": "2",
  "url": "section2_2-permutations.html#ordering_a_set",
  "type": "Example",
  "number": "2.2.1",
  "title": "Ordering the elements of a set.",
  "body": "Ordering the elements of a set How many different ways can we order the three different elements of the set ? Since we have three choices for position one, two choices for position two, and one choice for the third position, we have, by the rule of products, different ways of ordering the three letters. We illustrate through a tree diagram.   A tree to enumerate permutations of a three element set.   A tree diagram illustrating permutations of a three element set.    Each of the six orderings is called a permutation of the set .  "
},
{
  "id": "ordering_a_schedule",
  "level": "2",
  "url": "section2_2-permutations.html#ordering_a_schedule",
  "type": "Example",
  "number": "2.2.3",
  "title": "Ordering a schedule.",
  "body": "Ordering a schedule A student is taking five courses in the fall semester. How many different ways can the five courses be listed? There are different permutations of the set of courses.  "
},
{
  "id": "some_orderings_of_a_baseball_team",
  "level": "2",
  "url": "section2_2-permutations.html#some_orderings_of_a_baseball_team",
  "type": "Example",
  "number": "2.2.4",
  "title": "Some orderings of a baseball team.",
  "body": "Some orderings of a baseball team The alphabetical ordering of the players of a baseball team is one permutation of the set of players. Other orderings of the players' names might be done by batting average, age, or height. The information that determines the ordering is called the key. We would expect that each key would give a different permutation of the names. If there are twenty-five players on the team, there are different permutations of the players.  This number of permutations is huge. In fact it is 15511210043330985984000000, but writing it like this isn't all that instructive, while leaving it as a product as we originally had makes it easier to see where the number comes from. We just need to find a more compact way of writing these products.  "
},
{
  "id": "Definition-Factorial",
  "level": "2",
  "url": "section2_2-permutations.html#Definition-Factorial",
  "type": "Definition",
  "number": "2.2.5",
  "title": "Factorial.",
  "body": "Factorial  Factorial factorial, the product of the first positive integers  If is a positive integer then factorial is the product of the first positive integers and is denoted . Additionally, we define zero factorial, , to be 1.  "
},
{
  "id": "choosing-club-officers",
  "level": "2",
  "url": "section2_2-permutations.html#choosing-club-officers",
  "type": "Example",
  "number": "2.2.6",
  "title": "Choosing Club Officers.",
  "body": "Choosing Club Officers A club of twenty-five members will hold an election for president, secretary, and treasurer in that order. Assume a person can hold only one position. How many ways are there of choosing these three officers? By the rule of products there are ways of making a selection.  "
},
{
  "id": "permutation",
  "level": "2",
  "url": "section2_2-permutations.html#permutation",
  "type": "Definition",
  "number": "2.2.7",
  "title": "Permutation.",
  "body": "Permutation Permutation An ordered arrangement of elements selected from a set of elements, , where no two elements of the arrangement are the same, is called a permutation of objects taken at a time. The total number of such permutations is denoted by .  "
},
{
  "id": "permutations-counting-formula",
  "level": "2",
  "url": "section2_2-permutations.html#permutations-counting-formula",
  "type": "Theorem",
  "number": "2.2.8",
  "title": "Permutation Counting Formula.",
  "body": " Permutation Counting Formula Permutation Counting Formula The number of possible permutations of elements taken from a set of elements is .    Case I: If we have .  Case II: If ,then we have positions to fill using elements and   Position 1 can be filled by any one of elements  Position 2 can be filled by any one of elements     Position k can be filled by any one of elements   Hence, by the rule of products, .   "
},
{
  "id": "more_club_officers",
  "level": "2",
  "url": "section2_2-permutations.html#more_club_officers",
  "type": "Example",
  "number": "2.2.9",
  "title": "Another example of choosing officers.",
  "body": "Another example of choosing officers  A club has eight members eligible to serve as president, vice-president, and treasurer. How many ways are there of choosing these officers?  Solution 1: Using the rule of products. There are eight possible choices for the presidency, seven for the vice-presidency, and six for the office of treasurer. By the rule of products there are ways of choosing these officers.  Solution 2: Using the permutation formula. We want the total number of permutations of eight objects taken three at a time:    "
},
{
  "id": "course-ordering-revisited",
  "level": "2",
  "url": "section2_2-permutations.html#course-ordering-revisited",
  "type": "Example",
  "number": "2.2.10",
  "title": "Course ordering, revisited.",
  "body": " Course ordering, revisited  To count the number of ways to order five courses, we can use the permutation formula. We want the number of permutations of five courses taken five at a time: .  "
},
{
  "id": "ordering-digits",
  "level": "2",
  "url": "section2_2-permutations.html#ordering-digits",
  "type": "Example",
  "number": "2.2.11",
  "title": "Ordering of digits under different conditions.",
  "body": "Ordering of digits under different conditions  Consider only the digits 1, 2, 3, 4, and 5.   How many three-digit numbers can be formed if no repetition of digits can occur?  How many three-digit numbers can be formed if repetition of digits is allowed?  How many three-digit numbers can be formed if only non-consecutive repetition of digits are allowed?   Solutions to (a): Solution 1: Using the rule of products. We have any one of five choices for digit one, any one of four choices for digit two, and three choices for digit three. Hence, different three-digit numbers can be formed.  Solution 2; Using the permutation formula. We want the total number of permutations of five digits taken three at a time: .  Solution to (b): The definition of permutation indicates ...no two elements in each list are the same. Here we are forming what are informally called permutations with repetition these are actually ordered triples or 3-tuples and the permutation formula cannot be used. However, the rule of products still applies. We have any one of five choices for the first digit, five choices for the second, and five for the third. So there are possible different three-digit numbers if repetition is allowed.  Solution to (c): Again, the rule of products applies here. We have any one of five choices for the first digit, but then for the next two digits we have four choices since we are not allowed to repeat the previous digit So there are possible different three-digit numbers if only non-consecutive repetitions are allowed.   "
},
{
  "id": "section2_2-permutations-3-1",
  "level": "2",
  "url": "section2_2-permutations.html#section2_2-permutations-3-1",
  "type": "Exercise",
  "number": "2.2.2.1",
  "title": "",
  "body": "If a raffle has three different prizes and there are 1,000 raffle tickets sold, how many different ways can the prizes be distributed?  "
},
{
  "id": "section2_2-permutations-3-2",
  "level": "2",
  "url": "section2_2-permutations.html#section2_2-permutations-3-2",
  "type": "Exercise",
  "number": "2.2.2.2",
  "title": "",
  "body": "  How many three-digit numbers can be formed from the digits 1, 2, 3 if no repetition of digits is allowed? List the three-digit numbers.  How many two-digit numbers can be formed if no repetition of digits is allowed? List them.  How many two-digit numbers can be obtained if repetition is allowed?   "
},
{
  "id": "section2_2-permutations-3-3",
  "level": "2",
  "url": "section2_2-permutations.html#section2_2-permutations-3-3",
  "type": "Exercise",
  "number": "2.2.2.3",
  "title": "",
  "body": "How many eight-letter words can be formed from the 26 letters in the alphabet? Even without concerning ourselves about whether the words make sense, there are two interpretations of this problem. Answer both.  With repetition:  Without repetition:   "
},
{
  "id": "section2_2-permutations-3-4",
  "level": "2",
  "url": "section2_2-permutations.html#section2_2-permutations-3-4",
  "type": "Exercise",
  "number": "2.2.2.4",
  "title": "",
  "body": "Let be a set with . Determine      "
},
{
  "id": "section2_2-permutations-3-5",
  "level": "2",
  "url": "section2_2-permutations.html#section2_2-permutations-3-5",
  "type": "Exercise",
  "number": "2.2.2.5",
  "title": "",
  "body": "The state finals of a high school track meet involves fifteen schools. How many ways can these schools be listed in the program?  "
},
{
  "id": "section2_2-permutations-3-6",
  "level": "2",
  "url": "section2_2-permutations.html#section2_2-permutations-3-6",
  "type": "Exercise",
  "number": "2.2.2.6",
  "title": "",
  "body": "Consider the three-digit numbers that can be formed from the digits 1, 2, 3, 4, and 5 with no repetition of digits allowed.  a. How many of these are even numbers?  b. How many are greater than 250?  "
},
{
  "id": "section2_2-permutations-3-7",
  "level": "2",
  "url": "section2_2-permutations.html#section2_2-permutations-3-7",
  "type": "Exercise",
  "number": "2.2.2.7",
  "title": "",
  "body": " All 15 players on the Tall U. basketball team are capable of playing any position.  How many ways can the coach at Tall U. fill the five starting positions in a game?  What is the answer if the center must be one of two players?      "
},
{
  "id": "section2_2-permutations-3-8",
  "level": "2",
  "url": "section2_2-permutations.html#section2_2-permutations-3-8",
  "type": "Exercise",
  "number": "2.2.2.8",
  "title": "",
  "body": " How many ways can a gardener plant five different species of shrubs in a circle?  What is the answer if two of the shrubs are the same?  What is the answer if all the shrubs are identical?   "
},
{
  "id": "section2_2-permutations-3-9",
  "level": "2",
  "url": "section2_2-permutations.html#section2_2-permutations-3-9",
  "type": "Exercise",
  "number": "2.2.2.9",
  "title": "",
  "body": "The president of the Math and Computer Club would like to arrange a meeting with six attendees, the president included. There will be three computer science majors and three math majors at the meeting. How many ways can the six people be seated at a circular table if the president does not want people with the same majors to sit next to one other?   "
},
{
  "id": "section2_2-permutations-3-10",
  "level": "2",
  "url": "section2_2-permutations.html#section2_2-permutations-3-10",
  "type": "Exercise",
  "number": "2.2.2.10",
  "title": "",
  "body": "Six people apply for three identical jobs and all are qualified for the positions. Two will work in New York and the other one will work in San Diego. How many ways can the positions be filled? "
},
{
  "id": "section2_2-permutations-3-11",
  "level": "2",
  "url": "section2_2-permutations.html#section2_2-permutations-3-11",
  "type": "Exercise",
  "number": "2.2.2.11",
  "title": "",
  "body": " Let . Determine the cardinality of    What is the answer to the previous part if  If , determine the number of -tuples in , , where each coordinate is different from the other coordinates.      Case 1: . Since the coordinates must be different, this case is impossible.  Case 2: .   "
},
{
  "id": "section2_3-partitions-and-law-of-addition",
  "level": "1",
  "url": "section2_3-partitions-and-law-of-addition.html",
  "type": "Section",
  "number": "2.3",
  "title": "Partitions of Sets and the Law of Addition",
  "body": " Partitions of Sets and the Law of Addition  Partitions  One way of counting the number of students in your class would be to count the number in each row and to add these totals. Of course this problem is simple because there are no duplications, no person is sitting in two different rows. The basic counting technique that you used involves an extremely important first step, namely that of partitioning a set. The concept of a partition must be clearly understood before we proceed further.   Partition Partition A partition of set is a set of one or more nonempty subsets of : , such that every element of is in exactly one set. Symbolically,    If then    The subsets in a partition are often referred to as blocks. Note how our definition allows us to partition infinite sets, and to partition a set into an infinite number of subsets. Of course, if is finite the number of subsets can be no larger than .  Some partitions of a four element set  Let . Examples of partitions of are:          How many others are there, do you suppose?  There are 15 different partitions. The most efficient way to count them all is to classify them by the size of blocks. For example, the partition has block sizes 1, 1, and 2.    Some Integer Partitions Two examples of partitions of set of integers are   and   .   The set of subsets is not a partition because the two subsets have a nonempty intersection. A second example of a non-partition is because one of the blocks, when is empty.  One could also think of the concept of partitioning a set as a packaging problem. How can one package a carton of, say, twenty-four cans? We could use: four six-packs, three eight-packs, two twelve-packs, etc. In all cases: (a) the sum of all cans in all packs must be twenty-four, and (b) a can must be in one and only one pack.   Addition Laws  The Basic Law Of Addition: Basic Law Of Addition: If is a finite set, and if is a partition of , then    The basic law of addition can be rephrased as follows: If is a finite set where and where whenever , then   Counting All Students The number of students in a class could be determined by adding the numbers of students who are freshmen, sophomores, juniors, and seniors, and those who belong to none of these categories. However, you probably couldn't add the students by major, since some students may have double majors.  Counting Students in Disjoint Classes The sophomore computer science majors were told they must take one and only one of the following courses that are open only to them: Cryptography, Data Structures, or Javascript. The numbers in each course, respectively, for sophomore CS majors, were 75, 60, 55. How many sophomore CS majors are there? The Law of Addition applies here. There are exactly CS majors since the rosters of the three courses listed above would be a partition of the CS majors.   Counting Students in Non-disjoint Classes It was determined that all junior computer science majors take at least one of the following courses: Algorithms, Logic Design, and Compiler Construction. Assume the number in each course was was 75, 60 and 55, respectively for the three courses listed. Further investigation indicated ten juniors took all three courses, twenty-five took Algorithms and Logic Design, twelve took Algorithms and Compiler Construction, and fifteen took Logic Design and Compiler Construction. How many junior C.S. majors are there?  was a simple application of the law of addition, however in this example some students are taking two or more courses, so a simple application of the law of addition would lead to double or triple counting. We rephrase information in the language of sets to describe the situation more explicitly.   = the set of all junior computer science majors   = the set of all junior computer science majors who took Algorithms   = the set of all junior computer science majors who took Logic Design   = the set of all junior computer science majors who took Compiler Construction  Since all junior CS majors must take at least one of the courses, the number we want is:   A Venn diagram is helpful to visualize the problem. In this case the universal set can stand for all students in the university.   Venn Diagram   A three set Venn Diagram used to solve the Junior CS student example.     We see that the whole universal set is naturally partitioned into subsets that are labeled by the numbers 1 through 8, and the set is partitioned into subsets labeled 1 through 7. The region labeled 8 represents all students who are not junior CS majors. Note also that students in the subsets labeled 2, 3, and 4 are double counted, and those in the subset labeled 1 are triple counted. To adjust, we must subtract the numbers in regions 2, 3 and 4. This can be done by subtracting the numbers in the intersections of each pair of sets. However, the individuals in region 1 will have been removed three times, just as they had been originally added three times. Therefore, we must finally add their number back in.    The ideas used in this latest example gives rise to a basic counting technique:   Laws of Inclusion-Exclusion  Inclusion-Exclusion, Laws of   Given finite sets , then  The Two Set Inclusion-Exclusion Law:  The Three Set Inclusion-Exclusion Law:     The inclusion-exclusion laws extend to more than three sets, as will be explored in the exercises.  In this section we saw that being able to partition a set into disjoint subsets gives rise to a handy counting technique. Given a set, there are many ways to partition depending on what one would wish to accomplish. One natural partitioning of sets is apparent when one draws a Venn diagram. This particular partitioning of a set will be discussed further in Chapters 4 and 13.    Exercises for Section 2.3  List all partitions of the set .     Which of the following collections of subsets of the plane, , are partitions?    The set of all circles in  The set of all circles in centered at the origin together with the set    A student, on an exam paper, defined the term partition the following way: Let be a set. A partition of is any set of nonempty subsets of such that each element of is in one of the subsets. Is this definition correct? Why?  No. By this definition it is possible that an element of might belong to two of the subsets.   Let and be subsets of a set . Draw a Venn diagram of this situation and shade in the subsets , , , and . Use the resulting diagram and the definition of partition to convince yourself that the subset of these four subsets that are nonempty form a partition of .   Show that is a partition of . Describe this partition using only words. The first subset is all the even integers and the second is all the odd integers. These two sets do not intersect and they cover the integers completely.    A group of 30 students were surveyed and it was found that 18 of them took Calculus and 12 took Physics. If all students took at least one course, how many took both Calculus and Physics? Illustrate using a Venn diagram.  What is the answer to the question in part (a) if five students did not take either of the two courses? Illustrate using a Venn diagram.      A survey of 90 people, 47 of them played tennis and 42 of them swam. If 17 of the them participated in both activities, how many of them participated in neither? Since 17 participated in both activities, 30 of the tennis players only played tennis and 25 of the swimmers only swam. Therefore, of those who were surveyed participated in an activity and so 18 did not.   A survey of 300 people found that 60 owned an iPhone, 75 owned a Blackberry, and 30 owned an Android phone. Furthermore, 40 owned both an iPhone and a Blackberry, 12 owned both an iPhone and an Android phone, and 8 owned a Blackberry and an Android phone. Finally, 3 owned all three phones.   How many people surveyed owned none of the three phones?  How many people owned a Blackberry but not an iPhone?  How many owned a Blackberry but not an Android?     Regarding the ,  Use the two set inclusion-exclusion law to derive the three set inclusion-exclusion law. Note: A knowledge of basic set laws is needed for this exercise.  State and derive the inclusion-exclusion law for four sets.  We assume that .   The law for four sets is   Derivation:    To complete your spring schedule, you must add Calculus and Physics. At 9:30, there are three Calculus sections and two Physics sections; while at 11:30, there are two Calculus sections and three Physics sections. How many ways can you complete your schedule if your only open periods are 9:30 and 11:30?  The definition of given in Chapter 1 is awkward. If we use the definition to list elements in , we will have duplications such as , and Try to write a more precise definition of the rational numbers so that there is no duplication of elements.  Partition the set of fractions into blocks, where each block contains fractions that are numerically equivalent. Describe how you would determine whether two fractions belong to the same block. Redefine the rational numbers to be this partition. Each rational number is a set of fractions.   "
},
{
  "id": "partition",
  "level": "2",
  "url": "section2_3-partitions-and-law-of-addition.html#partition",
  "type": "Definition",
  "number": "2.3.1",
  "title": "Partition.",
  "body": " Partition Partition A partition of set is a set of one or more nonempty subsets of : , such that every element of is in exactly one set. Symbolically,    If then   "
},
{
  "id": "some-partitions-4",
  "level": "2",
  "url": "section2_3-partitions-and-law-of-addition.html#some-partitions-4",
  "type": "Example",
  "number": "2.3.2",
  "title": "Some partitions of a four element set.",
  "body": "Some partitions of a four element set  Let . Examples of partitions of are:          How many others are there, do you suppose?  There are 15 different partitions. The most efficient way to count them all is to classify them by the size of blocks. For example, the partition has block sizes 1, 1, and 2.   "
},
{
  "id": "some-integer-partitions",
  "level": "2",
  "url": "section2_3-partitions-and-law-of-addition.html#some-integer-partitions",
  "type": "Example",
  "number": "2.3.3",
  "title": "Some Integer Partitions.",
  "body": "Some Integer Partitions Two examples of partitions of set of integers are   and   .   The set of subsets is not a partition because the two subsets have a nonempty intersection. A second example of a non-partition is because one of the blocks, when is empty. "
},
{
  "id": "basic-law-addition",
  "level": "2",
  "url": "section2_3-partitions-and-law-of-addition.html#basic-law-addition",
  "type": "Theorem",
  "number": "2.3.4",
  "title": "The Basic Law Of Addition:.",
  "body": "The Basic Law Of Addition: Basic Law Of Addition: If is a finite set, and if is a partition of , then   "
},
{
  "id": "counting-all-students",
  "level": "2",
  "url": "section2_3-partitions-and-law-of-addition.html#counting-all-students",
  "type": "Example",
  "number": "2.3.5",
  "title": "Counting All Students.",
  "body": "Counting All Students The number of students in a class could be determined by adding the numbers of students who are freshmen, sophomores, juniors, and seniors, and those who belong to none of these categories. However, you probably couldn't add the students by major, since some students may have double majors. "
},
{
  "id": "student-counting-disjoint",
  "level": "2",
  "url": "section2_3-partitions-and-law-of-addition.html#student-counting-disjoint",
  "type": "Example",
  "number": "2.3.6",
  "title": "Counting Students in Disjoint Classes.",
  "body": "Counting Students in Disjoint Classes The sophomore computer science majors were told they must take one and only one of the following courses that are open only to them: Cryptography, Data Structures, or Javascript. The numbers in each course, respectively, for sophomore CS majors, were 75, 60, 55. How many sophomore CS majors are there? The Law of Addition applies here. There are exactly CS majors since the rosters of the three courses listed above would be a partition of the CS majors.  "
},
{
  "id": "student-counting-nondisjoint",
  "level": "2",
  "url": "section2_3-partitions-and-law-of-addition.html#student-counting-nondisjoint",
  "type": "Example",
  "number": "2.3.7",
  "title": "Counting Students in Non-disjoint Classes.",
  "body": "Counting Students in Non-disjoint Classes It was determined that all junior computer science majors take at least one of the following courses: Algorithms, Logic Design, and Compiler Construction. Assume the number in each course was was 75, 60 and 55, respectively for the three courses listed. Further investigation indicated ten juniors took all three courses, twenty-five took Algorithms and Logic Design, twelve took Algorithms and Compiler Construction, and fifteen took Logic Design and Compiler Construction. How many junior C.S. majors are there?  was a simple application of the law of addition, however in this example some students are taking two or more courses, so a simple application of the law of addition would lead to double or triple counting. We rephrase information in the language of sets to describe the situation more explicitly.   = the set of all junior computer science majors   = the set of all junior computer science majors who took Algorithms   = the set of all junior computer science majors who took Logic Design   = the set of all junior computer science majors who took Compiler Construction  Since all junior CS majors must take at least one of the courses, the number we want is:   A Venn diagram is helpful to visualize the problem. In this case the universal set can stand for all students in the university.   Venn Diagram   A three set Venn Diagram used to solve the Junior CS student example.     We see that the whole universal set is naturally partitioned into subsets that are labeled by the numbers 1 through 8, and the set is partitioned into subsets labeled 1 through 7. The region labeled 8 represents all students who are not junior CS majors. Note also that students in the subsets labeled 2, 3, and 4 are double counted, and those in the subset labeled 1 are triple counted. To adjust, we must subtract the numbers in regions 2, 3 and 4. This can be done by subtracting the numbers in the intersections of each pair of sets. However, the individuals in region 1 will have been removed three times, just as they had been originally added three times. Therefore, we must finally add their number back in.   "
},
{
  "id": "inclusion-exclusion",
  "level": "2",
  "url": "section2_3-partitions-and-law-of-addition.html#inclusion-exclusion",
  "type": "Theorem",
  "number": "2.3.9",
  "title": "Laws of Inclusion-Exclusion.",
  "body": " Laws of Inclusion-Exclusion  Inclusion-Exclusion, Laws of   Given finite sets , then  The Two Set Inclusion-Exclusion Law:  The Three Set Inclusion-Exclusion Law:    "
},
{
  "id": "exercises-2-3-2",
  "level": "2",
  "url": "section2_3-partitions-and-law-of-addition.html#exercises-2-3-2",
  "type": "Exercise",
  "number": "2.3.3.1",
  "title": "",
  "body": "List all partitions of the set .    "
},
{
  "id": "exercises-2-3-3",
  "level": "2",
  "url": "section2_3-partitions-and-law-of-addition.html#exercises-2-3-3",
  "type": "Exercise",
  "number": "2.3.3.2",
  "title": "",
  "body": "Which of the following collections of subsets of the plane, , are partitions?    The set of all circles in  The set of all circles in centered at the origin together with the set   "
},
{
  "id": "exercises-2-3-4",
  "level": "2",
  "url": "section2_3-partitions-and-law-of-addition.html#exercises-2-3-4",
  "type": "Exercise",
  "number": "2.3.3.3",
  "title": "",
  "body": "A student, on an exam paper, defined the term partition the following way: Let be a set. A partition of is any set of nonempty subsets of such that each element of is in one of the subsets. Is this definition correct? Why?  No. By this definition it is possible that an element of might belong to two of the subsets.  "
},
{
  "id": "exercises-2-3-5",
  "level": "2",
  "url": "section2_3-partitions-and-law-of-addition.html#exercises-2-3-5",
  "type": "Exercise",
  "number": "2.3.3.4",
  "title": "",
  "body": "Let and be subsets of a set . Draw a Venn diagram of this situation and shade in the subsets , , , and . Use the resulting diagram and the definition of partition to convince yourself that the subset of these four subsets that are nonempty form a partition of .  "
},
{
  "id": "exercises-2-3-6",
  "level": "2",
  "url": "section2_3-partitions-and-law-of-addition.html#exercises-2-3-6",
  "type": "Exercise",
  "number": "2.3.3.5",
  "title": "",
  "body": "Show that is a partition of . Describe this partition using only words. The first subset is all the even integers and the second is all the odd integers. These two sets do not intersect and they cover the integers completely.  "
},
{
  "id": "exercises-2-3-7",
  "level": "2",
  "url": "section2_3-partitions-and-law-of-addition.html#exercises-2-3-7",
  "type": "Exercise",
  "number": "2.3.3.6",
  "title": "",
  "body": " A group of 30 students were surveyed and it was found that 18 of them took Calculus and 12 took Physics. If all students took at least one course, how many took both Calculus and Physics? Illustrate using a Venn diagram.  What is the answer to the question in part (a) if five students did not take either of the two courses? Illustrate using a Venn diagram.    "
},
{
  "id": "exercises-2-3-8",
  "level": "2",
  "url": "section2_3-partitions-and-law-of-addition.html#exercises-2-3-8",
  "type": "Exercise",
  "number": "2.3.3.7",
  "title": "",
  "body": " A survey of 90 people, 47 of them played tennis and 42 of them swam. If 17 of the them participated in both activities, how many of them participated in neither? Since 17 participated in both activities, 30 of the tennis players only played tennis and 25 of the swimmers only swam. Therefore, of those who were surveyed participated in an activity and so 18 did not.  "
},
{
  "id": "exercises-2-3-9",
  "level": "2",
  "url": "section2_3-partitions-and-law-of-addition.html#exercises-2-3-9",
  "type": "Exercise",
  "number": "2.3.3.8",
  "title": "",
  "body": "A survey of 300 people found that 60 owned an iPhone, 75 owned a Blackberry, and 30 owned an Android phone. Furthermore, 40 owned both an iPhone and a Blackberry, 12 owned both an iPhone and an Android phone, and 8 owned a Blackberry and an Android phone. Finally, 3 owned all three phones.   How many people surveyed owned none of the three phones?  How many people owned a Blackberry but not an iPhone?  How many owned a Blackberry but not an Android?   "
},
{
  "id": "exercises-2-3-10",
  "level": "2",
  "url": "section2_3-partitions-and-law-of-addition.html#exercises-2-3-10",
  "type": "Exercise",
  "number": "2.3.3.9",
  "title": "",
  "body": " Regarding the ,  Use the two set inclusion-exclusion law to derive the three set inclusion-exclusion law. Note: A knowledge of basic set laws is needed for this exercise.  State and derive the inclusion-exclusion law for four sets.  We assume that .   The law for four sets is   Derivation:   "
},
{
  "id": "exercises-2-3-11",
  "level": "2",
  "url": "section2_3-partitions-and-law-of-addition.html#exercises-2-3-11",
  "type": "Exercise",
  "number": "2.3.3.10",
  "title": "",
  "body": "To complete your spring schedule, you must add Calculus and Physics. At 9:30, there are three Calculus sections and two Physics sections; while at 11:30, there are two Calculus sections and three Physics sections. How many ways can you complete your schedule if your only open periods are 9:30 and 11:30? "
},
{
  "id": "exercises-2-3-12",
  "level": "2",
  "url": "section2_3-partitions-and-law-of-addition.html#exercises-2-3-12",
  "type": "Exercise",
  "number": "2.3.3.11",
  "title": "",
  "body": "The definition of given in Chapter 1 is awkward. If we use the definition to list elements in , we will have duplications such as , and Try to write a more precise definition of the rational numbers so that there is no duplication of elements.  Partition the set of fractions into blocks, where each block contains fractions that are numerically equivalent. Describe how you would determine whether two fractions belong to the same block. Redefine the rational numbers to be this partition. Each rational number is a set of fractions. "
},
{
  "id": "section2_4-combinations-and-the-binomial-theorem",
  "level": "1",
  "url": "section2_4-combinations-and-the-binomial-theorem.html",
  "type": "Section",
  "number": "2.4",
  "title": "Combinations and the Binomial Theorem",
  "body": " Combinations and the Binomial Theorem   Combinations Combinations  In Section 2.1 we investigated the most basic concept in combinatorics, namely, the rule of products. It is of paramount importance to keep this fundamental rule in mind. In Section 2.2 we saw that a subclass of rule-of-products problems, namely, permutations, and we derived a formula as a computational aid to assist us. In this section we will investigate another counting formula, one that is used to count combinations, which are subsets of a certain size.  In many rule-of-products applications the permutation or order is important, as in the situation of the order of putting on one's socks and shoes; in some cases it is not important, as in placing coins in a vending machine or in the listing of the elements of a set. Order is important in permutations. Order is not important in combinations.  Counting Permutations How many different ways are there to permute three letters from the set ? From the there are different orderings of three letters from   Counting with No Order  How many ways can we select a set of three letters from ? Note here that we are not concerned with the order of the three letters. By trial and error, abc, abd, acd, and bcd are the only listings possible. To repeat, we were looking for all three-element subsets of the set . Order is not important in sets. The notation for choosing 3 elements from 4 is most commonly or occasionally , either of which is read 4 choose 3 or the number of combinations for four objects taken three at a time.   Binomial Coefficient  Binomial Coefficient    choose , the number of element subsets of an element set.    Let and be nonnegative integers. The binomial coefficient represents the number of combinations of objects taken at a time, and is read choose .    We would now like to investigate the relationship between permutation and combination problems in order to derive a formula for  Let us reconsider the . There are different orderings for each of the three-element subsets. The table below lists each subset of and all permutations of each subset on the same line. .  Hence,  We generalize this result in the following theorem:  Binomial Coefficient Formula Binomial Coefficient Formula   If and are nonnegative integers with , then the number -element subsets of an element set is equal to .  Proof 1: There are ways of ordering the elements of any element set. Therefore, .  Proof 2: To construct a permutation of objects from a set of elements, we can first choose one of the subsets of objects and second, choose one of the permutations of those objects. By the rule of products, and solving for we get the desired formula.   Flipping Coins Assume an evenly balanced coin is tossed five times. In how many ways can three heads be obtained? This is a combination problem, because the order in which the heads appear does not matter. We can think of this as a situation involving sets by considering the set of flips of the coin, 1 through 5, in which heads comes up. The number of ways to get three heads is .  Counting five ordered flips two ways  We determine the total number of ordered ways a fair coin can land if tossed five consecutive times. The five tosses can produce any one of the following mutually exclusive, disjoint events: 5 heads, 4 heads, 3 heads, 2 heads, 1 head, or 0 heads. For example, by the previous example, there are sequences in which three heads appear. Counting the other possibilities in the same way, by the law of addition we have: ways to observe the five flips.  Of course, we could also have applied the extended rule of products, and since there are two possible outcomes for each of the five tosses, we have ways.  You might think that counting something two ways is a waste of time but solving a problem two different ways often is instructive and leads to valuable insights. In this case, it suggests a general formula for the sum . In the case of , we get so it is reasonable to expect that the general sum is , and it is. A logical argument to prove the general statment simply involves generalizing the previous example to coin flips.  A Committee of Five A committee usually starts as an unstructured set of people selected from a larger membership. Therefore, a committee can be thought of as a combination. If a club of 25 members has a five-member social committee, there are different possible social committees. If any structure or restriction is placed on the way the social committee is to be selected, the number of possible committees will probably change. For example, if the club has a rule that the treasurer must be on the social committee, then the number of possibilities is reduced to .  If we further require that a chairperson other than the treasurer be selected for the social committee, we have different possible social committees. The choice of the four non-treasurers accounts for the factor while the need to choose a chairperson accounts for the 4.  Binomial Coefficients - Extreme Cases By simply applying the definition of a as a number of subsets we see that there is way of choosing a combination of zero elements from a set of . In addition, we see that there is way of choosing a combination of elements from a set of .  We could compute these values using the formula we have developed, but no arithmetic is really needed here. Other properties of binomial coefficients that can be derived using the subset definition will be seen in the exercises     The Binomial Theorem  The binomial theorem gives us a formula for expanding , where is a nonnegative integer. The coefficients of this expansion are precisely the binomial coefficients that we have used to count combinations. Using high school algebra we can expand the expression for integers from 0 to 5:    In the expansion of we note that the coefficient of the third term is , and that of the sixth term is . We can rewrite the expansion as .  In summary, in the expansion of we note:   The first term is and the last term is .  With each successive term, exponents of decrease by 1 as those of increase by 1. For any term the sum of the exponents is .  The coefficient of is .  The triangular array of binomial coefficients is called Pascal's triangle after the seventeenth-century French mathematician Blaise Pascal. Note that each number in the triangle other than the 1's at the ends of each row is the sum of the two numbers to the right and left of it in the row above.  The Binomial Theorem Binomial Theorem, The  If , and and are numbers, then .   This theorem can be proven using a logical procedure called mathematical induction, which will be introduced in .   Identifying a term in an expansion Find the third term in the expansion of . The third term, when , is .   A Binomial Expansion Expand . If we replace and in the Binomial Theorem with and , respectively, we get .    SageMath Note SageMath Note bridge hands  A bridge hand is a 13 element subset of a standard 52 card deck. The order in which the cards come to the player doesn't matter. From the point of view of a single player, the number of possible bridge hands is , which can be easily computed with .   In bridge, the location of a hand in relation to the dealer has some bearing on the game. An even truer indication of the number of possible hands takes into account player's possible hand. It is customary to refer to bridge positions as West, North, East and South. We can apply the rule of product to get the total number of bridge hands with the following logic. West can get any of the hands identified above. Then North get 13 of the remaining 39 cards and so has possible hands. East then gets 13 of the 26 remaining cards, which has possibilities. South gets the remaining cards. Therefore the number of bridge hands is computed using the Product Rule.     The judiciary committee at a college is made up of three faculty members and four students. If ten faculty members and 25 students have been nominated for the committee, how many judiciary committees could be formed at this point?    Suppose that a single character is stored in a computer using eight bits.  a. How many bit patterns have exactly three 1's?  b. How many bit patterns have at least two 1's?  Think of the set of positions that contain a 1 to turn this into a question about sets. (a) (b)  How many subsets of contain at least seven elements?     The congressional committees on mathematics and computer science are made up of five representatives each, and a congressional rule is that the two committees must be disjoint. If there are 385 members of congress, how many ways could the committees be selected?   Lattice Paths The image below shows a 6 by 6 grid and an example of a lattice path that could be taken from to , which is a path taken by traveling along grid lines going only to the right and up. How many different lattice paths are there of this type? Generalize to the case of lattice paths from to for any nonnegative integers and .   A lattice path   An illustration of a lattice path    Think of each path as a sequence of instructions to go right (R) and up (U). Each path can be described as a sequence or R's and U's with exactly six of each. The six positions in which R's could be placed can be selected from the twelve positions in the sequence ways. We can generalize this logic and see that there are paths from to .  How many of the lattice paths from to pass through as the one in does?  A poker game is played with 52 cards. At the start of a game, each player gets five of the cards. The order in which cards are dealt doesn't matter.  How many hands of five cards are possible?  If there are four people playing, how many initial five-card hands are possible, taking into account all players and their positions at the table? Position with respect to the dealer does matter.         A flush in a five-card poker hand is five cards of the same suit. The suits are spades, clubs, diamonds and hearts. How many spade flushes are possible in a 52-card deck? How many flushes are possible in any suit?  How many five-card poker hands using 52 cards contain exactly two aces?   In poker, a full house is three-of-a-kind and a pair in one hand; for example, three fives and two queens. How many full houses are possible from a 52-card deck? You can use the sage cell in the to do this calculation, but also write your answer in terms of binomial coefficients.  A class of twelve computer science students are to be divided into three groups of 3, 4, and 5 students to work on a project. How many ways can this be done if every student is to be in exactly one group?   Explain in words why the following equalities are true based on number of subsets, and then verify the equalities using the formula for binomial coefficients.     ,    There are ten points, on a plane, no three on the same line.   How many lines are determined by the points?  How many triangles are determined by the points?         How many ways can persons be grouped into pairs when is even? Assume the order of the pairs matters, but not the order within the pairs. For example, if , the six different groupings would be    Use the binomial theorem to prove that if is a finite set, then Assume . If we let in the Binomial Theorem, we obtain , with the right side of the equality counting all subsets of containing elements. Hence      A state's lottery involves choosing six different numbers out of a possible 36. How many ways can a person choose six numbers?  What is the probability of a person winning with one bet?   Use the binomial theorem to calculate .    In the card game Blackjack, there are one or more players and a dealer. Initially, each player is dealt two cards and the dealer is dealt one card down and one facing up. As in bridge, the order of the hands, but not the order of the cards in the hands, matters. Starting with a single 52 card deck, and three players, how many ways can the first two cards be dealt out? You can use the sage cell in the to do this calculation.   "
},
{
  "id": "counting-permuations-multiple-ways",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#counting-permuations-multiple-ways",
  "type": "Example",
  "number": "2.4.1",
  "title": "Counting Permutations.",
  "body": "Counting Permutations How many different ways are there to permute three letters from the set ? From the there are different orderings of three letters from  "
},
{
  "id": "four-choose-three",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#four-choose-three",
  "type": "Example",
  "number": "2.4.2",
  "title": "Counting with No Order.",
  "body": "Counting with No Order  How many ways can we select a set of three letters from ? Note here that we are not concerned with the order of the three letters. By trial and error, abc, abd, acd, and bcd are the only listings possible. To repeat, we were looking for all three-element subsets of the set . Order is not important in sets. The notation for choosing 3 elements from 4 is most commonly or occasionally , either of which is read 4 choose 3 or the number of combinations for four objects taken three at a time.  "
},
{
  "id": "binomial-coefficient",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#binomial-coefficient",
  "type": "Definition",
  "number": "2.4.3",
  "title": "Binomial Coefficient.",
  "body": "Binomial Coefficient  Binomial Coefficient    choose , the number of element subsets of an element set.    Let and be nonnegative integers. The binomial coefficient represents the number of combinations of objects taken at a time, and is read choose .   "
},
{
  "id": "binomial-coefficient-formula",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#binomial-coefficient-formula",
  "type": "Theorem",
  "number": "2.4.4",
  "title": "Binomial Coefficient Formula.",
  "body": "Binomial Coefficient Formula Binomial Coefficient Formula   If and are nonnegative integers with , then the number -element subsets of an element set is equal to .  Proof 1: There are ways of ordering the elements of any element set. Therefore, .  Proof 2: To construct a permutation of objects from a set of elements, we can first choose one of the subsets of objects and second, choose one of the permutations of those objects. By the rule of products, and solving for we get the desired formula.  "
},
{
  "id": "flipping-coins",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#flipping-coins",
  "type": "Example",
  "number": "2.4.5",
  "title": "Flipping Coins.",
  "body": "Flipping Coins Assume an evenly balanced coin is tossed five times. In how many ways can three heads be obtained? This is a combination problem, because the order in which the heads appear does not matter. We can think of this as a situation involving sets by considering the set of flips of the coin, 1 through 5, in which heads comes up. The number of ways to get three heads is . "
},
{
  "id": "five-flips",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#five-flips",
  "type": "Example",
  "number": "2.4.6",
  "title": "Counting five ordered flips two ways.",
  "body": "Counting five ordered flips two ways  We determine the total number of ordered ways a fair coin can land if tossed five consecutive times. The five tosses can produce any one of the following mutually exclusive, disjoint events: 5 heads, 4 heads, 3 heads, 2 heads, 1 head, or 0 heads. For example, by the previous example, there are sequences in which three heads appear. Counting the other possibilities in the same way, by the law of addition we have: ways to observe the five flips.  Of course, we could also have applied the extended rule of products, and since there are two possible outcomes for each of the five tosses, we have ways. "
},
{
  "id": "committee-of-five",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#committee-of-five",
  "type": "Example",
  "number": "2.4.7",
  "title": "A Committee of Five.",
  "body": "A Committee of Five A committee usually starts as an unstructured set of people selected from a larger membership. Therefore, a committee can be thought of as a combination. If a club of 25 members has a five-member social committee, there are different possible social committees. If any structure or restriction is placed on the way the social committee is to be selected, the number of possible committees will probably change. For example, if the club has a rule that the treasurer must be on the social committee, then the number of possibilities is reduced to .  If we further require that a chairperson other than the treasurer be selected for the social committee, we have different possible social committees. The choice of the four non-treasurers accounts for the factor while the need to choose a chairperson accounts for the 4. "
},
{
  "id": "extreme-binomial-cases",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#extreme-binomial-cases",
  "type": "Example",
  "number": "2.4.8",
  "title": "Binomial Coefficients - Extreme Cases.",
  "body": "Binomial Coefficients - Extreme Cases By simply applying the definition of a as a number of subsets we see that there is way of choosing a combination of zero elements from a set of . In addition, we see that there is way of choosing a combination of elements from a set of .  We could compute these values using the formula we have developed, but no arithmetic is really needed here. Other properties of binomial coefficients that can be derived using the subset definition will be seen in the exercises  "
},
{
  "id": "binomial-theorem",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#binomial-theorem",
  "type": "Theorem",
  "number": "2.4.9",
  "title": "The Binomial Theorem.",
  "body": "The Binomial Theorem Binomial Theorem, The  If , and and are numbers, then .   This theorem can be proven using a logical procedure called mathematical induction, which will be introduced in .  "
},
{
  "id": "term-in-an-expansion",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#term-in-an-expansion",
  "type": "Example",
  "number": "2.4.10",
  "title": "Identifying a term in an expansion.",
  "body": "Identifying a term in an expansion Find the third term in the expansion of . The third term, when , is .  "
},
{
  "id": "a-full-expansion",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#a-full-expansion",
  "type": "Example",
  "number": "2.4.11",
  "title": "A Binomial Expansion.",
  "body": "A Binomial Expansion Expand . If we replace and in the Binomial Theorem with and , respectively, we get .  "
},
{
  "id": "exercises-2-4-1",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#exercises-2-4-1",
  "type": "Exercise",
  "number": "2.4.4.1",
  "title": "",
  "body": "The judiciary committee at a college is made up of three faculty members and four students. If ten faculty members and 25 students have been nominated for the committee, how many judiciary committees could be formed at this point?   "
},
{
  "id": "exercises-2-4-2",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#exercises-2-4-2",
  "type": "Exercise",
  "number": "2.4.4.2",
  "title": "",
  "body": "Suppose that a single character is stored in a computer using eight bits.  a. How many bit patterns have exactly three 1's?  b. How many bit patterns have at least two 1's?  Think of the set of positions that contain a 1 to turn this into a question about sets. (a) (b) "
},
{
  "id": "exercises-2-4-3",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#exercises-2-4-3",
  "type": "Exercise",
  "number": "2.4.4.3",
  "title": "",
  "body": "How many subsets of contain at least seven elements?    "
},
{
  "id": "exercises-2-4-4",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#exercises-2-4-4",
  "type": "Exercise",
  "number": "2.4.4.4",
  "title": "",
  "body": "The congressional committees on mathematics and computer science are made up of five representatives each, and a congressional rule is that the two committees must be disjoint. If there are 385 members of congress, how many ways could the committees be selected?  "
},
{
  "id": "exercises-2-4-5",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#exercises-2-4-5",
  "type": "Exercise",
  "number": "2.4.4.5",
  "title": "",
  "body": "Lattice Paths The image below shows a 6 by 6 grid and an example of a lattice path that could be taken from to , which is a path taken by traveling along grid lines going only to the right and up. How many different lattice paths are there of this type? Generalize to the case of lattice paths from to for any nonnegative integers and .   A lattice path   An illustration of a lattice path    Think of each path as a sequence of instructions to go right (R) and up (U). Each path can be described as a sequence or R's and U's with exactly six of each. The six positions in which R's could be placed can be selected from the twelve positions in the sequence ways. We can generalize this logic and see that there are paths from to . "
},
{
  "id": "exercises-2-4-6",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#exercises-2-4-6",
  "type": "Exercise",
  "number": "2.4.4.6",
  "title": "",
  "body": "How many of the lattice paths from to pass through as the one in does? "
},
{
  "id": "exercises-2-4-7",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#exercises-2-4-7",
  "type": "Exercise",
  "number": "2.4.4.7",
  "title": "",
  "body": "A poker game is played with 52 cards. At the start of a game, each player gets five of the cards. The order in which cards are dealt doesn't matter.  How many hands of five cards are possible?  If there are four people playing, how many initial five-card hands are possible, taking into account all players and their positions at the table? Position with respect to the dealer does matter.        "
},
{
  "id": "exercises-2-4-8",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#exercises-2-4-8",
  "type": "Exercise",
  "number": "2.4.4.8",
  "title": "",
  "body": "A flush in a five-card poker hand is five cards of the same suit. The suits are spades, clubs, diamonds and hearts. How many spade flushes are possible in a 52-card deck? How many flushes are possible in any suit? "
},
{
  "id": "exercises-2-4-9",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#exercises-2-4-9",
  "type": "Exercise",
  "number": "2.4.4.9",
  "title": "",
  "body": "How many five-card poker hands using 52 cards contain exactly two aces?  "
},
{
  "id": "exercises-2-4-10",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#exercises-2-4-10",
  "type": "Exercise",
  "number": "2.4.4.10",
  "title": "",
  "body": "In poker, a full house is three-of-a-kind and a pair in one hand; for example, three fives and two queens. How many full houses are possible from a 52-card deck? You can use the sage cell in the to do this calculation, but also write your answer in terms of binomial coefficients. "
},
{
  "id": "exercises-2-4-11",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#exercises-2-4-11",
  "type": "Exercise",
  "number": "2.4.4.11",
  "title": "",
  "body": "A class of twelve computer science students are to be divided into three groups of 3, 4, and 5 students to work on a project. How many ways can this be done if every student is to be in exactly one group?  "
},
{
  "id": "exercises-2-4-12",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#exercises-2-4-12",
  "type": "Exercise",
  "number": "2.4.4.12",
  "title": "",
  "body": "Explain in words why the following equalities are true based on number of subsets, and then verify the equalities using the formula for binomial coefficients.     ,   "
},
{
  "id": "exercises-2-4-13",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#exercises-2-4-13",
  "type": "Exercise",
  "number": "2.4.4.13",
  "title": "",
  "body": "There are ten points, on a plane, no three on the same line.   How many lines are determined by the points?  How many triangles are determined by the points?        "
},
{
  "id": "exercises-2-4-14",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#exercises-2-4-14",
  "type": "Exercise",
  "number": "2.4.4.14",
  "title": "",
  "body": "How many ways can persons be grouped into pairs when is even? Assume the order of the pairs matters, but not the order within the pairs. For example, if , the six different groupings would be   "
},
{
  "id": "exercises-2-4-15",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#exercises-2-4-15",
  "type": "Exercise",
  "number": "2.4.4.15",
  "title": "",
  "body": "Use the binomial theorem to prove that if is a finite set, then Assume . If we let in the Binomial Theorem, we obtain , with the right side of the equality counting all subsets of containing elements. Hence   "
},
{
  "id": "exercises-2-4-16",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#exercises-2-4-16",
  "type": "Exercise",
  "number": "2.4.4.16",
  "title": "",
  "body": "  A state's lottery involves choosing six different numbers out of a possible 36. How many ways can a person choose six numbers?  What is the probability of a person winning with one bet?  "
},
{
  "id": "exercises-2-4-17",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#exercises-2-4-17",
  "type": "Exercise",
  "number": "2.4.4.17",
  "title": "",
  "body": "Use the binomial theorem to calculate .   "
},
{
  "id": "exercises-2-4-18",
  "level": "2",
  "url": "section2_4-combinations-and-the-binomial-theorem.html#exercises-2-4-18",
  "type": "Exercise",
  "number": "2.4.4.18",
  "title": "",
  "body": "In the card game Blackjack, there are one or more players and a dealer. Initially, each player is dealt two cards and the dealer is dealt one card down and one facing up. As in bridge, the order of the hands, but not the order of the cards in the hands, matters. Starting with a single 52 card deck, and three players, how many ways can the first two cards be dealt out? You can use the sage cell in the to do this calculation. "
},
{
  "id": "section2_5-counting-with-repetition-or-indistinguishable-objects",
  "level": "1",
  "url": "section2_5-counting-with-repetition-or-indistinguishable-objects.html",
  "type": "Section",
  "number": "2.5",
  "title": "Counting with Repetition or Indistinguishable Objects",
  "body": " Counting with Repetition or Indistinguishable Objects   Tuples or Permutations with Repetition Tuples with Repetition Permutations with Repetition  We have already seen in that if we want to choose an ordered list from a set of items but allow items to be chosen repeatedly, this doesn't follow the formal definition of a permutation. Instead we are forming ordered tuples or permutations with repetition and is applied.  Counting with Order and Repetition  How many strings of length can be formed from the uppercase letters of the English alphabet?  Each of the positions in the string has 26 possibilities, so by there are strings.      Combinations with Repetition Combinations with Repetition  Suppose we don't care about the order and items can be repeated or items are indistinguishable from each other.   Consider the following counting problem:   Take a moment to think about how you might solve this problem. You may assume that it is acceptable to give a kid no cookies. Also, the order in which you give out the cookies does not matter.  You might guess that each cookie can be assigned to one of four possible kids and by the answer should be . However, this doesn't work. Consider a few possible outcomes: we could assign the first six cookies to kid A, and the seventh cookie to kid B. Another outcome would assign the first cookie to kid B and the six remaining cookies to kid A. Both outcomes are included in the answer. But because the cookies are identical, both of those outcomes are really the same, kid A gets six cookies and kid B gets one cookie.  What do outcomes actually look like? How can we represent them? One approach would be to write an outcome as a string of four numbers like this: to represent the outcome in which the first kid gets 3 cookies, the second and third kid each get 1 cookie, and the fourth kid gets 2 cookies. Represented this way, the order in which the numbers occur matters. 1312 is a different outcome, because the first kid gets a one cookie instead of 3. Each number in the string can be any integer between 0 and 7. But we cannot use the because the sum of the numbers must be 7.  Another way we might represent outcomes is to write a string of seven letters: which represents that the first cookie goes to kid A, the second cookie goes to kid B, the third and fourth cookies go to kid A, and so on. In fact, this outcome is identical to the previous one A gets 3 cookies, B and C get 1 each and D gets 2. Each of the seven letters in the string can be any of the 4 possible letters (one for each kid), but again we cannot use because here order does not matter. In fact, another way to write the same outcome is   Now think about how you could specify such an outcome in general. All we really need to do is say when to switch from one letter to the next. In terms of cookies, we need to say after how many cookies do we stop giving cookies to the first kid and start giving cookies to the second kid. And then after how many do we switch to the third kid? And after how many do we switch to the fourth? So yet another way to represent an outcome is like this:   Three cookies go to the first kid, then we switch and give one cookie to the second kid, then switch, one to the third kid, switch, two to the fourth kid. Notice that we need 7 stars and 3 bars one star for each cookie, and one bar for each switch between kids, so one fewer bars than there are kids (we don't need to switch after the last kid we are done).  Why have we done all of this? Simple: to count the number of ways to distribute 7 cookies to 4 kids, all we need to do is count how many different stars and bars charts there are.  Before we get too excited, we should make sure that really any string of (in our case) 7 stars and 3 bars corresponds to a different way to distribute cookies to kids. In particular consider a string like this:   Does that correspond to a cookie distribution? Yes. It represents the distribution in which kid A gets 0 cookies (because we switch to kid B before any stars), kid B gets three cookies (three stars before the next bar), kid C gets 0 cookies (no stars before the next bar) and kid D gets the remaining 4 cookies. No matter how the stars and bars are arranged, we can distribute cookies in that way. Also, given any way to distribute cookies, we can represent that with a stars and bars chart. For example, the distribution in which kid A gets 6 cookies and kid B gets 1 cookie has the following chart:   After all that work we are finally ready to count. Each way to distribute 7 cookies to 4 kids corresponds to a stars and bars chart with 7 stars and 3 bars. So there are 10 symbols, and we must choose 3 of them to be bars. Thus:   We generalize this result in the following theorem:  Combination with Repetition Formula Combination with Repetition Formula   If and are nonnegative integers with , then the number -combinations from a set of elements with repetition allowed is equal to .   This is just counting the number of combinations of positions for bars (or stars) in a sequence with positions. It is the same as choosing items from a set of elements.   While we are at it, we can also answer a related question: how many ways are there to distribute 7 cookies to 4 kids so that each kid gets at least one cookie?  Giving each kid one cookie is required and there is no choice. We only need to count how the remaining 3 cookies can be distributed to the 4 kids. So we have 3 stars and 3 bars for a total of 6 symbols, 3 of which must be bars. So we see that there are ways to distribute the cookies.  Stars and bars can be used in counting problems other than kids and cookies. Here are a few examples:  Counting Pizzas with Repeated Toppings   Your favorite mathematical pizza chain offers 10 toppings. How many pizzas can you make if you are allowed 6 toppings? The order of toppings does not matter but now you are allowed repeats. So one possible pizza is triple sausage, double pineapple, and onions.    We get 6 toppings (counting possible repeats). Represent each of these toppings as a star. Think of going down the menu one topping at a time: you see anchovies first, and skip to the next, sausage. You say yes to sausage 3 times (use 3 stars), then switch to the next topping on the list. You keep skipping until you get to pineapple, which you say yes to twice. Another switch and you are at onions. You say yes once. Then you keep switching until you get to the last topping, never saying yes again (since you already have said yes 6 times. There are 10 toppings to choose from, so we must switch from considering one topping to the next 9 times. These are the bars.  Now that we are confident that we have the right number of stars and bars, we answer the question simply: there are 6 stars and 9 bars, so 15 symbols. We need to pick 9 of them to be bars, so there number of pizzas possible is .    Counting Phone Numbers with Non-Increasing Digits   How many 7 digit phone numbers are there in which the digits are non-increasing? That is, every digit is less than or equal to the previous one.    We need to decide on 7 digits so we will use 7 stars. The bars will represent a switch from each possible single digit number down the next smaller one. So the phone number 866-5221 is represented by the stars and bars chart   There are 10 choices for each digit (0-9) so we must switch between choices 9 times. We have 7 stars and 9 bars, so the total number of phone numbers is     Counting Solutions to Equations   How many solutions are there to the equation   if and are integers?     where for each ?    where for each ?    where for each ?       This problem is just like giving 13 cookies to 5 kids. We need to say how many of the 13 units go to each of the 5 variables. In other words, we have 13 stars and 4 bars (the bars are like the + signs in the equation).     If can be 0 or greater, we are in the standard case with no restrictions. So 13 stars and 4 bars can be arranged in ways.    Now each variable must be at least 1. So give one unit to each variable to satisfy that restriction. Now there are 8 stars left, and still 4 bars, so the number of solutions is .    Now each variable must be 2 or greater. So before any counting, give each variable 2 units. We now have 3 remaining stars and 4 bars, so there are solutions.          Ordering Indistinguishable Objects Ordering Indistinguishable Objects  In the previous section, we examined how many ways we can choose from a limited number indistinguishable objects, where the order didn't matter. If one child got four cookies, it didn't matter if she was given one first and the other three after all the rest of the cookies were given out to the other children. What can we do if the order of choosing does matter?  Counting Strings With Repeated Letters Suppose we wish to count the number of ways we can rearrange the letters in the word \"PROCESSES\". For this kind of counting problem we cannot apply the Permutation Formula because two letters, \"S\" and \"E\", are repeated. We also cannot use the Rule of Products because the repetition is limited, we only have three \"S\"s, two \"E\"s, and one each of \"P\", \"R\", \"O\" and \"C\" to choose.  We have nine positions to fill. We can first choose three of those positions for the \"S\"s: (note we use the binomial formula because the \"S\"s are identical, the order of the \"S\"s doesn't matter). Then we will have six positions left to fill. We can choose two of those for the \"E\"s: That leaves four positions for \"P\", three for \"R\", two for \"O\" and one for \"C\": , , ,  We can then apply the product rule to determine how many ways there are to do all of those:    Multiset  Multiset  A multiset is a collection of objects, just like a set, but can contain an object more than once (the order of the elements still doesn't matter). For example, is a multiset of size 6.   Multiplicity  Multiplicity  The multiplicity of a particular type of object is the number of times objects of that type appear in a multiset . For example, in the word \"PROCESSES\", the letter \"S\" has multiplicity three, the letter \"E\" has multiplicity two, and \"P\", \"R\", \"O\" and \"C\" each have multiplicity one.   We can generalize the result from to the following theorem.  Permutations Of Multisets Permutations Of Multiplisets  The number of ordered -tuples (or permutations with repetition) on a collection or multiset of objects, where there are kinds of objects and object kind 1 occurs with multiplicity , object kind 2 occurs with multiplicity , ... , and object kind occurs with multiplicity is:   Counting Bridge Hands We saw this example in . Now we have a formula to solve it directly, though it might not seem like the same type of problem at first.  In bridge, the location of a hand in relation to the dealer has some bearing on the game. The number of possible hands takes into account the number each player's possible hands depending on the order in which they are dealt. The player in the West position gets their 13 cards first, then the player in the North position gets 13 cards, then the player in the East gets 13 cards and finally the South gets 13 cards. We can apply to solve this.  In this case we have items, the cards, and four \"types\" of items, West's cards, North's cards, East's cards, and South's cards, each with multiplicity 13. To see how we can use the to solve this: apply some ordering to the entire deck of cards, say the Ace of Hearts is first, the Two of Hearts is second, and so on, for all 52 cards. Then the cards dealt to West correspond to choosing positions for 13 cards (of type West's cards), the cards dealt to North correspond to choosing positions for 13 cards of type North's cards, and so on.         How many regular sets of size 5 can be made using the 10 numeric digits 0 through 9?    How many multi sets of size 5 can be made using the 10 numeric digits 0 through 9?         sets can be made. We must select 5 of the 10 digits to put in the set.   Use stars and bars: each star represents one of the 5 elements of the set, each bar represents a switch between digits. So there are 5 stars and 9 bars, giving us sets.       When playing Yahtzee, you roll five regular 6-sided dice. How many different outcomes are possible from a single roll? The order of the dice does not matter.    Each of the counting problems below can be solved with stars and bars. For each, say what outcome the diagram represents, if there are the correct number of stars and bars for the problem. Otherwise, say why the diagram does not represent any outcome, and what a correct diagram would look like.   How many ways are there to select a handful of 6 jellybeans from a jar that contains 5 different flavors?    How many ways can you distribute 5 identical lollipops to 6 kids?    How many 6-letter words can you make using the 5 vowels?    How many solutions are there to the equation .         You take 3 strawberry, 1 lime, 0 licorice, 2 blueberry and 0 bubblegum.    This is backwards. We don't want the stars to represent the kids because the kids are not identical, but the stars are. Instead we should use 5 stars (for the lollipops) and use 5 bars to switch between the 6 kids. For example, would represent the outcome with the first kid getting 2 lollipops, the third kid getting 3, and the rest of the kids getting none.    This is the word AAAEOO.    This doesn't represent a solution. Each star should represent one of the 6 units that add up to 6, and the bars should switch between the different variables. We have one too many bars. An example of a correct diagram would be representing that , , , and .       Solve the three counting problems below. Then say why it makes sense that they all have the same answer. That is, say how you can interpret them as each other.   How many ways are there to distribute 8 cookies to 3 kids?    How many solutions in non-negative integers are there to ?    How many different packs of 8 crayons can you make using crayons that come in red, blue and yellow?       After gym class you are tasked with putting the 14 identical dodgeballs away into 5 bins.   How many ways can you do this if there are no restrictions?    How many ways can you do this if each bin must contain at least one dodgeball?         ways. Each outcome can be represented by a sequence of 14 stars and 4 bars.   ways. First put one ball in each bin. This leaves 9 stars and 4 bars.        How many ways can the letters in the word \"SURFED\" be rearranged?  How many ways can the letters in the word \"SURFER\" be rearranged?      How many integer solutions are there to the equation for which   , , and are all positive?   , , and are all non-negative?   , , and are all greater than ?        solutions. After each variable gets 1 star for free, we are left with 5 stars and 2 bars.   solutions. We have 8 stars and 2 bars.   solutions. This problem is equivalent to finding the number of solutions to where , and are non-negative. (In fact, we really just do a substitution. Let , and ).      How many integer solutions to are there for which , , and ?    Using the digits 2 through 8, find the number of different 5-digit numbers such that:   Digits cannot be repeated and must be written in increasing order. For example, 23678 is okay, but 32678 is not.    Digits can be repeated and must be written in non-decreasing order. For example, 24448 is okay, but 24484 is not.         There are numbers. We simply choose five of the seven digits and once chosen put them in increasing order.    This requires stars and bars. Use a star to represent each of the 5 digits in the number, and use their position relative to the bars to say what numeral fills that spot. So we will have 5 stars and 6 bars, giving numbers.        Conic , your favorite math themed fast food drive-in offers 20 flavors which can be added to your shave ice. You have enough money to buy a large shave ice with 4 flavors. How many different shave ice concoctions can you order if:   You refuse to use any of the flavors more than once?    You refuse repeats but care about the order the flavors are added?    You allow yourself multiple shots of the same flavor?    You allow yourself multiple shots, and care about the order the flavors are added?       "
},
{
  "id": "tuples-with-repetition-4",
  "level": "2",
  "url": "section2_5-counting-with-repetition-or-indistinguishable-objects.html#tuples-with-repetition-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "ordered tuples permutations with repetition "
},
{
  "id": "counting-with-order-and-repetition",
  "level": "2",
  "url": "section2_5-counting-with-repetition-or-indistinguishable-objects.html#counting-with-order-and-repetition",
  "type": "Example",
  "number": "2.5.1",
  "title": "Counting with Order and Repetition.",
  "body": "Counting with Order and Repetition  How many strings of length can be formed from the uppercase letters of the English alphabet?  Each of the positions in the string has 26 possibilities, so by there are strings.   "
},
{
  "id": "combination-with-repetition-formula",
  "level": "2",
  "url": "section2_5-counting-with-repetition-or-indistinguishable-objects.html#combination-with-repetition-formula",
  "type": "Theorem",
  "number": "2.5.2",
  "title": "Combination with Repetition Formula.",
  "body": "Combination with Repetition Formula Combination with Repetition Formula   If and are nonnegative integers with , then the number -combinations from a set of elements with repetition allowed is equal to .   This is just counting the number of combinations of positions for bars (or stars) in a sequence with positions. It is the same as choosing items from a set of elements.  "
},
{
  "id": "counting-pizzas",
  "level": "2",
  "url": "section2_5-counting-with-repetition-or-indistinguishable-objects.html#counting-pizzas",
  "type": "Example",
  "number": "2.5.3",
  "title": "Counting Pizzas with Repeated Toppings.",
  "body": "Counting Pizzas with Repeated Toppings   Your favorite mathematical pizza chain offers 10 toppings. How many pizzas can you make if you are allowed 6 toppings? The order of toppings does not matter but now you are allowed repeats. So one possible pizza is triple sausage, double pineapple, and onions.    We get 6 toppings (counting possible repeats). Represent each of these toppings as a star. Think of going down the menu one topping at a time: you see anchovies first, and skip to the next, sausage. You say yes to sausage 3 times (use 3 stars), then switch to the next topping on the list. You keep skipping until you get to pineapple, which you say yes to twice. Another switch and you are at onions. You say yes once. Then you keep switching until you get to the last topping, never saying yes again (since you already have said yes 6 times. There are 10 toppings to choose from, so we must switch from considering one topping to the next 9 times. These are the bars.  Now that we are confident that we have the right number of stars and bars, we answer the question simply: there are 6 stars and 9 bars, so 15 symbols. We need to pick 9 of them to be bars, so there number of pizzas possible is .   "
},
{
  "id": "counting-phone-numbers",
  "level": "2",
  "url": "section2_5-counting-with-repetition-or-indistinguishable-objects.html#counting-phone-numbers",
  "type": "Example",
  "number": "2.5.4",
  "title": "Counting Phone Numbers with Non-Increasing Digits.",
  "body": "Counting Phone Numbers with Non-Increasing Digits   How many 7 digit phone numbers are there in which the digits are non-increasing? That is, every digit is less than or equal to the previous one.    We need to decide on 7 digits so we will use 7 stars. The bars will represent a switch from each possible single digit number down the next smaller one. So the phone number 866-5221 is represented by the stars and bars chart   There are 10 choices for each digit (0-9) so we must switch between choices 9 times. We have 7 stars and 9 bars, so the total number of phone numbers is    "
},
{
  "id": "counting-solutions-to-equations",
  "level": "2",
  "url": "section2_5-counting-with-repetition-or-indistinguishable-objects.html#counting-solutions-to-equations",
  "type": "Example",
  "number": "2.5.5",
  "title": "Counting Solutions to Equations.",
  "body": "Counting Solutions to Equations   How many solutions are there to the equation   if and are integers?     where for each ?    where for each ?    where for each ?       This problem is just like giving 13 cookies to 5 kids. We need to say how many of the 13 units go to each of the 5 variables. In other words, we have 13 stars and 4 bars (the bars are like the + signs in the equation).     If can be 0 or greater, we are in the standard case with no restrictions. So 13 stars and 4 bars can be arranged in ways.    Now each variable must be at least 1. So give one unit to each variable to satisfy that restriction. Now there are 8 stars left, and still 4 bars, so the number of solutions is .    Now each variable must be 2 or greater. So before any counting, give each variable 2 units. We now have 3 remaining stars and 4 bars, so there are solutions.      "
},
{
  "id": "counting-strings-with-repeated-letters",
  "level": "2",
  "url": "section2_5-counting-with-repetition-or-indistinguishable-objects.html#counting-strings-with-repeated-letters",
  "type": "Example",
  "number": "2.5.6",
  "title": "Counting Strings With Repeated Letters.",
  "body": "Counting Strings With Repeated Letters Suppose we wish to count the number of ways we can rearrange the letters in the word \"PROCESSES\". For this kind of counting problem we cannot apply the Permutation Formula because two letters, \"S\" and \"E\", are repeated. We also cannot use the Rule of Products because the repetition is limited, we only have three \"S\"s, two \"E\"s, and one each of \"P\", \"R\", \"O\" and \"C\" to choose.  We have nine positions to fill. We can first choose three of those positions for the \"S\"s: (note we use the binomial formula because the \"S\"s are identical, the order of the \"S\"s doesn't matter). Then we will have six positions left to fill. We can choose two of those for the \"E\"s: That leaves four positions for \"P\", three for \"R\", two for \"O\" and one for \"C\": , , ,  We can then apply the product rule to determine how many ways there are to do all of those:   "
},
{
  "id": "Definition-Multiset",
  "level": "2",
  "url": "section2_5-counting-with-repetition-or-indistinguishable-objects.html#Definition-Multiset",
  "type": "Definition",
  "number": "2.5.7",
  "title": "Multiset.",
  "body": "Multiset  Multiset  A multiset is a collection of objects, just like a set, but can contain an object more than once (the order of the elements still doesn't matter). For example, is a multiset of size 6.  "
},
{
  "id": "Definition-Multiplicity",
  "level": "2",
  "url": "section2_5-counting-with-repetition-or-indistinguishable-objects.html#Definition-Multiplicity",
  "type": "Definition",
  "number": "2.5.8",
  "title": "Multiplicity.",
  "body": "Multiplicity  Multiplicity  The multiplicity of a particular type of object is the number of times objects of that type appear in a multiset . For example, in the word \"PROCESSES\", the letter \"S\" has multiplicity three, the letter \"E\" has multiplicity two, and \"P\", \"R\", \"O\" and \"C\" each have multiplicity one.  "
},
{
  "id": "permutations-of-multisets",
  "level": "2",
  "url": "section2_5-counting-with-repetition-or-indistinguishable-objects.html#permutations-of-multisets",
  "type": "Theorem",
  "number": "2.5.9",
  "title": "Permutations Of Multisets.",
  "body": "Permutations Of Multisets Permutations Of Multiplisets  The number of ordered -tuples (or permutations with repetition) on a collection or multiset of objects, where there are kinds of objects and object kind 1 occurs with multiplicity , object kind 2 occurs with multiplicity , ... , and object kind occurs with multiplicity is:  "
},
{
  "id": "counting-bridge-hands",
  "level": "2",
  "url": "section2_5-counting-with-repetition-or-indistinguishable-objects.html#counting-bridge-hands",
  "type": "Example",
  "number": "2.5.10",
  "title": "Counting Bridge Hands.",
  "body": "Counting Bridge Hands We saw this example in . Now we have a formula to solve it directly, though it might not seem like the same type of problem at first.  In bridge, the location of a hand in relation to the dealer has some bearing on the game. The number of possible hands takes into account the number each player's possible hands depending on the order in which they are dealt. The player in the West position gets their 13 cards first, then the player in the North position gets 13 cards, then the player in the East gets 13 cards and finally the South gets 13 cards. We can apply to solve this.  In this case we have items, the cards, and four \"types\" of items, West's cards, North's cards, East's cards, and South's cards, each with multiplicity 13. To see how we can use the to solve this: apply some ordering to the entire deck of cards, say the Ace of Hearts is first, the Two of Hearts is second, and so on, for all 52 cards. Then the cards dealt to West correspond to choosing positions for 13 cards (of type West's cards), the cards dealt to North correspond to choosing positions for 13 cards of type North's cards, and so on.  "
},
{
  "id": "exercises-2-5-1",
  "level": "2",
  "url": "section2_5-counting-with-repetition-or-indistinguishable-objects.html#exercises-2-5-1",
  "type": "Exercise",
  "number": "2.5.4.1",
  "title": "",
  "body": "    How many regular sets of size 5 can be made using the 10 numeric digits 0 through 9?    How many multi sets of size 5 can be made using the 10 numeric digits 0 through 9?         sets can be made. We must select 5 of the 10 digits to put in the set.   Use stars and bars: each star represents one of the 5 elements of the set, each bar represents a switch between digits. So there are 5 stars and 9 bars, giving us sets.     "
},
{
  "id": "exercises-2-5-2",
  "level": "2",
  "url": "section2_5-counting-with-repetition-or-indistinguishable-objects.html#exercises-2-5-2",
  "type": "Exercise",
  "number": "2.5.4.2",
  "title": "",
  "body": " When playing Yahtzee, you roll five regular 6-sided dice. How many different outcomes are possible from a single roll? The order of the dice does not matter.  "
},
{
  "id": "exercises-2-5-3",
  "level": "2",
  "url": "section2_5-counting-with-repetition-or-indistinguishable-objects.html#exercises-2-5-3",
  "type": "Exercise",
  "number": "2.5.4.3",
  "title": "",
  "body": " Each of the counting problems below can be solved with stars and bars. For each, say what outcome the diagram represents, if there are the correct number of stars and bars for the problem. Otherwise, say why the diagram does not represent any outcome, and what a correct diagram would look like.   How many ways are there to select a handful of 6 jellybeans from a jar that contains 5 different flavors?    How many ways can you distribute 5 identical lollipops to 6 kids?    How many 6-letter words can you make using the 5 vowels?    How many solutions are there to the equation .         You take 3 strawberry, 1 lime, 0 licorice, 2 blueberry and 0 bubblegum.    This is backwards. We don't want the stars to represent the kids because the kids are not identical, but the stars are. Instead we should use 5 stars (for the lollipops) and use 5 bars to switch between the 6 kids. For example, would represent the outcome with the first kid getting 2 lollipops, the third kid getting 3, and the rest of the kids getting none.    This is the word AAAEOO.    This doesn't represent a solution. Each star should represent one of the 6 units that add up to 6, and the bars should switch between the different variables. We have one too many bars. An example of a correct diagram would be representing that , , , and .     "
},
{
  "id": "exercises-2-5-4",
  "level": "2",
  "url": "section2_5-counting-with-repetition-or-indistinguishable-objects.html#exercises-2-5-4",
  "type": "Exercise",
  "number": "2.5.4.4",
  "title": "",
  "body": " Solve the three counting problems below. Then say why it makes sense that they all have the same answer. That is, say how you can interpret them as each other.   How many ways are there to distribute 8 cookies to 3 kids?    How many solutions in non-negative integers are there to ?    How many different packs of 8 crayons can you make using crayons that come in red, blue and yellow?     "
},
{
  "id": "exercises-2-5-5",
  "level": "2",
  "url": "section2_5-counting-with-repetition-or-indistinguishable-objects.html#exercises-2-5-5",
  "type": "Exercise",
  "number": "2.5.4.5",
  "title": "",
  "body": " After gym class you are tasked with putting the 14 identical dodgeballs away into 5 bins.   How many ways can you do this if there are no restrictions?    How many ways can you do this if each bin must contain at least one dodgeball?         ways. Each outcome can be represented by a sequence of 14 stars and 4 bars.   ways. First put one ball in each bin. This leaves 9 stars and 4 bars.    "
},
{
  "id": "exercises-2-5-6",
  "level": "2",
  "url": "section2_5-counting-with-repetition-or-indistinguishable-objects.html#exercises-2-5-6",
  "type": "Exercise",
  "number": "2.5.4.6",
  "title": "",
  "body": "   How many ways can the letters in the word \"SURFED\" be rearranged?  How many ways can the letters in the word \"SURFER\" be rearranged?    "
},
{
  "id": "exercises-2-5-7",
  "level": "2",
  "url": "section2_5-counting-with-repetition-or-indistinguishable-objects.html#exercises-2-5-7",
  "type": "Exercise",
  "number": "2.5.4.7",
  "title": "",
  "body": " How many integer solutions are there to the equation for which   , , and are all positive?   , , and are all non-negative?   , , and are all greater than ?        solutions. After each variable gets 1 star for free, we are left with 5 stars and 2 bars.   solutions. We have 8 stars and 2 bars.   solutions. This problem is equivalent to finding the number of solutions to where , and are non-negative. (In fact, we really just do a substitution. Let , and ).    "
},
{
  "id": "exercises-2-5-8",
  "level": "2",
  "url": "section2_5-counting-with-repetition-or-indistinguishable-objects.html#exercises-2-5-8",
  "type": "Exercise",
  "number": "2.5.4.8",
  "title": "",
  "body": " How many integer solutions to are there for which , , and ?  "
},
{
  "id": "exercises-2-5-9",
  "level": "2",
  "url": "section2_5-counting-with-repetition-or-indistinguishable-objects.html#exercises-2-5-9",
  "type": "Exercise",
  "number": "2.5.4.9",
  "title": "",
  "body": " Using the digits 2 through 8, find the number of different 5-digit numbers such that:   Digits cannot be repeated and must be written in increasing order. For example, 23678 is okay, but 32678 is not.    Digits can be repeated and must be written in non-decreasing order. For example, 24448 is okay, but 24484 is not.         There are numbers. We simply choose five of the seven digits and once chosen put them in increasing order.    This requires stars and bars. Use a star to represent each of the 5 digits in the number, and use their position relative to the bars to say what numeral fills that spot. So we will have 5 stars and 6 bars, giving numbers.     "
},
{
  "id": "exercises-2-5-10",
  "level": "2",
  "url": "section2_5-counting-with-repetition-or-indistinguishable-objects.html#exercises-2-5-10",
  "type": "Exercise",
  "number": "2.5.4.10",
  "title": "",
  "body": "  Conic , your favorite math themed fast food drive-in offers 20 flavors which can be added to your shave ice. You have enough money to buy a large shave ice with 4 flavors. How many different shave ice concoctions can you order if:   You refuse to use any of the flavors more than once?    You refuse repeats but care about the order the flavors are added?    You allow yourself multiple shots of the same flavor?    You allow yourself multiple shots, and care about the order the flavors are added?     "
},
{
  "id": "section3_1-probability",
  "level": "1",
  "url": "section3_1-probability.html",
  "type": "Section",
  "number": "3.1",
  "title": "Introduction to Probability",
  "body": " Introduction to Probability  Probability  We all have some intuitive understanding of the notions of chance and probability . When buying a lottery ticket, we know that there is a chance of winning the jackpot, but we also know that this chance is very small. Before leaving home in the morning, we check the weather forecast and see that, with probability , we get inches of rain in Honolulu. In this chapter, we will give a formal definition of this notion of probability .  Probability Spaces  In this section, we give a formal definition of the notion of probability in terms of sets and functions.    Sample Space  sample space  A sample space  is a non-empty countable set. Each element of is called an outcome and each subset of is called an event .    In daily life, we express probabilities in terms of percentages. For example, the weather forecast may tell us that, with probability, we will be getting a snowstorm today. In probability theory, probabilities are expressed in terms of numbers in the interval . A probability of becomes a probability of .   Probability Function or Distribution  probability function  Let be a sample space. A probability function on is a function such that  for all , , and   .    For any outcome in the sample space , we will refer to as the probability that the outcome is equal to .   Probability Space  probability space  A probability space is a pair , where is a sample space and is a probability function on .     Probability of an Event  probability of an event  A probability function maps each element of the sample space (i.e., each outcome) to a real number in the interval . It turns out to be useful to extend this function so that it maps any event to a real number in . If is an event (i.e., ), then we define We will refer to as the probability that the event occurs.   Note that since , the entire sample space is an event and where the last equality follows from the second condition in .  Flipping a Coin Assume we flip a coin. Since there are two possible outcomes (the coin comes up either heads ( ) or tails ( )), the sample space is the set . If the coin is fair , i.e., the probabilities of and are equal, then the probability function is given by Observe that this function satisfies the two conditions in . Since this sample space has two elements, there are four events, one event for each subset. These events are and it follows from that    Flipping a Coin Twice  If we flip a fair coin twice, then there are four possible outcomes, and the sample space becomes . For example, indicates that the first flip resulted in heads, whereas the second flip resulted in tails. In this case, the probability function is given by \\[ P(HH) = P(HT) = P(TH) = P(TT) = 1\/4 . \\] Observe again that this function satisfies the two conditions in . Since the sample space consists of elements, the number of events is equal to . For example, is an event and it follows from that In words, when flipping a fair coin twice, the probability that we see one heads and one tails (without specifying the order) is equal to .   Rolling a Die Twice  If we roll a fair die, then there are six possible outcomes ( , , , , , and ), each one occurring with probability . If we roll this die twice, we obtain the sample space where is the result of the first roll and is the result of the second roll. Note that . Since the die is fair, each outcome has the same probability. Therefore, in order to satisfy the two conditions in , we must have for each outcome in .  If we are interested in the sum of the results of the two rolls, then we define the event which, using the notation of sets, is the same as Consider, for example, the case when . There are three possible outcomes of two rolls that result in a sum of . These outcomes are , , and . Thus, the event is equal to   In the matrix below, the leftmost column indicates the result of the first roll, the top row indicates the result of the second roll, and each entry is the sum of the results of the two corresponding rolls.  As can be seen from this matrix, the event is non-empty only if . For any other , the event is empty, which means that it can never occur.  It follows from that For example, the number occurs three times in the matrix and, therefore, the event has size three. Observe that we have already seen this above. It follows that In a similar way, we see that  A sample space is not necessarily uniquely defined. In the last example, where we were interested in the sum of the results of two rolls of a die, we could also have taken the sample space to be the set The probability function corresponding to this sample space is given by because is the probability that we get the outcome in the sample space , which is the same as the probability that event occurs in the sample space . You should verify that this function satisfies the two conditions in and, thus, is a valid probability function on .   Basic Rules of Probability  In this section, we prove some basic properties of probability functions. As we will see, all these properties follow from . Throughout this section, is a probability space.     Recall that an event is a subset of the sample space . In particular, the empty set is an event. Intuitively, must be zero, because it is the probability that there is no outcome, which can never occur.  By , we have Since there are zero terms in this summation, its value is equal to zero.   Disjoint Events Disjoint Events  We say that two events and are disjoint , if . A sequence of events is pairwise disjoint , if any pair in this sequence is disjoint.     Probability of a Sequence of Disjoint Events  If is a sequence of pairwise disjoint events, then    Define . Using , we have   Probability of an Even Outcome When Flipping a Die Twice  Assume we roll a fair die twice. What is the probability that the sum of the two results is even? If you look at the matrix in , then you see that there are entries out of that are even. Therefore, the probability of having an even sum is equal to . Below we will give a different way to determine this probability.  The sample space is the set where is the result of the first roll and is the result of the second roll. Each element of has the same probability of being an outcome of rolling the die twice.  The event we are interested in is Observe that is even if and only if both and are even or both and are odd. Therefore, we split the event into two disjoint events and  By , we have The set has elements, because there are choices for and choices for . Similarly, the set has elements. It follows that    Complement of an event Complement of an Event  If is an event, then denotes its complement , i.e., . Intuitively, the sum of and must be equal to one, because the event either occurs or does not occur. Observe that this is similar to the .     Probability of Complements  For any event ,   Since and are disjoint and , it follows from that We have seen in that .   Probability of Unions of Events  If and are events, then   This is similar to the Law of Inclusion-Exclusion . Since and are disjoint and , it follows from that Next observe that and are disjoint. Since , we again apply and obtain By combining these two equations, we obtain .  Probability a number is divisible by 2 or 3  Assume we choose a number in the sample space , such that each element has the same probability of being chosen. What is the probability that is divisible by or ?  Define the events and Then we want to determine , which, by is equal to Since there are even numbers in , we have Since there are elements in that are divisible by , we have Observe that belongs to if and only if is divisible by , i.e., Since there are elements in that are divisible by , we have We conclude that     Uniform Distributions or Probability Spaces Uniform Distribution  A uniform distribution or uniform probability space is a pair , where is a finite sample space and the probability function satisfies for each outcome in .   Probability of Events in a Uniform Distribution  If is a uniform probability space and is an event, then In a uniform probability space , the probability of an event is the ratio of the size of and the size of .   By using and , we get    Probability of a Full House  In a standard deck of cards, each card has a suit and a rank . There are four suits (spades, hearts, clubs, and diamonds), and 13 ranks (Ace, , Jack, Queen, and King). A hand of five cards is called a full house , if three of the cards are of the same rank and the other two cards are also of the same (but necessarily different) rank. For example, the hand: 7 of spades , 7 of hearts , 7 of diamonds , Q of spades , Q of clubs is a full house, because it consists of three sevens and two Queens.  Assume we get a uniformly random hand of five cards. What is the probability that this hand is a full house? To answer this question, first observe that a hand of five cards is a subset of the set of all cards. Thus, the sample space is the set consisting of all -element subsets of the set of cards and, therefore, Each hand of five cards has a probability of of being chosen.  Since we are interested in the probability of a random hand being a full house, we define the event to be the set of all elements in that are full houses. By , we have Thus, to determine , it remains to determine the size of the set , i.e., the total number of full houses. For this, we will use the Rule of Products :  The procedure is choose a full house .  First task: Choose the rank of the three cards in the full house. There are ways to do this.   Second task: Choose the suits of these three cards. There are ways to do this.  Third task: Choose the rank of the other two cards in the full house. There are ways to do this.   Fourth task: Choose the suits of these two cards. There are ways to do this.  Thus, the number of full houses is equal to   We conclude that the probability of getting a full house is equal to    The Monty Hall Problem  The Monty Hall Problem is a well-known puzzle in probability theory. It is named after the host, Monty Hall, of the American television game show Let's Make a Deal . The problem became famous in 1990, when (part of) a reader's letter was published in Marilyn vos Savant's column Ask Marilyn in the magazine Parade : Suppose you're on a game show, and you're given the choice of three doors: Behind one door is a car; behind the others, goats. You pick a door, say No. 1, and the host, who knows what's behind the doors, opens another door, say No. 3, which has a goat. He then says to you, Do you want to switch? Is it to your advantage to switch your choice?  Note that the host can always open a door that has a goat behind it. After the host has opened No.3, we know that the car is either behind No.1 or No.2, and it seems that both these doors have the same probability (i.e., ) of having the car behind them. We will prove below, however, that this is not true: It is indeed to our advantage to switch our choice.  We assume that the car is equally likely to be behind any of the three doors. Moreover, the host knows what is behind each door.  We initially choose one of the three doors uniformly at random; this door remains closed.  The host opens one of the other two doors that has a goat behind it.  Our final choice is to switch to the other door that is still closed.  Let be the event that we win the car and let be the event that the initial door has a goat behind it. Then it is not difficult to see that event occurs if and only if event occurs. Therefore, the probability that we win the car is equal to     Exercises for Section 3.1    Let be a sample space. Let , , and . Find the probabilities for all eight subsets of .   , , , , , , , .     Consider the sample space and a probability function on . Define the events , , , and . You are given that , , and . Determine .     Give a possible sample space for each of the following experiments:   An election decides between two candidates and .  A two-sided coin is tossed.   A student is asked for the month of the year and the day of the week on which her birthday falls.  A student is chosen at random from a class of ten students.   You receive a grade in this course.        There are three possible outcomes, wins , wins ,or it is a tie . The sample space would be the set     The sample space is .    The sample space would be the set of all possible combinations of month name paired with day name, such as: Jan-Mon, Jan-Tue, Jan-Wed, ... There are total possible outcomes.    The sample space would be the set of all ten students.    Unless you are doing this problem before the drop date, you are guaranteed to get some kind of grade. Therefore, there is only one event: get-grade.        For which of the cases in Exercise 3 would it be reasonable to assign the uniform distribution function?     Consider a coin that has on one side and on the other side. We flip this coin once and roll a die twice, and are interested in the product of the three numbers.  What is the sample space?  How many possible events are there?  If both the coin and the die are fair, how would you define the probability function for this sample space?     The sample space is the products of the combinations of 1 coin flip and two dice rolls. We can use a matrix similar to above for the case where the coin flip results in a 0. The product for all entries is 0. Then we can make another matrix of the same size where the coin flip results in a 1. The product is just the product of the two dice rolls Where the coin outcome is = 1:  There are possible outcomes, so .   Using the notation from above there are 19 different events: 0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24, 25, 30 ,36.   Let be the outcomes of the coin flip, the first die roll, and the second die roll respectively. The probability function could be defined:       Describe in words the events specified by the following subsets of (see and ).   .   .   .   .    What are the probabilities of each of these events?     Let be a positive integer. We flip a fair coin times and consider the possible outcomes, which are strings of length with each character being (= heads) or (= tails). Thus, we take the sample space to be the set of all such strings. Since our coin is fair, each string of should have the same probability. Thus, we define for each string in . In other words, we have a uniform probability space.  You are asked to determine the probability that in the sequence of flips, the coin comes up heads exactly times:  What is the event that describes this?  Determine .     because each of the flips has 2 possible outcomes.  Let be the set of all sequences in that have exactly heads.  We must determine . To do this we must choose flips to come up heads, out of flips total. Therefore      A cup contains two pennies (P), one nickel (N), and one dime (D). You choose one coin uniformly at random, and then you choose a second coin from the remaining coins, again uniformly at random.  Let be the sample space consisting of all ordered pairs of letters P, N, and D that represent the possible outcomes. Write out all elements of .  Determine the probability for each element in this sample space.       Let and be events such that , , and . What is ?         A die is loaded in such a way that the probability of each face turning up is proportional to the number of dots on that face. (For example, a six is three times as probable as a two.) What is the probability of getting an even number in one throw?    "
},
{
  "id": "def-sample-space",
  "level": "2",
  "url": "section3_1-probability.html#def-sample-space",
  "type": "Definition",
  "number": "3.1.1",
  "title": "Sample Space.",
  "body": " Sample Space  sample space  A sample space  is a non-empty countable set. Each element of is called an outcome and each subset of is called an event .   "
},
{
  "id": "def-probability-function",
  "level": "2",
  "url": "section3_1-probability.html#def-probability-function",
  "type": "Definition",
  "number": "3.1.2",
  "title": "Probability Function or Distribution.",
  "body": " Probability Function or Distribution  probability function  Let be a sample space. A probability function on is a function such that  for all , , and   .   "
},
{
  "id": "def-probability-space",
  "level": "2",
  "url": "section3_1-probability.html#def-probability-space",
  "type": "Definition",
  "number": "3.1.3",
  "title": "Probability Space.",
  "body": " Probability Space  probability space  A probability space is a pair , where is a sample space and is a probability function on .   "
},
{
  "id": "def-probability-event",
  "level": "2",
  "url": "section3_1-probability.html#def-probability-event",
  "type": "Definition",
  "number": "3.1.4",
  "title": "Probability of an Event.",
  "body": " Probability of an Event  probability of an event  A probability function maps each element of the sample space (i.e., each outcome) to a real number in the interval . It turns out to be useful to extend this function so that it maps any event to a real number in . If is an event (i.e., ), then we define We will refer to as the probability that the event occurs.  "
},
{
  "id": "ex-flipping-a-coin",
  "level": "2",
  "url": "section3_1-probability.html#ex-flipping-a-coin",
  "type": "Example",
  "number": "3.1.5",
  "title": "Flipping a Coin.",
  "body": "Flipping a Coin Assume we flip a coin. Since there are two possible outcomes (the coin comes up either heads ( ) or tails ( )), the sample space is the set . If the coin is fair , i.e., the probabilities of and are equal, then the probability function is given by Observe that this function satisfies the two conditions in . Since this sample space has two elements, there are four events, one event for each subset. These events are and it follows from that   "
},
{
  "id": "ex-flipping-a-coin-twice",
  "level": "2",
  "url": "section3_1-probability.html#ex-flipping-a-coin-twice",
  "type": "Example",
  "number": "3.1.6",
  "title": "Flipping a Coin Twice.",
  "body": "Flipping a Coin Twice  If we flip a fair coin twice, then there are four possible outcomes, and the sample space becomes . For example, indicates that the first flip resulted in heads, whereas the second flip resulted in tails. In this case, the probability function is given by \\[ P(HH) = P(HT) = P(TH) = P(TT) = 1\/4 . \\] Observe again that this function satisfies the two conditions in . Since the sample space consists of elements, the number of events is equal to . For example, is an event and it follows from that In words, when flipping a fair coin twice, the probability that we see one heads and one tails (without specifying the order) is equal to .  "
},
{
  "id": "ex-rolling-a-die-twice",
  "level": "2",
  "url": "section3_1-probability.html#ex-rolling-a-die-twice",
  "type": "Example",
  "number": "3.1.7",
  "title": "Rolling a Die Twice.",
  "body": "Rolling a Die Twice  If we roll a fair die, then there are six possible outcomes ( , , , , , and ), each one occurring with probability . If we roll this die twice, we obtain the sample space where is the result of the first roll and is the result of the second roll. Note that . Since the die is fair, each outcome has the same probability. Therefore, in order to satisfy the two conditions in , we must have for each outcome in .  If we are interested in the sum of the results of the two rolls, then we define the event which, using the notation of sets, is the same as Consider, for example, the case when . There are three possible outcomes of two rolls that result in a sum of . These outcomes are , , and . Thus, the event is equal to   In the matrix below, the leftmost column indicates the result of the first roll, the top row indicates the result of the second roll, and each entry is the sum of the results of the two corresponding rolls.  As can be seen from this matrix, the event is non-empty only if . For any other , the event is empty, which means that it can never occur.  It follows from that For example, the number occurs three times in the matrix and, therefore, the event has size three. Observe that we have already seen this above. It follows that In a similar way, we see that  A sample space is not necessarily uniquely defined. In the last example, where we were interested in the sum of the results of two rolls of a die, we could also have taken the sample space to be the set The probability function corresponding to this sample space is given by because is the probability that we get the outcome in the sample space , which is the same as the probability that event occurs in the sample space . You should verify that this function satisfies the two conditions in and, thus, is a valid probability function on . "
},
{
  "id": "thm-probability-of-empty-set",
  "level": "2",
  "url": "section3_1-probability.html#thm-probability-of-empty-set",
  "type": "Theorem",
  "number": "3.1.8",
  "title": "<span class=\"process-math\">\\(P(\\emptyset) = 0\\)<\/span>.",
  "body": "  Recall that an event is a subset of the sample space . In particular, the empty set is an event. Intuitively, must be zero, because it is the probability that there is no outcome, which can never occur.  By , we have Since there are zero terms in this summation, its value is equal to zero. "
},
{
  "id": "def-disjoint-events",
  "level": "2",
  "url": "section3_1-probability.html#def-disjoint-events",
  "type": "Definition",
  "number": "3.1.9",
  "title": "Disjoint Events.",
  "body": " Disjoint Events Disjoint Events  We say that two events and are disjoint , if . A sequence of events is pairwise disjoint , if any pair in this sequence is disjoint.   "
},
{
  "id": "thm-probability-of-sequence-of-disjoint",
  "level": "2",
  "url": "section3_1-probability.html#thm-probability-of-sequence-of-disjoint",
  "type": "Theorem",
  "number": "3.1.10",
  "title": "Probability of a Sequence of Disjoint Events.",
  "body": " Probability of a Sequence of Disjoint Events  If is a sequence of pairwise disjoint events, then    Define . Using , we have  "
},
{
  "id": "ex-probability-of-sum-of-dice",
  "level": "2",
  "url": "section3_1-probability.html#ex-probability-of-sum-of-dice",
  "type": "Example",
  "number": "3.1.11",
  "title": "Probability of an Even Outcome When Flipping a Die Twice.",
  "body": "Probability of an Even Outcome When Flipping a Die Twice  Assume we roll a fair die twice. What is the probability that the sum of the two results is even? If you look at the matrix in , then you see that there are entries out of that are even. Therefore, the probability of having an even sum is equal to . Below we will give a different way to determine this probability.  The sample space is the set where is the result of the first roll and is the result of the second roll. Each element of has the same probability of being an outcome of rolling the die twice.  The event we are interested in is Observe that is even if and only if both and are even or both and are odd. Therefore, we split the event into two disjoint events and  By , we have The set has elements, because there are choices for and choices for . Similarly, the set has elements. It follows that  "
},
{
  "id": "def-complement-of-event",
  "level": "2",
  "url": "section3_1-probability.html#def-complement-of-event",
  "type": "Definition",
  "number": "3.1.12",
  "title": "Complement of an event.",
  "body": " Complement of an event Complement of an Event  If is an event, then denotes its complement , i.e., . Intuitively, the sum of and must be equal to one, because the event either occurs or does not occur. Observe that this is similar to the .   "
},
{
  "id": "thm-probability-of-complements",
  "level": "2",
  "url": "section3_1-probability.html#thm-probability-of-complements",
  "type": "Theorem",
  "number": "3.1.13",
  "title": "Probability of Complements.",
  "body": " Probability of Complements  For any event ,   Since and are disjoint and , it follows from that We have seen in that . "
},
{
  "id": "thm-probability-of-union",
  "level": "2",
  "url": "section3_1-probability.html#thm-probability-of-union",
  "type": "Theorem",
  "number": "3.1.14",
  "title": "Probability of Unions of Events.",
  "body": " Probability of Unions of Events  If and are events, then   This is similar to the Law of Inclusion-Exclusion . Since and are disjoint and , it follows from that Next observe that and are disjoint. Since , we again apply and obtain By combining these two equations, we obtain . "
},
{
  "id": "ex-probability-of-divisible",
  "level": "2",
  "url": "section3_1-probability.html#ex-probability-of-divisible",
  "type": "Example",
  "number": "3.1.15",
  "title": "Probability a number is divisible by 2 or 3.",
  "body": "Probability a number is divisible by 2 or 3  Assume we choose a number in the sample space , such that each element has the same probability of being chosen. What is the probability that is divisible by or ?  Define the events and Then we want to determine , which, by is equal to Since there are even numbers in , we have Since there are elements in that are divisible by , we have Observe that belongs to if and only if is divisible by , i.e., Since there are elements in that are divisible by , we have We conclude that   "
},
{
  "id": "def-uniform-distribution",
  "level": "2",
  "url": "section3_1-probability.html#def-uniform-distribution",
  "type": "Definition",
  "number": "3.1.16",
  "title": "Uniform Distributions or Probability Spaces.",
  "body": " Uniform Distributions or Probability Spaces Uniform Distribution  A uniform distribution or uniform probability space is a pair , where is a finite sample space and the probability function satisfies for each outcome in . "
},
{
  "id": "thm-probability-of-uniform",
  "level": "2",
  "url": "section3_1-probability.html#thm-probability-of-uniform",
  "type": "Theorem",
  "number": "3.1.17",
  "title": "Probability of Events in a Uniform Distribution.",
  "body": " Probability of Events in a Uniform Distribution  If is a uniform probability space and is an event, then In a uniform probability space , the probability of an event is the ratio of the size of and the size of .   By using and , we get   "
},
{
  "id": "ex-probability-of-full_house",
  "level": "2",
  "url": "section3_1-probability.html#ex-probability-of-full_house",
  "type": "Example",
  "number": "3.1.18",
  "title": "Probability of a Full House.",
  "body": "Probability of a Full House  In a standard deck of cards, each card has a suit and a rank . There are four suits (spades, hearts, clubs, and diamonds), and 13 ranks (Ace, , Jack, Queen, and King). A hand of five cards is called a full house , if three of the cards are of the same rank and the other two cards are also of the same (but necessarily different) rank. For example, the hand: 7 of spades , 7 of hearts , 7 of diamonds , Q of spades , Q of clubs is a full house, because it consists of three sevens and two Queens.  Assume we get a uniformly random hand of five cards. What is the probability that this hand is a full house? To answer this question, first observe that a hand of five cards is a subset of the set of all cards. Thus, the sample space is the set consisting of all -element subsets of the set of cards and, therefore, Each hand of five cards has a probability of of being chosen.  Since we are interested in the probability of a random hand being a full house, we define the event to be the set of all elements in that are full houses. By , we have Thus, to determine , it remains to determine the size of the set , i.e., the total number of full houses. For this, we will use the Rule of Products :  The procedure is choose a full house .  First task: Choose the rank of the three cards in the full house. There are ways to do this.   Second task: Choose the suits of these three cards. There are ways to do this.  Third task: Choose the rank of the other two cards in the full house. There are ways to do this.   Fourth task: Choose the suits of these two cards. There are ways to do this.  Thus, the number of full houses is equal to   We conclude that the probability of getting a full house is equal to   "
},
{
  "id": "ex-monty-hall",
  "level": "2",
  "url": "section3_1-probability.html#ex-monty-hall",
  "type": "Example",
  "number": "3.1.19",
  "title": "The Monty Hall Problem.",
  "body": "The Monty Hall Problem  The Monty Hall Problem is a well-known puzzle in probability theory. It is named after the host, Monty Hall, of the American television game show Let's Make a Deal . The problem became famous in 1990, when (part of) a reader's letter was published in Marilyn vos Savant's column Ask Marilyn in the magazine Parade : Suppose you're on a game show, and you're given the choice of three doors: Behind one door is a car; behind the others, goats. You pick a door, say No. 1, and the host, who knows what's behind the doors, opens another door, say No. 3, which has a goat. He then says to you, Do you want to switch? Is it to your advantage to switch your choice?  Note that the host can always open a door that has a goat behind it. After the host has opened No.3, we know that the car is either behind No.1 or No.2, and it seems that both these doors have the same probability (i.e., ) of having the car behind them. We will prove below, however, that this is not true: It is indeed to our advantage to switch our choice.  We assume that the car is equally likely to be behind any of the three doors. Moreover, the host knows what is behind each door.  We initially choose one of the three doors uniformly at random; this door remains closed.  The host opens one of the other two doors that has a goat behind it.  Our final choice is to switch to the other door that is still closed.  Let be the event that we win the car and let be the event that the initial door has a goat behind it. Then it is not difficult to see that event occurs if and only if event occurs. Therefore, the probability that we win the car is equal to   "
},
{
  "id": "section3_1-probability-6-2",
  "level": "2",
  "url": "section3_1-probability.html#section3_1-probability-6-2",
  "type": "Exercise",
  "number": "3.1.3.1",
  "title": "",
  "body": " Let be a sample space. Let , , and . Find the probabilities for all eight subsets of .   , , , , , , , .  "
},
{
  "id": "section3_1-probability-6-3",
  "level": "2",
  "url": "section3_1-probability.html#section3_1-probability-6-3",
  "type": "Exercise",
  "number": "3.1.3.2",
  "title": "",
  "body": "  Consider the sample space and a probability function on . Define the events , , , and . You are given that , , and . Determine .  "
},
{
  "id": "section3_1-probability-6-4",
  "level": "2",
  "url": "section3_1-probability.html#section3_1-probability-6-4",
  "type": "Exercise",
  "number": "3.1.3.3",
  "title": "",
  "body": " Give a possible sample space for each of the following experiments:   An election decides between two candidates and .  A two-sided coin is tossed.   A student is asked for the month of the year and the day of the week on which her birthday falls.  A student is chosen at random from a class of ten students.   You receive a grade in this course.        There are three possible outcomes, wins , wins ,or it is a tie . The sample space would be the set     The sample space is .    The sample space would be the set of all possible combinations of month name paired with day name, such as: Jan-Mon, Jan-Tue, Jan-Wed, ... There are total possible outcomes.    The sample space would be the set of all ten students.    Unless you are doing this problem before the drop date, you are guaranteed to get some kind of grade. Therefore, there is only one event: get-grade.     "
},
{
  "id": "section3_1-probability-6-5",
  "level": "2",
  "url": "section3_1-probability.html#section3_1-probability-6-5",
  "type": "Exercise",
  "number": "3.1.3.4",
  "title": "",
  "body": " For which of the cases in Exercise 3 would it be reasonable to assign the uniform distribution function?  "
},
{
  "id": "section3_1-probability-6-6",
  "level": "2",
  "url": "section3_1-probability.html#section3_1-probability-6-6",
  "type": "Exercise",
  "number": "3.1.3.5",
  "title": "",
  "body": "  Consider a coin that has on one side and on the other side. We flip this coin once and roll a die twice, and are interested in the product of the three numbers.  What is the sample space?  How many possible events are there?  If both the coin and the die are fair, how would you define the probability function for this sample space?     The sample space is the products of the combinations of 1 coin flip and two dice rolls. We can use a matrix similar to above for the case where the coin flip results in a 0. The product for all entries is 0. Then we can make another matrix of the same size where the coin flip results in a 1. The product is just the product of the two dice rolls Where the coin outcome is = 1:  There are possible outcomes, so .   Using the notation from above there are 19 different events: 0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24, 25, 30 ,36.   Let be the outcomes of the coin flip, the first die roll, and the second die roll respectively. The probability function could be defined:    "
},
{
  "id": "section3_1-probability-6-7",
  "level": "2",
  "url": "section3_1-probability.html#section3_1-probability-6-7",
  "type": "Exercise",
  "number": "3.1.3.6",
  "title": "",
  "body": " Describe in words the events specified by the following subsets of (see and ).   .   .   .   .    What are the probabilities of each of these events?  "
},
{
  "id": "section3_1-probability-6-8",
  "level": "2",
  "url": "section3_1-probability.html#section3_1-probability-6-8",
  "type": "Exercise",
  "number": "3.1.3.7",
  "title": "",
  "body": "  Let be a positive integer. We flip a fair coin times and consider the possible outcomes, which are strings of length with each character being (= heads) or (= tails). Thus, we take the sample space to be the set of all such strings. Since our coin is fair, each string of should have the same probability. Thus, we define for each string in . In other words, we have a uniform probability space.  You are asked to determine the probability that in the sequence of flips, the coin comes up heads exactly times:  What is the event that describes this?  Determine .     because each of the flips has 2 possible outcomes.  Let be the set of all sequences in that have exactly heads.  We must determine . To do this we must choose flips to come up heads, out of flips total. Therefore   "
},
{
  "id": "section3_1-probability-6-9",
  "level": "2",
  "url": "section3_1-probability.html#section3_1-probability-6-9",
  "type": "Exercise",
  "number": "3.1.3.8",
  "title": "",
  "body": "  A cup contains two pennies (P), one nickel (N), and one dime (D). You choose one coin uniformly at random, and then you choose a second coin from the remaining coins, again uniformly at random.  Let be the sample space consisting of all ordered pairs of letters P, N, and D that represent the possible outcomes. Write out all elements of .  Determine the probability for each element in this sample space.    "
},
{
  "id": "section3_1-probability-6-10",
  "level": "2",
  "url": "section3_1-probability.html#section3_1-probability-6-10",
  "type": "Exercise",
  "number": "3.1.3.9",
  "title": "",
  "body": " Let and be events such that , , and . What is ?      "
},
{
  "id": "section3_1-probability-6-11",
  "level": "2",
  "url": "section3_1-probability.html#section3_1-probability-6-11",
  "type": "Exercise",
  "number": "3.1.3.10",
  "title": "",
  "body": " A die is loaded in such a way that the probability of each face turning up is proportional to the number of dots on that face. (For example, a six is three times as probable as a two.) What is the probability of getting an even number in one throw?  "
},
{
  "id": "section3_2-Bayes",
  "level": "1",
  "url": "section3_2-Bayes.html",
  "type": "Section",
  "number": "3.2",
  "title": "Conditional Probability, Independence, and Bayes’ Rule",
  "body": "  Conditional Probability, Independence, and Bayes' Rule  Bayes' Rule Independence  Conditional probability Conditional Probability  Anil Maheshwari has two children. We are told that one of them is a boy. What is the probability that the other child is also a boy? Most people will say that this probability is . We will show below that this is not the correct answer.  Since Anil has two children, the sample space is where, for example, indicates that the youngest child is a boy and the oldest child is a girl. We assume a uniform probability function, so that each outcome has a probability of .  We are given the additional information that one of the two children is a boy, or, to be more precise, that at least one of the two children is a boy. This means that the actual sample space is not , but When asking for the probability that the other child is also a boy, we are really asking for the probability that both children are boys. Since there is only one possibility (out of three) for both children to be boys, it follows that this probability is equal to .  This is an example of a conditional probability : We are asking for the probability of an event (both children are boys) given that another event (at least one of the two children is a boy) occurs.    Conditional Probability conditional probability  Let be a probability space and let and be two events with . The conditional probability  , pronounced as the probability of given , is defined to be   Probability of a second boy  Returning to Anil's two children, we saw that the sample space is and we assumed a uniform probability function. The events we considered are and and we wanted to know . Writing and as subsets of the sample space , we get and Using , it follows that which is the same answer as we got before.  Probability of rolling a three given an odd number is rolled  Assume we roll a fair die, i.e., we choose an element uniformly at random from the sample space Consider the events and  What is the conditional probability ? To determine this probability, we assume that event occurs, i.e., the roll of the die resulted in one of , , and . Given that event occurs, event occurs in one out of these three possibilities. Thus, should be equal to . We are going to verify that this is indeed the answer we get when using : Since and we have   Let us now consider the conditional probability . Thus, we are given that event occurs, i.e., the roll of the die resulted in . Since is an odd integer, event is guaranteed to occur. Therefore, should be equal to . Again, we are going to verify that this is indeed the answer we get when using : This shows that, in general, is not equal to . Observe that this is not surprising. (Do you see why?)   Sum of the conditional probabilities of complements  Let be a probability space and let and be two events with . Then   By definition, we have Since the events and are disjoint, we have, by , By drawing a Venn diagram, you will see that implying that We conclude that    The Law of Total Probability  Let be a probability space and let be an event. Assume that is a sequence of events such that  for all with ,  the events are pairwise disjoint, and  . Then   The assumptions imply that Since the events are pairwise disjoint, it follows from Lemma~\\ref{lemSumPr} that The theorem follows by observing that, from ,    Independent Events Independent events  Consider two events and in a sample space . In this section, we will define the notion of these two events being independent . Intuitively, this should express that (i) the probability that event occurs does not depend on whether or not event occurs, and (ii) the probability that event occurs does not depend on whether or not event occurs. Thus, if we assume that and , then (i) should be equal to the conditional probability , and (ii) should be equal to the conditional probability . As we will show below, the following definition exactly captures this.   Independent Events Independent Events  Let be a probability space and let and be two events. We say that and are independent if  In this definition, it is not assumed that and . If , then and and are independent if and only if Similarly, if , then and are independent if and only if   Independence of Rolling Two Dice  Assume we roll a red die and a blue die; thus, the sample space is where is the result of the red die and is the result of the blue die. We assume a uniform probability function. Thus, each outcome has a probability of .  Let denote the result of the red die and let denote the result of the blue die. Consider the events and Are these events independent?  Since we have .   Since we have .  Since we have .   It follows that and we conclude that and are independent.   As an exercise, you should verify that the events and are not independent.  Now consider the two events and Since , we have On the other hand, and . Thus, and the events and are not independent. This is not surprising: If we know that occurs, then cannot not occur. Thus, the event has an effect on the probability that the event occurs.  Consider two events and in a sample space . If these events are independent, then the probability that occurs does not depend on whether or not occurs. Since whether or not occurs is the same as whether the complement does not or does occur, it should not be a surprise that the events and are independent as well.   Independence of Complements  Let be a probability space and let and be two events. If and are independent, then and are also independent.  To prove that and are independent, we have to show that Using , this is equivalent to showing that Since the events and are disjoint and it follows from that Since and are independent, we have It follows that which is equivalent to .   We have defined the notion of two events being independent. The following definition generalizes this in two ways to sequences of events:   Pairwise and Independent Events Pairwise and Mutually Independent Events  Let be a probability space, let , and let be a sequence of events.   We say that this sequence is pairwise independent if for any two distinct indices and , the events and are independent, i.e.,   We say that this sequence is mutually independent if for all with and all indices ,    Thus, in order to show that the sequence is pairwise independent, we have to verify equalities. On the other hand, to show that this sequence is mutually independent, we have to verify equalities.  For example, if we want to prove that the sequence of three events is mutually independent, then we have to show that   and  Pairwise but not Mutually Independent Coin Flips  Consider flipping a coin three times and assume that the result is a uniformly random element from the sample space where, e.g., indicates that the first two flips result in heads and the third flip results in tails. Define the events  and If we write these events as subsets of the sample space, then we get  and It follows that Thus, the sequence is pairwise independent. Since we have Thus, and, therefore, the sequence is not mutually independent. Of course, this is not surprising: If both events and occur, then event also occurs.   Random Variables Random Variables   A random variable is neither random nor variable.  We have already seen random variables in , even though we did not use that term there. For example, in , we rolled a die twice and were interested in the sum of the results of these two rolls. In other words, we did an experiment (rolling a die twice) and asked for a function of the outcome (the sum of the results of the two rolls).   Random Variable Random Variable  Let be a sample space. A random variable on the sample space is a function .  In the example given above, the sample space is and the random variable is the function defined by for all in .  Note that the term random variable is misleading: A random variable is not random, but a function that assigns, to every outcome in the sample space , a real number . Also, a random variable is not a variable, but a function.  Flipping Three Coins with Random Variables  Assume we flip three coins. The sample space is where, e.g., indicates that the first two coins come up tails and the third coin comes up heads.  Let be the random variable that maps any outcome (i.e., any element of ) to the number of heads in the outcome. Thus, If we define the random variable to be the function that  maps an outcome to if all three coins come up heads or all three coins come up tails, and  maps an outcome to in all other cases,  then we have  Since a random variable is a function , it maps any outcome to a real number . Usually, we just write instead of . Thus, for any outcome in the sample space , we denote the value of the random variable, for this outcome, by . In the example above, we flip three coins and write and   Random variables give rise to events in a natural way. In the three-coin example, corresponds to the event , whereas corresponds to the event . The table below gives some values of the random variables and , together with the corresponding events.  Thus, the event corresponds to the set of all outcomes that are mapped, by the function , to the value :   X = x  Let be a sample space and let be a random variable. For any real number , we define to be the event  Probabilities of Flipping Three Coins with Random Variables  Let us return to the example in which we flip three coins. Assume that the coins are fair and the three flips are mutually independent. Consider again the corresponding random variables and . It should be clear how we determine, for example, the probability that is equal to , which we will write as . Using our interpretation of as being the event , we get Similarly, we get  Consider an arbitrary probability space and let be a random variable. Using and , the probability of the event , i.e., the probability that is equal to , is equal to  We have interpreted as being an event. We extend this to more general statements involving . For example, denotes the event For our three-coin example, the random variable can take each of the values , , , and with a positive probability. As a result, denotes the event or , and we have  In , we have defined the notion of two events being independent. The following definition extends this to random variables.   Independent Random Variables Independent Random Variables  Let be a probability space and let and be two random variables on . We say that and are independent if for all real numbers and , the events and are independent, i.e.,   There are two ways to generalize the notion of two random variables being independent to sequences of random variables:   Pairwise and Mutually Independent Random Variables Pairwise and Mutually Independent Random Variables  Let be a probability space, let , and let be a sequence of random variables on .   We say that this sequence is pairwise independent if for all real numbers , the sequence , , , of events is pairwise independent.  We say that this sequence is mutually independent if for all real numbers , the sequence , , , of events is mutually independent.    Bayes' Theorem Bayes' Theorem      Bayes' theorem is to the theory of probability what the Pythagorean theorem is to geometry.  Sir Harold Jeffreys Bayes' theorem (alternatively Bayes' law or Bayes' rule) describes the probability of an event, based on prior knowledge of conditions that might be related to the event. For example, if cancer is related to age, then, using Bayes' theorem, a person's age can be used to more accurately assess the probability that they have cancer, compared to the assessment of the probability of cancer made without knowledge of the person's age.  One of the many applications of Bayes' theorem is Bayesian inference, a particular approach to statistical inference.   Bayes' Theorem Bayes' Theorem  Let and be events in some probability space , such that and , then:  Probability of having chosen from a particular urn  We have two urns and . contains 2 black balls and 3 white balls. contains 1 black ball and 1 white ball. An urn is chosen at random, then a ball is chosen at random from it. If a black ball is chosen, what is the probability it came from urn ?  Let be the event urn is chosen and be the event a black ball is chosen.  Note that the probability of choosing either urn is and the probability that we chose a black ball from urn is .  Next we need to know the probability of choosing a black ball no matter which urn was chosen. This is the probability of choosing a black ball from either urn.  Calculate the probability urn is where the black ball came from using Bayes' Rule:    Bayes' Theorem can be expanded to calculate the conditional probability from more than two events, .   Generalized Bayes' Theorem Bayes' Theorem (Generalized)  Let be an event and be mutually exclusive events in some probability space , such that and then:   Exercises for Section 3.2   Assume that and are two events with positive probabilities. Show that if , then .   If then the two events are independent.     A coin is tossed three times. What is the probability that exactly two heads occur, given that   the first outcome was a head?    the first outcome was a tail?    the first two outcomes were heads?    the first two outcomes were tails?    the first outcome was a head and the third outcome was a head?        A die is rolled twice. What is the probability that the sum of the faces is greater than 7, given that   the first outcome was a 4?    the first outcome was greater than 3?    the first outcome was a 1?    the first outcome was less than 5?                                A card is drawn at random from a deck of cards. What is the probability that   it is a heart, given that it is red?    it is higher than a 10, given that it is a heart? (Interpret J, Q, K, A as 11, 12, 13, 14.)    it is a jack, given that it is red?       A coin is tossed three times. Consider the following events:   A  Heads on the first toss.    B  Tails on the second.    C  Heads on the third toss.    D  All three outcomes the same (HHH or TTT).    E  Exactly one head turns up.        Which of the following pairs of these events are independent?                          Which of the following triples of these events are independent?                          (1) and (2)    (1)       From a deck of five cards numbered 2, 4, 6, 8, and 10, respectively, a card is drawn at random and replaced. This is done three times. What is the probability that the card numbered 2 was drawn exactly two times, given that the sum of the numbers on the three draws is 12?    A coin is tossed twice. Consider the following events.   A  Heads on the first toss.    B  Heads on the second toss.    C  The two tosses come out the same.      Show that ,~ ,~ are pairwise independent but not independent.    Show that is independent of and but not of .         We have     A and C; and C and B are independent:        Let . Assume that and . Let ,~ , and~ be the events , , . Show that but no two of these events are independent.     We have two urns and . contains 9 black balls and 6 white balls. contains 3 black balls and 1 white ball. An urn is chosen at random, then a ball is chosen at random from it. Let be the event urn is chosen and be the event a white ball is chosen.  Calculate using Bayes' Rule        Suppose that 1% of the patients tested in a hospital are infected with a virus. Furthermore, suppose that when a test for the virus is given, 98% of the patients actually infected with the virus test positive, and that 1% of the patients not infected still test positive for it. What is the probability that:   a patient testing positive is actually infected with the virus?    a patient testing positive is not infected with the virus?    a patient testing negative is infected with the virus?    a patient testing negative is not infected with the virus?       "
},
{
  "id": "def-conditional-probability",
  "level": "2",
  "url": "section3_2-Bayes.html#def-conditional-probability",
  "type": "Definition",
  "number": "3.2.1",
  "title": "Conditional Probability.",
  "body": " Conditional Probability conditional probability  Let be a probability space and let and be two events with . The conditional probability  , pronounced as the probability of given , is defined to be  "
},
{
  "id": "ex-anils-children",
  "level": "2",
  "url": "section3_2-Bayes.html#ex-anils-children",
  "type": "Example",
  "number": "3.2.2",
  "title": "Probability of a second boy.",
  "body": "Probability of a second boy  Returning to Anil's two children, we saw that the sample space is and we assumed a uniform probability function. The events we considered are and and we wanted to know . Writing and as subsets of the sample space , we get and Using , it follows that which is the same answer as we got before. "
},
{
  "id": "ex-condl-prob-dice-roll",
  "level": "2",
  "url": "section3_2-Bayes.html#ex-condl-prob-dice-roll",
  "type": "Example",
  "number": "3.2.3",
  "title": "Probability of rolling a three given an odd number is rolled.",
  "body": "Probability of rolling a three given an odd number is rolled  Assume we roll a fair die, i.e., we choose an element uniformly at random from the sample space Consider the events and  What is the conditional probability ? To determine this probability, we assume that event occurs, i.e., the roll of the die resulted in one of , , and . Given that event occurs, event occurs in one out of these three possibilities. Thus, should be equal to . We are going to verify that this is indeed the answer we get when using : Since and we have   Let us now consider the conditional probability . Thus, we are given that event occurs, i.e., the roll of the die resulted in . Since is an odd integer, event is guaranteed to occur. Therefore, should be equal to . Again, we are going to verify that this is indeed the answer we get when using : This shows that, in general, is not equal to . Observe that this is not surprising. (Do you see why?) "
},
{
  "id": "thm-sum-of-conditional-complements",
  "level": "2",
  "url": "section3_2-Bayes.html#thm-sum-of-conditional-complements",
  "type": "Theorem",
  "number": "3.2.4",
  "title": "Sum of the conditional probabilities of complements.",
  "body": " Sum of the conditional probabilities of complements  Let be a probability space and let and be two events with . Then   By definition, we have Since the events and are disjoint, we have, by , By drawing a Venn diagram, you will see that implying that We conclude that  "
},
{
  "id": "thm-law-of-total-probability",
  "level": "2",
  "url": "section3_2-Bayes.html#thm-law-of-total-probability",
  "type": "Theorem",
  "number": "3.2.5",
  "title": "The Law of Total Probability.",
  "body": " The Law of Total Probability  Let be a probability space and let be an event. Assume that is a sequence of events such that  for all with ,  the events are pairwise disjoint, and  . Then   The assumptions imply that Since the events are pairwise disjoint, it follows from Lemma~\\ref{lemSumPr} that The theorem follows by observing that, from ,  "
},
{
  "id": "def-independent-events",
  "level": "2",
  "url": "section3_2-Bayes.html#def-independent-events",
  "type": "Definition",
  "number": "3.2.6",
  "title": "Independent Events.",
  "body": " Independent Events Independent Events  Let be a probability space and let and be two events. We say that and are independent if  In this definition, it is not assumed that and . If , then and and are independent if and only if Similarly, if , then and are independent if and only if  "
},
{
  "id": "ex-rolling-two-dice-independent",
  "level": "2",
  "url": "section3_2-Bayes.html#ex-rolling-two-dice-independent",
  "type": "Example",
  "number": "3.2.7",
  "title": "Independence of Rolling Two Dice.",
  "body": "Independence of Rolling Two Dice  Assume we roll a red die and a blue die; thus, the sample space is where is the result of the red die and is the result of the blue die. We assume a uniform probability function. Thus, each outcome has a probability of .  Let denote the result of the red die and let denote the result of the blue die. Consider the events and Are these events independent?  Since we have .   Since we have .  Since we have .   It follows that and we conclude that and are independent.   As an exercise, you should verify that the events and are not independent.  Now consider the two events and Since , we have On the other hand, and . Thus, and the events and are not independent. This is not surprising: If we know that occurs, then cannot not occur. Thus, the event has an effect on the probability that the event occurs. "
},
{
  "id": "thm-independence-of-complements",
  "level": "2",
  "url": "section3_2-Bayes.html#thm-independence-of-complements",
  "type": "Theorem",
  "number": "3.2.8",
  "title": "Independence of Complements.",
  "body": " Independence of Complements  Let be a probability space and let and be two events. If and are independent, then and are also independent.  To prove that and are independent, we have to show that Using , this is equivalent to showing that Since the events and are disjoint and it follows from that Since and are independent, we have It follows that which is equivalent to .  "
},
{
  "id": "def-pairwise-mutually-independent",
  "level": "2",
  "url": "section3_2-Bayes.html#def-pairwise-mutually-independent",
  "type": "Definition",
  "number": "3.2.9",
  "title": "Pairwise and Independent Events.",
  "body": " Pairwise and Independent Events Pairwise and Mutually Independent Events  Let be a probability space, let , and let be a sequence of events.   We say that this sequence is pairwise independent if for any two distinct indices and , the events and are independent, i.e.,   We say that this sequence is mutually independent if for all with and all indices ,   "
},
{
  "id": "ex-pairwise-but-not-mutual-independence",
  "level": "2",
  "url": "section3_2-Bayes.html#ex-pairwise-but-not-mutual-independence",
  "type": "Example",
  "number": "3.2.10",
  "title": "Pairwise but not Mutually Independent Coin Flips.",
  "body": "Pairwise but not Mutually Independent Coin Flips  Consider flipping a coin three times and assume that the result is a uniformly random element from the sample space where, e.g., indicates that the first two flips result in heads and the third flip results in tails. Define the events  and If we write these events as subsets of the sample space, then we get  and It follows that Thus, the sequence is pairwise independent. Since we have Thus, and, therefore, the sequence is not mutually independent. Of course, this is not surprising: If both events and occur, then event also occurs. "
},
{
  "id": "def-random-variable",
  "level": "2",
  "url": "section3_2-Bayes.html#def-random-variable",
  "type": "Definition",
  "number": "3.2.11",
  "title": "Random Variable.",
  "body": " Random Variable Random Variable  Let be a sample space. A random variable on the sample space is a function . "
},
{
  "id": "ex-random-variables-three-coins",
  "level": "2",
  "url": "section3_2-Bayes.html#ex-random-variables-three-coins",
  "type": "Example",
  "number": "3.2.12",
  "title": "Flipping Three Coins with Random Variables.",
  "body": "Flipping Three Coins with Random Variables  Assume we flip three coins. The sample space is where, e.g., indicates that the first two coins come up tails and the third coin comes up heads.  Let be the random variable that maps any outcome (i.e., any element of ) to the number of heads in the outcome. Thus, If we define the random variable to be the function that  maps an outcome to if all three coins come up heads or all three coins come up tails, and  maps an outcome to in all other cases,  then we have  Since a random variable is a function , it maps any outcome to a real number . Usually, we just write instead of . Thus, for any outcome in the sample space , we denote the value of the random variable, for this outcome, by . In the example above, we flip three coins and write and  "
},
{
  "id": "def-X-equals-x",
  "level": "2",
  "url": "section3_2-Bayes.html#def-X-equals-x",
  "type": "Definition",
  "number": "3.2.13",
  "title": "<span class=\"process-math\">\\(X = x\\)<\/span>.",
  "body": " X = x  Let be a sample space and let be a random variable. For any real number , we define to be the event "
},
{
  "id": "ex-prob-random-variables-three-coins",
  "level": "2",
  "url": "section3_2-Bayes.html#ex-prob-random-variables-three-coins",
  "type": "Example",
  "number": "3.2.14",
  "title": "Probabilities of Flipping Three Coins with Random Variables.",
  "body": "Probabilities of Flipping Three Coins with Random Variables  Let us return to the example in which we flip three coins. Assume that the coins are fair and the three flips are mutually independent. Consider again the corresponding random variables and . It should be clear how we determine, for example, the probability that is equal to , which we will write as . Using our interpretation of as being the event , we get Similarly, we get "
},
{
  "id": "def-independent-random-variables",
  "level": "2",
  "url": "section3_2-Bayes.html#def-independent-random-variables",
  "type": "Definition",
  "number": "3.2.15",
  "title": "Independent Random Variables.",
  "body": " Independent Random Variables Independent Random Variables  Let be a probability space and let and be two random variables on . We say that and are independent if for all real numbers and , the events and are independent, i.e.,  "
},
{
  "id": "def-pairwise-mutually-independent-rvs",
  "level": "2",
  "url": "section3_2-Bayes.html#def-pairwise-mutually-independent-rvs",
  "type": "Definition",
  "number": "3.2.16",
  "title": "Pairwise and Mutually Independent Random Variables.",
  "body": " Pairwise and Mutually Independent Random Variables Pairwise and Mutually Independent Random Variables  Let be a probability space, let , and let be a sequence of random variables on .   We say that this sequence is pairwise independent if for all real numbers , the sequence , , , of events is pairwise independent.  We say that this sequence is mutually independent if for all real numbers , the sequence , , , of events is mutually independent.  "
},
{
  "id": "def-bayes-rule",
  "level": "2",
  "url": "section3_2-Bayes.html#def-bayes-rule",
  "type": "Definition",
  "number": "3.2.17",
  "title": "Bayes’ Theorem.",
  "body": " Bayes' Theorem Bayes' Theorem  Let and be events in some probability space , such that and , then: "
},
{
  "id": "ex-bayes-balls-boxes",
  "level": "2",
  "url": "section3_2-Bayes.html#ex-bayes-balls-boxes",
  "type": "Example",
  "number": "3.2.18",
  "title": "Probability of having chosen from a particular urn.",
  "body": "Probability of having chosen from a particular urn  We have two urns and . contains 2 black balls and 3 white balls. contains 1 black ball and 1 white ball. An urn is chosen at random, then a ball is chosen at random from it. If a black ball is chosen, what is the probability it came from urn ?  Let be the event urn is chosen and be the event a black ball is chosen.  Note that the probability of choosing either urn is and the probability that we chose a black ball from urn is .  Next we need to know the probability of choosing a black ball no matter which urn was chosen. This is the probability of choosing a black ball from either urn.  Calculate the probability urn is where the black ball came from using Bayes' Rule:   "
},
{
  "id": "def-generalized-bayes-rule",
  "level": "2",
  "url": "section3_2-Bayes.html#def-generalized-bayes-rule",
  "type": "Definition",
  "number": "3.2.19",
  "title": "Generalized Bayes’ Theorem.",
  "body": " Generalized Bayes' Theorem Bayes' Theorem (Generalized)  Let be an event and be mutually exclusive events in some probability space , such that and then: "
},
{
  "id": "section3_2-Bayes-8-2",
  "level": "2",
  "url": "section3_2-Bayes.html#section3_2-Bayes-8-2",
  "type": "Exercise",
  "number": "3.2.5.1",
  "title": "",
  "body": " Assume that and are two events with positive probabilities. Show that if , then .   If then the two events are independent.   "
},
{
  "id": "section3_2-Bayes-8-3",
  "level": "2",
  "url": "section3_2-Bayes.html#section3_2-Bayes-8-3",
  "type": "Exercise",
  "number": "3.2.5.2",
  "title": "",
  "body": " A coin is tossed three times. What is the probability that exactly two heads occur, given that   the first outcome was a head?    the first outcome was a tail?    the first two outcomes were heads?    the first two outcomes were tails?    the first outcome was a head and the third outcome was a head?     "
},
{
  "id": "section3_2-Bayes-8-4",
  "level": "2",
  "url": "section3_2-Bayes.html#section3_2-Bayes-8-4",
  "type": "Exercise",
  "number": "3.2.5.3",
  "title": "",
  "body": " A die is rolled twice. What is the probability that the sum of the faces is greater than 7, given that   the first outcome was a 4?    the first outcome was greater than 3?    the first outcome was a 1?    the first outcome was less than 5?                              "
},
{
  "id": "section3_2-Bayes-8-5",
  "level": "2",
  "url": "section3_2-Bayes.html#section3_2-Bayes-8-5",
  "type": "Exercise",
  "number": "3.2.5.4",
  "title": "",
  "body": " A card is drawn at random from a deck of cards. What is the probability that   it is a heart, given that it is red?    it is higher than a 10, given that it is a heart? (Interpret J, Q, K, A as 11, 12, 13, 14.)    it is a jack, given that it is red?     "
},
{
  "id": "section3_2-Bayes-8-6",
  "level": "2",
  "url": "section3_2-Bayes.html#section3_2-Bayes-8-6",
  "type": "Exercise",
  "number": "3.2.5.5",
  "title": "",
  "body": " A coin is tossed three times. Consider the following events:   A  Heads on the first toss.    B  Tails on the second.    C  Heads on the third toss.    D  All three outcomes the same (HHH or TTT).    E  Exactly one head turns up.        Which of the following pairs of these events are independent?                          Which of the following triples of these events are independent?                          (1) and (2)    (1)     "
},
{
  "id": "section3_2-Bayes-8-7",
  "level": "2",
  "url": "section3_2-Bayes.html#section3_2-Bayes-8-7",
  "type": "Exercise",
  "number": "3.2.5.6",
  "title": "",
  "body": " From a deck of five cards numbered 2, 4, 6, 8, and 10, respectively, a card is drawn at random and replaced. This is done three times. What is the probability that the card numbered 2 was drawn exactly two times, given that the sum of the numbers on the three draws is 12?  "
},
{
  "id": "section3_2-Bayes-8-8",
  "level": "2",
  "url": "section3_2-Bayes.html#section3_2-Bayes-8-8",
  "type": "Exercise",
  "number": "3.2.5.7",
  "title": "",
  "body": " A coin is tossed twice. Consider the following events.   A  Heads on the first toss.    B  Heads on the second toss.    C  The two tosses come out the same.      Show that ,~ ,~ are pairwise independent but not independent.    Show that is independent of and but not of .         We have     A and C; and C and B are independent:      "
},
{
  "id": "section3_2-Bayes-8-9",
  "level": "2",
  "url": "section3_2-Bayes.html#section3_2-Bayes-8-9",
  "type": "Exercise",
  "number": "3.2.5.8",
  "title": "",
  "body": " Let . Assume that and . Let ,~ , and~ be the events , , . Show that but no two of these events are independent.  "
},
{
  "id": "section3_2-Bayes-8-10",
  "level": "2",
  "url": "section3_2-Bayes.html#section3_2-Bayes-8-10",
  "type": "Exercise",
  "number": "3.2.5.9",
  "title": "",
  "body": "  We have two urns and . contains 9 black balls and 6 white balls. contains 3 black balls and 1 white ball. An urn is chosen at random, then a ball is chosen at random from it. Let be the event urn is chosen and be the event a white ball is chosen.  Calculate using Bayes' Rule      "
},
{
  "id": "section3_2-Bayes-8-11",
  "level": "2",
  "url": "section3_2-Bayes.html#section3_2-Bayes-8-11",
  "type": "Exercise",
  "number": "3.2.5.10",
  "title": "",
  "body": " Suppose that 1% of the patients tested in a hospital are infected with a virus. Furthermore, suppose that when a test for the virus is given, 98% of the patients actually infected with the virus test positive, and that 1% of the patients not infected still test positive for it. What is the probability that:   a patient testing positive is actually infected with the virus?    a patient testing positive is not infected with the virus?    a patient testing negative is infected with the virus?    a patient testing negative is not infected with the virus?     "
},
{
  "id": "section3_3-ExpectedValue",
  "level": "1",
  "url": "section3_3-ExpectedValue.html",
  "type": "Section",
  "number": "3.3",
  "title": "Expected Value and Variance",
  "body": " Expected Value and Variance  Expected Value and Variance   Expected Values  Expected Values   Consider the probability space with sample space and probability function defined by , , and . Assume we choose an element in according to this probability function. Let be the random variable whose value is equal to the element in that is chosen. Thus, as a function , we have , , and .  The expected value of is the value of that we observe on average . How should we define this? Since has a much higher probability to take the value than the other two values and , the value should get a larger weight in the expected value of . Based on this, it is natural to define the expected value of to be    Expected Value  expected value   Let be a probability space and let be a random variable. The expected value (or expectation or weighted average ) of is defined to be .     Expected value of a coin flip  Assume we flip a fair coin, in which case the sample space is and . Define the random variable to have value Thus, as a function , we have and . The expected value of is equal to This example shows that the term expected value is a bit misleading: is not the value that we expect to observe, because many times the value of can never equal to its expected value.    Bernoulli Trial  Bernoulli Trial   A Bernoulli trial is a special kind of experiment that can have only two outcomes: 1 or 0. A 1 is called a success and a 0 is called a failure . The probability of success is defined as and the probability of failure is therefore or . If is a random variable that represents the outcome of a Bernoulli trial then and where .  In the preceding example ( ) we defined a random variable where Each coin flip is a Bernoulli trial .     Expected Successes in a Bernoulli Trial  Expected Successes in a Bernoulli Trial   Let be a random variable representing a Bernoulli trial that takes the value 1 with probability and the value 0 with probability . Then    By       Expected value of a die roll  Assume we roll a fair die. Define the random variable to be the value of the result. Then, takes each of the values in with equal probability , and we get  Now define the random variable to be equal to one divided by the result of the die. In other words, . This random variable takes each of the values in with equal probability , and we get Note that . Thus, this example shows that, in general, .    Expected value of rolling two dice  Consider a fair red die and a fair blue die, and assume we roll them independently, just like . The sample space is where is the result of the red die and is the result of the blue die. Each outcome in has the same probability of .  Let be the random variable whose value is equal to the sum of the results of the two rolls. As a function , we have . The matrix below gives all possible values of . The leftmost column indicates the result of the red die, the top row indicates the result of the blue die, and each other entry is the corresponding value of . The expected value of is equal to     Comparing the Expected Values of Comparable Random Variables  comparing expected values   Consider a probability space , and let and be two random variables on . Recall that and are functions that map elements of to real numbers. We will write , if for each element , we have . In other words, the value of is at most the value of , no matter which outcome is chosen.    Comparison of Expectations   Let be a probability space and let and be two random variables on . If , then .    Using and the assumption that , we obtain       An Alternative Expression for the Expected Value  In the , we used to compute the expected value of the random variable that was defined to be the sum of the results when rolling two fair and independent dice. This was a painful way to compute , because we added all entries in the matrix. There is a slightly easier way to determine : By looking at the matrix, we see that the value occurs three times. Thus, the event   has size , i.e., if we consider the subset of the sample space that corresponds to this event, then this subset has size . Similarly, the event   has size , because the value occurs times in the matrix. The table below lists the sizes of all non-empty events, together with their probabilities. Based on this, we get Even though this is still quite painful, less computation is needed. What we have done is the following: In the definition of , i.e., we rearranged the terms in the summation. That is, instead of taking the sum over all elements in , we   grouped together all outcomes for which has the same value, say, ,    multiplied this common value by the probability that is equal to ,    and took the sum of the resulting products over all possible values of .   This resulted in The following theorem states that this can be done for any random variable.   Expected Value Alternative Equation  expected value   Let be a probability space and let be a random variable. The expected value of is equal to     Recall that the event   corresponds to the subset of the sample space . We have    When determining the expected value of a random variable , it is usually easier to use than . To use , you have to do the following:   Determine all values that can take, i.e., determine the range of the function .    For each such value , determine .    Compute the sum of all products .       Linearity of Expectation  linearity of expectation   We now come to one of the most useful tools for determining expected values:    Linearity of Expectation  linearity of expectation   Let be a probability space. For any two random variables and on , and for any two real numbers and ,     Recall that both and are functions from to . Define the random variable to be . That is, as a function , is defined by for all in . Using , we get    Let us return to the example in which we roll two fair and independent dice, one being red and the other being blue. Define the random variable to be the sum of the results of the two rolls. We have seen two ways to compute the expected value of . We now present a third way, which is the easiest one: We define two random variables and We have already seen that By the same computation, we have Observe that Then, by the Linearity of Expectation (i.e., ), we have  We have stated the Linearity of Expectation for two random variables. The proof of can easily be generalized to any finite sequence of random variables:   Generalized Linearity of Expectation  linearity of expectation (generalized)   Let be a probability space, let be an integer, let be a sequence of random variables on , and let be a sequence of real numbers. Then,         The Geometric Distribution  Geometric Distribution   Say we are performing repeated independent Bernoulli trials such that each one is successful with probability and fails with probability . What is the expected number of times that we must perform the trial before we see a success?   We model this problem in the following way: Assume we have a coin that comes up heads with probability and, thus, comes up tails with probability . We flip this coin repeatedly and independently until it comes up heads for the first time. Define the random variable to be the number of times that we flip the coin; this includes the last coin flip, which resulted in heads. We want to determine the expected value of .  The sample space is given by where denotes the sequence consisting of tails followed by one heads. Since the coin flips are independent, the outcome has a probability of , i.e.,  For any integer , if and only if the coin flips give the sequence . It follows that   Geometric Distribution  Geometric Distribution   Let be a real number with . A random variable has a geometric distribution with parameter  , if its distribution function satisfies for any integer .     Expectation of a Geometric Distribution  expectation of a geometric distribution   Let be a real number with and let be a random variable that has a geometric distribution with parameter . Then     Informally, this makes sense. If we see a success with probability in each trial, then we should expect to see a success in 1 out of trials, (if then we expect to perform trials).  A formal proof requires calculus so not given here.    For example, if we flip a fair coin (in which case ) repeatedly and independently until it comes up heads for the first time, then the expected number of coin flips is equal to .    The Binomial Distribution  Binomial Distribution   Say as in we are performing repeated independent Bernoulli trials such that each one is successful with probability and fails with probability . But now we repeat the experiment a fixed number of times, say times, integer . What number of successes can we expect to see in those trials?   We again model this problem using a coin that comes up heads with probability and, thus, comes up tails with probability . We flip the coin, independently, times and define the random variable to be the number of times the coin comes up heads. We want to determine the expected value .  Let and be integers with . Then, if and only if there are exactly  's in the sequence of coin flips. The number of such sequences is equal to , and each one of them has probability .   Binomial Distribution  Binomial Distribution   Let be an integer and let be a real number with . A random variable has a binomial distribution with parameters  and , if its distribution function satisfies for any integer with .     Expectation of a Binomial Distribution  expectation of a binomial distribution   Let be an integer, let be a real number with , and let be a random variable that has a binomial distribution with parameters and . Then    We define a sequence of random variables each representing a Bernoulli trial that takes the value 1 with probability and the value 0 with probability . Observe that because   counts the number of heads in the sequence of coin flips, and    the summation on the right-hand side is equal to the number of 's in the sequence , which, by definition, is equal to the number of successes in the sequence of Bernoulli trials.   Using the Linearity of Expectation ( ), we have Thus, we have to determine the expected value for each . Since each is a Bernoulli trial, by , We conclude that      Variance  Variance    The usefulness of the expected value as a prediction for the outcome of an experiment is increased when the outcome is not likely to deviate too much from the expected value. In this section we shall introduce a measure of this deviation, called the variance.   First, we must define what we mean by deviation.   Deviation of a Random Variable  Deviation of a Random Variable   Let be a random variable with expected value . Then the deviation of at is The deviation can be thought of as the measurement of how far is from the expected value of .    The variance is the weighted average (or expectation) of the square of the deviation. This can be seen as answering the question how much on average does the value of vary from its expected value?   Variance  Variance   Let be a random variable with expected value . Then the variance of , denoted by or , is Note that because of the squaring, the variance is not in the same units as and . A low variance indicates that the values of tend to be close to the expected value, while a large variance indicates that 's outcomes are spread out over a wider range.     Standard Deviation of a Random Variable  Standard Deviation of a Random Variable   Let be a random variable with variance . Then the standard deviation of is Like the variance, a low standard deviation indicates that the outcomes of an experiment, or values of tend to be close to the expected value, while a high standard deviation indicates that the outcomes are spread out over a wider range of values. The standard deviation is often more useful than the variance because it is in the same units as and .     Variance as Expectation of Deviation  Variance as Expectation of the Deviation  If is a numerically valued random variable with expected value , we can rewrite the formula above as an expectation of the deviations. .    Variance Using Squared Expectations  Variance Using Squared Expectations  Applying the definition of , to the formula for variance , we have a third form:    Variance of a Die Roll  Continuing our scenario from , assume we roll a fair die. Define the random variable to be the value of the result, takes each of the values in with equal probability , and we have calculated . To use the variance formula in we calculate the squared difference between and , shown in the table below: From the table we can calculate    Variance of a Die Roll using  We can calculate the same variance of a fair die using . First we calculate . Then we must calculate the expectation of the squares of : Finally:    Variance of Successes in a Bernoulli Trial  Variance of Successes in a Bernoulli Trial   Let be a random variable representing a Bernoulli Trial that takes the value 1 with probability and the value 0 with probability . The variance of is    If is a random variable representing a Bernoulli trial, then we know from that By  It follows using that      Bienaymé's Formula  Bienaymé's Formula   Let be independent random variables on sample space . The variance of the sum is the sum of the variances     Variance of a Geometric Distribution  Variance of a geometric distribution   Let be a real number with and let be a random variable that has a geometric distribution with parameter . The variance of is:    Requires calculus so not given here .     Variance of a Binomial Distribution  variance of a binomial distribution   Let be a random variable that has a binomial distribution with parameters and . Then the variance of is    Like in the proof of we define a sequence of random variables each representing a Bernoulli trial that takes the value 1 with probability and the value 0 with probability . We know from that Therefore using Bienaymé's Formula, , the variance for the whole distribution is       Exercises for Section 3.3    A number is chosen at random from the set . Let be the number chosen. Find the expected value, variance, and standard deviation of .   Because the numbers are chosen randomly: The expected value of is then Using : The standard deviation is then:     A random variable X has the distribution Find the expected value, variance, and standard deviation of .     7 A coin is tossed three times. Let be the number of heads that turn up. Find and (the standard deviation of ).   This is a straightforward application of the variance of a binomial distribution. is a random variable with binomial distribution with parameters and       A random sample of 2400 people are asked if they favor a government proposal to develop new nuclear power plants. If 40 percent of the people in the country are in favor of this proposal, find the expected value and the standard deviation for the number of people in the sample who favored the proposal.    In Las Vegas, a roulette wheel has 38 slots numbered 0, 00, 1, 2, . . . , 36. The 0 and 00 slots are green and half of the remaining 36 slots are red and half are black. A croupier spins the wheel and throws in an ivory ball. If you bet 1 dollar on red, you win 1 dollar if the ball stops in a red slot and otherwise you lose 1 dollar.  You place a 1-dollar bet on black. Let be your winnings. Define and calculate the values of and .   Here the set of outcomes is the color of the slots we care about: {black, not black}. Let be a random variable that represents your winnings, it takes the value 1 if a spin results in a black slot, and the value -1 otherwise. The probability of winning in a spin is the probability the ball lands on a black slot: . The probability of losing a spin is the probability the ball lands on a green or red slot: . Therefore: To calculate the variance we calculate  Using :     Another form of bet for roulette is to bet that a specific number (say 17) will turn up. If the ball stops on your number, you get your dollar back plus 35 dollars. If not, you lose your dollar.  You place a 1-dollar bet on the number 17. Let be your winnings. Define and calculate the values of and . Compare your answers from exercise 5, , and What do these computations tell you about the nature of your winnings if you make a sequence of bets, betting each time on a number versus betting each time on a color?     We flip a fair coin 27 times (independently). For each heads, you win 3 dollars, whereas for each tails, you lose 2 dollars. Define the random variable to be the amount of money that you win. Compute the expected value .   For a single flip:   Therefore the expected amount of winnings is dollars  Alternatively we can think of this as a binomial distribution with . Let be a random variable that takes the value 1 for each head and 0 for each tail.  By  The 13.5 is the expected number of wins, so the expected winnings is dollars. Then we also must calculate the expected losses which is dollars. So the overall expected winnings is     Assume we flip a fair coin twice, independently of each other. Define the following random variables:    Determine the expected values of these three random variables.    Are and independent random variables?    Are and independent random variables?    Are and independent random variables?       "
},
{
  "id": "def-expected-value",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#def-expected-value",
  "type": "Definition",
  "number": "3.3.1",
  "title": "Expected Value.",
  "body": " Expected Value  expected value   Let be a probability space and let be a random variable. The expected value (or expectation or weighted average ) of is defined to be .   "
},
{
  "id": "ex-expected-coin-flip",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#ex-expected-coin-flip",
  "type": "Example",
  "number": "3.3.2",
  "title": "Expected value of a coin flip.",
  "body": " Expected value of a coin flip  Assume we flip a fair coin, in which case the sample space is and . Define the random variable to have value Thus, as a function , we have and . The expected value of is equal to This example shows that the term expected value is a bit misleading: is not the value that we expect to observe, because many times the value of can never equal to its expected value.  "
},
{
  "id": "def-bernoulli-trial",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#def-bernoulli-trial",
  "type": "Definition",
  "number": "3.3.3",
  "title": "Bernoulli Trial.",
  "body": " Bernoulli Trial  Bernoulli Trial   A Bernoulli trial is a special kind of experiment that can have only two outcomes: 1 or 0. A 1 is called a success and a 0 is called a failure . The probability of success is defined as and the probability of failure is therefore or . If is a random variable that represents the outcome of a Bernoulli trial then and where .  In the preceding example ( ) we defined a random variable where Each coin flip is a Bernoulli trial .   "
},
{
  "id": "thm-expectation-of-bernoulli-successes",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#thm-expectation-of-bernoulli-successes",
  "type": "Theorem",
  "number": "3.3.4",
  "title": "Expected Successes in a Bernoulli Trial.",
  "body": " Expected Successes in a Bernoulli Trial  Expected Successes in a Bernoulli Trial   Let be a random variable representing a Bernoulli trial that takes the value 1 with probability and the value 0 with probability . Then    By     "
},
{
  "id": "ex-expected-die-roll",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#ex-expected-die-roll",
  "type": "Example",
  "number": "3.3.5",
  "title": "Expected value of a die roll.",
  "body": " Expected value of a die roll  Assume we roll a fair die. Define the random variable to be the value of the result. Then, takes each of the values in with equal probability , and we get  Now define the random variable to be equal to one divided by the result of the die. In other words, . This random variable takes each of the values in with equal probability , and we get Note that . Thus, this example shows that, in general, .  "
},
{
  "id": "ex-expected-two-dice-roll",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#ex-expected-two-dice-roll",
  "type": "Example",
  "number": "3.3.6",
  "title": "Expected value of rolling two dice.",
  "body": " Expected value of rolling two dice  Consider a fair red die and a fair blue die, and assume we roll them independently, just like . The sample space is where is the result of the red die and is the result of the blue die. Each outcome in has the same probability of .  Let be the random variable whose value is equal to the sum of the results of the two rolls. As a function , we have . The matrix below gives all possible values of . The leftmost column indicates the result of the red die, the top row indicates the result of the blue die, and each other entry is the corresponding value of . The expected value of is equal to   "
},
{
  "id": "thm-comparison-of-expectations",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#thm-comparison-of-expectations",
  "type": "Theorem",
  "number": "3.3.7",
  "title": "Comparison of Expectations.",
  "body": " Comparison of Expectations   Let be a probability space and let and be two random variables on . If , then .    Using and the assumption that , we obtain    "
},
{
  "id": "thm-alternative-expected-value",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#thm-alternative-expected-value",
  "type": "Theorem",
  "number": "3.3.8",
  "title": "Expected Value Alternative Equation.",
  "body": " Expected Value Alternative Equation  expected value   Let be a probability space and let be a random variable. The expected value of is equal to     Recall that the event   corresponds to the subset of the sample space . We have   "
},
{
  "id": "thm-linearity-of-expectation",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#thm-linearity-of-expectation",
  "type": "Theorem",
  "number": "3.3.9",
  "title": "Linearity of Expectation.",
  "body": " Linearity of Expectation  linearity of expectation   Let be a probability space. For any two random variables and on , and for any two real numbers and ,     Recall that both and are functions from to . Define the random variable to be . That is, as a function , is defined by for all in . Using , we get   "
},
{
  "id": "thm-gen-linearity-of-expectation",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#thm-gen-linearity-of-expectation",
  "type": "Theorem",
  "number": "3.3.10",
  "title": "Generalized Linearity of Expectation.",
  "body": " Generalized Linearity of Expectation  linearity of expectation (generalized)   Let be a probability space, let be an integer, let be a sequence of random variables on , and let be a sequence of real numbers. Then,    "
},
{
  "id": "def-geometric-distribution",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#def-geometric-distribution",
  "type": "Definition",
  "number": "3.3.11",
  "title": "Geometric Distribution.",
  "body": " Geometric Distribution  Geometric Distribution   Let be a real number with . A random variable has a geometric distribution with parameter  , if its distribution function satisfies for any integer .   "
},
{
  "id": "thm-expectation-of-geo-distribution",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#thm-expectation-of-geo-distribution",
  "type": "Theorem",
  "number": "3.3.12",
  "title": "Expectation of a Geometric Distribution.",
  "body": " Expectation of a Geometric Distribution  expectation of a geometric distribution   Let be a real number with and let be a random variable that has a geometric distribution with parameter . Then     Informally, this makes sense. If we see a success with probability in each trial, then we should expect to see a success in 1 out of trials, (if then we expect to perform trials).  A formal proof requires calculus so not given here.   "
},
{
  "id": "def-binomial-distribution",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#def-binomial-distribution",
  "type": "Definition",
  "number": "3.3.13",
  "title": "Binomial Distribution.",
  "body": " Binomial Distribution  Binomial Distribution   Let be an integer and let be a real number with . A random variable has a binomial distribution with parameters  and , if its distribution function satisfies for any integer with .   "
},
{
  "id": "thm-expectation-of-binomial-distribution",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#thm-expectation-of-binomial-distribution",
  "type": "Theorem",
  "number": "3.3.14",
  "title": "Expectation of a Binomial Distribution.",
  "body": " Expectation of a Binomial Distribution  expectation of a binomial distribution   Let be an integer, let be a real number with , and let be a random variable that has a binomial distribution with parameters and . Then    We define a sequence of random variables each representing a Bernoulli trial that takes the value 1 with probability and the value 0 with probability . Observe that because   counts the number of heads in the sequence of coin flips, and    the summation on the right-hand side is equal to the number of 's in the sequence , which, by definition, is equal to the number of successes in the sequence of Bernoulli trials.   Using the Linearity of Expectation ( ), we have Thus, we have to determine the expected value for each . Since each is a Bernoulli trial, by , We conclude that   "
},
{
  "id": "def-deviation",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#def-deviation",
  "type": "Definition",
  "number": "3.3.15",
  "title": "Deviation of a Random Variable.",
  "body": " Deviation of a Random Variable  Deviation of a Random Variable   Let be a random variable with expected value . Then the deviation of at is The deviation can be thought of as the measurement of how far is from the expected value of .   "
},
{
  "id": "def-variance",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#def-variance",
  "type": "Definition",
  "number": "3.3.16",
  "title": "Variance.",
  "body": " Variance  Variance   Let be a random variable with expected value . Then the variance of , denoted by or , is Note that because of the squaring, the variance is not in the same units as and . A low variance indicates that the values of tend to be close to the expected value, while a large variance indicates that 's outcomes are spread out over a wider range.   "
},
{
  "id": "def-standard-deviation",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#def-standard-deviation",
  "type": "Definition",
  "number": "3.3.17",
  "title": "Standard Deviation of a Random Variable.",
  "body": " Standard Deviation of a Random Variable  Standard Deviation of a Random Variable   Let be a random variable with variance . Then the standard deviation of is Like the variance, a low standard deviation indicates that the outcomes of an experiment, or values of tend to be close to the expected value, while a high standard deviation indicates that the outcomes are spread out over a wider range of values. The standard deviation is often more useful than the variance because it is in the same units as and .   "
},
{
  "id": "thm-variance-as-expectation",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#thm-variance-as-expectation",
  "type": "Theorem",
  "number": "3.3.18",
  "title": "Variance as Expectation of Deviation.",
  "body": " Variance as Expectation of Deviation  Variance as Expectation of the Deviation  If is a numerically valued random variable with expected value , we can rewrite the formula above as an expectation of the deviations. .  "
},
{
  "id": "thm-variance-using-square-expectations",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#thm-variance-using-square-expectations",
  "type": "Theorem",
  "number": "3.3.19",
  "title": "Variance Using Squared Expectations.",
  "body": " Variance Using Squared Expectations  Variance Using Squared Expectations  Applying the definition of , to the formula for variance , we have a third form:  "
},
{
  "id": "ex-variance-die-roll",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#ex-variance-die-roll",
  "type": "Example",
  "number": "3.3.20",
  "title": "Variance of a Die Roll.",
  "body": " Variance of a Die Roll  Continuing our scenario from , assume we roll a fair die. Define the random variable to be the value of the result, takes each of the values in with equal probability , and we have calculated . To use the variance formula in we calculate the squared difference between and , shown in the table below: From the table we can calculate  "
},
{
  "id": "ex-variance-die-roll-mu2",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#ex-variance-die-roll-mu2",
  "type": "Example",
  "number": "3.3.21",
  "title": "Variance of a Die Roll using <span class=\"process-math\">\\(\\mu^2\\)<\/span>.",
  "body": " Variance of a Die Roll using  We can calculate the same variance of a fair die using . First we calculate . Then we must calculate the expectation of the squares of : Finally:  "
},
{
  "id": "thm-variance-of-bernoulli-trial",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#thm-variance-of-bernoulli-trial",
  "type": "Theorem",
  "number": "3.3.22",
  "title": "Variance of Successes in a Bernoulli Trial.",
  "body": " Variance of Successes in a Bernoulli Trial  Variance of Successes in a Bernoulli Trial   Let be a random variable representing a Bernoulli Trial that takes the value 1 with probability and the value 0 with probability . The variance of is    If is a random variable representing a Bernoulli trial, then we know from that By  It follows using that    "
},
{
  "id": "thm-bienaymes-Formula",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#thm-bienaymes-Formula",
  "type": "Theorem",
  "number": "3.3.23",
  "title": "Bienaymé’s Formula.",
  "body": " Bienaymé's Formula  Bienaymé's Formula   Let be independent random variables on sample space . The variance of the sum is the sum of the variances   "
},
{
  "id": "thm-variance-of-geo-distribution",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#thm-variance-of-geo-distribution",
  "type": "Theorem",
  "number": "3.3.24",
  "title": "Variance of a Geometric Distribution.",
  "body": " Variance of a Geometric Distribution  Variance of a geometric distribution   Let be a real number with and let be a random variable that has a geometric distribution with parameter . The variance of is:    Requires calculus so not given here .  "
},
{
  "id": "thm-variance-of-binomial-distribution",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#thm-variance-of-binomial-distribution",
  "type": "Theorem",
  "number": "3.3.25",
  "title": "Variance of a Binomial Distribution.",
  "body": " Variance of a Binomial Distribution  variance of a binomial distribution   Let be a random variable that has a binomial distribution with parameters and . Then the variance of is    Like in the proof of we define a sequence of random variables each representing a Bernoulli trial that takes the value 1 with probability and the value 0 with probability . We know from that Therefore using Bienaymé's Formula, , the variance for the whole distribution is    "
},
{
  "id": "section3_3-ExpectedValue-8-2",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#section3_3-ExpectedValue-8-2",
  "type": "Exercise",
  "number": "3.3.6.1",
  "title": "",
  "body": " A number is chosen at random from the set . Let be the number chosen. Find the expected value, variance, and standard deviation of .   Because the numbers are chosen randomly: The expected value of is then Using : The standard deviation is then:   "
},
{
  "id": "section3_3-ExpectedValue-8-3",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#section3_3-ExpectedValue-8-3",
  "type": "Exercise",
  "number": "3.3.6.2",
  "title": "",
  "body": " A random variable X has the distribution Find the expected value, variance, and standard deviation of .  "
},
{
  "id": "section3_3-ExpectedValue-8-4",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#section3_3-ExpectedValue-8-4",
  "type": "Exercise",
  "number": "3.3.6.3",
  "title": "",
  "body": "  7 A coin is tossed three times. Let be the number of heads that turn up. Find and (the standard deviation of ).   This is a straightforward application of the variance of a binomial distribution. is a random variable with binomial distribution with parameters and     "
},
{
  "id": "section3_3-ExpectedValue-8-5",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#section3_3-ExpectedValue-8-5",
  "type": "Exercise",
  "number": "3.3.6.4",
  "title": "",
  "body": " A random sample of 2400 people are asked if they favor a government proposal to develop new nuclear power plants. If 40 percent of the people in the country are in favor of this proposal, find the expected value and the standard deviation for the number of people in the sample who favored the proposal.  "
},
{
  "id": "section3_3-ExpectedValue-8-6",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#section3_3-ExpectedValue-8-6",
  "type": "Exercise",
  "number": "3.3.6.5",
  "title": "",
  "body": " In Las Vegas, a roulette wheel has 38 slots numbered 0, 00, 1, 2, . . . , 36. The 0 and 00 slots are green and half of the remaining 36 slots are red and half are black. A croupier spins the wheel and throws in an ivory ball. If you bet 1 dollar on red, you win 1 dollar if the ball stops in a red slot and otherwise you lose 1 dollar.  You place a 1-dollar bet on black. Let be your winnings. Define and calculate the values of and .   Here the set of outcomes is the color of the slots we care about: {black, not black}. Let be a random variable that represents your winnings, it takes the value 1 if a spin results in a black slot, and the value -1 otherwise. The probability of winning in a spin is the probability the ball lands on a black slot: . The probability of losing a spin is the probability the ball lands on a green or red slot: . Therefore: To calculate the variance we calculate  Using :   "
},
{
  "id": "section3_3-ExpectedValue-8-7",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#section3_3-ExpectedValue-8-7",
  "type": "Exercise",
  "number": "3.3.6.6",
  "title": "",
  "body": " Another form of bet for roulette is to bet that a specific number (say 17) will turn up. If the ball stops on your number, you get your dollar back plus 35 dollars. If not, you lose your dollar.  You place a 1-dollar bet on the number 17. Let be your winnings. Define and calculate the values of and . Compare your answers from exercise 5, , and What do these computations tell you about the nature of your winnings if you make a sequence of bets, betting each time on a number versus betting each time on a color?  "
},
{
  "id": "section3_3-ExpectedValue-8-8",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#section3_3-ExpectedValue-8-8",
  "type": "Exercise",
  "number": "3.3.6.7",
  "title": "",
  "body": "  We flip a fair coin 27 times (independently). For each heads, you win 3 dollars, whereas for each tails, you lose 2 dollars. Define the random variable to be the amount of money that you win. Compute the expected value .   For a single flip:   Therefore the expected amount of winnings is dollars  Alternatively we can think of this as a binomial distribution with . Let be a random variable that takes the value 1 for each head and 0 for each tail.  By  The 13.5 is the expected number of wins, so the expected winnings is dollars. Then we also must calculate the expected losses which is dollars. So the overall expected winnings is   "
},
{
  "id": "section3_3-ExpectedValue-8-9",
  "level": "2",
  "url": "section3_3-ExpectedValue.html#section3_3-ExpectedValue-8-9",
  "type": "Exercise",
  "number": "3.3.6.8",
  "title": "",
  "body": " Assume we flip a fair coin twice, independently of each other. Define the following random variables:    Determine the expected values of these three random variables.    Are and independent random variables?    Are and independent random variables?    Are and independent random variables?     "
},
{
  "id": "section4_1-propositions-logic-operators",
  "level": "1",
  "url": "section4_1-propositions-logic-operators.html",
  "type": "Section",
  "number": "4.1",
  "title": "Propositions and Logical Operators",
  "body": "Propositions and Logical Operators  Propositions  Proposition Proposition A proposition is a sentence to which one and only one of the terms true or false can be meaningfully applied.  Some Propositions  Four is an even number ; four is an odd number ; ; and are propositions.  In traditional logic, a declarative statement with a definite truth value is considered a proposition. Although our ultimate aim is to discuss mathematical logic, we won't separate ourselves completely from the traditional setting. This is natural because the basic assumptions, or postulates, of mathematical logic are modeled after the logic we use in everyday life.  Since compound sentences are frequently used in everyday speech, we expect that logical propositions contain connectives such as the words and and or . The statement Europa supports life or Mars supports life is a proposition and, hence, must have a definite truth value. Whatever that truth value is, it should be the same as the truth value of Mars supports life or Europa supports life.   Logical Operations  There are several ways in which we commonly combine simple statements into compound ones. The words\/phrases and , or , not , if ... then... , and ...if and only if ... can be added to one or more propositions to create a new proposition. To avoid any confusion, we will precisely define each one's meaning and introduce its standard symbol.  With the exception of negation ( not ), all of the operations act on pairs of propositions. Since each proposition has two possible truth values, there are four ways that truth can be assigned to two propositions. In defining the effect that a logical operation has on two propositions, the result must be specified for all four cases. The most convenient way of doing this is with a truth table , which we will illustrate by defining the connective and .  Logical Conjunction (AND) Conjunction, Logical   the conjunction,    If and are propositions, their conjunction, (denoted ), is defined by the truth table The statement is only true if both and are true.   Notes:   To read this truth table, you must realize that any one line represents a case: one possible set of values for and .  The numbers 0 and 1 are used to denote false and true, respectively. Sometimes you will see F and T instead. The use of 0 and 1 is consistent with the way that many programming languages treat logical, or Boolean , variables since a single bit, 0 or 1, can represent a truth value.  For each case, the symbol under represents the truth value of . The same is true for . The symbol under represents its truth value for that case. For example, the second row of the truth table represents the case in which is false, is true, and the resulting truth value for is false. As in everyday speech, is true only when both propositions are true.  Just as the letters , and are frequently used in algebra to represent numeric variables, , and seem to be the most commonly used symbols for logical variables. When we say that is a logical variable, we mean that any proposition can take the place of .  One final comment: The order in which we list the cases in truth table rows is standardized in this book. It is important to be consistent with the ordering so that all possible combinations are represented.   There will always be rows in a truth table with propositions  From top to bottom, the first column should have of the rows as 0s followed by of the rows as 1s. The second column should have of the rows 0s followed by of the rows 1s, then another rows of 0s followed another rows of 1s. The final column of simple propositions should have rows of alternating 0s and 1s.  If the truth table involves two simple propositions, the numbers under the simple propositions can be interpreted as the two-digit binary integers in increasing order, 00, 01, 10, and 11, for 0, 1, 2, and 3, respectively.     Logical Disjunction (OR) Disjunction, Logical  the disjunction,   If and are propositions, their disjunction, (denoted ), is defined by the truth table The statement is true if or or both are true.   Logical Negation (NOT) Negation, Logical  the negation of , not   If is a proposition, its negation, , denoted , and is defined by the truth table The statement is true if is false.   Note: Negation is the only standard operator that acts on a single proposition; hence only two cases are needed.  Consider the following propositions from everyday speech:  I'm going to quit if I don't get a raise.  If I pass the final, then I'll graduate.  I'll be going to the movies provided that my car starts.    All three propositions are conditional, they can all be restated to fit into the form If Condition, then Conclusion. For example, the first statement can be rewritten as If I don't get a raise, then I'm going to quit.  A conditional statement is meant to be interpreted as a guarantee; if the condition is true, then the conclusion is expected to be true. It says no more and no less.  Conditional Statement Conditional Statement   The conditional proposition If then .   The conditional statement If then , denoted , is defined by the truth table:     Analysis of a Conditional Proposition Assume your instructor told you If you receive a grade of 95 or better in the final examination, then you will receive an A in this course. Your instructor has made a promise to you. If you fulfill his condition, you expect the conclusion (getting an A) to be forthcoming. Suppose your graded final has been returned to you. Has your instructor told the truth or is your instructor guilty of a falsehood?  Case I: Your final exam score was less than 95 (the condition is false) and you did not receive an A (the conclusion is false). The instructor told the truth.  Case II: Your final exam score was less than 95, yet you received an A for the course. The instructor told the truth. (Perhaps your overall course average was excellent.)  Case III: Your final exam score was greater than 95, but you did not receive an A. The instructor lied.  Case IV: Your final exam score was greater than 95, and you received an A. The instructor told the truth.  To sum up, the only case in which a conditional proposition is false is when the condition is true and the conclusion is false.   The order of the condition and conclusion in a conditional proposition is important. If the condition and conclusion are exchanged, a different proposition is produced.  Converse Converse The converse of the proposition is the proposition .  The converse of If you receive a grade of 95 or better in the final exam, then you will receive an A in this course, is If you receive an A in this course, then you received a grade of 95 or better in the final exam. It should be clear that these two statements say different things.  There is a proposition related to that does have the same logical meaning. This is the contrapositive.  Contrapositive Contrapositive  The contrapositive of the proposition is the proposition .  As we will see when we discuss logical proofs, we can prove a conditional proposition by proving it's contrapositive, which may be somewhat easier.  Biconditional Proposition Biconditional Proposition   The biconditional proposition if and only if   If and are propositions, the biconditional statement if and only if , denoted , is defined by the truth table    Note that is true when and have the same truth values. It is common to abbreviate if and only if to iff.   Conditional Alternative Forms  Although if ... then... and ...if and only if ... are frequently used in everyday speech, there are several alternate forms that you should be aware of. They are summarized in the following lists.  All of the following are equivalent to If then :   implies .  follows from .  , only if .  if .  if , .  whenever .  when .  unless .  is sufficient for .  a sufficient condition for is .  is necessary for .  a necessary condition for is .    Biconditional Alternative Forms   All of the following are equivalent to if and only if :   is necessary and sufficient for .  is equivalent to .  If , then , and if , then .  If , then and conversely.      Exercises for Section 4.1  Let = I like discrete structures , = I will pass this course and = I will do my assignments. Express each of the following propositions in symbolic form:   I like discrete structures and I will pass this course.  I will do my assignments or I will not pass this course.  It is not true that I both like discrete structures, and will do my assignments.  I will not do my assignment and I will not pass this course.               For each of the following propositions, identify simple propositions, express the compound proposition in symbolic form, and determine whether it is true or false:   The world is flat or zero is an even integer.  If 432,802 is a multiple of 4, then 432,802 is even.  5 is a prime number and 6 is not divisible by 4.  and .  and .  The sum of two even integers is even and the sum of two odd integers is odd.    Let , = 8 is an even integer, and = 11 is a prime number. Express the following as a statement in English and determine whether the statement is true or false:                   and 8 is an even integer. False.  If then 8 is an even integer. True.  If and 8 is an even integer then 11 is a prime number. True.  If then either 8 is an even integer or 11 is not a prime number. True.  If then either 8 is an odd integer or 11 is not a prime number. False.  If 8 is not an even integer then . True.     Rewrite each of the following statements using the other conditional forms:   If an integer is a multiple of 4, then it is even.  The fact that a polygon is a square is a sufficient condition that it is a rectangle.  If , then .  If , then or .   is a necessary condition for .    Write the converse of the propositions in exercise 4. Compare the truth of each proposition and its converse. Only the converse of is true.   "
},
{
  "id": "def-proposition",
  "level": "2",
  "url": "section4_1-propositions-logic-operators.html#def-proposition",
  "type": "Definition",
  "number": "4.1.1",
  "title": "Proposition.",
  "body": "Proposition Proposition A proposition is a sentence to which one and only one of the terms true or false can be meaningfully applied. "
},
{
  "id": "some-propositions",
  "level": "2",
  "url": "section4_1-propositions-logic-operators.html#some-propositions",
  "type": "Example",
  "number": "4.1.2",
  "title": "Some Propositions.",
  "body": "Some Propositions  Four is an even number ; four is an odd number ; ; and are propositions. "
},
{
  "id": "def-conjunction",
  "level": "2",
  "url": "section4_1-propositions-logic-operators.html#def-conjunction",
  "type": "Definition",
  "number": "4.1.3",
  "title": "Logical Conjunction (AND).",
  "body": "Logical Conjunction (AND) Conjunction, Logical   the conjunction,    If and are propositions, their conjunction, (denoted ), is defined by the truth table The statement is only true if both and are true.  "
},
{
  "id": "def-disjunction",
  "level": "2",
  "url": "section4_1-propositions-logic-operators.html#def-disjunction",
  "type": "Definition",
  "number": "4.1.4",
  "title": "Logical Disjunction (OR).",
  "body": "Logical Disjunction (OR) Disjunction, Logical  the disjunction,   If and are propositions, their disjunction, (denoted ), is defined by the truth table The statement is true if or or both are true.  "
},
{
  "id": "def-negation",
  "level": "2",
  "url": "section4_1-propositions-logic-operators.html#def-negation",
  "type": "Definition",
  "number": "4.1.5",
  "title": "Logical Negation (NOT).",
  "body": "Logical Negation (NOT) Negation, Logical  the negation of , not   If is a proposition, its negation, , denoted , and is defined by the truth table The statement is true if is false.  "
},
{
  "id": "def-conditional",
  "level": "2",
  "url": "section4_1-propositions-logic-operators.html#def-conditional",
  "type": "Definition",
  "number": "4.1.6",
  "title": "Conditional Statement.",
  "body": "Conditional Statement Conditional Statement   The conditional proposition If then .   The conditional statement If then , denoted , is defined by the truth table:    "
},
{
  "id": "conditional-analysis",
  "level": "2",
  "url": "section4_1-propositions-logic-operators.html#conditional-analysis",
  "type": "Example",
  "number": "4.1.7",
  "title": "Analysis of a Conditional Proposition.",
  "body": "Analysis of a Conditional Proposition Assume your instructor told you If you receive a grade of 95 or better in the final examination, then you will receive an A in this course. Your instructor has made a promise to you. If you fulfill his condition, you expect the conclusion (getting an A) to be forthcoming. Suppose your graded final has been returned to you. Has your instructor told the truth or is your instructor guilty of a falsehood?  Case I: Your final exam score was less than 95 (the condition is false) and you did not receive an A (the conclusion is false). The instructor told the truth.  Case II: Your final exam score was less than 95, yet you received an A for the course. The instructor told the truth. (Perhaps your overall course average was excellent.)  Case III: Your final exam score was greater than 95, but you did not receive an A. The instructor lied.  Case IV: Your final exam score was greater than 95, and you received an A. The instructor told the truth.  To sum up, the only case in which a conditional proposition is false is when the condition is true and the conclusion is false.  "
},
{
  "id": "def-converse",
  "level": "2",
  "url": "section4_1-propositions-logic-operators.html#def-converse",
  "type": "Definition",
  "number": "4.1.8",
  "title": "Converse.",
  "body": "Converse Converse The converse of the proposition is the proposition . "
},
{
  "id": "def-contrapositive",
  "level": "2",
  "url": "section4_1-propositions-logic-operators.html#def-contrapositive",
  "type": "Definition",
  "number": "4.1.9",
  "title": "Contrapositive.",
  "body": "Contrapositive Contrapositive  The contrapositive of the proposition is the proposition . "
},
{
  "id": "def-biconditional",
  "level": "2",
  "url": "section4_1-propositions-logic-operators.html#def-biconditional",
  "type": "Definition",
  "number": "4.1.10",
  "title": "Biconditional Proposition.",
  "body": "Biconditional Proposition Biconditional Proposition   The biconditional proposition if and only if   If and are propositions, the biconditional statement if and only if , denoted , is defined by the truth table   "
},
{
  "id": "list-conditional-forms",
  "level": "2",
  "url": "section4_1-propositions-logic-operators.html#list-conditional-forms",
  "type": "List",
  "number": "4.1.11",
  "title": "Conditional Alternative Forms",
  "body": "Conditional Alternative Forms  Although if ... then... and ...if and only if ... are frequently used in everyday speech, there are several alternate forms that you should be aware of. They are summarized in the following lists.  All of the following are equivalent to If then :   implies .  follows from .  , only if .  if .  if , .  whenever .  when .  unless .  is sufficient for .  a sufficient condition for is .  is necessary for .  a necessary condition for is .   "
},
{
  "id": "list-biconditional-forms",
  "level": "2",
  "url": "section4_1-propositions-logic-operators.html#list-biconditional-forms",
  "type": "List",
  "number": "4.1.12",
  "title": "Biconditional Alternative Forms",
  "body": "Biconditional Alternative Forms   All of the following are equivalent to if and only if :   is necessary and sufficient for .  is equivalent to .  If , then , and if , then .  If , then and conversely.   "
},
{
  "id": "exercises-4-1-2",
  "level": "2",
  "url": "section4_1-propositions-logic-operators.html#exercises-4-1-2",
  "type": "Exercise",
  "number": "4.1.3.1",
  "title": "",
  "body": "Let = I like discrete structures , = I will pass this course and = I will do my assignments. Express each of the following propositions in symbolic form:   I like discrete structures and I will pass this course.  I will do my assignments or I will not pass this course.  It is not true that I both like discrete structures, and will do my assignments.  I will not do my assignment and I will not pass this course.              "
},
{
  "id": "exercises-4-1-3",
  "level": "2",
  "url": "section4_1-propositions-logic-operators.html#exercises-4-1-3",
  "type": "Exercise",
  "number": "4.1.3.2",
  "title": "",
  "body": "For each of the following propositions, identify simple propositions, express the compound proposition in symbolic form, and determine whether it is true or false:   The world is flat or zero is an even integer.  If 432,802 is a multiple of 4, then 432,802 is even.  5 is a prime number and 6 is not divisible by 4.  and .  and .  The sum of two even integers is even and the sum of two odd integers is odd.   "
},
{
  "id": "exercises-4-1-4",
  "level": "2",
  "url": "section4_1-propositions-logic-operators.html#exercises-4-1-4",
  "type": "Exercise",
  "number": "4.1.3.3",
  "title": "",
  "body": "Let , = 8 is an even integer, and = 11 is a prime number. Express the following as a statement in English and determine whether the statement is true or false:                   and 8 is an even integer. False.  If then 8 is an even integer. True.  If and 8 is an even integer then 11 is a prime number. True.  If then either 8 is an even integer or 11 is not a prime number. True.  If then either 8 is an odd integer or 11 is not a prime number. False.  If 8 is not an even integer then . True.   "
},
{
  "id": "exercises-4-1-5",
  "level": "2",
  "url": "section4_1-propositions-logic-operators.html#exercises-4-1-5",
  "type": "Exercise",
  "number": "4.1.3.4",
  "title": "",
  "body": "Rewrite each of the following statements using the other conditional forms:   If an integer is a multiple of 4, then it is even.  The fact that a polygon is a square is a sufficient condition that it is a rectangle.  If , then .  If , then or .   is a necessary condition for .   "
},
{
  "id": "exercises-4-1-6",
  "level": "2",
  "url": "section4_1-propositions-logic-operators.html#exercises-4-1-6",
  "type": "Exercise",
  "number": "4.1.3.5",
  "title": "",
  "body": "Write the converse of the propositions in exercise 4. Compare the truth of each proposition and its converse. Only the converse of is true. "
},
{
  "id": "section4_2-truth-tables",
  "level": "1",
  "url": "section4_2-truth-tables.html",
  "type": "Section",
  "number": "4.2",
  "title": "Truth Tables and Propositions Generated by a Set",
  "body": "Truth Tables and Propositions Generated by a Set  Truth Tables  Consider the compound proposition , where , , and are propositions. This is an example of a proposition generated by , , and . We will define this terminology later in the section. Since each of the three simple propositions has two possible truth values, it follows that there are eight different combinations of truth values that determine a value for . These values can be obtained from a truth table for . To construct the truth table, we build from , , and and from the logical operators. The result is the truth table below. Strictly speaking, the first three columns and the last column make up the truth table for . The other columns are work space needed to build up to .   Truth Table for     0 0 0 0 1 0 0  0 0 1 0 1 1 1  0 1 0 0 0 0 0  0 1 1 0 0 0 0  1 0 0 0 1 0 0  1 0 1 0 1 1 1  1 1 0 1 0 0 1  1 1 1 1 0 0 1    Note that the first three columns of the truth table are an enumeration of the eight three-digit binary integers. This standardizes the order in which the cases are listed. In general, if is generated by simple propositions, then the truth table for will have rows with the first columns being an enumeration of the digit binary integers. In our example, we can see at a glance that for exactly four of the eight cases, will be true. For example, if and are true and is false (the sixth case), then is true.  Let be any set of propositions. We will give two definitions of a proposition generated by S. The first is a bit imprecise, but should be clear. The second definition is called a recursive definition . If you find it confusing, use the first definition and return to the second later.   Propositions Generated by a Set  Proposition Generated by a Set  Let be any set of propositions. A proposition generated by is any valid combination of propositions in with conjunction, disjunction, and negation. Or, to be more precise,  If , then is a proposition generated by , and  If and are propositions generated by , then so are , , , and .     Note: We have not included the conditional and biconditional in the definition because they can both be generated from conjunction, disjunction, and negation, as we will see later.  If is a finite set, then we may use slightly different terminology. For example, if , we might say that a proposition is generated by , and instead from .  A proposition generated by a set need not include each element of in its expression. For example, is a proposition generated by , and .   Precedence of Logical Operators  It is customary to use the following hierarchy for interpreting propositions, with parentheses overriding this order:  First: Negation  Second: Conjunction  Third: Disjunction  Fourth: The conditional operation  Fifth: The biconditional operation   Within any level of the hierarchy, work from left to right. Using these rules, is taken to mean . These precedence rules are universal, and are exactly those used by computer languages to interpret logical expressions.  Examples of the Hierarchy of Logical Operations  A few shortened expressions and their fully parenthesized versions:    is .   is .   is .   is .       Exercises for Section 4.2  Construct the truth tables of:                              Construct the truth tables of:                  Rewrite the following with as few extraneous parentheses as possible:               In what order are the operations in the following propositions performed?        Determine the number of rows in the truth table of a proposition containing four variables .  rows.  If there are 45 lines on a sheet of paper, and you want to reserve one line for each line in a truth table, how large could be if you can write truth tables of propositions generated by on the sheet of paper?   "
},
{
  "id": "tt32-1",
  "level": "2",
  "url": "section4_2-truth-tables.html#tt32-1",
  "type": "Table",
  "number": "4.2.1",
  "title": "Truth Table for <span class=\"process-math\">\\(c= (p \\land  q)\\lor  (\\neg q \\land  r)\\)<\/span>",
  "body": " Truth Table for     0 0 0 0 1 0 0  0 0 1 0 1 1 1  0 1 0 0 0 0 0  0 1 1 0 0 0 0  1 0 0 0 1 0 0  1 0 1 0 1 1 1  1 1 0 1 0 0 1  1 1 1 1 0 0 1   "
},
{
  "id": "def-proposition-generated-by-set",
  "level": "2",
  "url": "section4_2-truth-tables.html#def-proposition-generated-by-set",
  "type": "Definition",
  "number": "4.2.2",
  "title": "Proposition Generated by a Set.",
  "body": "Proposition Generated by a Set  Let be any set of propositions. A proposition generated by is any valid combination of propositions in with conjunction, disjunction, and negation. Or, to be more precise,  If , then is a proposition generated by , and  If and are propositions generated by , then so are , , , and .    "
},
{
  "id": "hierarchy-examples",
  "level": "2",
  "url": "section4_2-truth-tables.html#hierarchy-examples",
  "type": "Example",
  "number": "4.2.3",
  "title": "Examples of the Hierarchy of Logical Operations.",
  "body": "Examples of the Hierarchy of Logical Operations  A few shortened expressions and their fully parenthesized versions:    is .   is .   is .   is .    "
},
{
  "id": "exercises-4-2-2",
  "level": "2",
  "url": "section4_2-truth-tables.html#exercises-4-2-2",
  "type": "Exercise",
  "number": "4.2.4.1",
  "title": "",
  "body": "Construct the truth tables of:                             "
},
{
  "id": "exercises-4-2-3",
  "level": "2",
  "url": "section4_2-truth-tables.html#exercises-4-2-3",
  "type": "Exercise",
  "number": "4.2.4.2",
  "title": "",
  "body": "Construct the truth tables of:                 "
},
{
  "id": "exercises-4-2-4",
  "level": "2",
  "url": "section4_2-truth-tables.html#exercises-4-2-4",
  "type": "Exercise",
  "number": "4.2.4.3",
  "title": "",
  "body": "Rewrite the following with as few extraneous parentheses as possible:              "
},
{
  "id": "exercises-4-2-5",
  "level": "2",
  "url": "section4_2-truth-tables.html#exercises-4-2-5",
  "type": "Exercise",
  "number": "4.2.4.4",
  "title": "",
  "body": "In what order are the operations in the following propositions performed?       "
},
{
  "id": "exercises-4-2-6",
  "level": "2",
  "url": "section4_2-truth-tables.html#exercises-4-2-6",
  "type": "Exercise",
  "number": "4.2.4.5",
  "title": "",
  "body": "Determine the number of rows in the truth table of a proposition containing four variables .  rows. "
},
{
  "id": "exercises-4-2-7",
  "level": "2",
  "url": "section4_2-truth-tables.html#exercises-4-2-7",
  "type": "Exercise",
  "number": "4.2.4.6",
  "title": "",
  "body": "If there are 45 lines on a sheet of paper, and you want to reserve one line for each line in a truth table, how large could be if you can write truth tables of propositions generated by on the sheet of paper? "
},
{
  "id": "section4_3-equivalence-implication",
  "level": "1",
  "url": "section4_3-equivalence-implication.html",
  "type": "Section",
  "number": "4.3",
  "title": "Equivalence and Implication",
  "body": " Equivalence and Implication   Consider two propositions generated by and : and . At first glance, they are different propositions. In form, they are different, but they have the same meaning. One way to see this is to substitute actual propositions for and ; such as : I've been to Toronto; and : I've been to Chicago.  Then translates to I haven't been to both Toronto and Chicago, while is I haven't been to Toronto or I haven't been to Chicago. Determine the truth values of these propositions. Naturally, they will be true for some people and false for others. What is important is that no matter what truth values they have, and will have the same truth value. The easiest way to see this is by examining the truth tables of these propositions.   Truth Tables for and                      0  0  1  1  1    0  1  1  1  1    1  0  1  1  1    1  1  0  0  1     In all four cases, and have the same truth value. Furthermore, when the biconditional operator is applied to them, the result is a value of true in all cases. A proposition such as this is called a tautology .    Tautologies and Contradictions   Tautology  Tautology      symbol for a tautology    An expression involving logical variables that is true in all cases is a tautology. The number 1 is used to symbolize a tautology.     Some Tautologies  All of the following are tautologies because their truth tables consist of a column of 1's.     .                               Contradiction  Contradiction      symbol for a contradiction    An expression involving logical variables that is false for all cases is called a contradiction. The number 0 is used to symbolize a contradiction.     Some Contradictions  All of the following are contradictions because their truth tables consist of a column of 0's.                Equivalence   Equivalence  Equivalence      is logically equivalent to    Let be a set of propositions and let and be propositions generated by . and are equivalent if and only if is a tautology. The equivalence of and is denoted or .    Equivalence is to logic as equality is to algebra. Just as there are many ways of writing an algebraic expression, the same logical meaning can be expressed in many different ways.   Some Equivalences  The following are all equivalences:      .           .      All tautologies are equivalent to one another.   An equivalence to  .    All contradictions are equivalent to one another.   An equivalence to  .      Implication  Consider the two propositions:      : The money is behind Door A; and    : The money is behind Door A or Door B.     Imagine that you were told that there is a large sum of money behind one of two doors marked A and B, and that one of the two propositions and is true and the other is false. Which door would you choose? All that you need to realize is that if is true, then will also be true. Since we know that this can't be the case, must be the true proposition and the money is behind Door B.  This is an example of a situation in which the truth of one proposition leads to the truth of another. Certainly, can be true when is false; but can't be true when is false. In this case, we say that implies .  Consider the truth table of , . If implies , then the third case can be ruled out, since it is the case that makes a conditional proposition false.   Implication  Implication      implies    Let be a set of propositions and let and be propositions generated by . We say that implies if is a tautology. We write to indicate this implication.     Disjunctive Addition  A commonly used implication called disjunctive addition or the addition rule of inference is , which is verified by truth table .    Truth Table to verify that                   0  0  0  1    0  1  1  1    1  0  1  1    1  1  1  1     If we let represent The money is behind Door A and represent The money is behind Door B,  is a formalized version of the reasoning used in . A common name for this implication is disjunctive addition. In the next section we will consider some of the most commonly used implications and equivalences.  When we defined what we mean by a , we didn't include the conditional and biconditional operators. This was because of the two equivalences and . Therefore, any proposition that includes the conditional or biconditional operators can be written in an equivalent way using only conjunction, disjunction, and negation. We could even dispense with disjunction since is equivalent to a proposition that uses only conjunction and negation.    A Universal Operation  We close this section with a final logical operation, NAND (for \"not and\") also known as the Sheffer Stroke, that has the interesting property that all other logical operations can be created from it. You can explore this operation in   NAND  Sheffer Stroke  NAND      NAND of and    NAND is the logical operator defined by the following truth table. Note that it is equivalent to the negation of conjunction or \"not and\":   Truth Table for NAND            0 0 1 1  0 1 1 1  1 0 1 1  1 1 0 0        Exercises for Section 4.3   Given the following propositions generated by , , and , which are equivalent to one another?                                                     Construct the truth table for .    Give an example other than itself of a proposition generated by , , and that is equivalent to .    Give an example of a proposition other than that implies .    Give an example of a proposition other than that is implied by .       Is an implication equivalent to its converse? Verify your answer using a truth table.   No. In symbolic form the question is: Is ?  This table indicates that an implication is not always equivalent to its converse.    Suppose that is a proposition generated by , , and that is equivalent to . Write out the truth table for .    How large is the largest set of propositions generated by and with the property that no two elements are equivalent?   Let be any proposition generated by and . The truth table for has 4 rows and there are 2 choices for a truth value for for each row, so there are possible propositions.    Find a proposition that is equivalent to and uses only conjunction and negation.    Explain why a contradiction implies any proposition and any proposition implies a tautology.    and are tautologies.    The significance of NAND is that it is a universal operation in that all other logical operations can be built from it. It is shown in that .   Prove that .    Build using only .    Build using only .      "
},
{
  "id": "tt-tautology",
  "level": "2",
  "url": "section4_3-equivalence-implication.html#tt-tautology",
  "type": "Table",
  "number": "4.3.1",
  "title": "Truth Tables for <span class=\"process-math\">\\(\\neg (p \\land q)\\)<\/span> and <span class=\"process-math\">\\(\\neg p \\lor \\neg q\\)<\/span>",
  "body": " Truth Tables for and                      0  0  1  1  1    0  1  1  1  1    1  0  1  1  1    1  1  0  0  1    "
},
{
  "id": "def-tautology",
  "level": "2",
  "url": "section4_3-equivalence-implication.html#def-tautology",
  "type": "Definition",
  "number": "4.3.2",
  "title": "Tautology.",
  "body": " Tautology  Tautology      symbol for a tautology    An expression involving logical variables that is true in all cases is a tautology. The number 1 is used to symbolize a tautology.   "
},
{
  "id": "some-tautologies",
  "level": "2",
  "url": "section4_3-equivalence-implication.html#some-tautologies",
  "type": "Example",
  "number": "4.3.3",
  "title": "Some Tautologies.",
  "body": " Some Tautologies  All of the following are tautologies because their truth tables consist of a column of 1's.     .                             "
},
{
  "id": "def-contradiction",
  "level": "2",
  "url": "section4_3-equivalence-implication.html#def-contradiction",
  "type": "Definition",
  "number": "4.3.4",
  "title": "Contradiction.",
  "body": " Contradiction  Contradiction      symbol for a contradiction    An expression involving logical variables that is false for all cases is called a contradiction. The number 0 is used to symbolize a contradiction.   "
},
{
  "id": "some-contradictions",
  "level": "2",
  "url": "section4_3-equivalence-implication.html#some-contradictions",
  "type": "Example",
  "number": "4.3.5",
  "title": "Some Contradictions.",
  "body": " Some Contradictions  All of the following are contradictions because their truth tables consist of a column of 0's.             "
},
{
  "id": "def-equivalence",
  "level": "2",
  "url": "section4_3-equivalence-implication.html#def-equivalence",
  "type": "Definition",
  "number": "4.3.6",
  "title": "Equivalence.",
  "body": " Equivalence  Equivalence      is logically equivalent to    Let be a set of propositions and let and be propositions generated by . and are equivalent if and only if is a tautology. The equivalence of and is denoted or .   "
},
{
  "id": "ex-some-equivalences",
  "level": "2",
  "url": "section4_3-equivalence-implication.html#ex-some-equivalences",
  "type": "Example",
  "number": "4.3.7",
  "title": "Some Equivalences.",
  "body": " Some Equivalences  The following are all equivalences:      .           .     "
},
{
  "id": "equivalence_to_1",
  "level": "2",
  "url": "section4_3-equivalence-implication.html#equivalence_to_1",
  "type": "Example",
  "number": "4.3.8",
  "title": "An equivalence to <span class=\"process-math\">\\(1\\)<\/span>.",
  "body": " An equivalence to  .   "
},
{
  "id": "equivalence_to_0",
  "level": "2",
  "url": "section4_3-equivalence-implication.html#equivalence_to_0",
  "type": "Example",
  "number": "4.3.9",
  "title": "An equivalence to <span class=\"process-math\">\\(0\\)<\/span>.",
  "body": " An equivalence to  .   "
},
{
  "id": "section4_3-equivalence-implication-5-3",
  "level": "2",
  "url": "section4_3-equivalence-implication.html#section4_3-equivalence-implication-5-3",
  "type": "Table",
  "number": "4.3.10",
  "title": "",
  "body": "    : The money is behind Door A; and    : The money is behind Door A or Door B.    "
},
{
  "id": "def-implication",
  "level": "2",
  "url": "section4_3-equivalence-implication.html#def-implication",
  "type": "Definition",
  "number": "4.3.11",
  "title": "Implication.",
  "body": " Implication  Implication      implies    Let be a set of propositions and let and be propositions generated by . We say that implies if is a tautology. We write to indicate this implication.   "
},
{
  "id": "ex-disjunctive-addition",
  "level": "2",
  "url": "section4_3-equivalence-implication.html#ex-disjunctive-addition",
  "type": "Example",
  "number": "4.3.12",
  "title": "Disjunctive Addition.",
  "body": " Disjunctive Addition  A commonly used implication called disjunctive addition or the addition rule of inference is , which is verified by truth table .  "
},
{
  "id": "tt-disjunctive-addition",
  "level": "2",
  "url": "section4_3-equivalence-implication.html#tt-disjunctive-addition",
  "type": "Table",
  "number": "4.3.13",
  "title": "Truth Table to verify that <span class=\"process-math\">\\(p \\Rightarrow (p \\lor q)\\)<\/span>",
  "body": " Truth Table to verify that                   0  0  0  1    0  1  1  1    1  0  1  1    1  1  1  1    "
},
{
  "id": "def-NAND",
  "level": "2",
  "url": "section4_3-equivalence-implication.html#def-NAND",
  "type": "Definition",
  "number": "4.3.14",
  "title": "NAND.",
  "body": " NAND  Sheffer Stroke  NAND      NAND of and    NAND is the logical operator defined by the following truth table. Note that it is equivalent to the negation of conjunction or \"not and\":   Truth Table for NAND            0 0 1 1  0 1 1 1  1 0 1 1  1 1 0 0     "
},
{
  "id": "exercises-4-3-2",
  "level": "2",
  "url": "section4_3-equivalence-implication.html#exercises-4-3-2",
  "type": "Exercise",
  "number": "4.3.5.1",
  "title": "",
  "body": " Given the following propositions generated by , , and , which are equivalent to one another?                                                "
},
{
  "id": "exercises-4-3-3",
  "level": "2",
  "url": "section4_3-equivalence-implication.html#exercises-4-3-3",
  "type": "Exercise",
  "number": "4.3.5.2",
  "title": "",
  "body": "    Construct the truth table for .    Give an example other than itself of a proposition generated by , , and that is equivalent to .    Give an example of a proposition other than that implies .    Give an example of a proposition other than that is implied by .     "
},
{
  "id": "exercises-4-3-4",
  "level": "2",
  "url": "section4_3-equivalence-implication.html#exercises-4-3-4",
  "type": "Exercise",
  "number": "4.3.5.3",
  "title": "",
  "body": " Is an implication equivalent to its converse? Verify your answer using a truth table.   No. In symbolic form the question is: Is ?  This table indicates that an implication is not always equivalent to its converse.  "
},
{
  "id": "exercises-4-3-5",
  "level": "2",
  "url": "section4_3-equivalence-implication.html#exercises-4-3-5",
  "type": "Exercise",
  "number": "4.3.5.4",
  "title": "",
  "body": " Suppose that is a proposition generated by , , and that is equivalent to . Write out the truth table for .  "
},
{
  "id": "exercises-4-3-6",
  "level": "2",
  "url": "section4_3-equivalence-implication.html#exercises-4-3-6",
  "type": "Exercise",
  "number": "4.3.5.5",
  "title": "",
  "body": " How large is the largest set of propositions generated by and with the property that no two elements are equivalent?   Let be any proposition generated by and . The truth table for has 4 rows and there are 2 choices for a truth value for for each row, so there are possible propositions.  "
},
{
  "id": "exercises-4-3-7",
  "level": "2",
  "url": "section4_3-equivalence-implication.html#exercises-4-3-7",
  "type": "Exercise",
  "number": "4.3.5.6",
  "title": "",
  "body": " Find a proposition that is equivalent to and uses only conjunction and negation.  "
},
{
  "id": "exercises-4-3-8",
  "level": "2",
  "url": "section4_3-equivalence-implication.html#exercises-4-3-8",
  "type": "Exercise",
  "number": "4.3.5.7",
  "title": "",
  "body": " Explain why a contradiction implies any proposition and any proposition implies a tautology.    and are tautologies.  "
},
{
  "id": "ex-nand",
  "level": "2",
  "url": "section4_3-equivalence-implication.html#ex-nand",
  "type": "Exercise",
  "number": "4.3.5.8",
  "title": "",
  "body": " The significance of NAND is that it is a universal operation in that all other logical operations can be built from it. It is shown in that .   Prove that .    Build using only .    Build using only .    "
},
{
  "id": "section4_4-logic-laws",
  "level": "1",
  "url": "section4_4-logic-laws.html",
  "type": "Section",
  "number": "4.4",
  "title": "The Laws of Logic",
  "body": " The Laws of Logic    In this section, we will list the most basic equivalences and implications of logic. Most of the equivalences listed in Table should be obvious to the reader. Remember, 0 stands for contradiction, 1 for tautology. Many logical laws are similar to algebraic laws. For example, there is a logical law corresponding to the associative law of addition, . In fact, associativity of both conjunction and disjunction are among the laws of logic. Notice that with one exception, the laws are paired in such a way that exchanging the symbols , , 1 and 0 for , , 0, and 1, respectively, in any law gives you a second law. For example, results in . This is called a duality principle . For now, think of it as a way of remembering two laws for the price of one. We will leave it to the reader to verify a few of these laws with truth tables. However, the reader should be careful in applying duality to the conditional operator and implication since the dual involves taking the converse. For example, the dual of is , which is usually written .   Verification of an Identity Law  The Identity Law can be verified with this truth table. The fact that is a tautology serves as a valid proof.   Truth table to demonstrate the identity law for conjunction.                  0  1  0  1    1  1  1  1       Basic Logical Laws - Equivalences     Commutative Laws               Associative Laws         (     Distributive Laws               Identity Laws               Negation Laws               Idempotent Laws               Null Laws               Absorption Laws               DeMorgan's Laws               Involution or Double Negation Law             Some of the logical laws in might be less obvious to you. For any that you are not comfortable with, substitute actual propositions for the logical variables. For example, if is John owns a pet store and is John likes pets, the detachment law should make sense.   Basic Logical Laws - Common Implications and Equivalences    Detachment     or Modus Ponens       Indirect Reasoning     or Modus Tollens       Disjunctive Addition           Conjunctive Simplification             Disjunctive Simplification       or Disjunctive Syllogism       Chain Rule     or Hypothetical Syllogism       Resolution           Conjunction           Conditional Equivalence           Biconditional Equivalences           Contrapositive              Exercises for Section 4.4   Write the following in symbolic notation and determine whether it is a tautology: If I study then I will learn. I will not learn. Therefore, I do not study.   Let , The argument is: call the argument . .  Since is a tautology, the argument is valid.    Show that the common fallacy is not a law of logic.    Describe, in general, how duality can be applied to implications if we introduce the relation , read is implied by. We define this relation by .   In any true statement , replace; with , with , 0 with 1, 1 with 0, with , and with . Leave all other connectives unchanged.    Write the dual of the following statements:              "
},
{
  "id": "ex-identity-and",
  "level": "2",
  "url": "section4_4-logic-laws.html#ex-identity-and",
  "type": "Example",
  "number": "4.4.1",
  "title": "Verification of an Identity Law.",
  "body": " Verification of an Identity Law  The Identity Law can be verified with this truth table. The fact that is a tautology serves as a valid proof.   Truth table to demonstrate the identity law for conjunction.                  0  1  0  1    1  1  1  1     "
},
{
  "id": "table-equivalences",
  "level": "2",
  "url": "section4_4-logic-laws.html#table-equivalences",
  "type": "Table",
  "number": "4.4.3",
  "title": "Basic Logical Laws - Equivalences",
  "body": " Basic Logical Laws - Equivalences     Commutative Laws               Associative Laws         (     Distributive Laws               Identity Laws               Negation Laws               Idempotent Laws               Null Laws               Absorption Laws               DeMorgan's Laws               Involution or Double Negation Law            "
},
{
  "id": "table-implications",
  "level": "2",
  "url": "section4_4-logic-laws.html#table-implications",
  "type": "Table",
  "number": "4.4.4",
  "title": "Basic Logical Laws - Common Implications and Equivalences",
  "body": " Basic Logical Laws - Common Implications and Equivalences    Detachment     or Modus Ponens       Indirect Reasoning     or Modus Tollens       Disjunctive Addition           Conjunctive Simplification             Disjunctive Simplification       or Disjunctive Syllogism       Chain Rule     or Hypothetical Syllogism       Resolution           Conjunction           Conditional Equivalence           Biconditional Equivalences           Contrapositive           "
},
{
  "id": "exercises-4_4-2",
  "level": "2",
  "url": "section4_4-logic-laws.html#exercises-4_4-2",
  "type": "Exercise",
  "number": "4.4.2.1",
  "title": "",
  "body": " Write the following in symbolic notation and determine whether it is a tautology: If I study then I will learn. I will not learn. Therefore, I do not study.   Let , The argument is: call the argument . .  Since is a tautology, the argument is valid.  "
},
{
  "id": "exercises-4_4-3",
  "level": "2",
  "url": "section4_4-logic-laws.html#exercises-4_4-3",
  "type": "Exercise",
  "number": "4.4.2.2",
  "title": "",
  "body": " Show that the common fallacy is not a law of logic.  "
},
{
  "id": "exercises-4_4-4",
  "level": "2",
  "url": "section4_4-logic-laws.html#exercises-4_4-4",
  "type": "Exercise",
  "number": "4.4.2.3",
  "title": "",
  "body": " Describe, in general, how duality can be applied to implications if we introduce the relation , read is implied by. We define this relation by .   In any true statement , replace; with , with , 0 with 1, 1 with 0, with , and with . Leave all other connectives unchanged.  "
},
{
  "id": "exercises-4_4-5",
  "level": "2",
  "url": "section4_4-logic-laws.html#exercises-4_4-5",
  "type": "Exercise",
  "number": "4.4.2.4",
  "title": "",
  "body": " Write the dual of the following statements:            "
},
{
  "id": "section4_5-propositions-over-universe",
  "level": "1",
  "url": "section4_5-propositions-over-universe.html",
  "type": "Section",
  "number": "4.5",
  "title": "Propositions over a Universe",
  "body": "Propositions over a Universe  Propositions over a Universe  Consider the sentence He was a member of the Boston Red Sox. There is no way that we can assign a truth value to this sentence unless he is specified. For that reason, we would not consider it a proposition. However, he can be considered a variable that holds a place for any name. We might want to restrict the value of he to all names in the major-league baseball record books. If that is the case, we say that the sentence is a proposition over the set of major-league baseball players, past and present.  Proposition over a Universe  Let be a nonempty set. A proposition over is a sentence that contains a variable that can take on any value in and that has a definite truth value as a result of any such substitution.  A proposition over a universe is also known as predicate or a propositional function .   Some propositions over a variety of universes    A few propositions over the integers are , , and is a multiple of 3.  A few propositions over the rational numbers are , , and .  A few propositions over the subsets of are , , and .     All of the laws of logic that we listed in Section 4.4 are valid for propositions over a universe. For example, if and are propositions over the integers, we can be certain that , because is a tautology and is true no matter what values the variables in and are given. If we specify and to be and , we can also say that implies . This is not a usual implication, but for the propositions under discussion, it is true. One way of describing this situation in general is with truth sets.   Truth Sets  Truth Set Truth Set  the truth set of  If is a proposition over , the truth set of is .   Truth Set Example The truth set of the proposition , taken as a proposition over the power set of is .  Truth sets depend on the universe Over the universe (the integers), the truth set of is . If the universe is expanded to the rational numbers, the truth set becomes . The term solution set is often used for the truth set of an equation such as the one in this example.  Tautologies and Contradictions over a Universe A proposition over is a tautology if its truth set is . It is a contradiction if its truth set is empty.    Tautology, Contradiction over  is a tautology over the rational numbers. is a contradiction over the rationals.  The truth sets of compound propositions can be expressed in terms of the truth sets of simple propositions. For example, if if and only if makes true. This is true if an only if makes both and true, which, in turn, is true if and only if . This explains why the truth set of the conjunction of two propositions equals the intersection of the truth sets of the two propositions. The following list summarizes the connection between compound and simple truth sets   Truth Sets of Compound Statements          Equivalence of propositions over a universe Two propositions, and , are equivalent if is a tautology. In terms of truth sets, this means that and are equivalent if .  Some pairs of equivalent propositions    and are equivalent propositions over the integers.   and are equivalent propositions over the power set of the natural numbers.    Implication for propositions over a universe Implication. If and are propositions over , implies if is a tautology.  Since the truth set of is , the Venn diagram for in shows that implication, , must be when ( would be inside of ).    Venn diagram for the truth set of a conditional statement.   A Venn diagram illustrating the truth set of a conditional statement.     Examples of Implications   Over the natural numbers: since  Over the power set of the integers: implies  Over the power set of the integers,      Exercises for Section 4.5  If , what are the truth sets of the following propositions?    .   and .   .   is a proper subset of .   .                  Over the universe of positive integers, define    :  is prime and .  :  is a power of 3.  :  is a divisor of 27.     What are the truth sets of these propositions?  Which of the three propositions implies one of the others?                   If , how many propositions over could you list without listing two that are equivalent? There are subsets of , allowing for the possibility of nonequivalent propositions over .    Given the propositions over the natural numbers:    , , and    What are the truth sets of:            Suppose that is a proposition over . If , give two examples of propositions that are equivalent to .  Two possible answers: is odd and    Determine the truth sets of the following propositions over the positive integers:  .   Determine for and above.   Let the universe be , the set of integers. Which of the following propositions are equivalent over ?    :   :   :     and   "
},
{
  "id": "def-proposition-over-U",
  "level": "2",
  "url": "section4_5-propositions-over-universe.html#def-proposition-over-U",
  "type": "Definition",
  "number": "4.5.1",
  "title": "Proposition over a Universe.",
  "body": "Proposition over a Universe  Let be a nonempty set. A proposition over is a sentence that contains a variable that can take on any value in and that has a definite truth value as a result of any such substitution.  A proposition over a universe is also known as predicate or a propositional function .  "
},
{
  "id": "ex-some-propositions-over-U",
  "level": "2",
  "url": "section4_5-propositions-over-universe.html#ex-some-propositions-over-U",
  "type": "Example",
  "number": "4.5.2",
  "title": "Some propositions over a variety of universes.",
  "body": "Some propositions over a variety of universes    A few propositions over the integers are , , and is a multiple of 3.  A few propositions over the rational numbers are , , and .  A few propositions over the subsets of are , , and .    "
},
{
  "id": "def-truth-set",
  "level": "2",
  "url": "section4_5-propositions-over-universe.html#def-truth-set",
  "type": "Definition",
  "number": "4.5.3",
  "title": "Truth Set.",
  "body": "Truth Set Truth Set  the truth set of  If is a proposition over , the truth set of is .  "
},
{
  "id": "ex-set-prop",
  "level": "2",
  "url": "section4_5-propositions-over-universe.html#ex-set-prop",
  "type": "Example",
  "number": "4.5.4",
  "title": "Truth Set Example.",
  "body": "Truth Set Example The truth set of the proposition , taken as a proposition over the power set of is . "
},
{
  "id": "ex-vary-U",
  "level": "2",
  "url": "section4_5-propositions-over-universe.html#ex-vary-U",
  "type": "Example",
  "number": "4.5.5",
  "title": "Truth sets depend on the universe.",
  "body": "Truth sets depend on the universe Over the universe (the integers), the truth set of is . If the universe is expanded to the rational numbers, the truth set becomes . The term solution set is often used for the truth set of an equation such as the one in this example. "
},
{
  "id": "def-tautology-contradiction-over-U",
  "level": "2",
  "url": "section4_5-propositions-over-universe.html#def-tautology-contradiction-over-U",
  "type": "Definition",
  "number": "4.5.6",
  "title": "Tautologies and Contradictions over a Universe.",
  "body": "Tautologies and Contradictions over a Universe A proposition over is a tautology if its truth set is . It is a contradiction if its truth set is empty.   "
},
{
  "id": "ex-tautology-contradiction-over-U",
  "level": "2",
  "url": "section4_5-propositions-over-universe.html#ex-tautology-contradiction-over-U",
  "type": "Example",
  "number": "4.5.7",
  "title": "Tautology, Contradiction over <span class=\"process-math\">\\(\\mathbb{Q}\\)<\/span>.",
  "body": "Tautology, Contradiction over  is a tautology over the rational numbers. is a contradiction over the rationals. "
},
{
  "id": "table-truth-sets-compound-statements",
  "level": "2",
  "url": "section4_5-propositions-over-universe.html#table-truth-sets-compound-statements",
  "type": "Table",
  "number": "4.5.8",
  "title": "Truth Sets of Compound Statements",
  "body": " Truth Sets of Compound Statements         "
},
{
  "id": "def-equivanlence-over-U",
  "level": "2",
  "url": "section4_5-propositions-over-universe.html#def-equivanlence-over-U",
  "type": "Definition",
  "number": "4.5.9",
  "title": "Equivalence of propositions over a universe.",
  "body": "Equivalence of propositions over a universe Two propositions, and , are equivalent if is a tautology. In terms of truth sets, this means that and are equivalent if . "
},
{
  "id": "ex-some-equivalent-pairs",
  "level": "2",
  "url": "section4_5-propositions-over-universe.html#ex-some-equivalent-pairs",
  "type": "Example",
  "number": "4.5.10",
  "title": "Some pairs of equivalent propositions.",
  "body": "Some pairs of equivalent propositions    and are equivalent propositions over the integers.   and are equivalent propositions over the power set of the natural numbers.   "
},
{
  "id": "def-implication-over-U",
  "level": "2",
  "url": "section4_5-propositions-over-universe.html#def-implication-over-U",
  "type": "Definition",
  "number": "4.5.11",
  "title": "Implication for propositions over a universe.",
  "body": "Implication for propositions over a universe Implication. If and are propositions over , implies if is a tautology. "
},
{
  "id": "venn_diagram_truth-set-conditional",
  "level": "2",
  "url": "section4_5-propositions-over-universe.html#venn_diagram_truth-set-conditional",
  "type": "Figure",
  "number": "4.5.12",
  "title": "",
  "body": " Venn diagram for the truth set of a conditional statement.   A Venn diagram illustrating the truth set of a conditional statement.   "
},
{
  "id": "ex-implications-over-U",
  "level": "2",
  "url": "section4_5-propositions-over-universe.html#ex-implications-over-U",
  "type": "Example",
  "number": "4.5.13",
  "title": "Examples of Implications.",
  "body": "Examples of Implications   Over the natural numbers: since  Over the power set of the integers: implies  Over the power set of the integers,   "
},
{
  "id": "exercises-4_5-2",
  "level": "2",
  "url": "section4_5-propositions-over-universe.html#exercises-4_5-2",
  "type": "Exercise",
  "number": "4.5.3.1",
  "title": "",
  "body": "If , what are the truth sets of the following propositions?    .   and .   .   is a proper subset of .   .                 "
},
{
  "id": "exercises-4_5-3",
  "level": "2",
  "url": "section4_5-propositions-over-universe.html#exercises-4_5-3",
  "type": "Exercise",
  "number": "4.5.3.2",
  "title": "",
  "body": "Over the universe of positive integers, define    :  is prime and .  :  is a power of 3.  :  is a divisor of 27.     What are the truth sets of these propositions?  Which of the three propositions implies one of the others?                  "
},
{
  "id": "exercises-4_5-4",
  "level": "2",
  "url": "section4_5-propositions-over-universe.html#exercises-4_5-4",
  "type": "Exercise",
  "number": "4.5.3.3",
  "title": "",
  "body": "If , how many propositions over could you list without listing two that are equivalent? There are subsets of , allowing for the possibility of nonequivalent propositions over .  "
},
{
  "id": "exercises-4_5-5",
  "level": "2",
  "url": "section4_5-propositions-over-universe.html#exercises-4_5-5",
  "type": "Exercise",
  "number": "4.5.3.4",
  "title": "",
  "body": " Given the propositions over the natural numbers:    , , and    What are the truth sets of:           "
},
{
  "id": "exercises-4_5-6",
  "level": "2",
  "url": "section4_5-propositions-over-universe.html#exercises-4_5-6",
  "type": "Exercise",
  "number": "4.5.3.5",
  "title": "",
  "body": "Suppose that is a proposition over . If , give two examples of propositions that are equivalent to .  Two possible answers: is odd and "
},
{
  "id": "exercises-4_5-7",
  "level": "2",
  "url": "section4_5-propositions-over-universe.html#exercises-4_5-7",
  "type": "Exercise",
  "number": "4.5.3.6",
  "title": "",
  "body": "  Determine the truth sets of the following propositions over the positive integers:  .   Determine for and above.  "
},
{
  "id": "exercises-4_5-8",
  "level": "2",
  "url": "section4_5-propositions-over-universe.html#exercises-4_5-8",
  "type": "Exercise",
  "number": "4.5.3.7",
  "title": "",
  "body": "Let the universe be , the set of integers. Which of the following propositions are equivalent over ?    :   :   :     and "
},
{
  "id": "section4_6-quantifiers",
  "level": "1",
  "url": "section4_6-quantifiers.html",
  "type": "Section",
  "number": "4.6",
  "title": "Quantifiers",
  "body": "Quantifiers Quantifiers  As we saw in , if is a proposition over a universe , its truth set is equal to a subset of U. In many cases, such as when is an equation, we are most concerned with whether is empty or not. In other cases, we might be interested in whether ; that is, whether is a tautology. Since the conditions and are so often an issue, we have a special system of notation for them.  The Existential Quantifier  The Existential Quantifier Existential Quantifier  The statement that is true for at least one value of  If is a proposition over with , we commonly say There exists an in such that (is true). We abbreviate this with the symbols . The symbol is called the existential quantifier. If the context is clear, the mention of is dropped: .   Some examples of existential quantifiers   is another way of saying that there is an integer that solves the equation . The fact that two such integers exist doesn't affect the truth of this proposition in any way.  simply states that 102 is a multiple of 3, which is true. On the other hand, states that 100 is a multiple of 3, which is false.  is false since the solution set of the equation in the real numbers is empty. It is common to write in this case.    There are a wide variety of ways that you can write a proposition with an existential quantifier. contains a list of different variations that could be used for both the existential and universal quantifiers.   The Universal Quantifier  The Universal Quantifier Universal Quantifier  The statement that is always true.  If is a proposition over with , we commonly say For all in , (is true). We abbreviate this with the symbols . The symbol is called the universal quantifier. If the context is clear, the mention of is dropped: .   Some Universal Quantifiers   We can say that the square of every real number is non-negative symbolically with a universal quantifier: .   says that the sum of zero and any integer is . This fact is called the identity property of zero for addition.     Notational Variations with Quantified Expressions   Universal Quantifier Existential Quantifier             is true for some  is true for all        The Negation of Quantified Propositions Quantifiers Negation  When you negate a quantified proposition, the existential and universal quantifiers complement one another.  Negation of an Existential Quantifier Over the universe of animals, define : is a fish and : lives in the water. We know that the proposition is not always true. In other words, is false. Another way of stating this fact is that there exists an animal that lives in the water and is not a fish; that is, .   Note that the negation of a universally quantified proposition is an existentially quantified proposition. In addition, when you negate an existentially quantified proposition, you get a universally quantified proposition. Symbolically,   Negation of Quantified Expressions       More Negations of Quantified Expressions   The ancient Greeks first discovered that is an irrational number; that is, is not a rational number. and both state this fact symbolically.   is equivalent to . They are either both true or both false.     Multiple Quantifiers Quantifiers Multiple  If a proposition has more than one variable, then you can quantify it more than once. For example, is a tautology over the set of all pairs of real numbers because it is true for each pair in . Another way to look at this proposition is as a proposition with two variables. The assertion that is a tautology could be quantified as or  In general, multiple universal quantifiers can be arranged in any order without logically changing the meaning of the resulting proposition. The same is true for multiple existential quantifiers. For example, is a proposition over . and are equivalent. A proposition with multiple existential quantifiers such as this one says that there are simultaneous values for the quantified variables that make the proposition true. A similar example is , which is always false; and the following are all equivalent:    When existential and universal quantifiers are mixed, the order cannot be exchanged without possibly changing the meaning of the proposition. For example, let be the positive real numbers, and have different logical values; is true, while is false.  Tips on Reading Multiply-Quantified Propositions. It is understandable that you would find propositions such as difficult to read. The trick to deciphering these expressions is to peel one quantifier off the proposition just as you would peel off the layers of an onion (but quantifiers shouldn't make you cry!). Since the outermost quantifier in is universal, says that is true for each value that can take on. Now take the time to select a value for , like 6. For the value that we selected, we get , which is obviously true since has a solution in the positive real numbers. We will get that same truth value no matter which positive real number we choose for ; therefore, is a tautology over and we are justified in saying that is true. The key to understanding propositions like on your own is to experiment with actual values for the outermost variables as we did above.  Now consider . To see that is false, we peel off the outer quantifier. Since it is an existential quantifier, all that says is that some positive real number makes : true. Choose a few values of to see if you can find one that makes true. For example, if we pick , we get , which is false, since is almost always different from 1. You should be able to convince yourself that no value of will make true. Therefore, is false.  Another way of convincing yourself that is false is to convince yourself that is true: In words, for each value of , there is a value for that makes . One such value is . Therefore, is true.    Exercises for Section 4.6  Let be is cold-blooded, let be is a fish, and let be lives in the sea.   Translate into a formula: Every fish is cold-blooded.  Translate into English:  Translate into English: .       There are objects in the sea which are not fish.  Every fish lives in the sea.     Let be is a mammal, let be is an animal, and let be is warm-blooded.   Translate into a formula: Every mammal is warm-blooded.  Translate into English: .     Over the universe of books, define the propositions : has a blue cover, : is a mathematics book, : is published in the United States, and : The bibliography of includes .  Translate into words:    .  .   .  .  Express using quantifiers: Every book with a blue cover is a mathematics book.  Express using quantifiers: There are mathematics books that are published outside the United States.  Express using quantifiers: Not all books have bibliographies.    There is a book with a cover that is not blue.  Every mathematics book that is published in the United States has a blue cover.  There exists a mathematics book with a cover that is not blue.  There exists a book that appears in the bibliography of every mathematics book.          Let the universe of discourse, , be the set of all people, and let be is the mother of .  Which of the following is a true statement? Translate it into English.       Translate the following statement into logical notation using quantifiers and the proposition : Everyone has a maternal grandmother.    Translate into your own words and indicate whether it is true or false that .  The equation has a solution in the integers. (False)   Use quantifiers to say that is an irrational number.  Your answer will depend on your choice of a universe  What do the following propositions say, where is the power set of ? Which of these propositions are true?   .        Every subset of has a cardinality different from its complement. (True)  There is a pair of disjoint subsets of both having cardinality 5. (False)  is a tautology. (True)    Use quantifiers to state that for every positive integer, there is a larger positive integer.   Use quantifiers to state that the sum of any two rational numbers is rational.   ( is a rational number.)   Over the universe of real numbers, use quantifiers to say that the equation has a solution for all values of and .  You will need three quantifiers.  Let be a positive integer. Describe using quantifiers:        Let         "
},
{
  "id": "def-exist-quantifier",
  "level": "2",
  "url": "section4_6-quantifiers.html#def-exist-quantifier",
  "type": "Definition",
  "number": "4.6.1",
  "title": "The Existential Quantifier.",
  "body": "The Existential Quantifier Existential Quantifier  The statement that is true for at least one value of  If is a proposition over with , we commonly say There exists an in such that (is true). We abbreviate this with the symbols . The symbol is called the existential quantifier. If the context is clear, the mention of is dropped: .  "
},
{
  "id": "ex-existential-misc",
  "level": "2",
  "url": "section4_6-quantifiers.html#ex-existential-misc",
  "type": "Example",
  "number": "4.6.2",
  "title": "Some examples of existential quantifiers.",
  "body": "Some examples of existential quantifiers   is another way of saying that there is an integer that solves the equation . The fact that two such integers exist doesn't affect the truth of this proposition in any way.  simply states that 102 is a multiple of 3, which is true. On the other hand, states that 100 is a multiple of 3, which is false.  is false since the solution set of the equation in the real numbers is empty. It is common to write in this case.   "
},
{
  "id": "def-universal-quantifier",
  "level": "2",
  "url": "section4_6-quantifiers.html#def-universal-quantifier",
  "type": "Definition",
  "number": "4.6.3",
  "title": "The Universal Quantifier.",
  "body": "The Universal Quantifier Universal Quantifier  The statement that is always true.  If is a proposition over with , we commonly say For all in , (is true). We abbreviate this with the symbols . The symbol is called the universal quantifier. If the context is clear, the mention of is dropped: .  "
},
{
  "id": "ex-universal-misc",
  "level": "2",
  "url": "section4_6-quantifiers.html#ex-universal-misc",
  "type": "Example",
  "number": "4.6.4",
  "title": "Some Universal Quantifiers.",
  "body": "Some Universal Quantifiers   We can say that the square of every real number is non-negative symbolically with a universal quantifier: .   says that the sum of zero and any integer is . This fact is called the identity property of zero for addition.   "
},
{
  "id": "table-quantifier-variations",
  "level": "2",
  "url": "section4_6-quantifiers.html#table-quantifier-variations",
  "type": "Table",
  "number": "4.6.5",
  "title": "Notational Variations with Quantified Expressions",
  "body": " Notational Variations with Quantified Expressions   Universal Quantifier Existential Quantifier             is true for some  is true for all     "
},
{
  "id": "ex-negated-existential",
  "level": "2",
  "url": "section4_6-quantifiers.html#ex-negated-existential",
  "type": "Example",
  "number": "4.6.6",
  "title": "Negation of an Existential Quantifier.",
  "body": "Negation of an Existential Quantifier Over the universe of animals, define : is a fish and : lives in the water. We know that the proposition is not always true. In other words, is false. Another way of stating this fact is that there exists an animal that lives in the water and is not a fish; that is, .  "
},
{
  "id": "table-quantifier-negation",
  "level": "2",
  "url": "section4_6-quantifiers.html#table-quantifier-negation",
  "type": "Table",
  "number": "4.6.7",
  "title": "Negation of Quantified Expressions",
  "body": " Negation of Quantified Expressions      "
},
{
  "id": "ex-more-negated-quantifiers",
  "level": "2",
  "url": "section4_6-quantifiers.html#ex-more-negated-quantifiers",
  "type": "Example",
  "number": "4.6.8",
  "title": "More Negations of Quantified Expressions.",
  "body": "More Negations of Quantified Expressions   The ancient Greeks first discovered that is an irrational number; that is, is not a rational number. and both state this fact symbolically.   is equivalent to . They are either both true or both false.   "
},
{
  "id": "exercises-4_6-2",
  "level": "2",
  "url": "section4_6-quantifiers.html#exercises-4_6-2",
  "type": "Exercise",
  "number": "4.6.5.1",
  "title": "",
  "body": "Let be is cold-blooded, let be is a fish, and let be lives in the sea.   Translate into a formula: Every fish is cold-blooded.  Translate into English:  Translate into English: .       There are objects in the sea which are not fish.  Every fish lives in the sea.   "
},
{
  "id": "exercises-4_6-3",
  "level": "2",
  "url": "section4_6-quantifiers.html#exercises-4_6-3",
  "type": "Exercise",
  "number": "4.6.5.2",
  "title": "",
  "body": " Let be is a mammal, let be is an animal, and let be is warm-blooded.   Translate into a formula: Every mammal is warm-blooded.  Translate into English: .    "
},
{
  "id": "exercises-4_6-4",
  "level": "2",
  "url": "section4_6-quantifiers.html#exercises-4_6-4",
  "type": "Exercise",
  "number": "4.6.5.3",
  "title": "",
  "body": "Over the universe of books, define the propositions : has a blue cover, : is a mathematics book, : is published in the United States, and : The bibliography of includes .  Translate into words:    .  .   .  .  Express using quantifiers: Every book with a blue cover is a mathematics book.  Express using quantifiers: There are mathematics books that are published outside the United States.  Express using quantifiers: Not all books have bibliographies.    There is a book with a cover that is not blue.  Every mathematics book that is published in the United States has a blue cover.  There exists a mathematics book with a cover that is not blue.  There exists a book that appears in the bibliography of every mathematics book.         "
},
{
  "id": "exercises-4_6-5",
  "level": "2",
  "url": "section4_6-quantifiers.html#exercises-4_6-5",
  "type": "Exercise",
  "number": "4.6.5.4",
  "title": "",
  "body": "Let the universe of discourse, , be the set of all people, and let be is the mother of .  Which of the following is a true statement? Translate it into English.       Translate the following statement into logical notation using quantifiers and the proposition : Everyone has a maternal grandmother.   "
},
{
  "id": "exercises-4_6-6",
  "level": "2",
  "url": "section4_6-quantifiers.html#exercises-4_6-6",
  "type": "Exercise",
  "number": "4.6.5.5",
  "title": "",
  "body": "Translate into your own words and indicate whether it is true or false that .  The equation has a solution in the integers. (False)  "
},
{
  "id": "exercises-4_6-7",
  "level": "2",
  "url": "section4_6-quantifiers.html#exercises-4_6-7",
  "type": "Exercise",
  "number": "4.6.5.6",
  "title": "",
  "body": "Use quantifiers to say that is an irrational number.  Your answer will depend on your choice of a universe "
},
{
  "id": "exercises-4_6-8",
  "level": "2",
  "url": "section4_6-quantifiers.html#exercises-4_6-8",
  "type": "Exercise",
  "number": "4.6.5.7",
  "title": "",
  "body": "What do the following propositions say, where is the power set of ? Which of these propositions are true?   .        Every subset of has a cardinality different from its complement. (True)  There is a pair of disjoint subsets of both having cardinality 5. (False)  is a tautology. (True)   "
},
{
  "id": "exercises-4_6-9",
  "level": "2",
  "url": "section4_6-quantifiers.html#exercises-4_6-9",
  "type": "Exercise",
  "number": "4.6.5.8",
  "title": "",
  "body": "Use quantifiers to state that for every positive integer, there is a larger positive integer.  "
},
{
  "id": "exercises-4_6-10",
  "level": "2",
  "url": "section4_6-quantifiers.html#exercises-4_6-10",
  "type": "Exercise",
  "number": "4.6.5.9",
  "title": "",
  "body": "Use quantifiers to state that the sum of any two rational numbers is rational.   ( is a rational number.)  "
},
{
  "id": "exercises-4_6-11",
  "level": "2",
  "url": "section4_6-quantifiers.html#exercises-4_6-11",
  "type": "Exercise",
  "number": "4.6.5.10",
  "title": "",
  "body": "Over the universe of real numbers, use quantifiers to say that the equation has a solution for all values of and .  You will need three quantifiers. "
},
{
  "id": "exercises-4_6-12",
  "level": "2",
  "url": "section4_6-quantifiers.html#exercises-4_6-12",
  "type": "Exercise",
  "number": "4.6.5.11",
  "title": "",
  "body": "Let be a positive integer. Describe using quantifiers:        Let       "
},
{
  "id": "section5_1-math-systems",
  "level": "1",
  "url": "section5_1-math-systems.html",
  "type": "Section",
  "number": "5.1",
  "title": "Mathematical Systems and Proofs",
  "body": "Mathematical Systems and Proofs  Mathematical Systems  In this section, we present an overview of what a mathematical system is and how logic plays an important role in one. The axiomatic method that we will use here will not be duplicated with as much formality anywhere else in the book, but we hope an emphasis on how mathematical facts are developed and organized will help to unify the concepts we will present. The system of propositions and logical operators we have developed will serve as a model for our discussion. Roughly, a mathematical system can be defined as follows.  Mathematical System A mathematical system consists of:   A set or universe, .  Definitions: sentences that explain the meaning of concepts that relate to the universe. Any term used in describing the universe itself is said to be undefined. All definitions are given in terms of these undefined concepts of objects.  Axioms: assertions about the properties of the universe and rules for creating and justifying more assertions. These rules always include the system of logic that we have developed to this point.  Theorems: the additional assertions mentioned above.    Euclidean Geometry  In Euclidean geometry the universe consists of points and lines (two undefined terms). Among the definitions is a definition of parallel lines and among the axioms is the axiom that two distinct parallel lines never meet.   Propositional Calculus  Propositional calculus is a formal name for the logical system that we've been discussing. The universe consists of propositions. The axioms are the truth tables for the logical operators and the key definitions are those of equivalence and implication. We use propositions to describe any other mathematical system; therefore, this is the minimum amount of structure that a mathematical system can have.   Theorem   A true proposition derived from the axioms of a mathematical system is called a theorem.   Theorems are normally expressed in terms of a finite number of propositions, , called the premises , and a proposition, , called the conclusion . These theorems take the form or more informally, For a theorem of this type, we say that the premises imply the conclusion.  When a theorem is stated, it is assumed that the axioms of the system are true. In addition, any previously proven theorem can be considered an extension of the axioms and can be used in demonstrating that the new theorem is true. When the proof is complete, the new theorem can be used to prove subsequent theorems. A mathematical system can be visualized as an inverted pyramid with the axioms at the base and the theorems expanding out in various directions.   The body of knowledge in a mathematical system   Illustration of the inverted pyramid of knowledge     Proof A proof of a theorem is a finite sequence of logically valid steps that demonstrate that the premises of a theorem imply its conclusion.   Exactly what constitutes a proof is not always clear. For example, a research mathematician might require only a few steps to prove a theorem to a colleague, but might take an hour to give an effective proof to a class of students. Therefore, what constitutes a proof often depends on the audience. But the audience is not the only factor. One of the most famous theorems in graph theory, The Four Color Theorem, was proven in 1976, after over a century of effort by many mathematicians. Part of the proof consisted of having a computer check many different graphs for a certain property. Without the aid of the computer, this checking would have taken years. In the eyes of some mathematicians, this proof was considered questionable. Shorter proofs have been developed since 1976 and there is no controversy associated with The Four Color Theorem at this time.   Direct Proof  Theoretically, you can prove anything in propositional calculus with truth tables. In fact, the laws of logic stated in Section 3.4 are all theorems. Propositional calculus is one of the few mathematical systems for which any valid sentence can be determined true or false by mechanical means. A program to write truth tables is not too difficult to write; however, what can be done theoretically is not always practical. For example, is a theorem in propositional calculus. However, suppose that you wrote such a program and you had it write the truth table for The truth table will have cases. At one million cases per second, it would take approximately one hour to verify the theorem. Now if you decided to check a similar theorem, you would really have time trouble. There would be cases to check in the truth table. At one million cases per second it would take approximately days to check all cases. For most of the remainder of this section, we will discuss an alternate method for proving theorems in propositional calculus. It is the same method that we will use in a less formal way for proofs in other systems. Formal axiomatic methods would be too unwieldy to actually use in later sections. However, none of the theorems in later chapters would be stated if they couldn't be proven by the axiomatic method.  We will introduce two types of proof here, direct and indirect.  A typical direct proof Direct proof This is a theorem: . A direct proof of this theorem is:   Direct proof of   Step Proposition Justification  1. Premise  2. (1), conditional rule  3. Premise  4. (2), (3), chain rule  5. (4), contrapositive  6. Premise  7. (5), (6), chain rule  8. (7), conditional rule     Note that marks the end of a proof.  Example illustrates the usual method of formal proof in a formal mathematical system. The rules governing these proofs are:   A proof must end in a finite number of steps.  Each step must be either a premise or a proposition that is implied from previous steps using any valid equivalence or implication.  For a direct proof, the last step must be the conclusion of the theorem. For an indirect proof (see below), the last step must be a contradiction.  Justification Column. The column labeled justification is analogous to the comments that appear in most good computer programs. They simply make the proof more readable.   Two proofs of the same theorem Here are two direct proofs of :   Direct proof of   1. Premise  2. Premise  3. Disjunctive simplification, (1), (2)  4. Premise  5. Disjunctive simplification, (3), (4).    You are invited to justify the steps in this second proof:   Alternate proof of   1.  2.  3.  4.  5.  6.  7.  8.      The conclusion of a theorem is often a conditional proposition. The condition of the conclusion can be included as a premise in the proof of the theorem. The object of the proof is then to prove the consequence of the conclusion. This rule is justified by the logical law   Example of a proof with a conditional conclusion  The following proof of includes as a fourth premise. Inference of truth of completes the proof.   Proof of a theorem with a conditional conclusion.   1. Premise  2. Added premise  3. (1), (2), disjunction simplification  4. Premise  5. (3), (4), detachment  6. Premise  7. (5), (6), detachment.       Indirect Proof  Consider a theorem , where represents , the premises. The method of indirect proof Indirect proof is based on the equivalence . In words, this logical law states that if , then is always false; that is, is a contradiction. This means that a valid method of proof is to negate the conclusion of a theorem and add this negation to the premises. If a contradiction can be implied from this set of propositions, the proof is complete. For the proofs in this section, a contradiction will often take the form .  For proofs involving numbers, a contradiction might be or . Indirect proofs involving sets might conclude with or ( and ). Indirect proofs are often more convenient than direct proofs in certain situations. Indirect proofs are often called proofs by contradiction .  An Indirect Proof  Here is an example of an indirect proof of the theorem in .   An Indirect proof of   1. Negated conclusion  2. DeMorgan's Law, (1)  3. Conjunctive simplification, (2)  4. Premise  5. Indirect reasoning, (3), (4)  6. Conjunctive simplification, (2)  7. Premise  8. Indirect reasoning, (6), (7)  9. Conjunctive, (5), (8)  10. DeMorgan's Law, (9)  11. Premise  12. (10), (11)     Proof Style  The rules allow you to list the premises of a theorem immediately; however, a proof is much easier to follow if the premises are only listed when they are needed.  Yet Another Indirect Proof  Here is an indirect proof of .   Indirect proof of   1. Negation of the conclusion  2. Premise  3. (1), (2), detachment  4. (3), disjunctive addition  5. Premise  6. (4), (5)     As we mentioned at the outset of this section, we are only presenting an overview of what a mathematical system is. For greater detail on axiomatic theories, see Stoll (1961). An excellent description of how propositional calculus plays a part in artificial intelligence is contained in Hofstadter (1980). If you enjoy the challenge of constructing proofs in propositional calculus, you should enjoy the game WFF'N PROOF (1962), by L.E. Allen.    Exercises for Section 5.1  Prove with truth tables:                Prove with truth tables:         Give direct and indirect proofs of:   .   .  .   .        Direct proof:                          Indirect proof:    Negated conclusion   Premise   Indirect Reasoning (1), (2)   Premise   Indirect Reasoning (1), (4)   Conjunctive (3), (5)   DeMorgan's law (6)   Premise   Indirect Reasoning (7), (8)   Premise   (9), (10)    Direct proof:                      Use         Indirect proof:                                Direct proof:    Premise   Added premise (conditional conclusion)   Involution (2)   Disjunctive simplification (1), (3)   Premise   Detachment (4), (5)   Premise   Detachment (6), (7)    Indirect proof:    Negated conclusion   Conditional equivalence (I)   DeMorgan (2)   Conjunctive simplification (3)   Premise   Conditional equivalence (5)   Detachment (4), (6)   Premise   Detachment (7), (8)   Premise   Detachment (9), (10)   Conjunctive simplification (3)   \\quad Conjunction (11), (12)     Direct proof:                      Indirect proof:    Negated conclusion   Premise   (1), (2)   Premise   Detachment (3), (4)   Premise   Detachment (5), (6)  0 (1), (7)      Give direct and indirect proofs of:    .   .   .    Are the following arguments valid? If they are valid, construct formal proofs; if they aren't valid, explain why not.   If wages increase, then there will be inflation. The cost of living will not increase if there is no inflation. Wages will increase. Therefore, the cost of living will increase.  If the races are fixed or the casinos are crooked, then the tourist trade will decline. If the tourist trade decreases, then the police will be happy. The police force is never happy. Therefore, the races are not fixed.    Let stand for Wages will increase,  stand for there will be inflation, and stand for cost of living will increase. Therefore the argument is: . The argument is invalid. The easiest way to see this is through a truth table. Let be the conjunction of all premises.   Let stand for the races are fixed,  stand for casinos are crooked,  stand for the tourist trade will decline, and stand for the police will be happy. Therefore, the argument is: . The argument is valid. Proof:    Premise   Premise   Indirect Reasoning (1), (2)   Premise   Indirect Reasoning (3), (4)   DeMorgan (5)   Conjunction simplification     Determine the validity of the following argument: For students to do well in a discrete mathematics course, it is necessary that they study hard. Students who do well in courses do not skip classes. Students who study hard do well in courses. Therefore students who do well in a discrete mathematics course do not skip class.  Describe how could be proved in 199 steps.  and implies . It takes two steps to get to from This means it takes steps to get to (subtract 1 because is stated as a premise). A final step is needed to apply detachment to imply   "
},
{
  "id": "def-mathematical-system",
  "level": "2",
  "url": "section5_1-math-systems.html#def-mathematical-system",
  "type": "Definition",
  "number": "5.1.1",
  "title": "Mathematical System.",
  "body": "Mathematical System A mathematical system consists of:   A set or universe, .  Definitions: sentences that explain the meaning of concepts that relate to the universe. Any term used in describing the universe itself is said to be undefined. All definitions are given in terms of these undefined concepts of objects.  Axioms: assertions about the properties of the universe and rules for creating and justifying more assertions. These rules always include the system of logic that we have developed to this point.  Theorems: the additional assertions mentioned above.   "
},
{
  "id": "ex-euclidean-geometry",
  "level": "2",
  "url": "section5_1-math-systems.html#ex-euclidean-geometry",
  "type": "Example",
  "number": "5.1.2",
  "title": "Euclidean Geometry.",
  "body": "Euclidean Geometry  In Euclidean geometry the universe consists of points and lines (two undefined terms). Among the definitions is a definition of parallel lines and among the axioms is the axiom that two distinct parallel lines never meet.  "
},
{
  "id": "ex-propositional-calculus",
  "level": "2",
  "url": "section5_1-math-systems.html#ex-propositional-calculus",
  "type": "Example",
  "number": "5.1.3",
  "title": "Propositional Calculus.",
  "body": "Propositional Calculus  Propositional calculus is a formal name for the logical system that we've been discussing. The universe consists of propositions. The axioms are the truth tables for the logical operators and the key definitions are those of equivalence and implication. We use propositions to describe any other mathematical system; therefore, this is the minimum amount of structure that a mathematical system can have.  "
},
{
  "id": "def-theorem",
  "level": "2",
  "url": "section5_1-math-systems.html#def-theorem",
  "type": "Definition",
  "number": "5.1.4",
  "title": "Theorem.",
  "body": "Theorem   A true proposition derived from the axioms of a mathematical system is called a theorem.  "
},
{
  "id": "knowledge-pyramid",
  "level": "2",
  "url": "section5_1-math-systems.html#knowledge-pyramid",
  "type": "Figure",
  "number": "5.1.5",
  "title": "",
  "body": " The body of knowledge in a mathematical system   Illustration of the inverted pyramid of knowledge    "
},
{
  "id": "def-proof",
  "level": "2",
  "url": "section5_1-math-systems.html#def-proof",
  "type": "Definition",
  "number": "5.1.6",
  "title": "Proof.",
  "body": "Proof A proof of a theorem is a finite sequence of logically valid steps that demonstrate that the premises of a theorem imply its conclusion.  "
},
{
  "id": "proof-5_1-1",
  "level": "2",
  "url": "section5_1-math-systems.html#proof-5_1-1",
  "type": "Example",
  "number": "5.1.7",
  "title": "A typical direct proof.",
  "body": "A typical direct proof Direct proof This is a theorem: . A direct proof of this theorem is:   Direct proof of   Step Proposition Justification  1. Premise  2. (1), conditional rule  3. Premise  4. (2), (3), chain rule  5. (4), contrapositive  6. Premise  7. (5), (6), chain rule  8. (7), conditional rule    "
},
{
  "id": "proof-5_1-2",
  "level": "2",
  "url": "section5_1-math-systems.html#proof-5_1-2",
  "type": "Example",
  "number": "5.1.9",
  "title": "Two proofs of the same theorem.",
  "body": "Two proofs of the same theorem Here are two direct proofs of :   Direct proof of   1. Premise  2. Premise  3. Disjunctive simplification, (1), (2)  4. Premise  5. Disjunctive simplification, (3), (4).    You are invited to justify the steps in this second proof:   Alternate proof of   1.  2.  3.  4.  5.  6.  7.  8.     "
},
{
  "id": "ex-conditinal-conclusion",
  "level": "2",
  "url": "section5_1-math-systems.html#ex-conditinal-conclusion",
  "type": "Example",
  "number": "5.1.12",
  "title": "Example of a proof with a conditional conclusion.",
  "body": "Example of a proof with a conditional conclusion  The following proof of includes as a fourth premise. Inference of truth of completes the proof.   Proof of a theorem with a conditional conclusion.   1. Premise  2. Added premise  3. (1), (2), disjunction simplification  4. Premise  5. (3), (4), detachment  6. Premise  7. (5), (6), detachment.     "
},
{
  "id": "sub-indirect-proof-2",
  "level": "2",
  "url": "section5_1-math-systems.html#sub-indirect-proof-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "indirect proof "
},
{
  "id": "ex-indirect_proof_1",
  "level": "2",
  "url": "section5_1-math-systems.html#ex-indirect_proof_1",
  "type": "Example",
  "number": "5.1.14",
  "title": "An Indirect Proof.",
  "body": "An Indirect Proof  Here is an example of an indirect proof of the theorem in .   An Indirect proof of   1. Negated conclusion  2. DeMorgan's Law, (1)  3. Conjunctive simplification, (2)  4. Premise  5. Indirect reasoning, (3), (4)  6. Conjunctive simplification, (2)  7. Premise  8. Indirect reasoning, (6), (7)  9. Conjunctive, (5), (8)  10. DeMorgan's Law, (9)  11. Premise  12. (10), (11)    "
},
{
  "id": "sub-indirect-proof-5",
  "level": "2",
  "url": "section5_1-math-systems.html#sub-indirect-proof-5",
  "type": "Note",
  "number": "5.1.16",
  "title": "Proof Style.",
  "body": "Proof Style  The rules allow you to list the premises of a theorem immediately; however, a proof is much easier to follow if the premises are only listed when they are needed. "
},
{
  "id": "proof-yet-another",
  "level": "2",
  "url": "section5_1-math-systems.html#proof-yet-another",
  "type": "Example",
  "number": "5.1.17",
  "title": "Yet Another Indirect Proof.",
  "body": "Yet Another Indirect Proof  Here is an indirect proof of .   Indirect proof of   1. Negation of the conclusion  2. Premise  3. (1), (2), detachment  4. (3), disjunctive addition  5. Premise  6. (4), (5)    "
},
{
  "id": "exercises-5_1-2",
  "level": "2",
  "url": "section5_1-math-systems.html#exercises-5_1-2",
  "type": "Exercise",
  "number": "5.1.4.1",
  "title": "",
  "body": "Prove with truth tables:               "
},
{
  "id": "exercises-5_1-3",
  "level": "2",
  "url": "section5_1-math-systems.html#exercises-5_1-3",
  "type": "Exercise",
  "number": "5.1.4.2",
  "title": "",
  "body": "Prove with truth tables:        "
},
{
  "id": "exercises-5_1-4",
  "level": "2",
  "url": "section5_1-math-systems.html#exercises-5_1-4",
  "type": "Exercise",
  "number": "5.1.4.3",
  "title": "",
  "body": "Give direct and indirect proofs of:   .   .  .   .        Direct proof:                          Indirect proof:    Negated conclusion   Premise   Indirect Reasoning (1), (2)   Premise   Indirect Reasoning (1), (4)   Conjunctive (3), (5)   DeMorgan's law (6)   Premise   Indirect Reasoning (7), (8)   Premise   (9), (10)    Direct proof:                      Use         Indirect proof:                                Direct proof:    Premise   Added premise (conditional conclusion)   Involution (2)   Disjunctive simplification (1), (3)   Premise   Detachment (4), (5)   Premise   Detachment (6), (7)    Indirect proof:    Negated conclusion   Conditional equivalence (I)   DeMorgan (2)   Conjunctive simplification (3)   Premise   Conditional equivalence (5)   Detachment (4), (6)   Premise   Detachment (7), (8)   Premise   Detachment (9), (10)   Conjunctive simplification (3)   \\quad Conjunction (11), (12)     Direct proof:                      Indirect proof:    Negated conclusion   Premise   (1), (2)   Premise   Detachment (3), (4)   Premise   Detachment (5), (6)  0 (1), (7)     "
},
{
  "id": "exercises-5_1-5",
  "level": "2",
  "url": "section5_1-math-systems.html#exercises-5_1-5",
  "type": "Exercise",
  "number": "5.1.4.4",
  "title": "",
  "body": "Give direct and indirect proofs of:    .   .   .   "
},
{
  "id": "exercises-5_1-6",
  "level": "2",
  "url": "section5_1-math-systems.html#exercises-5_1-6",
  "type": "Exercise",
  "number": "5.1.4.5",
  "title": "",
  "body": "Are the following arguments valid? If they are valid, construct formal proofs; if they aren't valid, explain why not.   If wages increase, then there will be inflation. The cost of living will not increase if there is no inflation. Wages will increase. Therefore, the cost of living will increase.  If the races are fixed or the casinos are crooked, then the tourist trade will decline. If the tourist trade decreases, then the police will be happy. The police force is never happy. Therefore, the races are not fixed.    Let stand for Wages will increase,  stand for there will be inflation, and stand for cost of living will increase. Therefore the argument is: . The argument is invalid. The easiest way to see this is through a truth table. Let be the conjunction of all premises.   Let stand for the races are fixed,  stand for casinos are crooked,  stand for the tourist trade will decline, and stand for the police will be happy. Therefore, the argument is: . The argument is valid. Proof:    Premise   Premise   Indirect Reasoning (1), (2)   Premise   Indirect Reasoning (3), (4)   DeMorgan (5)   Conjunction simplification    "
},
{
  "id": "exercises-5_1-7",
  "level": "2",
  "url": "section5_1-math-systems.html#exercises-5_1-7",
  "type": "Exercise",
  "number": "5.1.4.6",
  "title": "",
  "body": "Determine the validity of the following argument: For students to do well in a discrete mathematics course, it is necessary that they study hard. Students who do well in courses do not skip classes. Students who study hard do well in courses. Therefore students who do well in a discrete mathematics course do not skip class. "
},
{
  "id": "exercises-5_1-8",
  "level": "2",
  "url": "section5_1-math-systems.html#exercises-5_1-8",
  "type": "Exercise",
  "number": "5.1.4.7",
  "title": "",
  "body": "Describe how could be proved in 199 steps.  and implies . It takes two steps to get to from This means it takes steps to get to (subtract 1 because is stated as a premise). A final step is needed to apply detachment to imply "
},
{
  "id": "section5_2-induction",
  "level": "1",
  "url": "section5_2-induction.html",
  "type": "Section",
  "number": "5.2",
  "title": "Mathematical Induction",
  "body": "Mathematical Induction  Introduction, First Example  In this section, we will examine mathematical induction, a technique for proving propositions over the positive integers. Mathematical induction reduces the proof that all of the positive integers belong to a truth set to a finite number of steps.  Formula for Triangular Numbers Consider the following proposition over the positive integers, which we will label : The sum of the positive integers from 1 to is . This is a well-known formula that is quite simple to verify for a given value of . For example, is: The sum of the positive integers from 1 to 5 is . Indeed, . However, this doesn't serve as a proof that is a tautology. All that we've established is that is in the truth set of . Since the positive integers are infinite, we certainly can't use this approach to prove the formula.   An Analogy : A proof by mathematical induction is similar to knocking over a row of closely spaced dominos that are standing on end. To knock over the the dominos in , all you need to do is push the first domino over. To be assured that they all will be knocked over, some work must be done ahead of time. The dominos must be positioned so that if any domino is pushed is knocked over, it will push the next domino in the line.   An analogy for Mathematical Induction, Creative Commons photo by Ranveig Thattai   Image of dominos standing in a row and sequentially knocking each other down.    Returning to imagine the propositions to be an infinite line of dominos. Let's see if these propositions are in the same formation as the dominos were. First, we will focus on one specific point of the line: and . We are not going to prove that either of these propositions is true, just that the truth of implies the truth of . In terms of our analogy, if is knocked over, it will knock over .  In proving , we will use as our premise. We must prove: The sum of the positive integers from 1 to 100 is . We start by observing that the sum of the positive integers from 1 to 100 is . That is, the sum of the positive integers from 1 to 100 equals the sum of the first ninety-nine plus the final number, 100. We can now apply our premise, , to the sum . After rearranging our numbers, we obtain the desired expression for : .  What we've just done is analogous to checking two dominos in a line and finding that they are properly positioned. Since we are dealing with an infinite line, we must check all pairs at once. This is accomplished by proving that for all : .  They are all lined up! Now look at : The sum of the positive integers from 1 to 1 is . Clearly, is true. This sets off a chain reaction. Since , is true. Since , is true; and so on.  The Principle of Mathematical Induction  Let be a proposition over the positive integers. If   is true, and  for all , ,  then is a tautology.   Note: The truth of is called the basis for the induction proof. The premise that is true in the second part is called the induction or inductive hypothesis . The proof that implies is called the induction step of the proof. Despite our analogy, the basis is usually done first in an induction proof. However, order doesn't really matter.   More Examples  Generalized Detachment Consider the implication over the positive integers. A proof that is a tautology follows. Basis: is . This is the logical law of detachment which we know is true. If you haven't done so yet, write out the truth table of to verify this step.  Induction: Assume that is true for some . We want to prove that must be true. That is: Here is a direct proof of :    Step Proposition Justification     Premises      ,       Premise        detachment     An example from Number Theory  For all , is a multiple of 3. An inductive proof follows:  Basis: is a multiple of 3. The basis is almost always this easy!  Induction: Assume that and is a multiple of 3. Consider . Is it a multiple of 3?  .  Yes, is the sum of two multiples of 3; therefore, it is also a multiple of 3.    Now we will discuss some of the variations of the principle of mathematical induction. The first simply allows for universes that are similar to such as or .  Principle of Mathematical Induction (Generalized)  If is a proposition over , where is any integer, then is a tautology if    is true, and  for all , .      A proof of the permutations formula  In Chapter 2, we stated that the number of different permutations of elements taken from an element set, , can be computed with the formula . We can prove this statement by induction on . For , let be the proposition .  Basis: states that if is the number of ways that elements can be selected from the empty set and arranged in order, then . This is true. A general law in combinatorics is that there is exactly one way of doing nothing.  Induction: Assume that is true for some natural number . It is left for us to prove that this assumption implies that is true. Suppose that we have a set of cardinality and want to select and arrange of its elements. There are two cases to consider, the first of which is easy. If , then there is one way of selecting zero elements from the set; hence and the formula works in this case.  The more challenging case is to verify the formula when is positive and less than or equal to . Here we count the value of by counting the number of ways that the first element in the arrangement can be filled and then counting the number of ways that the remaining elements can be filled in using the induction hypothesis.  There are possible choices for the first element. Since that leaves elements to fill in the remaining positions, there are ways of completing the arrangement. By the rule of products,     Course of Values Induction  A second variation allows for the expansion of the induction hypothesis. The course-of-values principle includes the previous generalization. It is also sometimes called strong induction .  The Course-of-Values Principle of Mathematical Induction  If is a proposition over , where is any integer, then is a tautology if    is true, and  for all , .      A prime number is defined as a positive integer that has exactly two positive divisors, 1 and itself. There are an infinite number of primes. The list of primes starts with . The proposition over that we will prove here is : can be written as the product of one or more primes. In most texts, the assertion that is a tautology would appear as  Existence of Prime Factorizations  Every positive integer greater than or equal to 2 has a prime decomposition.   If you were to encounter this theorem outside the context of a discussion of mathematical induction, it might not be obvious that the proof can be done by induction. Recognizing when an induction proof is appropriate is mostly a matter of experience. Now on to the proof!  Basis: Since 2 is a prime, it is already decomposed into primes (one of them).  Induction: Suppose that for some all of the integers have a prime decomposition. Notice the course-of-value hypothesis. Consider . Either is prime or it isn't. If is prime, it is already decomposed into primes. If not, then has a divisor, , other than 1 and . Hence, where both and are between 2 and . By the induction hypothesis, and have prime decompositions, and , respectively. Therefore, has the prime decomposition .    Peano and Induction  Mathematical induction originated in the late nineteenth century. Two mathematicians who were prominent in its development were Richard Dedekind and Giuseppe Peano. Dedekind developed a set of axioms that describe the positive integers. Peano refined these axioms and gave a logical interpretation to them. The axioms are usually called the Peano Postulates.  Peano Postulates The system of positive integers consists of a nonempty set, ; a least element of , denoted 1; and a successor function, s, with the properties   If , then there is an element of called the successor of , denoted .  No two elements of have the same successor.  No element of has as its successor.  If , , and , then .      Notes:   You might recognize as simply being .  Axiom 4 is the one that makes mathematical induction possible. In an induction proof, we simply apply that axiom to the truth set of a proposition.     Exercises for Section 5.2  Prove that the sum of the first odd integers equals . We wish to prove that is true for . Recall that the th odd positive integer is 2n - 1.  Basis: for , is , which is true  Induction: Assume that for some is true. Then:    Prove that if , then .  Prove that for : .  Proof:   Basis:  Induction:    Prove that for : .  Use mathematical induction to show that for , .  Basis: For , we observe that  Induction: Assume that for some , the formula is true.  Then:   Prove that if , the generalized DeMorgan's Law is true: .   The number of strings of zeros and ones that contain an even number of ones is . Prove this fact by induction for . Let be the set of strings of zeros and ones of length (we assume that is known). Let be the set of the even strings, and the odd strings. The problem is to prove that for , . Clearly, , and, if for some , it follows that by the following reasoning.  We partition according to the first bit:  Since and are disjoint, we can apply the addition law. Therefore,    Let be is a multiple of 5. Prove that is a tautology over .  Suppose that there are people in a room, , and that they all shake hands with one another. Prove that handshakes will have occurred. Assume that for persons handshakes take place. If one more person enters the room, he or she will shake hands with n people, Also, for , there are no handshakes, which matches the conjectured formula:    Prove that it is possible to make up any postage of eight cents or more using only three- and five-cent stamps.  Generalized associativity. It is well known that if , , and are numbers, then no matter what order the sums in the expression are taken in, the result is always the same. Call this fact and assume it is true. Prove using course-of-values induction that if , , and are numbers, then no matter what order the sums in the expression are taken in, the result is always the same. Let be has the same value no matter how it is evaluated.  Basis: may be evaluated only two ways. Since + is associative, . Hence, is true.  Induction: Assume that for some , are all true. Now consider the sum . Any of the additions in this expression can be applied last. If the th addition is applied last, we have . No matter how the expression to the left and right of the addition are evaluated, the result will always be the same by the induction hypothesis, specifically and . We now can prove that . If ,    Let be the set of all numbers that can be produced by applying any of the rules below in any order a finite number of times.  Rule 1:  Rule 2:  Rule 3: If and have been produced by the rules, then .  Rule 4: If and have been produced by the rules, then .  Prove that . The number of times the rules are applied should be the integer that you do the induction on.  Proofs involving objects that are defined recursively are often inductive. A recursive definition is similar to an inductive proof. It consists of a basis, usually the simple part of the definition, and the recursion, which defines complex objects in terms of simpler ones. For example, if is a real number and is a positive integer, we can define as follows:  Basis: .  Recursion: if , .  For example, = .  Prove that if , . There is much more on recursion in Chapter 7. Let be the proposition that for all . For , let for all . The basis for this proof follows directly from the basis for the definition of exponentiation.  Induction: Assume that for some is true. Then .   Let be a finite set and let be defined recursively by and for .  List the elements of for the case .  Determine the formula for , given that , and prove your formula by induction.      "
},
{
  "id": "ex-triangular-numbers",
  "level": "2",
  "url": "section5_2-induction.html#ex-triangular-numbers",
  "type": "Example",
  "number": "5.2.1",
  "title": "Formula for Triangular Numbers.",
  "body": "Formula for Triangular Numbers Consider the following proposition over the positive integers, which we will label : The sum of the positive integers from 1 to is . This is a well-known formula that is quite simple to verify for a given value of . For example, is: The sum of the positive integers from 1 to 5 is . Indeed, . However, this doesn't serve as a proof that is a tautology. All that we've established is that is in the truth set of . Since the positive integers are infinite, we certainly can't use this approach to prove the formula.  "
},
{
  "id": "dominos",
  "level": "2",
  "url": "section5_2-induction.html#dominos",
  "type": "Figure",
  "number": "5.2.2",
  "title": "",
  "body": " An analogy for Mathematical Induction, Creative Commons photo by Ranveig Thattai   Image of dominos standing in a row and sequentially knocking each other down.   "
},
{
  "id": "th-math-induction-basic",
  "level": "2",
  "url": "section5_2-induction.html#th-math-induction-basic",
  "type": "Theorem",
  "number": "5.2.3",
  "title": "The Principle of Mathematical Induction.",
  "body": "The Principle of Mathematical Induction  Let be a proposition over the positive integers. If   is true, and  for all , ,  then is a tautology.  "
},
{
  "id": "ex-logic-detachment",
  "level": "2",
  "url": "section5_2-induction.html#ex-logic-detachment",
  "type": "Example",
  "number": "5.2.4",
  "title": "Generalized Detachment.",
  "body": "Generalized Detachment Consider the implication over the positive integers. A proof that is a tautology follows. Basis: is . This is the logical law of detachment which we know is true. If you haven't done so yet, write out the truth table of to verify this step.  Induction: Assume that is true for some . We want to prove that must be true. That is: Here is a direct proof of :    Step Proposition Justification     Premises      ,       Premise        detachment    "
},
{
  "id": "ex-number-theory-3s",
  "level": "2",
  "url": "section5_2-induction.html#ex-number-theory-3s",
  "type": "Example",
  "number": "5.2.6",
  "title": "An example from Number Theory.",
  "body": "An example from Number Theory  For all , is a multiple of 3. An inductive proof follows:  Basis: is a multiple of 3. The basis is almost always this easy!  Induction: Assume that and is a multiple of 3. Consider . Is it a multiple of 3?  .  Yes, is the sum of two multiples of 3; therefore, it is also a multiple of 3.   "
},
{
  "id": "th-math-induction-generalized",
  "level": "2",
  "url": "section5_2-induction.html#th-math-induction-generalized",
  "type": "Theorem",
  "number": "5.2.7",
  "title": "Principle of Mathematical Induction (Generalized).",
  "body": "Principle of Mathematical Induction (Generalized)  If is a proposition over , where is any integer, then is a tautology if    is true, and  for all , .     "
},
{
  "id": "ex-permuations-formula-proof",
  "level": "2",
  "url": "section5_2-induction.html#ex-permuations-formula-proof",
  "type": "Example",
  "number": "5.2.8",
  "title": "A proof of the permutations formula.",
  "body": "A proof of the permutations formula  In Chapter 2, we stated that the number of different permutations of elements taken from an element set, , can be computed with the formula . We can prove this statement by induction on . For , let be the proposition .  Basis: states that if is the number of ways that elements can be selected from the empty set and arranged in order, then . This is true. A general law in combinatorics is that there is exactly one way of doing nothing.  Induction: Assume that is true for some natural number . It is left for us to prove that this assumption implies that is true. Suppose that we have a set of cardinality and want to select and arrange of its elements. There are two cases to consider, the first of which is easy. If , then there is one way of selecting zero elements from the set; hence and the formula works in this case.  The more challenging case is to verify the formula when is positive and less than or equal to . Here we count the value of by counting the number of ways that the first element in the arrangement can be filled and then counting the number of ways that the remaining elements can be filled in using the induction hypothesis.  There are possible choices for the first element. Since that leaves elements to fill in the remaining positions, there are ways of completing the arrangement. By the rule of products,   "
},
{
  "id": "th-math-induction-course-of-values",
  "level": "2",
  "url": "section5_2-induction.html#th-math-induction-course-of-values",
  "type": "Theorem",
  "number": "5.2.9",
  "title": "The Course-of-Values Principle of Mathematical Induction.",
  "body": "The Course-of-Values Principle of Mathematical Induction  If is a proposition over , where is any integer, then is a tautology if    is true, and  for all , .     "
},
{
  "id": "th-prime-factorizations-exist",
  "level": "2",
  "url": "section5_2-induction.html#th-prime-factorizations-exist",
  "type": "Theorem",
  "number": "5.2.10",
  "title": "Existence of Prime Factorizations.",
  "body": "Existence of Prime Factorizations  Every positive integer greater than or equal to 2 has a prime decomposition.   If you were to encounter this theorem outside the context of a discussion of mathematical induction, it might not be obvious that the proof can be done by induction. Recognizing when an induction proof is appropriate is mostly a matter of experience. Now on to the proof!  Basis: Since 2 is a prime, it is already decomposed into primes (one of them).  Induction: Suppose that for some all of the integers have a prime decomposition. Notice the course-of-value hypothesis. Consider . Either is prime or it isn't. If is prime, it is already decomposed into primes. If not, then has a divisor, , other than 1 and . Hence, where both and are between 2 and . By the induction hypothesis, and have prime decompositions, and , respectively. Therefore, has the prime decomposition .   "
},
{
  "id": "sss-peano-postulates",
  "level": "2",
  "url": "section5_2-induction.html#sss-peano-postulates",
  "type": "Axiom",
  "number": "5.2.11",
  "title": "Peano Postulates.",
  "body": "Peano Postulates The system of positive integers consists of a nonempty set, ; a least element of , denoted 1; and a successor function, s, with the properties   If , then there is an element of called the successor of , denoted .  No two elements of have the same successor.  No element of has as its successor.  If , , and , then .     "
},
{
  "id": "exercises-5_2-2",
  "level": "2",
  "url": "section5_2-induction.html#exercises-5_2-2",
  "type": "Exercise",
  "number": "5.2.4.1",
  "title": "",
  "body": "Prove that the sum of the first odd integers equals . We wish to prove that is true for . Recall that the th odd positive integer is 2n - 1.  Basis: for , is , which is true  Induction: Assume that for some is true. Then:   "
},
{
  "id": "exercises-5_2-3",
  "level": "2",
  "url": "section5_2-induction.html#exercises-5_2-3",
  "type": "Exercise",
  "number": "5.2.4.2",
  "title": "",
  "body": "Prove that if , then . "
},
{
  "id": "exercises-5_2-4",
  "level": "2",
  "url": "section5_2-induction.html#exercises-5_2-4",
  "type": "Exercise",
  "number": "5.2.4.3",
  "title": "",
  "body": "Prove that for : .  Proof:   Basis:  Induction:   "
},
{
  "id": "exercises-5_2-5",
  "level": "2",
  "url": "section5_2-induction.html#exercises-5_2-5",
  "type": "Exercise",
  "number": "5.2.4.4",
  "title": "",
  "body": "Prove that for : . "
},
{
  "id": "exercises-5_2-6",
  "level": "2",
  "url": "section5_2-induction.html#exercises-5_2-6",
  "type": "Exercise",
  "number": "5.2.4.5",
  "title": "",
  "body": "Use mathematical induction to show that for , .  Basis: For , we observe that  Induction: Assume that for some , the formula is true.  Then:  "
},
{
  "id": "exercises-5_2-7",
  "level": "2",
  "url": "section5_2-induction.html#exercises-5_2-7",
  "type": "Exercise",
  "number": "5.2.4.6",
  "title": "",
  "body": "Prove that if , the generalized DeMorgan's Law is true: .  "
},
{
  "id": "exercises-5_2-8",
  "level": "2",
  "url": "section5_2-induction.html#exercises-5_2-8",
  "type": "Exercise",
  "number": "5.2.4.7",
  "title": "",
  "body": "The number of strings of zeros and ones that contain an even number of ones is . Prove this fact by induction for . Let be the set of strings of zeros and ones of length (we assume that is known). Let be the set of the even strings, and the odd strings. The problem is to prove that for , . Clearly, , and, if for some , it follows that by the following reasoning.  We partition according to the first bit:  Since and are disjoint, we can apply the addition law. Therefore,   "
},
{
  "id": "exercises-5_2-9",
  "level": "2",
  "url": "section5_2-induction.html#exercises-5_2-9",
  "type": "Exercise",
  "number": "5.2.4.8",
  "title": "",
  "body": "Let be is a multiple of 5. Prove that is a tautology over . "
},
{
  "id": "exercises-5_2-10",
  "level": "2",
  "url": "section5_2-induction.html#exercises-5_2-10",
  "type": "Exercise",
  "number": "5.2.4.9",
  "title": "",
  "body": "Suppose that there are people in a room, , and that they all shake hands with one another. Prove that handshakes will have occurred. Assume that for persons handshakes take place. If one more person enters the room, he or she will shake hands with n people, Also, for , there are no handshakes, which matches the conjectured formula:   "
},
{
  "id": "exercises-5_2-11",
  "level": "2",
  "url": "section5_2-induction.html#exercises-5_2-11",
  "type": "Exercise",
  "number": "5.2.4.10",
  "title": "",
  "body": "Prove that it is possible to make up any postage of eight cents or more using only three- and five-cent stamps. "
},
{
  "id": "exercises-5_2-12",
  "level": "2",
  "url": "section5_2-induction.html#exercises-5_2-12",
  "type": "Exercise",
  "number": "5.2.4.11",
  "title": "",
  "body": "Generalized associativity. It is well known that if , , and are numbers, then no matter what order the sums in the expression are taken in, the result is always the same. Call this fact and assume it is true. Prove using course-of-values induction that if , , and are numbers, then no matter what order the sums in the expression are taken in, the result is always the same. Let be has the same value no matter how it is evaluated.  Basis: may be evaluated only two ways. Since + is associative, . Hence, is true.  Induction: Assume that for some , are all true. Now consider the sum . Any of the additions in this expression can be applied last. If the th addition is applied last, we have . No matter how the expression to the left and right of the addition are evaluated, the result will always be the same by the induction hypothesis, specifically and . We now can prove that . If ,   "
},
{
  "id": "exercises-5_2-13",
  "level": "2",
  "url": "section5_2-induction.html#exercises-5_2-13",
  "type": "Exercise",
  "number": "5.2.4.12",
  "title": "",
  "body": "Let be the set of all numbers that can be produced by applying any of the rules below in any order a finite number of times.  Rule 1:  Rule 2:  Rule 3: If and have been produced by the rules, then .  Rule 4: If and have been produced by the rules, then .  Prove that . The number of times the rules are applied should be the integer that you do the induction on. "
},
{
  "id": "exercises-5_2-14",
  "level": "2",
  "url": "section5_2-induction.html#exercises-5_2-14",
  "type": "Exercise",
  "number": "5.2.4.13",
  "title": "",
  "body": "Proofs involving objects that are defined recursively are often inductive. A recursive definition is similar to an inductive proof. It consists of a basis, usually the simple part of the definition, and the recursion, which defines complex objects in terms of simpler ones. For example, if is a real number and is a positive integer, we can define as follows:  Basis: .  Recursion: if , .  For example, = .  Prove that if , . There is much more on recursion in Chapter 7. Let be the proposition that for all . For , let for all . The basis for this proof follows directly from the basis for the definition of exponentiation.  Induction: Assume that for some is true. Then .  "
},
{
  "id": "exercises-5_2-15",
  "level": "2",
  "url": "section5_2-induction.html#exercises-5_2-15",
  "type": "Exercise",
  "number": "5.2.4.14",
  "title": "",
  "body": "Let be a finite set and let be defined recursively by and for .  List the elements of for the case .  Determine the formula for , given that , and prove your formula by induction.    "
},
{
  "id": "section5_3-proofs-quantifiers",
  "level": "1",
  "url": "section5_3-proofs-quantifiers.html",
  "type": "Section",
  "number": "5.3",
  "title": "Proofs of Quantified Statements",
  "body": "Proofs of Quantified Statements   Formal proofs of quantified expressions can use all the techniques presented in sections - , plus some specialized forms.    Proofs With Quantifiers  Proving quantified statements often requires invoking one or more the following inference rules.   Inference Rules for Quantified Statements    Existential Instantiation      Existential Generalization      Universal Instantiation   is any arbitrary element of    Universal Generalization   is any arbitrary element of     The instantiation rules are used to fix a variable in a proposition over a universe to a single (but perhaps unspecified) value in order to apply the rules of propositional logic. The generalization rules are used to expand results from a fixed variable to the entire universe. Commonly in less formal proofs, such as those in mathematics, these are implied but not directly stated in the proof.  Constructive Proof Constructive Proof  Constructive proofs are used to prove theorems of the form: . All that is needed is to find one value for which is true and then invoke the Existential Generalization Rule.   A constructive proof  Show that there is a positive integer that can be written as the sum of cubes of positive integers in two different ways:   Therefore by Existential Generalization it is true, there is a positive integer that can be written as the sum of cubes of positive integers in two different ways.  Non-Constructive Proof Non-Constructive Proof  Non-constructive proofs are also used to prove theorems of the form: . Assume no exists for which is true and show this leads to a contradiction.   A non-constructive proof  Show that there exist irrational numbers and such that is rational.   Take the negation of the conclusion: no such exist.  We know that is irrational.  Let both  Then,  There are two possibilities, is either rational or irrational.  If it is rational, we have two irrational numbers and with rational.  If it is irrational:  Let and .  Then  2 is rational.   In either case, we have a rational result, which contradicts our negated conclusion.   .  Proof of Non-Existence  Non-Existence proofs are used to prove theorems of the form: . Using the equivalent form show that is never true.   A non-existence proof.  Show that there is no number such that . Let be  Then the whole statement can be written as:  Equivalently:  We have three cases:   Case 1: . Since multiplying two negatives, gives a positive, is positive. Thus, is also positive. Hence holds.  Case 2: . Here . Thus, is also positive. Hence holds.  Case 3: . Since multiplying two positives, gives a positive, is positive.. Thus, is also positive. Hence holds.   Therefore, by Universal Instantiation     Proof by Counterexample  Counterexamples are used to show theorems of the form are false. All that is needed is to find one value for which is false. That value is called a counterexample. is then false by Universal Instantiation. Counterexamples can also be used to prove statements with a negated universal quantifier are true. This is done using the counterexample in a proof by contradiction on  .  A counterexample proof.  Show that every positive integer is the sum of the squares of 3 integers. This can be rewritten as , where is the statement \" is the sum of the squares of 3 integers\" and .  Enumerating out from 1, we see that 7 cannot be made in this way:           Therefore, 7 is a counterexample and is false.    Proof by Universal Generalization  Universal Generalization is used for many proofs of mathematical formulas, but most less formal proofs don't state that it is used. In a proof using Universal Generalization, we pick an arbitrary value from the universe and show that the statement is true. The catch is the value must be arbitrary, showing a formula works for a particular value cannot be generalized to all values in the universe.   A proof using Universal Generalization.  Prove if an integer is even then is even.  The statement to be proven can be rewritten more formally as , where is the statement is even. A formal proof would proceed as follows:   Premise  Universal Instantiation to arbitrary integer  Assume hypothesis is true.  , for some integer . Definition of even integer.   is also even.  is true.   Universal Generalization.       Exercises for Section 5.3  Translate the following argument and prove or disprove that it is valid.    Every student likes either soccer or basketball.  There is at least one student who does not like basketball.  For each student, the student does not like soccer or likes baseball.  All students who like volleyball do not like baseball.  Therefore, there exists a student who does not like volleyball.    Assume that the universe of discourse is the set of all students. Let:   denote \"A student x likes soccer\".  denote \"A student x likes basketball\".  denote \"A student x likes baseball\".  denote \"A student x likes volleyball\".   The given argument is translated as follows.        Therefore,  Proof:   Premise 2  Existential Instantiation (1)  Premise 1  Universal Instantiation (3). Since UI we can let it be same element as (2)  Disjunctive Syllogism (2,4)  Premise 3  UI (6)  Disjunctive Syllogism (5,7)   Premise 4  UI (9)  Indirect Reasoning (8, 10)  Existential Generalization (11)    Prove that , but that converse is not true.    "
},
{
  "id": "table-quantifier-inferences",
  "level": "2",
  "url": "section5_3-proofs-quantifiers.html#table-quantifier-inferences",
  "type": "Table",
  "number": "5.3.1",
  "title": "Inference Rules for Quantified Statements",
  "body": " Inference Rules for Quantified Statements    Existential Instantiation      Existential Generalization      Universal Instantiation   is any arbitrary element of    Universal Generalization   is any arbitrary element of    "
},
{
  "id": "def-constructive-proof",
  "level": "2",
  "url": "section5_3-proofs-quantifiers.html#def-constructive-proof",
  "type": "Definition",
  "number": "5.3.2",
  "title": "Constructive Proof.",
  "body": "Constructive Proof Constructive Proof  Constructive proofs are used to prove theorems of the form: . All that is needed is to find one value for which is true and then invoke the Existential Generalization Rule.  "
},
{
  "id": "ex-constructive-proof",
  "level": "2",
  "url": "section5_3-proofs-quantifiers.html#ex-constructive-proof",
  "type": "Example",
  "number": "5.3.3",
  "title": "A constructive proof.",
  "body": "A constructive proof  Show that there is a positive integer that can be written as the sum of cubes of positive integers in two different ways:   Therefore by Existential Generalization it is true, there is a positive integer that can be written as the sum of cubes of positive integers in two different ways. "
},
{
  "id": "def-non-constructive-proof",
  "level": "2",
  "url": "section5_3-proofs-quantifiers.html#def-non-constructive-proof",
  "type": "Definition",
  "number": "5.3.4",
  "title": "Non-Constructive Proof.",
  "body": "Non-Constructive Proof Non-Constructive Proof  Non-constructive proofs are also used to prove theorems of the form: . Assume no exists for which is true and show this leads to a contradiction.  "
},
{
  "id": "ex-non-constructive-proof",
  "level": "2",
  "url": "section5_3-proofs-quantifiers.html#ex-non-constructive-proof",
  "type": "Example",
  "number": "5.3.5",
  "title": "A non-constructive proof.",
  "body": "A non-constructive proof  Show that there exist irrational numbers and such that is rational.   Take the negation of the conclusion: no such exist.  We know that is irrational.  Let both  Then,  There are two possibilities, is either rational or irrational.  If it is rational, we have two irrational numbers and with rational.  If it is irrational:  Let and .  Then  2 is rational.   In either case, we have a rational result, which contradicts our negated conclusion.   . "
},
{
  "id": "def-proof-of-non-existence",
  "level": "2",
  "url": "section5_3-proofs-quantifiers.html#def-proof-of-non-existence",
  "type": "Definition",
  "number": "5.3.6",
  "title": "Proof of Non-Existence.",
  "body": "Proof of Non-Existence  Non-Existence proofs are used to prove theorems of the form: . Using the equivalent form show that is never true.  "
},
{
  "id": "ex-non-existence-proof",
  "level": "2",
  "url": "section5_3-proofs-quantifiers.html#ex-non-existence-proof",
  "type": "Example",
  "number": "5.3.7",
  "title": "A non-existence proof..",
  "body": "A non-existence proof.  Show that there is no number such that . Let be  Then the whole statement can be written as:  Equivalently:  We have three cases:   Case 1: . Since multiplying two negatives, gives a positive, is positive. Thus, is also positive. Hence holds.  Case 2: . Here . Thus, is also positive. Hence holds.  Case 3: . Since multiplying two positives, gives a positive, is positive.. Thus, is also positive. Hence holds.   Therefore, by Universal Instantiation    "
},
{
  "id": "def-proof-by-counterexample",
  "level": "2",
  "url": "section5_3-proofs-quantifiers.html#def-proof-by-counterexample",
  "type": "Definition",
  "number": "5.3.8",
  "title": "Proof by Counterexample.",
  "body": "Proof by Counterexample  Counterexamples are used to show theorems of the form are false. All that is needed is to find one value for which is false. That value is called a counterexample. is then false by Universal Instantiation. Counterexamples can also be used to prove statements with a negated universal quantifier are true. This is done using the counterexample in a proof by contradiction on  . "
},
{
  "id": "ex-proof-by-counterexample",
  "level": "2",
  "url": "section5_3-proofs-quantifiers.html#ex-proof-by-counterexample",
  "type": "Example",
  "number": "5.3.9",
  "title": "A counterexample proof..",
  "body": "A counterexample proof.  Show that every positive integer is the sum of the squares of 3 integers. This can be rewritten as , where is the statement \" is the sum of the squares of 3 integers\" and .  Enumerating out from 1, we see that 7 cannot be made in this way:           Therefore, 7 is a counterexample and is false.   "
},
{
  "id": "def-ug-proof",
  "level": "2",
  "url": "section5_3-proofs-quantifiers.html#def-ug-proof",
  "type": "Definition",
  "number": "5.3.10",
  "title": "Proof by Universal Generalization.",
  "body": "Proof by Universal Generalization  Universal Generalization is used for many proofs of mathematical formulas, but most less formal proofs don't state that it is used. In a proof using Universal Generalization, we pick an arbitrary value from the universe and show that the statement is true. The catch is the value must be arbitrary, showing a formula works for a particular value cannot be generalized to all values in the universe.  "
},
{
  "id": "ex-ug-proof",
  "level": "2",
  "url": "section5_3-proofs-quantifiers.html#ex-ug-proof",
  "type": "Example",
  "number": "5.3.11",
  "title": "A proof using Universal Generalization..",
  "body": "A proof using Universal Generalization.  Prove if an integer is even then is even.  The statement to be proven can be rewritten more formally as , where is the statement is even. A formal proof would proceed as follows:   Premise  Universal Instantiation to arbitrary integer  Assume hypothesis is true.  , for some integer . Definition of even integer.   is also even.  is true.   Universal Generalization.   "
},
{
  "id": "exercises-5_3-2",
  "level": "2",
  "url": "section5_3-proofs-quantifiers.html#exercises-5_3-2",
  "type": "Exercise",
  "number": "5.3.2.1",
  "title": "",
  "body": "Translate the following argument and prove or disprove that it is valid.    Every student likes either soccer or basketball.  There is at least one student who does not like basketball.  For each student, the student does not like soccer or likes baseball.  All students who like volleyball do not like baseball.  Therefore, there exists a student who does not like volleyball.    Assume that the universe of discourse is the set of all students. Let:   denote \"A student x likes soccer\".  denote \"A student x likes basketball\".  denote \"A student x likes baseball\".  denote \"A student x likes volleyball\".   The given argument is translated as follows.        Therefore,  Proof:   Premise 2  Existential Instantiation (1)  Premise 1  Universal Instantiation (3). Since UI we can let it be same element as (2)  Disjunctive Syllogism (2,4)  Premise 3  UI (6)  Disjunctive Syllogism (5,7)   Premise 4  UI (9)  Indirect Reasoning (8, 10)  Existential Generalization (11)   "
},
{
  "id": "exercises-5_3-3",
  "level": "2",
  "url": "section5_3-proofs-quantifiers.html#exercises-5_3-3",
  "type": "Exercise",
  "number": "5.3.2.2",
  "title": "",
  "body": "Prove that , but that converse is not true.  "
},
{
  "id": "section5_4-proof-review",
  "level": "1",
  "url": "section5_4-proof-review.html",
  "type": "Section",
  "number": "5.4",
  "title": "A Review of Methods of Proof",
  "body": "A Review of Methods of Proof  One of the major goals of this chapter is to acquaint the reader with the key concepts in the nature of proof in logic, which of course carries over into all areas of mathematics and its applications. In this section we will stop, reflect, and smell the roses, so that these key ideas are not lost in the many concepts covered in logic. In Chapter 4 we will use set theory as a vehicle for further practice and insights into methods of proof.   Key Concepts in Proof  All theorems in mathematics can be expressed in form If then ( ), or in the form if and only if ( ). The latter is equivalent to If then , and If then .   In If then ,  is the premise (or hypothesis) and is the conclusion. It is important to realize that a theorem makes a statement that is dependent on the premise being true.  There are two basic methods for proving :   Directly: Assume is true and prove is true.   Indirectly (or by contradiction): Assume is true and is false and prove that this leads to a contradiction of some premise, theorem, or basic truth.   The method of proof for If and only if theorems is found in the law . Hence to prove an If and only if statement one must prove an if . . . then ... statement and its converse.  The initial response of most people when confronted with the task of being told they must be able to read and do proofs is often Why? or I can't do proofs. To answer the first question, doing proofs or problem solving, even on the most trivial level, involves being able to read statements. First we must understand the problem and know the hypothesis; second, we must realize when we are done and we must understand the conclusion. To apply theorems or algorithms we must be able to read theorems and their proofs intelligently.  To be able to do the actual proofs of theorems we are forced to learn:   the actual meaning of the theorems, and  the basic definitions and concepts of the topic discussed.   For example, when we discuss rational numbers and refer to a number as being rational, this means we can substitute a fraction in place of , with the understanding that and are integers and . Therefore, to prove a theorem about rational numbers it is absolutely necessary that you know what a rational number looks like.  It's easy to comment on the response, I cannot do proofs. Have you tried? As elementary school students we may have been awe of anyone who could handle algebraic expressions, especially complicated ones. We learned by trying and applying ourselves. Maybe we cannot solve all problems in algebra or calculus, but we are comfortable enough with these subjects to know that we can solve many and can express ourselves intelligently in these areas. The same remarks hold true for proofs.   The Art of Proving  First one must completely realize what is given, the hypothesis. The importance of this is usually overlooked by beginners. It makes sense, whenever you begin any task, to spend considerable time thinking about the tools at your disposal. Write down the premise in precise language. Similarly, you have to know when the task is finished. Write down the conclusion in precise language. Then you usually start with and attempt to show that follows logically. How do you begin? Basically you attack the proof the same way you solve a complicated equation in elementary algebra. You may not know exactly what each and every step is but you must try something. If we are lucky, follows naturally; if it doesn't, try something else. Often what is helpful is to work backward from . Finally, we have all learned, possibly the hard way, that mathematics is a participating sport, not a spectator sport. One learns proofs by doing them, not by watching others do them. We give several illustrations of how to set up the proofs of several examples. Our aim here is not to prove the statements given, but to concentrate on the logical procedure.  The Sum of Odd Integers We will outline a proof that the sum of any two odd integers is even. Our first step will be to write the theorem in the familiar conditional form: If and are odd integers, then is even. The premise and conclusion of this theorem should be clear now. Notice that if and are not both odd, then the conclusion may or may not be true. Our only objective is to show that the truth of the premise forces the conclusion to be true. Therefore, we can express the integers and in the form that all odd integers take; that is: This observation allows us to examine the sum and to verify that it must be even.   The Square of an Even Integer Let . We will outline a proof that is even if and only if is even.  Outline of a proof: Since this is an If and only if theorem we must prove two things:   ( ) If is even, then is even. To do this directly, assume that is even and prove that is even. To do this indirectly, assume is even and that is odd, and reach a contradiction. It turns out that the latter of the two approaches is easiest here.  ( ) If is even, then is even. To do this directly, assume that is even and prove that is even.   Now that we have broken the theorem down into two parts and know what to prove, we proceed to prove the two implications. The final ingredient that we need is a convenient way of describing even integers. When we refer to an integer (or , or ,. . . ) as even, we can always replace it with a product of the form , where is an integer (more precisely, . In other words, for an integer to be even it must have a factor of two in its prime decomposition.   is irrational Our final example will be an outline of the proof that the square root of 2 is irrational (not an element of ). This is an example of the theorem that does not appear to be in the standard form. One way to rephrase the theorem is: If is a rational number, then . A direct proof of this theorem would require that we verify that the square of every rational number is not equal to 2. There is no convenient way of doing this, so we must turn to the indirect method of proof. In such a proof, we assume that is a rational number and that . This will lead to a contradiction. In order to reach this contradiction, we need to use the following facts:   A rational number is a quotient of two integers.  Every fraction can be reduced to lowest terms, so that the numerator and denominator have no common factor greater than 1.  If is an integer, is even if and only if is even.      Exercises for Section 5.4  Prove that the sum of two odd positive integers is even. The given statement can be written in if , then format as: If and are two odd positive integers, then is an even integer.  Proof: Assume and are two positive odd integers. It can be shown that .  odd for some ,  odd for some .  Then, Therefore, is even.   Write out a complete proof that if is an integer, is even if and only if is even.  Write out a complete proof that is irrational. Proof: (Indirect) Assume to the contrary, that is a rational number. Then there exists where and where is in lowest terms, that is, and have no common factor other than 1.   Hence both and have a common factor, namely 2, which is a contradiction.  Prove that is an irrational number.  Prove that if and are real numbers such that , then either or . Proof: (Indirect) Assume and . Assume to the contrary that is false, which is equivalent to . Hence . This contradicts the assumption that .   Use the following definition of absolute value to prove the given statements: If is a real number, then the absolute value of , , is defined by:   For any real number , . Moreover, implies .  For any two real numbers and , .  For any two real numbers and , .     "
},
{
  "id": "ex-sumsofodds",
  "level": "2",
  "url": "section5_4-proof-review.html#ex-sumsofodds",
  "type": "Example",
  "number": "5.4.1",
  "title": "The Sum of Odd Integers.",
  "body": "The Sum of Odd Integers We will outline a proof that the sum of any two odd integers is even. Our first step will be to write the theorem in the familiar conditional form: If and are odd integers, then is even. The premise and conclusion of this theorem should be clear now. Notice that if and are not both odd, then the conclusion may or may not be true. Our only objective is to show that the truth of the premise forces the conclusion to be true. Therefore, we can express the integers and in the form that all odd integers take; that is: This observation allows us to examine the sum and to verify that it must be even.  "
},
{
  "id": "ex-squares-of-evens",
  "level": "2",
  "url": "section5_4-proof-review.html#ex-squares-of-evens",
  "type": "Example",
  "number": "5.4.2",
  "title": "The Square of an Even Integer.",
  "body": "The Square of an Even Integer Let . We will outline a proof that is even if and only if is even.  Outline of a proof: Since this is an If and only if theorem we must prove two things:   ( ) If is even, then is even. To do this directly, assume that is even and prove that is even. To do this indirectly, assume is even and that is odd, and reach a contradiction. It turns out that the latter of the two approaches is easiest here.  ( ) If is even, then is even. To do this directly, assume that is even and prove that is even.   Now that we have broken the theorem down into two parts and know what to prove, we proceed to prove the two implications. The final ingredient that we need is a convenient way of describing even integers. When we refer to an integer (or , or ,. . . ) as even, we can always replace it with a product of the form , where is an integer (more precisely, . In other words, for an integer to be even it must have a factor of two in its prime decomposition.  "
},
{
  "id": "ex-sqrt-2-irrational",
  "level": "2",
  "url": "section5_4-proof-review.html#ex-sqrt-2-irrational",
  "type": "Example",
  "number": "5.4.3",
  "title": "<span class=\"process-math\">\\(\\sqrt{2}\\)<\/span> is irrational.",
  "body": "is irrational Our final example will be an outline of the proof that the square root of 2 is irrational (not an element of ). This is an example of the theorem that does not appear to be in the standard form. One way to rephrase the theorem is: If is a rational number, then . A direct proof of this theorem would require that we verify that the square of every rational number is not equal to 2. There is no convenient way of doing this, so we must turn to the indirect method of proof. In such a proof, we assume that is a rational number and that . This will lead to a contradiction. In order to reach this contradiction, we need to use the following facts:   A rational number is a quotient of two integers.  Every fraction can be reduced to lowest terms, so that the numerator and denominator have no common factor greater than 1.  If is an integer, is even if and only if is even.   "
},
{
  "id": "exercises-5_4-2",
  "level": "2",
  "url": "section5_4-proof-review.html#exercises-5_4-2",
  "type": "Exercise",
  "number": "5.4.3.1",
  "title": "",
  "body": "Prove that the sum of two odd positive integers is even. The given statement can be written in if , then format as: If and are two odd positive integers, then is an even integer.  Proof: Assume and are two positive odd integers. It can be shown that .  odd for some ,  odd for some .  Then, Therefore, is even.  "
},
{
  "id": "exercises-5_4-3",
  "level": "2",
  "url": "section5_4-proof-review.html#exercises-5_4-3",
  "type": "Exercise",
  "number": "5.4.3.2",
  "title": "",
  "body": "Write out a complete proof that if is an integer, is even if and only if is even. "
},
{
  "id": "exercises-5_4-4",
  "level": "2",
  "url": "section5_4-proof-review.html#exercises-5_4-4",
  "type": "Exercise",
  "number": "5.4.3.3",
  "title": "",
  "body": "Write out a complete proof that is irrational. Proof: (Indirect) Assume to the contrary, that is a rational number. Then there exists where and where is in lowest terms, that is, and have no common factor other than 1.   Hence both and have a common factor, namely 2, which is a contradiction. "
},
{
  "id": "exercises-5_4-5",
  "level": "2",
  "url": "section5_4-proof-review.html#exercises-5_4-5",
  "type": "Exercise",
  "number": "5.4.3.4",
  "title": "",
  "body": "Prove that is an irrational number. "
},
{
  "id": "exercises-5_4-6",
  "level": "2",
  "url": "section5_4-proof-review.html#exercises-5_4-6",
  "type": "Exercise",
  "number": "5.4.3.5",
  "title": "",
  "body": "Prove that if and are real numbers such that , then either or . Proof: (Indirect) Assume and . Assume to the contrary that is false, which is equivalent to . Hence . This contradicts the assumption that .  "
},
{
  "id": "exercises-5_4-7",
  "level": "2",
  "url": "section5_4-proof-review.html#exercises-5_4-7",
  "type": "Exercise",
  "number": "5.4.3.6",
  "title": "",
  "body": "Use the following definition of absolute value to prove the given statements: If is a real number, then the absolute value of , , is defined by:   For any real number , . Moreover, implies .  For any two real numbers and , .  For any two real numbers and , .   "
},
{
  "id": "section6_1-proof-methods-sets",
  "level": "1",
  "url": "section6_1-proof-methods-sets.html",
  "type": "Section",
  "number": "6.1",
  "title": "Methods of Proof for Sets",
  "body": "Methods of Proof for Sets  If , , and are arbitrary sets, is it always true that ? There are a variety of ways that we could attempt to prove that this distributive law for intersection over union is indeed true. We start with a common non-proof and then work toward more acceptable methods.  Examples and Counterexamples  We could, for example, let , , and , and determine whether the distributive law is true for these values of , , and . In doing this we will have only determined that the distributive law is true for this one example. It does not prove the distributive law for all possible sets , , and and hence is an invalid method of proof. However, trying a few examples has considerable merit insofar as it makes us more comfortable with the statement in question. Indeed, if the statement is not true for the example, we have disproved the statement.  Counterexample  An example that disproves a statement is called a counterexample.  Disproving distributivity of addition over multiplication From basic algebra we learned that multiplication is distributive over addition. Is addition distributive over multiplication? That is, is always true? If we choose the values , , and , we find that . Therefore, this set of values serves as a counterexample to a distributive law of addition over multiplication.    Proof Using Venn Diagrams  In this method, we illustrate both sides of the statement via a Venn diagram and determine whether both Venn diagrams give us the same picture, For example, the left side of the distributive law is developed in Figure and the right side in Figure . Note that the final results give you the same shaded area.  The advantage of this method is that it is relatively quick and mechanical. The disadvantage is that it is workable only if there are a small number of sets under consideration. In addition, it doesn't work very well in a static environment like a book or test paper. Venn diagrams tend to work well if you have a potentially dynamic environment like a blackboard or video.   Development of the left side of the distributive law for sets   Three Venn Diagrams illustrating      Development of the right side of the distributive law for sets   Three Venn Diagrams illustrating      Proof using Set-Membership Tables  Let be a subset of a universal set and let . To use this method we note that exactly one of the following is true: or . Denote the situation where by 1 and that where by 0. Working with two sets, and , and if , there are four possible outcomes of where can be. What are they? The set-membership table for is:   Membership Table for     This table illustrates that if and only if or .  In order to prove the distributive law via a set-membership table, write out the table for each side of the set statement to be proved and note that if and are two columns in a table, then the set statement is equal to the set statement if and only if corresponding entries in each row are the same.  To prove , first note that the statement involves three sets, , , and , so there are possibilities for the membership of an element in the sets.   Membership table to prove the distributive law of intersection over union     Since each entry in Column 7 is the same as the corresponding entry in Column 8, we have shown that for any sets , , and . The main advantage of this method is that it is mechanical. The main disadvantage is that it is reasonable to use only for a relatively small number of sets. If we are trying to prove a statement involving five sets, there are rows, which would test anyone's patience doing the work by hand.   Proof Using Definitions  This method involves using definitions and basic concepts to prove the given statement. This procedure forces one to learn, relearn, and understand basic definitions and concepts. It helps individuals to focus their attention on the main ideas of each topic and therefore is the most useful method of proof. One does not learn a topic by memorizing or occasionally glancing at core topics, but by using them in a variety of contexts. The word proof panics most people; however, everyone can become comfortable with proofs. Do not expect to prove every statement immediately. In fact, it is not our purpose to prove every theorem or fact encountered, only those that illustrate methods and\/or basic concepts. Throughout the text we will focus in on main techniques of proofs. Let's illustrate by proving the distributive law.   Proof Technique 1. State or restate the theorem so you understand what is given (the hypothesis) and what you are trying to prove (the conclusion).  The Distributive Law of Intersection over Union If , , and are sets, then .   What we can assume: , , and are sets.  What we are to prove: .  Commentary: What types of objects am I working with: sets? real numbers? propositions? The answer is sets: sets of elements that can be anything you care to imagine. The universe from which we draw our elements plays no part in the proof of this theorem.  We need to show that the two sets are equal. Let's call them the left-hand set ) and the right-hand set ( ). To prove that , we must prove two things: (a) , and (b) .  To prove part a and, similarly, part b, we must show that each element of is an element of . Once we have diagnosed the problem we are ready to begin.  We must prove: (a) .  Let : We must also prove (b) .  .   Proof Technique 2   To prove that , we must show that if , then .  To prove that , we must show:    and   .     To further illustrate the Proof-by-Definition technique, let's prove the following theorem.  Another Proof using Definitions If , , and are any sets, then .   Commentary; We again ask ourselves: What are we trying to prove? What types of objects are we dealing with? We realize that we wish to prove two facts: (a) , and (b) .  To prove part (a), and similarly part (b), we'll begin the same way. Let to show . What should be? What does a typical object in the look like?  Now, on to the actual proof.  (a) .  Let .   (b) .  Let .      Exercises for Section 6.1   Prove the following:  Let , , and be sets . If and , then .  Let and be sets . Then .  Let be sets . If ( and ) then .  Let be sets . if and only if .  Let be sets . If then .     Assume that (condition of the conditional conclusion ). Since , by the definition of . and implies that . Therefore, if , then .   (Proof that ) Let be in . Therefore, x is in , but it is not in B; that is, and .  Assume that and . Let . By the two premises, and . Therefore, by the definition of intersection, .   (Indirect) Assume that is not a subset of . Therefore, there exists that does not belong to . . Therefore, and , a contradiction to the assumption that .   Assume that . Then and by definition of Cartesian product. Since , by the definition of . Then by definition of Cartesian product. Therefore, by the definition of .    Write the converse of parts (a), (c), and (e) of Exercise 1 and prove or disprove them.   Disprove the following, assuming are sets:  .  .  implies .       If and , , while .  If and , , but is not in .  Let , , and .  If , , and , then the left hand side of the identity is while the right hand side is the empty set. Another example is , , and     Let be sets. Write the following in if . . . then . . . language and prove:  is a sufficient condition for .  is a necessary condition for .  is a necessary and sufficient condition for .    Prove by induction that if , , , ... , are sets, , then .  Proof: Let be .  Basis: We must show that is true. This was done by several methods in section 4.1.  Induction: Assume for some that is true. Then   Let , and be sets. Prove or disprove: The statement is false. The sets , \\ and \\ provide a counterexample. Looking ahead to ICS 241, in the chapter on relations, we would say that the relation of being non-disjoint is not  transitive.   "
},
{
  "id": "def-counterexample",
  "level": "2",
  "url": "section6_1-proof-methods-sets.html#def-counterexample",
  "type": "Definition",
  "number": "6.1.1",
  "title": "Counterexample.",
  "body": "Counterexample  An example that disproves a statement is called a counterexample. "
},
{
  "id": "ex-addition-over-mult",
  "level": "2",
  "url": "section6_1-proof-methods-sets.html#ex-addition-over-mult",
  "type": "Example",
  "number": "6.1.2",
  "title": "Disproving distributivity of addition over multiplication.",
  "body": "Disproving distributivity of addition over multiplication From basic algebra we learned that multiplication is distributive over addition. Is addition distributive over multiplication? That is, is always true? If we choose the values , , and , we find that . Therefore, this set of values serves as a counterexample to a distributive law of addition over multiplication.  "
},
{
  "id": "distrib-venn-lhs",
  "level": "2",
  "url": "section6_1-proof-methods-sets.html#distrib-venn-lhs",
  "type": "Figure",
  "number": "6.1.3",
  "title": "",
  "body": " Development of the left side of the distributive law for sets   Three Venn Diagrams illustrating    "
},
{
  "id": "distrib-venn-rhs",
  "level": "2",
  "url": "section6_1-proof-methods-sets.html#distrib-venn-rhs",
  "type": "Figure",
  "number": "6.1.4",
  "title": "",
  "body": " Development of the right side of the distributive law for sets   Three Venn Diagrams illustrating    "
},
{
  "id": "mt-union",
  "level": "2",
  "url": "section6_1-proof-methods-sets.html#mt-union",
  "type": "Table",
  "number": "6.1.5",
  "title": "Membership Table for <span class=\"process-math\">\\(A \\cup  B\\)<\/span>",
  "body": " Membership Table for    "
},
{
  "id": "tab-mt-distr",
  "level": "2",
  "url": "section6_1-proof-methods-sets.html#tab-mt-distr",
  "type": "Table",
  "number": "6.1.6",
  "title": "Membership table to prove the distributive law of intersection over union",
  "body": " Membership table to prove the distributive law of intersection over union    "
},
{
  "id": "th-distr-law-i-over-u",
  "level": "2",
  "url": "section6_1-proof-methods-sets.html#th-distr-law-i-over-u",
  "type": "Theorem",
  "number": "6.1.7",
  "title": "The Distributive Law of Intersection over Union.",
  "body": "The Distributive Law of Intersection over Union If , , and are sets, then .   What we can assume: , , and are sets.  What we are to prove: .  Commentary: What types of objects am I working with: sets? real numbers? propositions? The answer is sets: sets of elements that can be anything you care to imagine. The universe from which we draw our elements plays no part in the proof of this theorem.  We need to show that the two sets are equal. Let's call them the left-hand set ) and the right-hand set ( ). To prove that , we must prove two things: (a) , and (b) .  To prove part a and, similarly, part b, we must show that each element of is an element of . Once we have diagnosed the problem we are ready to begin.  We must prove: (a) .  Let : We must also prove (b) .  .  "
},
{
  "id": "th-set-proof-example2",
  "level": "2",
  "url": "section6_1-proof-methods-sets.html#th-set-proof-example2",
  "type": "Theorem",
  "number": "6.1.8",
  "title": "Another Proof using Definitions.",
  "body": "Another Proof using Definitions If , , and are any sets, then .   Commentary; We again ask ourselves: What are we trying to prove? What types of objects are we dealing with? We realize that we wish to prove two facts: (a) , and (b) .  To prove part (a), and similarly part (b), we'll begin the same way. Let to show . What should be? What does a typical object in the look like?  Now, on to the actual proof.  (a) .  Let .   (b) .  Let .   "
},
{
  "id": "exercise-6_1-1",
  "level": "2",
  "url": "section6_1-proof-methods-sets.html#exercise-6_1-1",
  "type": "Exercise",
  "number": "6.1.5.1",
  "title": "",
  "body": " Prove the following:  Let , , and be sets . If and , then .  Let and be sets . Then .  Let be sets . If ( and ) then .  Let be sets . if and only if .  Let be sets . If then .     Assume that (condition of the conditional conclusion ). Since , by the definition of . and implies that . Therefore, if , then .   (Proof that ) Let be in . Therefore, x is in , but it is not in B; that is, and .  Assume that and . Let . By the two premises, and . Therefore, by the definition of intersection, .   (Indirect) Assume that is not a subset of . Therefore, there exists that does not belong to . . Therefore, and , a contradiction to the assumption that .   Assume that . Then and by definition of Cartesian product. Since , by the definition of . Then by definition of Cartesian product. Therefore, by the definition of .   "
},
{
  "id": "section6_1-proof-methods-sets-7-3",
  "level": "2",
  "url": "section6_1-proof-methods-sets.html#section6_1-proof-methods-sets-7-3",
  "type": "Exercise",
  "number": "6.1.5.2",
  "title": "",
  "body": "Write the converse of parts (a), (c), and (e) of Exercise 1 and prove or disprove them.  "
},
{
  "id": "section6_1-proof-methods-sets-7-4",
  "level": "2",
  "url": "section6_1-proof-methods-sets.html#section6_1-proof-methods-sets-7-4",
  "type": "Exercise",
  "number": "6.1.5.3",
  "title": "",
  "body": "Disprove the following, assuming are sets:  .  .  implies .       If and , , while .  If and , , but is not in .  Let , , and .  If , , and , then the left hand side of the identity is while the right hand side is the empty set. Another example is , , and    "
},
{
  "id": "section6_1-proof-methods-sets-7-5",
  "level": "2",
  "url": "section6_1-proof-methods-sets.html#section6_1-proof-methods-sets-7-5",
  "type": "Exercise",
  "number": "6.1.5.4",
  "title": "",
  "body": "Let be sets. Write the following in if . . . then . . . language and prove:  is a sufficient condition for .  is a necessary condition for .  is a necessary and sufficient condition for .   "
},
{
  "id": "ex-generalized_distrib",
  "level": "2",
  "url": "section6_1-proof-methods-sets.html#ex-generalized_distrib",
  "type": "Exercise",
  "number": "6.1.5.5",
  "title": "",
  "body": "Prove by induction that if , , , ... , are sets, , then .  Proof: Let be .  Basis: We must show that is true. This was done by several methods in section 4.1.  Induction: Assume for some that is true. Then  "
},
{
  "id": "exercise-disjoint-not-transitive",
  "level": "2",
  "url": "section6_1-proof-methods-sets.html#exercise-disjoint-not-transitive",
  "type": "Exercise",
  "number": "6.1.5.6",
  "title": "",
  "body": "Let , and be sets. Prove or disprove: The statement is false. The sets , \\ and \\ provide a counterexample. Looking ahead to ICS 241, in the chapter on relations, we would say that the relation of being non-disjoint is not  transitive. "
},
{
  "id": "section6_2-laws-of-set-theory",
  "level": "1",
  "url": "section6_2-laws-of-set-theory.html",
  "type": "Section",
  "number": "6.2",
  "title": "Laws of Set Theory",
  "body": "Laws of Set Theory  Tables of Laws  The following basic set laws can be derived using either the Basic Definition or the Set-Membership approach and can be illustrated by Venn diagrams.   Basic Laws of Set Theory    Commutative Laws   (1)  ( )   Associative Laws  (2)  ( )  Distributive Laws  (3)  ( )  Identity Laws  (4) ( )   Complement Laws  (5) ( )  Idempotent Laws  (6) ( )  Null Laws  (7) ( )  Absorption Laws  (8) ( )  DeMorgan's Laws  (9) ( )  Involution\/ Double Complement Law  (10)    It is quite clear that most of these laws resemble or, in fact, are analogues of laws in basic algebra and the algebra of propositions.   Proof Using Previously Proven Theorems  Once a few basic laws or theorems have been established, we frequently use them to prove additional theorems. This method of proof is usually more efficient than that of proof by Definition. To illustrate, let us prove the following Corollary to the Distributive Law. The term \"corollary\" is used for theorems that can be proven with relative ease from previously proven theorems.  A Corollary to the Distributive Law of Sets  Let A and B be sets. Then .    .     Proof Using the Indirect Method\/Contradiction  The procedure one most frequently uses to prove a theorem in mathematics is the Direct Method, as illustrated in and . Occasionally there are situations where this method is not applicable. Consider the following:   An Indirect Proof in Set Theory  Let be sets. If and , then .   Commentary: The usual and first approach would be to assume and is true and to attempt to prove is true. To do this you would need to show that nothing is contained in the set . Think about how you would show that something doesn't exist. It is very difficult to do directly.  The Indirect Method is much easier: If we assume the conclusion is false and we obtain a contradiction --- then the theorem must be true. This approach is on sound logical footing since it is exactly the same method of indirect proof that we discussed in .  Assume and , and . To prove that this cannot occur, let .  .  But this contradicts the second premise. Hence, the theorem is proven.    Exercises for Section 6.2  In the exercises that follow it is most important that you outline the logical procedures or methods you use.     Prove the associative law for intersection (Law ) with a Venn diagram.  Prove DeMorgan's Law (Law 9) with a membership table.  Prove the Idempotent Law (Law 6) using basic definitions.      The last two columns are the same so the two sets must be equal.   Therefore, .  Therefore, and so we have .      Prove the Absorption Law (Law ) with a Venn diagram.  Prove the Identity Law (Law 4) with a membership table.  Prove the Involution Law (Law 10) using basic definitions.    Prove the following using the set theory laws, as well as any other theorems proved so far.              For all parts of this exercise, a reason should be supplied for each step. We have supplied reasons only for part a and left them out of the other parts to give you further practice.     Select any element, . One such element exists since is not empty.      Use previously proven theorems to prove the following.          .    Hierarchy of Set Operations The rules that determine the order of evaluation in a set expression that involves more than one operation are similar to the rules for logic. In the absence of parentheses, complementations are done first, intersections second, and unions third. Parentheses are used to override this order. If the same operation appears two or more consecutive times, evaluate from left to right. In what order are the following expressions performed?   .  .                 There are several ways that we can use to format the proofs in this chapter. One that should be familiar to you from is illustrated with the following alternate proof of part (a) in :   An alternate format for the proof of   (1)  Premise  (2)  (1), definition of intersection  (3) (  (2), definition of union  (4)   (3), distribute over   (5)   (4), definition of intersection  (6)   (5), definition of union     Prove part (b) of and using this format.    "
},
{
  "id": "table-set-laws",
  "level": "2",
  "url": "section6_2-laws-of-set-theory.html#table-set-laws",
  "type": "Table",
  "number": "6.2.1",
  "title": "Basic Laws of Set Theory",
  "body": " Basic Laws of Set Theory    Commutative Laws   (1)  ( )   Associative Laws  (2)  ( )  Distributive Laws  (3)  ( )  Identity Laws  (4) ( )   Complement Laws  (5) ( )  Idempotent Laws  (6) ( )  Null Laws  (7) ( )  Absorption Laws  (8) ( )  DeMorgan's Laws  (9) ( )  Involution\/ Double Complement Law  (10)   "
},
{
  "id": "th-corrollary-to-distr",
  "level": "2",
  "url": "section6_2-laws-of-set-theory.html#th-corrollary-to-distr",
  "type": "Corollary",
  "number": "6.2.2",
  "title": "A Corollary to the Distributive Law of Sets.",
  "body": "A Corollary to the Distributive Law of Sets  Let A and B be sets. Then .    .   "
},
{
  "id": "theorem-example-sets-contradiction",
  "level": "2",
  "url": "section6_2-laws-of-set-theory.html#theorem-example-sets-contradiction",
  "type": "Theorem",
  "number": "6.2.3",
  "title": "An Indirect Proof in Set Theory.",
  "body": " An Indirect Proof in Set Theory  Let be sets. If and , then .   Commentary: The usual and first approach would be to assume and is true and to attempt to prove is true. To do this you would need to show that nothing is contained in the set . Think about how you would show that something doesn't exist. It is very difficult to do directly.  The Indirect Method is much easier: If we assume the conclusion is false and we obtain a contradiction --- then the theorem must be true. This approach is on sound logical footing since it is exactly the same method of indirect proof that we discussed in .  Assume and , and . To prove that this cannot occur, let .  .  But this contradicts the second premise. Hence, the theorem is proven.  "
},
{
  "id": "exer-6_2-3",
  "level": "2",
  "url": "section6_2-laws-of-set-theory.html#exer-6_2-3",
  "type": "Exercise",
  "number": "6.2.4.1",
  "title": "",
  "body": "  Prove the associative law for intersection (Law ) with a Venn diagram.  Prove DeMorgan's Law (Law 9) with a membership table.  Prove the Idempotent Law (Law 6) using basic definitions.      The last two columns are the same so the two sets must be equal.   Therefore, .  Therefore, and so we have .   "
},
{
  "id": "exer-6_2-4",
  "level": "2",
  "url": "section6_2-laws-of-set-theory.html#exer-6_2-4",
  "type": "Exercise",
  "number": "6.2.4.2",
  "title": "",
  "body": "  Prove the Absorption Law (Law ) with a Venn diagram.  Prove the Identity Law (Law 4) with a membership table.  Prove the Involution Law (Law 10) using basic definitions.   "
},
{
  "id": "exer-6_2-5",
  "level": "2",
  "url": "section6_2-laws-of-set-theory.html#exer-6_2-5",
  "type": "Exercise",
  "number": "6.2.4.3",
  "title": "",
  "body": "Prove the following using the set theory laws, as well as any other theorems proved so far.              For all parts of this exercise, a reason should be supplied for each step. We have supplied reasons only for part a and left them out of the other parts to give you further practice.     Select any element, . One such element exists since is not empty.     "
},
{
  "id": "exer-6_2-6",
  "level": "2",
  "url": "section6_2-laws-of-set-theory.html#exer-6_2-6",
  "type": "Exercise",
  "number": "6.2.4.4",
  "title": "",
  "body": "Use previously proven theorems to prove the following.          .   "
},
{
  "id": "exer-6_2-7",
  "level": "2",
  "url": "section6_2-laws-of-set-theory.html#exer-6_2-7",
  "type": "Exercise",
  "number": "6.2.4.5",
  "title": "Hierarchy of Set Operations.",
  "body": "Hierarchy of Set Operations The rules that determine the order of evaluation in a set expression that involves more than one operation are similar to the rules for logic. In the absence of parentheses, complementations are done first, intersections second, and unions third. Parentheses are used to override this order. If the same operation appears two or more consecutive times, evaluate from left to right. In what order are the following expressions performed?   .  .               "
},
{
  "id": "exer-6_2-8",
  "level": "2",
  "url": "section6_2-laws-of-set-theory.html#exer-6_2-8",
  "type": "Exercise",
  "number": "6.2.4.6",
  "title": "",
  "body": " There are several ways that we can use to format the proofs in this chapter. One that should be familiar to you from is illustrated with the following alternate proof of part (a) in :   An alternate format for the proof of   (1)  Premise  (2)  (1), definition of intersection  (3) (  (2), definition of union  (4)   (3), distribute over   (5)   (4), definition of intersection  (6)   (5), definition of union     Prove part (b) of and using this format.  "
},
{
  "id": "section6_3-minsets",
  "level": "1",
  "url": "section6_3-minsets.html",
  "type": "Section",
  "number": "6.3",
  "title": "Minsets",
  "body": "Minsets  Definition of Minsets  Let and be subsets of a set . Notice that the Venn diagram of is naturally partitioned into the subsets , , , and . Further we observe that , , , and can be described in terms of and as follows:   Venn Diagram of Minsets   Venn Diagram illustrating the minsets generated by two subsets      Minsets generated by two sets         Each is called a minset generated by and . We note that each minset is formed by taking the intersection of two sets where each may be either or its complement, . Note also, given two sets, there are minsets.  Minsets are occasionally called minterms .  The reader should note that if we apply all possible combinations of the operations intersection, union, and complementation to the sets and of , the smallest sets generated will be exactly the minsets, the minimum sets. Hence the derivation of the term minset.  Next, consider the Venn diagram containing three sets, , , and . Draw it right now and count the regions! What are the minsets generated by , , and ? How many are there? Following the procedures outlined above, we note that the following are three of the minsets. What are the others?   Three of the minsets generated by , , and        Minset Minset  Let be a set of subsets of set . Sets of the form , where each may be either or , is called a minset generated by , ,... and .  A concrete example of some minsets Consider the following concrete example. Let with subsets and . How can we use set operations applied to and and produce a list of sets that contain elements of efficiently without duplication? As a first attempt, we might try these three sets:      .    We have produced all elements of but we have 4 and 6 repeated in two sets. In place of and , let's try and , respectively:    and  .    We have now produced the elements 1, 2, 3, and 5 using , and yet we have not listed the elements 4 and 6. Most ways that we could combine and such as or will produce duplications of listed elements and will not produce both 4 and 6. However we note that , exactly the elements we need. Each element of appears exactly once in one of the four minsets , , and . Hence, we have a partition of .    Properties of Minsets  Minset Partition Theorem Let be a set and let ,  , be subsets of . The set of nonempty minsets generated by ,  , is a partition of .  The proof of this theorem is left to the reader.  One of the most significant facts about minsets is that any subset of that can be obtained from ,  , , using the standard set operations can be obtained in a standard form by taking the union of selected minsets.  Minset Normal Form  Minset Normal Form  A set is said to be in minset normal form when it is expressed as the union of zero or more distinct nonempty minsets.   Notes:   The union of zero sets is the empty set, .  Minset normal form is also called canonical form .   Another Concrete Example of Minsets Let , , and . Then              In this case, there are only three nonempty minsets, producing the partition . An example of a set that could not be produced from just and is the set of even elements of , . This is because and cannot be separated. They are in the same minset and any union of minsets either includes or excludes them both. In general, there are different minset normal forms because there are three nonempty minsets. This means that only 8 of the subsets of could be generated from any two sets and .     Exercises for Section 6.3  Consider the subsets , , and , where .   List the nonempty minsets generated by .  How many elements of the power set of can be generated by , , and ? Compare this number with . Give an example of one subset that cannot be generated by , , and .        , as compared with . is one of the 992 sets that can't be generated.      Partition into the minsets generated by , , and .  How many different subsets of can you create using , and with the standard set operations?  Do there exist subsets whose minsets will generate every subset of ?     Partition the set of strings of 0's and 1's of length two or less, using the minsets generated by , and .   and generate minsets , and . Note: is the null string, which has length zero.    Let , and be subsets of a universal set ,   Symbolically list all minsets generated by , and .  Illustrate with a Venn diagram all minsets obtained in part (a).  Express the following sets in minset normal form: , , .      Partition with the minsets generated by and .  How many different subsets of can you generate from ?      , , ,   , since there are 3 nonempty minsets.    If is a partition of , how many minsets are generated by ?   Prove Let . For each , , or , since by the complement law. Let if , and otherwise. Since is in each , it must be in the minset . Now consider two different minsets , and , where each and is either or . Since these minsets are not equal, , for some . Therefore, , since two of the sets in the intersection are disjoint. Since every element of A is in a minset and the minsets are disjoint, the nonempty minsets must form a partition of A.   Let be a finite set of elements. Let ,, i = 1, 2, \\ldots , be nonempty subsets of . There are minset normal forms generated by the subsets. The number of subsets of is . Since we can make by choosing , it is clear that two distinct minset normal-form expressions do not always equal distinct subsets of . Even for , it may happen that two distinct minset normal-form expressions equal the same subset of . Determine necessary and sufficient conditions for distinct normal-form expressions to equal distinct subsets of .    "
},
{
  "id": "fig-minsets-2",
  "level": "2",
  "url": "section6_3-minsets.html#fig-minsets-2",
  "type": "Figure",
  "number": "6.3.1",
  "title": "",
  "body": " Venn Diagram of Minsets   Venn Diagram illustrating the minsets generated by two subsets    "
},
{
  "id": "tab-minsets-2",
  "level": "2",
  "url": "section6_3-minsets.html#tab-minsets-2",
  "type": "Table",
  "number": "6.3.2",
  "title": "Minsets generated by two sets",
  "body": " Minsets generated by two sets        "
},
{
  "id": "tab-some-minsets-3",
  "level": "2",
  "url": "section6_3-minsets.html#tab-some-minsets-3",
  "type": "Table",
  "number": "6.3.3",
  "title": "Three of the minsets generated by <span class=\"process-math\">\\(B_1\\text{,}\\)<\/span> <span class=\"process-math\">\\(B_2\\text{,}\\)<\/span> and <span class=\"process-math\">\\(B_3\\)<\/span>",
  "body": " Three of the minsets generated by , , and       "
},
{
  "id": "def-Minset",
  "level": "2",
  "url": "section6_3-minsets.html#def-Minset",
  "type": "Definition",
  "number": "6.3.4",
  "title": "Minset.",
  "body": "Minset Minset  Let be a set of subsets of set . Sets of the form , where each may be either or , is called a minset generated by , ,... and . "
},
{
  "id": "ex-minset-example",
  "level": "2",
  "url": "section6_3-minsets.html#ex-minset-example",
  "type": "Example",
  "number": "6.3.5",
  "title": "A concrete example of some minsets.",
  "body": "A concrete example of some minsets Consider the following concrete example. Let with subsets and . How can we use set operations applied to and and produce a list of sets that contain elements of efficiently without duplication? As a first attempt, we might try these three sets:      .    We have produced all elements of but we have 4 and 6 repeated in two sets. In place of and , let's try and , respectively:    and  .    We have now produced the elements 1, 2, 3, and 5 using , and yet we have not listed the elements 4 and 6. Most ways that we could combine and such as or will produce duplications of listed elements and will not produce both 4 and 6. However we note that , exactly the elements we need. Each element of appears exactly once in one of the four minsets , , and . Hence, we have a partition of .  "
},
{
  "id": "th-minset-partition",
  "level": "2",
  "url": "section6_3-minsets.html#th-minset-partition",
  "type": "Theorem",
  "number": "6.3.8",
  "title": "Minset Partition Theorem.",
  "body": "Minset Partition Theorem Let be a set and let ,  , be subsets of . The set of nonempty minsets generated by ,  , is a partition of .  The proof of this theorem is left to the reader. "
},
{
  "id": "def-minset-normal-form",
  "level": "2",
  "url": "section6_3-minsets.html#def-minset-normal-form",
  "type": "Definition",
  "number": "6.3.9",
  "title": "Minset Normal Form.",
  "body": "Minset Normal Form  Minset Normal Form  A set is said to be in minset normal form when it is expressed as the union of zero or more distinct nonempty minsets.  "
},
{
  "id": "section6_3-minsets-3-6",
  "level": "2",
  "url": "section6_3-minsets.html#section6_3-minsets-3-6",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "canonical form "
},
{
  "id": "ex-concrete-minsets-2",
  "level": "2",
  "url": "section6_3-minsets.html#ex-concrete-minsets-2",
  "type": "Example",
  "number": "6.3.10",
  "title": "Another Concrete Example of Minsets.",
  "body": "Another Concrete Example of Minsets Let , , and . Then              In this case, there are only three nonempty minsets, producing the partition . An example of a set that could not be produced from just and is the set of even elements of , . This is because and cannot be separated. They are in the same minset and any union of minsets either includes or excludes them both. In general, there are different minset normal forms because there are three nonempty minsets. This means that only 8 of the subsets of could be generated from any two sets and .  "
},
{
  "id": "exercises-6_3-2",
  "level": "2",
  "url": "section6_3-minsets.html#exercises-6_3-2",
  "type": "Exercise",
  "number": "6.3.3.1",
  "title": "",
  "body": "Consider the subsets , , and , where .   List the nonempty minsets generated by .  How many elements of the power set of can be generated by , , and ? Compare this number with . Give an example of one subset that cannot be generated by , , and .        , as compared with . is one of the 992 sets that can't be generated.   "
},
{
  "id": "exercises-6_3-3",
  "level": "2",
  "url": "section6_3-minsets.html#exercises-6_3-3",
  "type": "Exercise",
  "number": "6.3.3.2",
  "title": "",
  "body": "  Partition into the minsets generated by , , and .  How many different subsets of can you create using , and with the standard set operations?  Do there exist subsets whose minsets will generate every subset of ?   "
},
{
  "id": "exercises-6_3-4",
  "level": "2",
  "url": "section6_3-minsets.html#exercises-6_3-4",
  "type": "Exercise",
  "number": "6.3.3.3",
  "title": "",
  "body": " Partition the set of strings of 0's and 1's of length two or less, using the minsets generated by , and .   and generate minsets , and . Note: is the null string, which has length zero.  "
},
{
  "id": "exercise-minsets-3",
  "level": "2",
  "url": "section6_3-minsets.html#exercise-minsets-3",
  "type": "Exercise",
  "number": "6.3.3.4",
  "title": "",
  "body": " Let , and be subsets of a universal set ,   Symbolically list all minsets generated by , and .  Illustrate with a Venn diagram all minsets obtained in part (a).  Express the following sets in minset normal form: , , .   "
},
{
  "id": "exercises-6_3-6",
  "level": "2",
  "url": "section6_3-minsets.html#exercises-6_3-6",
  "type": "Exercise",
  "number": "6.3.3.5",
  "title": "",
  "body": "  Partition with the minsets generated by and .  How many different subsets of can you generate from ?      , , ,   , since there are 3 nonempty minsets.   "
},
{
  "id": "exercises-6_3-7",
  "level": "2",
  "url": "section6_3-minsets.html#exercises-6_3-7",
  "type": "Exercise",
  "number": "6.3.3.6",
  "title": "",
  "body": "If is a partition of , how many minsets are generated by ?  "
},
{
  "id": "exercises-6_3-8",
  "level": "2",
  "url": "section6_3-minsets.html#exercises-6_3-8",
  "type": "Exercise",
  "number": "6.3.3.7",
  "title": "",
  "body": "Prove Let . For each , , or , since by the complement law. Let if , and otherwise. Since is in each , it must be in the minset . Now consider two different minsets , and , where each and is either or . Since these minsets are not equal, , for some . Therefore, , since two of the sets in the intersection are disjoint. Since every element of A is in a minset and the minsets are disjoint, the nonempty minsets must form a partition of A.  "
},
{
  "id": "exercises-6_3-9",
  "level": "2",
  "url": "section6_3-minsets.html#exercises-6_3-9",
  "type": "Exercise",
  "number": "6.3.3.8",
  "title": "",
  "body": "Let be a finite set of elements. Let ,, i = 1, 2, \\ldots , be nonempty subsets of . There are minset normal forms generated by the subsets. The number of subsets of is . Since we can make by choosing , it is clear that two distinct minset normal-form expressions do not always equal distinct subsets of . Even for , it may happen that two distinct minset normal-form expressions equal the same subset of . Determine necessary and sufficient conditions for distinct normal-form expressions to equal distinct subsets of .  "
},
{
  "id": "section6_4-duality-principle",
  "level": "1",
  "url": "section6_4-duality-principle.html",
  "type": "Section",
  "number": "6.4",
  "title": "The Duality Principle",
  "body": "The Duality Principle   In Section 4.2, we observed that each of the labeled 1 through 9 had an analogue through . We notice that each of the laws in one column can be obtained from the corresponding law in the other column by replacing by , by , by , by , and leaving the complement unchanged.  Duality Principle for Sets Let be any identity involving sets and the operations complement, intersection and union. If is obtained from by making the substitutions , , , and , then the statement is also true and it is called the dual of the statement .  Example of a dual The dual of is .  One should not underestimate the importance of this concept. It gives us a whole second set of identities, theorems, and concepts. For example, we can consider the dual of minsets and minset normal form to obtain what is called maxsets and maxset normal form .   Exercises for Section 6.4   State the dual of of each of the following:  .              Examine and then write a description of the principle of duality for logic.   Write the dual of of each of the following:   .         Use the principle of duality and the definition of minset to write the definition of maxset.   Let and let and .   Find the maxsets generated by and . Note the set of maxsets does not constitute a partition of . Can you explain why?  Write out the definition of maxset normal form.  Repeat for maxsets.    The maxsets are:           They do not form a partition of since it is not true that the intersection of any two of them is empty. A set is said to be in maxset normal form when it is expressed as the intersection of distinct nonempty maxsets or it is the universal set .   What is the dual of the expression in ?   "
},
{
  "id": "def-duality-sets",
  "level": "2",
  "url": "section6_4-duality-principle.html#def-duality-sets",
  "type": "Definition",
  "number": "6.4.1",
  "title": "Duality Principle for Sets.",
  "body": "Duality Principle for Sets Let be any identity involving sets and the operations complement, intersection and union. If is obtained from by making the substitutions , , , and , then the statement is also true and it is called the dual of the statement . "
},
{
  "id": "ex-dual-example",
  "level": "2",
  "url": "section6_4-duality-principle.html#ex-dual-example",
  "type": "Example",
  "number": "6.4.2",
  "title": "Example of a dual.",
  "body": "Example of a dual The dual of is . "
},
{
  "id": "exer-6_4-2",
  "level": "2",
  "url": "section6_4-duality-principle.html#exer-6_4-2",
  "type": "Exercise",
  "number": "6.4.2.1",
  "title": "",
  "body": " State the dual of of each of the following:  .            "
},
{
  "id": "exer-6_4-3",
  "level": "2",
  "url": "section6_4-duality-principle.html#exer-6_4-3",
  "type": "Exercise",
  "number": "6.4.2.2",
  "title": "",
  "body": " Examine and then write a description of the principle of duality for logic.  "
},
{
  "id": "exer-6_4-4",
  "level": "2",
  "url": "section6_4-duality-principle.html#exer-6_4-4",
  "type": "Exercise",
  "number": "6.4.2.3",
  "title": "",
  "body": "Write the dual of of each of the following:   .        "
},
{
  "id": "exer-6_4-5",
  "level": "2",
  "url": "section6_4-duality-principle.html#exer-6_4-5",
  "type": "Exercise",
  "number": "6.4.2.4",
  "title": "",
  "body": "Use the principle of duality and the definition of minset to write the definition of maxset. "
},
{
  "id": "exer-6_4-6",
  "level": "2",
  "url": "section6_4-duality-principle.html#exer-6_4-6",
  "type": "Exercise",
  "number": "6.4.2.5",
  "title": "",
  "body": " Let and let and .   Find the maxsets generated by and . Note the set of maxsets does not constitute a partition of . Can you explain why?  Write out the definition of maxset normal form.  Repeat for maxsets.    The maxsets are:           They do not form a partition of since it is not true that the intersection of any two of them is empty. A set is said to be in maxset normal form when it is expressed as the intersection of distinct nonempty maxsets or it is the universal set .  "
},
{
  "id": "exer-6_4-7",
  "level": "2",
  "url": "section6_4-duality-principle.html#exer-6_4-7",
  "type": "Exercise",
  "number": "6.4.2.6",
  "title": "",
  "body": "What is the dual of the expression in ? "
},
{
  "id": "section7_1-basic-matrix-definitions",
  "level": "1",
  "url": "section7_1-basic-matrix-definitions.html",
  "type": "Section",
  "number": "7.1",
  "title": "Basic Definitions and Operations",
  "body": "Basic Definitions and Operations  Matrix Order and Equality  matrix  A matrix is a rectangular array of elements of the form    A convenient way of describing a matrix in general is to designate each entry via its position in the array. That is, the entry is the entry in the third row and fourth column of the matrix . Depending on the situation, we will decide in advance to which set the entries in a matrix will belong. For example, we might assume that each entry ( , ) is a real number. In that case we would use to stand for the set of all by matrices whose entries are real numbers. If we decide that the entries in a matrix must come from a set , we use to denote all such matrices.  The Order of a Matrix A matrix that has rows and columns is called an (read by ) matrix, and is said to have order .  Since it is rather cumbersome to write out the large rectangular array above each time we wish to discuss the generalized form of a matrix, it is common practice to replace the above by . In general, matrices are often given names that are capital letters and the corresponding lower case letter is used for individual entries. For example the entry in the third row, second column of a matrix called would be .  Orders of Some Matrices , , and are , , and matrices, respectively.   Since we now understand what a matrix looks like, we are in a position to investigate the operations of matrix algebra for which users have found the most applications.  First we ask ourselves: Is the matrix equal to the matrix ? No, they are not because the corresponding entries in the second row, second column of the two matrices are not equal.  Next, is equal to ? No, although the corresponding entries in the first two columns are identical, doesn't have a third column to compare to that of . We formalize these observations in the following definition.  Equality of Matrices  A matrix is said to be equal to matrix (written ) if and only if:    and have the same order, and  all corresponding entries are equal: that is, = for all appropriate and .      Matrix Addition and Scalar Multiplication  The first two operations we introduce are very natural and are not likely to cause much confusion. The first is matrix addition. It seems natural that if and , then   However, if and , is there a natural way to add them to give us ? No, the orders of the two matrices must be identical.  Matrix Addition Matrix Addition  Let and be matrices. Then is an matrix where (read The th th entry of the matrix is obtained by adding the th th entry of to the th th entry of ). If the orders of and are not identical, is not defined.  In short, is defined if and only if and are of the same order.  Another frequently used operation is that of multiplying a matrix by a number, commonly called a scalar in this context. Scalars normally come from the same set as the entries in a matrix. For example, if , a scalar can be any real number.  A Scalar Product If and if and we wish to find , it seems natural to multiply each entry of by 3 so that , and this is precisely the way scalar multiplication is defined.  Scalar Multiplication Scalar Multiplication Let be an matrix and a scalar. Then is the matrix obtained by multiplying times each entry of ; that is .    Matrix Multiplication  A definition that is more awkward to motivate is the product of two matrices. See for an attempt to do so. In time, the reader will see that the following definition of the product of matrices will be very useful, and will provide an algebraic system that is quite similar to elementary algebra.     Matrix Multiplication Matrix Multiplication Let be an matrix and let be an matrix. The product of and , denoted by , is an matrix whose th row th column entry is for and .   The mechanics of computing one entry in the product of two matrices is illustrated in .   Computation of one entry in the product of two 3 by 3 matrices   Illustration of the computation of one entry in a matrix product.    The computation of a product can take a considerable amount of time in comparison to the time required to add two matrices. Suppose that and are matrices; then is determined performing multiplications and additions. The full product takes multiplications and additions. This compares with additions for the sum of two matrices. The product of two 10 by 10 matrices will require 1,000 multiplications and 900 additions, clearly a job that you would assign to a computer. The sum of two matrices requires a more modest 100 additions. This analysis is based on the assumption that matrix multiplication will be done using the formula that is given in the definition. There are more advanced methods that, in theory, reduce operation counts. For example, Strassen's algorithm ( https:\/\/en.wikipedia.org\/wiki\/Strassen\\_algorithm ) computes the product of two by matrices in operations. There are practical issues involved in actually using the algorithm in many situations. For example, round-off error can be more of a problem than with the standard formula.  A Matrix Product Let , a matrix, and let , a matrix. Then is a matrix:   Remarks:   The product is defined only if is an matrix and is an matrix; that is, the two inner numbers must be equal. Furthermore, the order of the product matrix is the outer numbers, in this case .   It is wise to first determine the order of a product matrix. For example, if is a matrix and is a matrix, then is a matrix of the form Then to obtain, for example, , we multiply corresponding entries in the third row of times the first column of and add the results.    Multiplication with a diagonal matrix Let and . Then   The net effect is to multiply the first row of by and the second row of by 3.  Note: . The columns of are multiplied by and 3 when the order is switched.  Remarks:   An matrix is called a square matrix .  If is a square matrix, is defined and is denoted by , and , etc.  The matrices whose entries are all 0 are denoted by , or simply , when no confusion arises regarding the order. the by zero matrix    Exercises for Section 7.1   Let , , and    Compute and .  Compute and .  If , show that .  Show that .  Compute .  Compute .  Compute and , where is the zero matrix.  Compute , where 0 is the real number (scalar) zero.  Let and . Show that .   For parts c, d and i of this exercise, only a verification is needed. Here, we supply the result that will appear on both sides of the equality.                          Let , , and Compute, if possible;                   Let . Find a matrix such that and , where .     Find and where is as in Exercise 3, where and . What do you notice?   Find if . What is equal to?       Determine and  .  What is equal to for any ?  Prove your answer to part (b) by induction.      If , , and , show that is a way of expressing the system using matrices.  Express the following systems of equations using matrices:              equals if and only if both of the equalities are true.  (i)                  In this exercise, we propose to show how matrix multiplication is a natural operation. Suppose a bakery produces bread, cakes and pies every weekday, Monday through Friday. Based on past sales history, the bakery produces various numbers of each product each day, summarized in the matrix . It should be noted that the order could be described as number of days by number of products. For example, on Wednesday (the third day) the number of cakes (second product in our list) that are produced is .  The main ingredients of these products are flour, sugar and eggs. We assume that other ingredients are always in ample supply, but we need to be sure to have the three main ones available. For each of the three products, The amount of each ingredient that is needed is summarized in the , or number of products by number of ingredients matrix . For example, to bake a cake (second product) we need cups of flour (first ingredient). Regarding units: flour and sugar are given in cups per unit of each product, while eggs are given in individual eggs per unit of each product. These amounts are made up , so don't use them to do your own baking!    How many cups of flour will the bakery need every Monday? Pay close attention to how you compute your answer and the units of each number.  How many eggs will the bakery need every Wednesday?  Compute the matrix product . What do your notice?  Suppose the costs of ingredients are for a cup of flour, for a cup of sugar and for one egg. How can this information be put into a matrix that can meaningfully be multiplied by one of the other matrices in this problem?      "
},
{
  "id": "def-matrix",
  "level": "2",
  "url": "section7_1-basic-matrix-definitions.html#def-matrix",
  "type": "Definition",
  "number": "7.1.1",
  "title": "matrix.",
  "body": "matrix  A matrix is a rectangular array of elements of the form   "
},
{
  "id": "def-matrix-order",
  "level": "2",
  "url": "section7_1-basic-matrix-definitions.html#def-matrix-order",
  "type": "Definition",
  "number": "7.1.2",
  "title": "The Order of a Matrix.",
  "body": "The Order of a Matrix A matrix that has rows and columns is called an (read by ) matrix, and is said to have order . "
},
{
  "id": "example-orders-of-matrices",
  "level": "2",
  "url": "section7_1-basic-matrix-definitions.html#example-orders-of-matrices",
  "type": "Example",
  "number": "7.1.3",
  "title": "Orders of Some Matrices.",
  "body": "Orders of Some Matrices , , and are , , and matrices, respectively.  "
},
{
  "id": "def-matrix-equality",
  "level": "2",
  "url": "section7_1-basic-matrix-definitions.html#def-matrix-equality",
  "type": "Definition",
  "number": "7.1.4",
  "title": "Equality of Matrices.",
  "body": "Equality of Matrices  A matrix is said to be equal to matrix (written ) if and only if:    and have the same order, and  all corresponding entries are equal: that is, = for all appropriate and .    "
},
{
  "id": "def-matrix-addition",
  "level": "2",
  "url": "section7_1-basic-matrix-definitions.html#def-matrix-addition",
  "type": "Definition",
  "number": "7.1.5",
  "title": "Matrix Addition.",
  "body": "Matrix Addition Matrix Addition  Let and be matrices. Then is an matrix where (read The th th entry of the matrix is obtained by adding the th th entry of to the th th entry of ). If the orders of and are not identical, is not defined. "
},
{
  "id": "ex-scalar-mult",
  "level": "2",
  "url": "section7_1-basic-matrix-definitions.html#ex-scalar-mult",
  "type": "Example",
  "number": "7.1.6",
  "title": "A Scalar Product.",
  "body": "A Scalar Product If and if and we wish to find , it seems natural to multiply each entry of by 3 so that , and this is precisely the way scalar multiplication is defined. "
},
{
  "id": "def-scalar-multiplication",
  "level": "2",
  "url": "section7_1-basic-matrix-definitions.html#def-scalar-multiplication",
  "type": "Definition",
  "number": "7.1.7",
  "title": "Scalar Multiplication.",
  "body": "Scalar Multiplication Scalar Multiplication Let be an matrix and a scalar. Then is the matrix obtained by multiplying times each entry of ; that is .  "
},
{
  "id": "def-matrix-multiplication",
  "level": "2",
  "url": "section7_1-basic-matrix-definitions.html#def-matrix-multiplication",
  "type": "Definition",
  "number": "7.1.8",
  "title": "Matrix Multiplication.",
  "body": "Matrix Multiplication Matrix Multiplication Let be an matrix and let be an matrix. The product of and , denoted by , is an matrix whose th row th column entry is for and .  "
},
{
  "id": "fig-one-matrix-product-entry",
  "level": "2",
  "url": "section7_1-basic-matrix-definitions.html#fig-one-matrix-product-entry",
  "type": "Figure",
  "number": "7.1.9",
  "title": "",
  "body": " Computation of one entry in the product of two 3 by 3 matrices   Illustration of the computation of one entry in a matrix product.   "
},
{
  "id": "ex-matrix-product",
  "level": "2",
  "url": "section7_1-basic-matrix-definitions.html#ex-matrix-product",
  "type": "Example",
  "number": "7.1.10",
  "title": "A Matrix Product.",
  "body": "A Matrix Product Let , a matrix, and let , a matrix. Then is a matrix:  "
},
{
  "id": "ex-diagonal-product",
  "level": "2",
  "url": "section7_1-basic-matrix-definitions.html#ex-diagonal-product",
  "type": "Example",
  "number": "7.1.11",
  "title": "Multiplication with a diagonal matrix.",
  "body": "Multiplication with a diagonal matrix Let and . Then   The net effect is to multiply the first row of by and the second row of by 3.  Note: . The columns of are multiplied by and 3 when the order is switched. "
},
{
  "id": "exercises-7-1-2",
  "level": "2",
  "url": "section7_1-basic-matrix-definitions.html#exercises-7-1-2",
  "type": "Exercise",
  "number": "7.1.4.1",
  "title": "",
  "body": " Let , , and    Compute and .  Compute and .  If , show that .  Show that .  Compute .  Compute .  Compute and , where is the zero matrix.  Compute , where 0 is the real number (scalar) zero.  Let and . Show that .   For parts c, d and i of this exercise, only a verification is needed. Here, we supply the result that will appear on both sides of the equality.                         "
},
{
  "id": "exercises-7-1-3",
  "level": "2",
  "url": "section7_1-basic-matrix-definitions.html#exercises-7-1-3",
  "type": "Exercise",
  "number": "7.1.4.2",
  "title": "",
  "body": "Let , , and Compute, if possible;                  "
},
{
  "id": "exercises-7-1-4",
  "level": "2",
  "url": "section7_1-basic-matrix-definitions.html#exercises-7-1-4",
  "type": "Exercise",
  "number": "7.1.4.3",
  "title": "",
  "body": "Let . Find a matrix such that and , where .    "
},
{
  "id": "exercises-7-1-5",
  "level": "2",
  "url": "section7_1-basic-matrix-definitions.html#exercises-7-1-5",
  "type": "Exercise",
  "number": "7.1.4.4",
  "title": "",
  "body": "Find and where is as in Exercise 3, where and . What do you notice?  "
},
{
  "id": "exercises-7-1-6",
  "level": "2",
  "url": "section7_1-basic-matrix-definitions.html#exercises-7-1-6",
  "type": "Exercise",
  "number": "7.1.4.5",
  "title": "",
  "body": "Find if . What is equal to?    "
},
{
  "id": "exercises-7-1-7",
  "level": "2",
  "url": "section7_1-basic-matrix-definitions.html#exercises-7-1-7",
  "type": "Exercise",
  "number": "7.1.4.6",
  "title": "",
  "body": "  Determine and  .  What is equal to for any ?  Prove your answer to part (b) by induction.   "
},
{
  "id": "exercises-7-1-8",
  "level": "2",
  "url": "section7_1-basic-matrix-definitions.html#exercises-7-1-8",
  "type": "Exercise",
  "number": "7.1.4.7",
  "title": "",
  "body": "  If , , and , show that is a way of expressing the system using matrices.  Express the following systems of equations using matrices:              equals if and only if both of the equalities are true.  (i)                "
},
{
  "id": "exercise-bakery",
  "level": "2",
  "url": "section7_1-basic-matrix-definitions.html#exercise-bakery",
  "type": "Exercise",
  "number": "7.1.4.8",
  "title": "",
  "body": " In this exercise, we propose to show how matrix multiplication is a natural operation. Suppose a bakery produces bread, cakes and pies every weekday, Monday through Friday. Based on past sales history, the bakery produces various numbers of each product each day, summarized in the matrix . It should be noted that the order could be described as number of days by number of products. For example, on Wednesday (the third day) the number of cakes (second product in our list) that are produced is .  The main ingredients of these products are flour, sugar and eggs. We assume that other ingredients are always in ample supply, but we need to be sure to have the three main ones available. For each of the three products, The amount of each ingredient that is needed is summarized in the , or number of products by number of ingredients matrix . For example, to bake a cake (second product) we need cups of flour (first ingredient). Regarding units: flour and sugar are given in cups per unit of each product, while eggs are given in individual eggs per unit of each product. These amounts are made up , so don't use them to do your own baking!    How many cups of flour will the bakery need every Monday? Pay close attention to how you compute your answer and the units of each number.  How many eggs will the bakery need every Wednesday?  Compute the matrix product . What do your notice?  Suppose the costs of ingredients are for a cup of flour, for a cup of sugar and for one egg. How can this information be put into a matrix that can meaningfully be multiplied by one of the other matrices in this problem?    "
},
{
  "id": "section7_2-special-matrices",
  "level": "1",
  "url": "section7_2-special-matrices.html",
  "type": "Section",
  "number": "7.2",
  "title": "Special Types of Matrices",
  "body": " Special Types of Matrices  Diagonal Matrices  We have already investigated, in exercises in the previous section, one special type of matrix. That was the zero matrix, and found that it behaves in matrix algebra in an analogous fashion to the real number 0; that is, as the additive identity. We will now investigate the properties of a few other special matrices.  Diagonal Matrix A square matrix D is called a diagonal matrix if = 0 whenever .  Some diagonal matrices  , , and are all diagonal matrices.   The Identity Matrix and Matrix Inverses  In the example above, the diagonal matrix whose diagonal entries are all 1's has the distinctive property that for any other matrix we have . For example:  Multiplying by the Identity Matrix If , then and .  In other words, the matrix behaves in matrix algebra like the real number 1; that is, as a multiplicative identity. In matrix algebra, the matrix is called simply the identity matrix. Convince yourself that if is any matrix .  Identity Matrix  Identity Matrix  The identity matrix  The diagonal matrix whose diagonal components are all 1's is called the identity matrix. If the context is clear, we simply use .  In the set of real numbers we recall that, given a nonzero real number , there exists a real number such that . We know that real numbers commute under multiplication so that the two equations can be summarized as . Further we know that . Do we have an analogous situation in ? Can we define the multiplicative inverse of an matrix ? It seems natural to imitate the definition of multiplicative inverse in the real numbers.  Matrix Inverse Inverse Matrix inverse, the multiplicative inverse of Let be an matrix. If there exists an matrix such that , then is a multiplicative inverse of (called simply an inverse of ) and is denoted by  When we are doing computations involving matrices, it would be helpful to know that when we find , the answer we obtain is the only inverse of the given matrix. This would let us refer to the inverse of a matrix. We refrained from saying that in the definition, but the theorem below justifies it.  Remark: Those unfamiliar with the laws of matrix algebra should return to the following proof after they have familiarized themselves with the Laws of Matrix Algebra in Section 5.5.  Inverses are unique The inverse of an matrix A, when it exists, is unique. Let be an matrix. Assume to the contrary, that has two (different) inverses, say and . Then   Let . What is ? Without too much difficulty, by trial and error, we determine that . This might lead us to guess that the inverse is found by taking the reciprocal of all nonzero entries of a matrix. Alas, it isn't that easy!  If , the reciprocal rule would tell us that the inverse of is . Try computing and you will see that you don't get the identity matrix. So, what is  ? In order to understand more completely the notion of the inverse of a matrix, it would be beneficial to have a formula that would enable us to compute the inverse of at least a matrix. To do this, we introduce the definition of the determinant of a matrix.  Determinant of a 2 by 2 matrix  The determinant of  Let . The determinant of is the number .   In addition to , common notation for the determinant of matrix is . This is particularly common when writing out the whole matrix, which case we would write for the determinant of the general matrix.  Some determinants of two by two matrices If then . If then   Inverse of 2 by 2 matrix Let . If , then . See Exercise 4 at the end of this section.  Finding Inverses Can we find the inverses of the matrices in ? If then The reader should verify that .  The second matrix, , has a determinant equal to zero. If we tried to apply the formula in , we would be dividing by zero. For this reason, the formula can't be applied and in fact does not exist.  Remarks:  In general, if is a matrix and if , then does not exist.  A formula for the inverse of matrices can be derived that also involves . Hence, in general, if the determinant of a matrix is zero, the matrix does not have an inverse. However the formula for even a matrix is very long and is not the most efficient way to compute the inverse of a matrix.  In Chapter 12 we will develop a technique to compute the inverse of a higher-order matrix, if it exists.  Matrix inversion comes first in the hierarchy of matrix operations; therefore, is .    Exercises for Section 7.2  For the given matrices find if it exists and verify that . If does not exist explain why.               Use the definition of the inverse of a matrix to find :      No inverse exists.             For the given matrices find if it exists and verify that . If does not exist explain why.             , where .     Let and . Verify that .  Let and be invertible matrices. Prove that . Why is the right side of the above statement written backwards ? Is this necessary? Hint: Use    Let A and B be by invertible matrices.     Similarly, .  By , is the only inverse of . If we tried to invert with , we would be unsuccessful since we cannot rearrange the order of the matrices.   Let . Derive the formula for .   Linearity of Determinants   Let and be 2-by-2 matrices. Show that .  It can be shown that the statement in part (a) is true for all matrices. Let be any invertible matrix. Prove that . Note: The determinant of the identity matrix is 1 for all .  Verify that the equation in part (b) is true for the matrix in exercise 1(a) of this section.    . Now solve for .  Prove by induction that for , .   Use the assumptions in to prove by induction that if , .   Basis:  Induction: Assume for some .      Prove: If the determinant of a matrix is zero, then does not have an inverse. Hint: Use the indirect method of proof and exercise 5.     Let be matrices. Assume that is invertible. If , prove by induction that is true for .  Given that where what is ?  Assume  Basis: ): is given.  Induction: Assume that for some positive integer ,         "
},
{
  "id": "def-diagonal-matrix",
  "level": "2",
  "url": "section7_2-special-matrices.html#def-diagonal-matrix",
  "type": "Definition",
  "number": "7.2.1",
  "title": "Diagonal Matrix.",
  "body": "Diagonal Matrix A square matrix D is called a diagonal matrix if = 0 whenever . "
},
{
  "id": "example-diagonal-matrices",
  "level": "2",
  "url": "section7_2-special-matrices.html#example-diagonal-matrices",
  "type": "Example",
  "number": "7.2.2",
  "title": "Some diagonal matrices.",
  "body": "Some diagonal matrices  , , and are all diagonal matrices. "
},
{
  "id": "ex-matrix-identity-product",
  "level": "2",
  "url": "section7_2-special-matrices.html#ex-matrix-identity-product",
  "type": "Example",
  "number": "7.2.3",
  "title": "Multiplying by the Identity Matrix.",
  "body": "Multiplying by the Identity Matrix If , then and . "
},
{
  "id": "def-identity-matrix",
  "level": "2",
  "url": "section7_2-special-matrices.html#def-identity-matrix",
  "type": "Definition",
  "number": "7.2.4",
  "title": "Identity Matrix.",
  "body": "Identity Matrix  Identity Matrix  The identity matrix  The diagonal matrix whose diagonal components are all 1's is called the identity matrix. If the context is clear, we simply use . "
},
{
  "id": "def-matrix-inverse",
  "level": "2",
  "url": "section7_2-special-matrices.html#def-matrix-inverse",
  "type": "Definition",
  "number": "7.2.5",
  "title": "Matrix Inverse.",
  "body": "Matrix Inverse Inverse Matrix inverse, the multiplicative inverse of Let be an matrix. If there exists an matrix such that , then is a multiplicative inverse of (called simply an inverse of ) and is denoted by "
},
{
  "id": "theorem-unique-inverse",
  "level": "2",
  "url": "section7_2-special-matrices.html#theorem-unique-inverse",
  "type": "Theorem",
  "number": "7.2.6",
  "title": "Inverses are unique.",
  "body": "Inverses are unique The inverse of an matrix A, when it exists, is unique. Let be an matrix. Assume to the contrary, that has two (different) inverses, say and . Then  "
},
{
  "id": "determinant-2by2",
  "level": "2",
  "url": "section7_2-special-matrices.html#determinant-2by2",
  "type": "Definition",
  "number": "7.2.7",
  "title": "Determinant of a 2 by 2 matrix.",
  "body": "Determinant of a 2 by 2 matrix  The determinant of  Let . The determinant of is the number .  "
},
{
  "id": "ex-some-determinants",
  "level": "2",
  "url": "section7_2-special-matrices.html#ex-some-determinants",
  "type": "Example",
  "number": "7.2.8",
  "title": "Some determinants of two by two matrices.",
  "body": "Some determinants of two by two matrices If then . If then  "
},
{
  "id": "theorem-inverse-two-by-two",
  "level": "2",
  "url": "section7_2-special-matrices.html#theorem-inverse-two-by-two",
  "type": "Theorem",
  "number": "7.2.9",
  "title": "Inverse of 2 by 2 matrix.",
  "body": "Inverse of 2 by 2 matrix Let . If , then . See Exercise 4 at the end of this section. "
},
{
  "id": "ex-finding-inverses",
  "level": "2",
  "url": "section7_2-special-matrices.html#ex-finding-inverses",
  "type": "Example",
  "number": "7.2.10",
  "title": "Finding Inverses.",
  "body": "Finding Inverses Can we find the inverses of the matrices in ? If then The reader should verify that .  The second matrix, , has a determinant equal to zero. If we tried to apply the formula in , we would be dividing by zero. For this reason, the formula can't be applied and in fact does not exist. "
},
{
  "id": "exercises-7-2-2",
  "level": "2",
  "url": "section7_2-special-matrices.html#exercises-7-2-2",
  "type": "Exercise",
  "number": "7.2.3.1",
  "title": "",
  "body": "For the given matrices find if it exists and verify that . If does not exist explain why.               Use the definition of the inverse of a matrix to find :      No inverse exists.            "
},
{
  "id": "exercises-7-2-3",
  "level": "2",
  "url": "section7_2-special-matrices.html#exercises-7-2-3",
  "type": "Exercise",
  "number": "7.2.3.2",
  "title": "",
  "body": "For the given matrices find if it exists and verify that . If does not exist explain why.             , where .  "
},
{
  "id": "prob-7-2-3",
  "level": "2",
  "url": "section7_2-special-matrices.html#prob-7-2-3",
  "type": "Exercise",
  "number": "7.2.3.3",
  "title": "",
  "body": "  Let and . Verify that .  Let and be invertible matrices. Prove that . Why is the right side of the above statement written backwards ? Is this necessary? Hint: Use    Let A and B be by invertible matrices.     Similarly, .  By , is the only inverse of . If we tried to invert with , we would be unsuccessful since we cannot rearrange the order of the matrices.  "
},
{
  "id": "exercises-7-2-5",
  "level": "2",
  "url": "section7_2-special-matrices.html#exercises-7-2-5",
  "type": "Exercise",
  "number": "7.2.3.4",
  "title": "",
  "body": "Let . Derive the formula for .  "
},
{
  "id": "prob-7-2-5",
  "level": "2",
  "url": "section7_2-special-matrices.html#prob-7-2-5",
  "type": "Exercise",
  "number": "7.2.3.5",
  "title": "Linearity of Determinants.",
  "body": "Linearity of Determinants   Let and be 2-by-2 matrices. Show that .  It can be shown that the statement in part (a) is true for all matrices. Let be any invertible matrix. Prove that . Note: The determinant of the identity matrix is 1 for all .  Verify that the equation in part (b) is true for the matrix in exercise 1(a) of this section.    . Now solve for . "
},
{
  "id": "exercises-7-2-7",
  "level": "2",
  "url": "section7_2-special-matrices.html#exercises-7-2-7",
  "type": "Exercise",
  "number": "7.2.3.6",
  "title": "",
  "body": "Prove by induction that for , .  "
},
{
  "id": "exercises-7-2-8",
  "level": "2",
  "url": "section7_2-special-matrices.html#exercises-7-2-8",
  "type": "Exercise",
  "number": "7.2.3.7",
  "title": "",
  "body": "Use the assumptions in to prove by induction that if , .   Basis:  Induction: Assume for some .     "
},
{
  "id": "exercises-7-2-9",
  "level": "2",
  "url": "section7_2-special-matrices.html#exercises-7-2-9",
  "type": "Exercise",
  "number": "7.2.3.8",
  "title": "",
  "body": "Prove: If the determinant of a matrix is zero, then does not have an inverse. Hint: Use the indirect method of proof and exercise 5.  "
},
{
  "id": "exercises-7-2-10",
  "level": "2",
  "url": "section7_2-special-matrices.html#exercises-7-2-10",
  "type": "Exercise",
  "number": "7.2.3.9",
  "title": "",
  "body": "  Let be matrices. Assume that is invertible. If , prove by induction that is true for .  Given that where what is ?  Assume  Basis: ): is given.  Induction: Assume that for some positive integer ,       "
},
{
  "id": "section7_3-laws-of-matrix-algebra",
  "level": "1",
  "url": "section7_3-laws-of-matrix-algebra.html",
  "type": "Section",
  "number": "7.3",
  "title": "Laws of Matrix Algebra",
  "body": "Laws of Matrix Algebra Laws of Matrix Algebra  The Laws  The following is a summary of the basic laws of matrix operations. Assume that the indicated operations are defined; that is, that the orders of the matrices , and are such that the operations make sense.   Laws of Matrix Algebra   (1) Commutative Law of Addition  (2) Associative Law of Addition  (3) Distributive Law of a Scalar over Matrices , where .  (4) Distributive Law of Scalars over a Matrix , where .  (5) Associative Law of Scalar Multiplication , where .  (6) Zero Matrix Annihilates all Products , where is the zero matrix.  (7) Zero Scalar Annihilates all Products , where 0 on the left is the scalar zero.  (8) Zero Matrix is an identity for Addition .  (9) Negation produces additive inverses .  (10) Right Distributive Law of Matrix Multiplication .  (11) Left Distributive Law of Matrix Multiplication .  (12) Associative Law of Multiplication .  (13) Identity Matrix is a Multiplicative Identity and .  (14) Involution Property of Inverses If exists, .  (15) Inverse of Product Rule If and exist,      Commentary  More Precise Statement of one Law  If we wished to write out each of the above laws more completely, we would specify the orders of the matrices. For example, Law 10 should read:  Let , , and be , , and matrices, respectively, then    Remarks:   Notice the absence of the law  . Why?  Is it really necessary to have both a right (No. 11) and a left (No. 10) distributive law? Why?     Exercises for Section 7.3  Rewrite the above laws specifying as in the orders of the matrices.   Let and be by matrices. Then ,  Let , , and be by matrices. Then .  Let and be by matrices, and let . Then ,  Let be an by matrix, and let . Then .  Let be an by matrix, and let . Then  Let be the zero matrix, of size , and let be a matrix of size . Then .  Let be an matrix, and . Then .  Let be an matrix, and let be the zero matrix. Then .  Let be an matrix. Then , where is the zero matrix.  Let , , and be , , and matrices respectively. Then .  Let , , and be , , and matrices respectively. Then .  Let , , and be , , and matrices respectively. Then .  Let be an matrix, the identity matrix, and the identity matrix. Then  Let be an matrix. Then if exists, .  Let and be matrices. Then if and exist, .    Verify each of the Laws of Matrix Algebra using examples.   Let , , and . Compute the following as efficiently as possible by using any of the Laws of Matrix Algebra:                Calculating determinate first using : Calculate inverse matrix using :   same as part a.   By part b:   does not exist because is not a square matrix.    Let and . Compute the following as efficiently as possible by using any of the Laws of Matrix Algebra:                 Let and be matrices of real numbers. Is ? Explain.    "
},
{
  "id": "table-matrix-laws",
  "level": "2",
  "url": "section7_3-laws-of-matrix-algebra.html#table-matrix-laws",
  "type": "Table",
  "number": "7.3.1",
  "title": "Laws of Matrix Algebra",
  "body": " Laws of Matrix Algebra   (1) Commutative Law of Addition  (2) Associative Law of Addition  (3) Distributive Law of a Scalar over Matrices , where .  (4) Distributive Law of Scalars over a Matrix , where .  (5) Associative Law of Scalar Multiplication , where .  (6) Zero Matrix Annihilates all Products , where is the zero matrix.  (7) Zero Scalar Annihilates all Products , where 0 on the left is the scalar zero.  (8) Zero Matrix is an identity for Addition .  (9) Negation produces additive inverses .  (10) Right Distributive Law of Matrix Multiplication .  (11) Left Distributive Law of Matrix Multiplication .  (12) Associative Law of Multiplication .  (13) Identity Matrix is a Multiplicative Identity and .  (14) Involution Property of Inverses If exists, .  (15) Inverse of Product Rule If and exist,    "
},
{
  "id": "ex-statement-precise",
  "level": "2",
  "url": "section7_3-laws-of-matrix-algebra.html#ex-statement-precise",
  "type": "Example",
  "number": "7.3.2",
  "title": "More Precise Statement of one Law.",
  "body": "More Precise Statement of one Law  If we wished to write out each of the above laws more completely, we would specify the orders of the matrices. For example, Law 10 should read:  Let , , and be , , and matrices, respectively, then   "
},
{
  "id": "exercises-7-3-2",
  "level": "2",
  "url": "section7_3-laws-of-matrix-algebra.html#exercises-7-3-2",
  "type": "Exercise",
  "number": "7.3.3.1",
  "title": "",
  "body": "Rewrite the above laws specifying as in the orders of the matrices.   Let and be by matrices. Then ,  Let , , and be by matrices. Then .  Let and be by matrices, and let . Then ,  Let be an by matrix, and let . Then .  Let be an by matrix, and let . Then  Let be the zero matrix, of size , and let be a matrix of size . Then .  Let be an matrix, and . Then .  Let be an matrix, and let be the zero matrix. Then .  Let be an matrix. Then , where is the zero matrix.  Let , , and be , , and matrices respectively. Then .  Let , , and be , , and matrices respectively. Then .  Let , , and be , , and matrices respectively. Then .  Let be an matrix, the identity matrix, and the identity matrix. Then  Let be an matrix. Then if exists, .  Let and be matrices. Then if and exist, .   "
},
{
  "id": "exercises-7-3-3",
  "level": "2",
  "url": "section7_3-laws-of-matrix-algebra.html#exercises-7-3-3",
  "type": "Exercise",
  "number": "7.3.3.2",
  "title": "",
  "body": "Verify each of the Laws of Matrix Algebra using examples.  "
},
{
  "id": "exercises-7-3-4",
  "level": "2",
  "url": "section7_3-laws-of-matrix-algebra.html#exercises-7-3-4",
  "type": "Exercise",
  "number": "7.3.3.3",
  "title": "",
  "body": "Let , , and . Compute the following as efficiently as possible by using any of the Laws of Matrix Algebra:                Calculating determinate first using : Calculate inverse matrix using :   same as part a.   By part b:   does not exist because is not a square matrix.   "
},
{
  "id": "exercises-7-3-5",
  "level": "2",
  "url": "section7_3-laws-of-matrix-algebra.html#exercises-7-3-5",
  "type": "Exercise",
  "number": "7.3.3.4",
  "title": "",
  "body": "Let and . Compute the following as efficiently as possible by using any of the Laws of Matrix Algebra:                "
},
{
  "id": "exercises-7-3-6",
  "level": "2",
  "url": "section7_3-laws-of-matrix-algebra.html#exercises-7-3-6",
  "type": "Exercise",
  "number": "7.3.3.5",
  "title": "",
  "body": "Let and be matrices of real numbers. Is ? Explain.  "
},
{
  "id": "section7_4-matrix-oddities",
  "level": "1",
  "url": "section7_4-matrix-oddities.html",
  "type": "Section",
  "number": "7.4",
  "title": "Matrix Oddities",
  "body": "Matrix Oddities Matrix Oddities  Dissimilarities with elementary algebra  We have seen that matrix algebra is similar in many ways to elementary algebra. Indeed, if we want to solve the matrix equation for the unknown , we imitate the procedure used in elementary algebra for solving the equation . Notice how exactly the same properties are used in the following detailed solutions of both equations.    Equation in the real algebra  Equation in matrix algebra   if if exists  Associative Property  Inverse Property  Identity Property     Certainly the solution process for is the same as that of .  The solution of is . In fact, we usually write the solution of both equations as . In matrix algebra, the solution of is , which is not necessarily equal to . So in matrix algebra, since the commutative law (under multiplication) is not true, we have to be more careful in the methods we use to solve equations.  It is clear from the above that if we wrote the solution of as , we would not know how to interpret . Does it mean or ? Because of this, is never written as .  Matrix Oddities  Some of the main dissimilarities between matrix algebra and elementary algebra are that in matrix algebra:    may be different from .  There exist matrices and such that , and yet and .  There exist matrices where , and yet .  There exist matrices where with and  There exist matrices where , where and     Exercises for Section 7.4  Discuss each of the Matrix Oddities with respect to elementary algebra.  In elementary algebra (the algebra of real numbers), each of the given oddities does not exist.    may be different from . Not so in elementary algebra, since by the commutative law of multiplication.  There exist matrices and such that , yet and . In elementary algebra, the only way is if either or is zero. There are no exceptions.  There exist matrices , , yet . In elementary algebra, .  There exist matrices . where and . In elementary algebra, .  There exist matrices where but and . In elementary algebra, .    Determine matrices which show that each of the Matrix Oddities are true.   Prove or disprove the following implications.    and   .    exists, and if you multiply the equation on both sides by , you obtain .  Counterexample:     Let be the set of real matrices. Let be the subset of matrices defined by if and only if . Let be defined by if and only if .   Determine the cardinality of .  Consider the special case and prove that a sufficient condition for is that has a zero determinant (i.e., is singular) and where is the sum of the main diagonal elements of .  Is the condition of part b a necessary condition?    Write each of the following systems in the form , and then solve the systems using matrices.                 , and    , and    , and    , and  The matrix of coefficients for this system has a zero determinant; therefore, it has no inverse. The system cannot be solved by this method. In fact, the system has no solution.    Recall that is called a polynomial, or more specifically, a polynomial over , where the coefficients are elements of and . Also, think of the method of solving, and solutions of, . We would like to define the analogous situation for matrices. First define where is a matrix . Discuss the method of solving and the solutions of .   For those who know calculus:   Write the series expansion for centered around .  Use the idea of exercise 6 to write what would be a plausible definion of where is an matrix.  If and , use the series in part (b) to show that and .  Show that .   Show that .  Is ?     "
},
{
  "id": "section7_4-matrix-oddities-3-3",
  "level": "2",
  "url": "section7_4-matrix-oddities.html#section7_4-matrix-oddities-3-3",
  "type": "Table",
  "number": "7.4.1",
  "title": "",
  "body": "  Equation in the real algebra  Equation in matrix algebra   if if exists  Associative Property  Inverse Property  Identity Property    "
},
{
  "id": "ss-matrix-oddities",
  "level": "2",
  "url": "section7_4-matrix-oddities.html#ss-matrix-oddities",
  "type": "Observation",
  "number": "7.4.2",
  "title": "Matrix Oddities.",
  "body": "Matrix Oddities  Some of the main dissimilarities between matrix algebra and elementary algebra are that in matrix algebra:    may be different from .  There exist matrices and such that , and yet and .  There exist matrices where , and yet .  There exist matrices where with and  There exist matrices where , where and   "
},
{
  "id": "exercises-7_4-2",
  "level": "2",
  "url": "section7_4-matrix-oddities.html#exercises-7_4-2",
  "type": "Exercise",
  "number": "7.4.2.1",
  "title": "",
  "body": "Discuss each of the Matrix Oddities with respect to elementary algebra.  In elementary algebra (the algebra of real numbers), each of the given oddities does not exist.    may be different from . Not so in elementary algebra, since by the commutative law of multiplication.  There exist matrices and such that , yet and . In elementary algebra, the only way is if either or is zero. There are no exceptions.  There exist matrices , , yet . In elementary algebra, .  There exist matrices . where and . In elementary algebra, .  There exist matrices where but and . In elementary algebra, .   "
},
{
  "id": "exercises-7_4-3",
  "level": "2",
  "url": "section7_4-matrix-oddities.html#exercises-7_4-3",
  "type": "Exercise",
  "number": "7.4.2.2",
  "title": "",
  "body": "Determine matrices which show that each of the Matrix Oddities are true.  "
},
{
  "id": "exercises-7_4-4",
  "level": "2",
  "url": "section7_4-matrix-oddities.html#exercises-7_4-4",
  "type": "Exercise",
  "number": "7.4.2.3",
  "title": "",
  "body": "Prove or disprove the following implications.    and   .    exists, and if you multiply the equation on both sides by , you obtain .  Counterexample:    "
},
{
  "id": "exercises-7_4-5",
  "level": "2",
  "url": "section7_4-matrix-oddities.html#exercises-7_4-5",
  "type": "Exercise",
  "number": "7.4.2.4",
  "title": "",
  "body": "Let be the set of real matrices. Let be the subset of matrices defined by if and only if . Let be defined by if and only if .   Determine the cardinality of .  Consider the special case and prove that a sufficient condition for is that has a zero determinant (i.e., is singular) and where is the sum of the main diagonal elements of .  Is the condition of part b a necessary condition?   "
},
{
  "id": "exercises-7_4-6",
  "level": "2",
  "url": "section7_4-matrix-oddities.html#exercises-7_4-6",
  "type": "Exercise",
  "number": "7.4.2.5",
  "title": "",
  "body": "Write each of the following systems in the form , and then solve the systems using matrices.                 , and    , and    , and    , and  The matrix of coefficients for this system has a zero determinant; therefore, it has no inverse. The system cannot be solved by this method. In fact, the system has no solution.   "
},
{
  "id": "exercises-7_4-7",
  "level": "2",
  "url": "section7_4-matrix-oddities.html#exercises-7_4-7",
  "type": "Exercise",
  "number": "7.4.2.6",
  "title": "",
  "body": "Recall that is called a polynomial, or more specifically, a polynomial over , where the coefficients are elements of and . Also, think of the method of solving, and solutions of, . We would like to define the analogous situation for matrices. First define where is a matrix . Discuss the method of solving and the solutions of .  "
},
{
  "id": "exercises-7_4-8",
  "level": "2",
  "url": "section7_4-matrix-oddities.html#exercises-7_4-8",
  "type": "Exercise",
  "number": "7.4.2.7",
  "title": "",
  "body": "For those who know calculus:   Write the series expansion for centered around .  Use the idea of exercise 6 to write what would be a plausible definion of where is an matrix.  If and , use the series in part (b) to show that and .  Show that .   Show that .  Is ?   "
},
{
  "id": "section8_1-functions",
  "level": "1",
  "url": "section8_1-functions.html",
  "type": "Section",
  "number": "8.1",
  "title": "Function Fundamentals",
  "body": "Function Fundamentals   countably infinite  Limerick countably infinite  Doyle, Chris  Chris Doyle, The Omnificent English Dictionary In Limerick Form   A countably infinite set  Is as simple as things like this get.  Just start counting at 1,  Then continue—it's fun!  I'll check back when you're done, so don't sweat.    In this section we will consider some basic concepts of the relations that are called functions. A large variety of mathematical ideas and applications can be more completely understood when expressed through the function concept.  Function Definition and Notation  Function Function A function, , from into A function from a set into a set is a relation from into such that each element of is related to exactly one element of the set . The set is called the domain of the function and the set is called the codomain .   The reader should note that a function is a relation from into with two important restrictions:   Each element in the set , the domain of , must be related to some element of , the codomain.  The phrase is related to exactly one element of the set means that if and , then .   A function as a list of ordered pairs  Let and , and if , then is a function from into .  A function as a set of ordered pairs in set-builder notation Let be the real numbers. Then is a function from into , or, more simply, is a function on .  It is customary to use a different system of notation for functions than the one we will use for relations in Discrete Math. If is a function from the set into the set , we will write .  The reader is probably more familiar with the notation for describing functions that is used in basic algebra or calculus courses. For example, or both define the function . Here the domain was assumed to be those elements of whose substitutions for make sense, the nonzero real numbers, and the codomain was assumed to be . In most cases, we will make a point of listing the domain and codomain in addition to describing what the function does in order to define a function.  The terms mapping , map , and transformation are also used for functions.  The Set of Functions Between Two Sets  Set of Functions Between Two Sets Functions Between Two Sets Set of  The set of all functions from into Given two sets, and , the set of all functions from A into B is denoted .  The notation used for sets of functions makes sense in light of .  One way to imagine a function and what it does is to think of it as a machine. The machine could be mechanical, electronic, hydraulic, or abstract. Imagine that the machine only accepts certain objects as raw materials or input. The possible raw materials make up the domain. Given some input, the machine produces a finished product that depends on the input. The possible finished products that we imagine could come out of this process make up the codomain.  A definition based on images We can define a function based on specifying the codomain element to which each domain element is related. For example, defined by is an alternate description of .  Image of an element under a function Image of an Element. The image of under Let , read Let be a function from the set into the set . If , then is used to denote that element of to which is related. is called the image of , or, more precisely, the image of under . We write to indicate that the image of is .  In , the image of 2 under is 4; that is, . In , the image of under is 1; that is, .  Range of a Function Range of a Function. Range of function The range of a function is the set of images of its domain. If , then the range of is denoted , and .   Note that the range of a function is a subset of its codomain. is also read as the image of the set under the function or simply the image of .  In , . Notice that 2 and 3 are not images of any element of . In addition, note that both 1 and 4 are related to more than one element of the domain: and . This does not violate the definition of a function. Go back and read the definition if this isn't clear to you.  In , the range of is equal to its codomain, . If is any real number, we can demonstrate that it belongs to by finding a real number for which . By the definition of , , which leads us to the equation . This equation always has a solution, ; thus .  The formula that we used to describe the image of a real number under , , is preferred over the set notation for due to its brevity. Any time a function can be described with a rule or formula, we will use this form of description. In , the image of each element of is its square. To describe that fact, we write ( ), or defined by .  There are many ways that a function can be described. Many factors, such as the complexity of the function, dictate its representation.  Data as a function Suppose a survey of 1,000 persons is done asking how many hours of television each watches per day. Consider the function defined by This function will probably have no formula such as the ones for and above.  Conditional definiton of a function Consider the function defined by the set No simple single formula could describe , but if we assume that the pattern given continues, we can write    Functions of Two Variables Functions Of two Variables  If the domain of a function is the Cartesian product of two sets, then our notation and terminology changes slightly. For example, consider the function defined by . For this function, we would drop one set of parentheses and write , not . We call a function of two variables. From one point of view, this function is no different from any others that we have seen. The elements of the domain happen to be slightly more complicated. On the other hand, we can look at the individual components of the ordered pairs as being separate. If we interpret as giving us the cost of producing quantities of two products, we can imagine varying while is fixed, or vice versa.   SageMath Note SageMath Note Functions  There are several ways to define a function in Sage. The simplest way to implement is as follows.    Sage is built upon the programming language Python, which is a strongly typed language and so you can't evaluate expressions such as f('Hello') . However a function such as , as defined above, will accept any type of number, so a bit more work is needed to restrict the inputs of to the integers.  A second way to define a function in Sage is based on Python syntax.    Non-Functions  We close this section with two examples of relations that are not functions.  A non-function Let and let . Here is not a function from into since does not act on, or use, all elements of .  Another non-function Let and let . We note that acts on all of . However, is still not a function since and and the condition on each domain being related to exactly one element of the codomain is violated.    Exercises for Section 8.1  Let and . Determine which of the following are functions. Explain.    , where .   , where .   , where .   , where .   , where .     Yes  Yes  No  No  Yes    Let be a set and let be any subset of . Let be defined by   The function , is called the characteristic function Characteristic function of .   If and , list the elements of .  If and , list the element of .  If , what are and ?    Find the ranges of each of the relations that are functions in Exercise 1.   Range of  Range of  Range of    Find the ranges of the following functions on :    .   .   .    Let , where is the largest power of two that evenly divides ; for example, . Describe the equivalence classes of the kernel of .   Let be a set with subsets and .   Show that defined by is the characteristic function of .  What characteristic function is defined by ?  How are the characteristic functions of and related?     If and are finite sets, how many different functions are there from into ?  For each of the elements of , there are possible images, so there are functions from into .   Let be a function with domain and codomain . Consider the relation defined on the domain of by if and only if . The relation is called the kernel of .   Prove that is an equivalence relation.  For the specific case of , where is the set of integers, let be defined by . Describe the equivalence classes of the kernel for this specific function.     "
},
{
  "id": "def-function",
  "level": "2",
  "url": "section8_1-functions.html#def-function",
  "type": "Definition",
  "number": "8.1.1",
  "title": "Function.",
  "body": "Function Function A function, , from into A function from a set into a set is a relation from into such that each element of is related to exactly one element of the set . The set is called the domain of the function and the set is called the codomain .  "
},
{
  "id": "ex-function-1",
  "level": "2",
  "url": "section8_1-functions.html#ex-function-1",
  "type": "Example",
  "number": "8.1.2",
  "title": "A function as a list of ordered pairs.",
  "body": "A function as a list of ordered pairs  Let and , and if , then is a function from into . "
},
{
  "id": "ex-function-2",
  "level": "2",
  "url": "section8_1-functions.html#ex-function-2",
  "type": "Example",
  "number": "8.1.3",
  "title": "A function as a set of ordered pairs in set-builder notation.",
  "body": "A function as a set of ordered pairs in set-builder notation Let be the real numbers. Then is a function from into , or, more simply, is a function on . "
},
{
  "id": "subsec8_1_1-function-definition-notation-9",
  "level": "2",
  "url": "section8_1-functions.html#subsec8_1_1-function-definition-notation-9",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "mapping map transformation "
},
{
  "id": "def-set-of-functions",
  "level": "2",
  "url": "section8_1-functions.html#def-set-of-functions",
  "type": "Definition",
  "number": "8.1.4",
  "title": "The Set of Functions Between Two Sets.",
  "body": "The Set of Functions Between Two Sets  Set of Functions Between Two Sets Functions Between Two Sets Set of  The set of all functions from into Given two sets, and , the set of all functions from A into B is denoted . "
},
{
  "id": "ex-non-pair-description",
  "level": "2",
  "url": "section8_1-functions.html#ex-non-pair-description",
  "type": "Example",
  "number": "8.1.5",
  "title": "A definition based on images.",
  "body": "A definition based on images We can define a function based on specifying the codomain element to which each domain element is related. For example, defined by is an alternate description of . "
},
{
  "id": "def-image-of-an-element",
  "level": "2",
  "url": "section8_1-functions.html#def-image-of-an-element",
  "type": "Definition",
  "number": "8.1.6",
  "title": "Image of an element under a function.",
  "body": "Image of an element under a function Image of an Element. The image of under Let , read Let be a function from the set into the set . If , then is used to denote that element of to which is related. is called the image of , or, more precisely, the image of under . We write to indicate that the image of is . "
},
{
  "id": "def-range-of-function",
  "level": "2",
  "url": "section8_1-functions.html#def-range-of-function",
  "type": "Definition",
  "number": "8.1.7",
  "title": "Range of a Function.",
  "body": "Range of a Function Range of a Function. Range of function The range of a function is the set of images of its domain. If , then the range of is denoted , and .  "
},
{
  "id": "ex-data-function",
  "level": "2",
  "url": "section8_1-functions.html#ex-data-function",
  "type": "Example",
  "number": "8.1.8",
  "title": "Data as a function.",
  "body": "Data as a function Suppose a survey of 1,000 persons is done asking how many hours of television each watches per day. Consider the function defined by This function will probably have no formula such as the ones for and above. "
},
{
  "id": "ex-conditional-function",
  "level": "2",
  "url": "section8_1-functions.html#ex-conditional-function",
  "type": "Example",
  "number": "8.1.9",
  "title": "Conditional definiton of a function.",
  "body": "Conditional definiton of a function Consider the function defined by the set No simple single formula could describe , but if we assume that the pattern given continues, we can write  "
},
{
  "id": "ex-nonfunction1",
  "level": "2",
  "url": "section8_1-functions.html#ex-nonfunction1",
  "type": "Example",
  "number": "8.1.10",
  "title": "A non-function.",
  "body": "A non-function Let and let . Here is not a function from into since does not act on, or use, all elements of . "
},
{
  "id": "ex-nonfunction2",
  "level": "2",
  "url": "section8_1-functions.html#ex-nonfunction2",
  "type": "Example",
  "number": "8.1.11",
  "title": "Another non-function.",
  "body": "Another non-function Let and let . We note that acts on all of . However, is still not a function since and and the condition on each domain being related to exactly one element of the codomain is violated. "
},
{
  "id": "exercise-8-1-1",
  "level": "2",
  "url": "section8_1-functions.html#exercise-8-1-1",
  "type": "Exercise",
  "number": "8.1.5.1",
  "title": "",
  "body": "Let and . Determine which of the following are functions. Explain.    , where .   , where .   , where .   , where .   , where .     Yes  Yes  No  No  Yes   "
},
{
  "id": "exercise-characteristic-function",
  "level": "2",
  "url": "section8_1-functions.html#exercise-characteristic-function",
  "type": "Exercise",
  "number": "8.1.5.2",
  "title": "",
  "body": "Let be a set and let be any subset of . Let be defined by   The function , is called the characteristic function Characteristic function of .   If and , list the elements of .  If and , list the element of .  If , what are and ?   "
},
{
  "id": "exercises-8-1-4",
  "level": "2",
  "url": "section8_1-functions.html#exercises-8-1-4",
  "type": "Exercise",
  "number": "8.1.5.3",
  "title": "",
  "body": "Find the ranges of each of the relations that are functions in Exercise 1.   Range of  Range of  Range of   "
},
{
  "id": "exercises-8-1-5",
  "level": "2",
  "url": "section8_1-functions.html#exercises-8-1-5",
  "type": "Exercise",
  "number": "8.1.5.4",
  "title": "",
  "body": "Find the ranges of the following functions on :    .   .   .   "
},
{
  "id": "exercises-8-1-6",
  "level": "2",
  "url": "section8_1-functions.html#exercises-8-1-6",
  "type": "Exercise",
  "number": "8.1.5.5",
  "title": "",
  "body": "Let , where is the largest power of two that evenly divides ; for example, . Describe the equivalence classes of the kernel of .  "
},
{
  "id": "exercises-8-1-7",
  "level": "2",
  "url": "section8_1-functions.html#exercises-8-1-7",
  "type": "Exercise",
  "number": "8.1.5.6",
  "title": "",
  "body": "Let be a set with subsets and .   Show that defined by is the characteristic function of .  What characteristic function is defined by ?  How are the characteristic functions of and related?   "
},
{
  "id": "exercise-counting-functions",
  "level": "2",
  "url": "section8_1-functions.html#exercise-counting-functions",
  "type": "Exercise",
  "number": "8.1.5.7",
  "title": "",
  "body": " If and are finite sets, how many different functions are there from into ?  For each of the elements of , there are possible images, so there are functions from into .  "
},
{
  "id": "exercises-8-1-9",
  "level": "2",
  "url": "section8_1-functions.html#exercises-8-1-9",
  "type": "Exercise",
  "number": "8.1.5.8",
  "title": "",
  "body": "Let be a function with domain and codomain . Consider the relation defined on the domain of by if and only if . The relation is called the kernel of .   Prove that is an equivalence relation.  For the specific case of , where is the set of integers, let be defined by . Describe the equivalence classes of the kernel for this specific function.   "
},
{
  "id": "section8_2-properties-of-functions",
  "level": "1",
  "url": "section8_2-properties-of-functions.html",
  "type": "Section",
  "number": "8.2",
  "title": "Properties of Functions",
  "body": "Properties of Functions Properties of Functions  Properties  Consider the following functions:  Let and , and define by   Let and , and define by   The first function, , gives us more information about the set than the second function, . Since clearly has four elements, tells us that contains at least four elements since each element of is mapped onto a different element of . The properties that has, and does not have, are the most basic properties that we look for in a function. The following definitions summarize the basic vocabulary for function properties.  Injective Function, Injection Function Injective Function One-to-one Injection  A function is injective if An injective function is called an injection, or a one-to-one function.  Notice that the condition for an injective function is logically equivalent to for all . This is often a more convenient condition to prove than what is given in the definition.  Surjective Function, Surjection Function Surjective Function Onto Surjection  A function is surjective if its range, , is equal to its codomain, . A surjective function is called a surjection, or an onto function.  Notice that the condition for a surjective function is equivalent to .   Bijective Function, Bijection  Function Bijective  Bijection  A function is bijective if it is both injective and surjective. Bijective functions are also called one-to-one correspondences or one-to-one, onto functions.  The function that we opened this section with is bijective. The function is neither injective nor surjective.  Injective but not surjective function Let and , and define by , , and . Then is injective but not surjective.  Characteristic Functions The characteristic function, in is surjective if is a proper subset of , but never injective if .   Counting  Seating Students Let be the set of students who are sitting in a classroom, let be the set of seats in the classroom, and let be the function which maps each student into the chair he or she is sitting in. When is one to one? When is it onto? Under normal circumstances, would always be injective since no two different students would be in the same seat. In order for to be surjective, we need all seats to be used, so is a surjection if the classroom is filled to capacity.   Functions can also be used for counting the elements in large finite sets or in infinite sets. Let's say we wished to count the occupants in an auditorium containing 1,500 seats. If each seat is occupied, the answer is obvious, 1,500 people. What we have done is to set up a one-to-one correspondence, or bijection, from seats to people. We formalize in a definition.  Cardinality Cardinality. has cardinality Two sets are said to have the same cardinality if there exists a bijection between them. If a set has the same cardinality as the set , then we say its cardinality is .  The function that opened this section serves to show that the two sets and have the same cardinality. Notice in applying the definition of cardinality, we don't actually appear to count either set, we just match up the elements. However, matching the letters in with the numbers 1, 2, 3, and 4 is precisely how we count the letters.  Countable Set Countable Set If a set is finite or has the same cardinality as the set of positive integers, it is called a countable set.  Counting the Alphabet The alphabet has cardinality 26 through the following bijection into the set . .  As many evens as all positive integers Recall that . Paradoxically, has the same cardinality as the set of positive integers. To prove this, we must find a bijection from to . Such a function isn't unique, but this one is the simplest: where . Two statements must be proven to justify our claim that is a bijection:    is one-to-one.  Proof: Let and assume that . We must prove that .   is onto.  Proof: Let . We want to show that there exists an element such that . If , for some by the definition of . So we have . Hence, each element of 2 is the image of some element of .    Another way to look at any function with as its domain is creating a list of the form . In the previous example, the list is . This infinite list clearly has no duplicate entries and every even positive integer appears in the list eventually.  A function is a bijection if the infinite list contains no duplicates, and every element of appears on in the list. In this case, we say the is countably infinite , or simply countable  Readers who have studied real analysis should recall that the set of rational numbers is a countable set, while the set of real numbers is not a countable set. See the exercises at the end of this section for an another example of such a set.  We close this section with a theorem called the Pigeonhole Principle, which has numerous applications even though it is an obvious, common-sense statement. Never underestimate the importance of simple ideas. The Pigeonhole Principle states that if there are more pigeons than pigeonholes, then two or more pigeons must share the same pigeonhole. A more rigorous mathematical statement of the principle follows.  The Pigeonhole Principle Pigeonhole Principle Let be a function from a finite set into a finite set . If and , then there exists an element of that is the image under of at least elements of X.  Assume no such element exists. For each , let . Then it must be that . Furthermore, the set of nonempty form a partition of . Therefore, which is a contradiction.   A duplicate name is assured Assume that a room contains four students with the first names John, James, and Mary. Prove that two students have the same first name. We can visualize a mapping from the set of students to the set of first names; each student has a first name. The pigeonhole principle applies with , and we can conclude that at least two of the students have the same first name.     Exercises for Section 8.2  Determine which of the functions in of Section 8.1 are one- to-one and which are onto.  The only one-to-one function and the only onto function is .     Determine all bijections from the into .  Determine all bijections from into .    Which of the following are one-to-one, onto, or both?    defined by .   defined by .   defined by .   defined by , where is the ceiling of , the smallest integer greater than or equal to .   defined by .  defined by .    is onto but not one-to-one: .  is one-to-one and onto.  is one-to-one but not onto.  is onto but not one-to-one.  is one-to-one but not onto.  is one-to-one but not onto.    Which of the following are injections, surjections, or bijections on , the set of real numbers?    .   .             Suppose that pairs of socks are mixed up in your sock drawer. Use the Pigeonhole Principle to explain why, if you pick socks at random, at least two will make up a matching pair.  Let and and define where the pair of socks that belongs to . By the Pigeonhole principle, there exist two socks that were selected from the same pair.   In your own words explain the statement The sets of integers and even integers have the same cardinality.   Let . Find functions, if they exist that have the properties specified below.   A function that is one-to-one and onto.  A function that is neither one-to-one nor onto.  A function that is one-to-one but not onto.  A function that is onto but not one-to-one.    , for example   , for example  None exist.  None exist.     Define functions, if they exist, on the positive integers, , with the same properties as in Exercise 7 (if possible).  Let and be finite sets where . Is it possible to define a function that is one-to-one but not onto? Is it possible to find a function that is onto but not one-to-one?     Prove that the set of natural numbers is countable.  Prove that the set of integers is countable.  Prove that the set of rational numbers is countable.   Use defined by .  Use the function defined by if is even and if is odd.  The proof is due to Georg Cantor (1845-1918), and involves listing the rationals through a definite procedure so that none are omitted and duplications are avoided. In the first row list all nonnegative rationals with denominator 1, in the second all nonnegative rationals with denominator 2, etc. In this listing, of course, there are duplications, for example, , , , etc. To obtain a list without duplications follow the arrows in , listing only the circled numbers.  We obtain: Each nonnegative rational appears in this list exactly once. We now must insert in this list the negative rationals, and follow the same scheme to obtain: which can be paired off with the elements of .     Enumeration of the rational numbers.   Illustration of listing rational numbers for diagonalization proof.      Prove that the set of finite strings of 0's and 1's is countable.  Prove that the set of odd integers is countable.  Prove that the set is countable.    Use the Pigeonhole Principle to prove that an injection cannot exist between a finite set and a finite set if the cardinality of is greater than the cardinality of .  Let be any function from into . By the Pigeonhole principle with , there exists an element of that is the image of at least two elements of . Therefore, is not an injection.    Prove that the set of all infinite sequences of 0's and 1's is not a countable set.  The proof is indirect and follows a technique called the Cantor diagonal process. Assume to the contrary that the set is countable, then the elements can be listed: where each is an infinite sequence of 0s and 1s. Consider the array:   We assume that this array contains all infinite sequences of 0s and 1s. Consider the sequence defined by   Notice that differs from each in the th position and so cannot be in the list. This is a contradiction, which completes our proof.   Prove that the set of all functions on the integers is an uncountable set.     "
},
{
  "id": "def-injective-function",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#def-injective-function",
  "type": "Definition",
  "number": "8.2.1",
  "title": "Injective Function, Injection.",
  "body": "Injective Function, Injection Function Injective Function One-to-one Injection  A function is injective if An injective function is called an injection, or a one-to-one function. "
},
{
  "id": "def-surjective-function",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#def-surjective-function",
  "type": "Definition",
  "number": "8.2.2",
  "title": "Surjective Function, Surjection.",
  "body": "Surjective Function, Surjection Function Surjective Function Onto Surjection  A function is surjective if its range, , is equal to its codomain, . A surjective function is called a surjection, or an onto function. "
},
{
  "id": "def-bijective-function",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#def-bijective-function",
  "type": "Definition",
  "number": "8.2.3",
  "title": "Bijective Function, Bijection.",
  "body": " Bijective Function, Bijection  Function Bijective  Bijection  A function is bijective if it is both injective and surjective. Bijective functions are also called one-to-one correspondences or one-to-one, onto functions. "
},
{
  "id": "ex-injective-notsurjective",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#ex-injective-notsurjective",
  "type": "Example",
  "number": "8.2.4",
  "title": "Injective but not surjective function.",
  "body": "Injective but not surjective function Let and , and define by , , and . Then is injective but not surjective. "
},
{
  "id": "ex-characteristic-properties",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#ex-characteristic-properties",
  "type": "Example",
  "number": "8.2.5",
  "title": "Characteristic Functions.",
  "body": "Characteristic Functions The characteristic function, in is surjective if is a proper subset of , but never injective if . "
},
{
  "id": "ex-classroom",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#ex-classroom",
  "type": "Example",
  "number": "8.2.6",
  "title": "Seating Students.",
  "body": "Seating Students Let be the set of students who are sitting in a classroom, let be the set of seats in the classroom, and let be the function which maps each student into the chair he or she is sitting in. When is one to one? When is it onto? Under normal circumstances, would always be injective since no two different students would be in the same seat. In order for to be surjective, we need all seats to be used, so is a surjection if the classroom is filled to capacity.  "
},
{
  "id": "def-cardinality",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#def-cardinality",
  "type": "Definition",
  "number": "8.2.7",
  "title": "Cardinality.",
  "body": "Cardinality Cardinality. has cardinality Two sets are said to have the same cardinality if there exists a bijection between them. If a set has the same cardinality as the set , then we say its cardinality is . "
},
{
  "id": "def-countable-set",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#def-countable-set",
  "type": "Definition",
  "number": "8.2.8",
  "title": "Countable Set.",
  "body": "Countable Set Countable Set If a set is finite or has the same cardinality as the set of positive integers, it is called a countable set. "
},
{
  "id": "ex-the-alphabet",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#ex-the-alphabet",
  "type": "Example",
  "number": "8.2.9",
  "title": "Counting the Alphabet.",
  "body": "Counting the Alphabet The alphabet has cardinality 26 through the following bijection into the set . . "
},
{
  "id": "ex-evens-eq-all",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#ex-evens-eq-all",
  "type": "Example",
  "number": "8.2.10",
  "title": "As many evens as all positive integers.",
  "body": "As many evens as all positive integers Recall that . Paradoxically, has the same cardinality as the set of positive integers. To prove this, we must find a bijection from to . Such a function isn't unique, but this one is the simplest: where . Two statements must be proven to justify our claim that is a bijection:    is one-to-one.  Proof: Let and assume that . We must prove that .   is onto.  Proof: Let . We want to show that there exists an element such that . If , for some by the definition of . So we have . Hence, each element of 2 is the image of some element of .   "
},
{
  "id": "section8_2-properties-of-functions-4-10",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#section8_2-properties-of-functions-4-10",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "countably infinite countable "
},
{
  "id": "th-pigeonhole-principle",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#th-pigeonhole-principle",
  "type": "Theorem",
  "number": "8.2.11",
  "title": "The Pigeonhole Principle.",
  "body": "The Pigeonhole Principle Pigeonhole Principle Let be a function from a finite set into a finite set . If and , then there exists an element of that is the image under of at least elements of X.  Assume no such element exists. For each , let . Then it must be that . Furthermore, the set of nonempty form a partition of . Therefore, which is a contradiction.  "
},
{
  "id": "ex-names",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#ex-names",
  "type": "Example",
  "number": "8.2.12",
  "title": "A duplicate name is assured.",
  "body": "A duplicate name is assured Assume that a room contains four students with the first names John, James, and Mary. Prove that two students have the same first name. We can visualize a mapping from the set of students to the set of first names; each student has a first name. The pigeonhole principle applies with , and we can conclude that at least two of the students have the same first name.  "
},
{
  "id": "exercises-8-2-2",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#exercises-8-2-2",
  "type": "Exercise",
  "number": "8.2.3.1",
  "title": "",
  "body": "Determine which of the functions in of Section 8.1 are one- to-one and which are onto.  The only one-to-one function and the only onto function is .  "
},
{
  "id": "exercises-8-2-3",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#exercises-8-2-3",
  "type": "Exercise",
  "number": "8.2.3.2",
  "title": "",
  "body": "  Determine all bijections from the into .  Determine all bijections from into .   "
},
{
  "id": "exercises-8-2-4",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#exercises-8-2-4",
  "type": "Exercise",
  "number": "8.2.3.3",
  "title": "",
  "body": "Which of the following are one-to-one, onto, or both?    defined by .   defined by .   defined by .   defined by , where is the ceiling of , the smallest integer greater than or equal to .   defined by .  defined by .    is onto but not one-to-one: .  is one-to-one and onto.  is one-to-one but not onto.  is onto but not one-to-one.  is one-to-one but not onto.  is one-to-one but not onto.   "
},
{
  "id": "exercises-8-2-5",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#exercises-8-2-5",
  "type": "Exercise",
  "number": "8.2.3.4",
  "title": "",
  "body": "Which of the following are injections, surjections, or bijections on , the set of real numbers?    .   .            "
},
{
  "id": "exercises-8-2-6",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#exercises-8-2-6",
  "type": "Exercise",
  "number": "8.2.3.5",
  "title": "",
  "body": "Suppose that pairs of socks are mixed up in your sock drawer. Use the Pigeonhole Principle to explain why, if you pick socks at random, at least two will make up a matching pair.  Let and and define where the pair of socks that belongs to . By the Pigeonhole principle, there exist two socks that were selected from the same pair.  "
},
{
  "id": "exercises-8-2-7",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#exercises-8-2-7",
  "type": "Exercise",
  "number": "8.2.3.6",
  "title": "",
  "body": "In your own words explain the statement The sets of integers and even integers have the same cardinality.  "
},
{
  "id": "exercises-8-2-8",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#exercises-8-2-8",
  "type": "Exercise",
  "number": "8.2.3.7",
  "title": "",
  "body": "Let . Find functions, if they exist that have the properties specified below.   A function that is one-to-one and onto.  A function that is neither one-to-one nor onto.  A function that is one-to-one but not onto.  A function that is onto but not one-to-one.    , for example   , for example  None exist.  None exist.   "
},
{
  "id": "exercises-8-2-9",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#exercises-8-2-9",
  "type": "Exercise",
  "number": "8.2.3.8",
  "title": "",
  "body": " Define functions, if they exist, on the positive integers, , with the same properties as in Exercise 7 (if possible).  Let and be finite sets where . Is it possible to define a function that is one-to-one but not onto? Is it possible to find a function that is onto but not one-to-one?   "
},
{
  "id": "exercises-8-2-10",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#exercises-8-2-10",
  "type": "Exercise",
  "number": "8.2.3.9",
  "title": "",
  "body": " Prove that the set of natural numbers is countable.  Prove that the set of integers is countable.  Prove that the set of rational numbers is countable.   Use defined by .  Use the function defined by if is even and if is odd.  The proof is due to Georg Cantor (1845-1918), and involves listing the rationals through a definite procedure so that none are omitted and duplications are avoided. In the first row list all nonnegative rationals with denominator 1, in the second all nonnegative rationals with denominator 2, etc. In this listing, of course, there are duplications, for example, , , , etc. To obtain a list without duplications follow the arrows in , listing only the circled numbers.  We obtain: Each nonnegative rational appears in this list exactly once. We now must insert in this list the negative rationals, and follow the same scheme to obtain: which can be paired off with the elements of .     Enumeration of the rational numbers.   Illustration of listing rational numbers for diagonalization proof.    "
},
{
  "id": "exercises-8-2-11",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#exercises-8-2-11",
  "type": "Exercise",
  "number": "8.2.3.10",
  "title": "",
  "body": " Prove that the set of finite strings of 0's and 1's is countable.  Prove that the set of odd integers is countable.  Prove that the set is countable.   "
},
{
  "id": "exercises-8-2-12",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#exercises-8-2-12",
  "type": "Exercise",
  "number": "8.2.3.11",
  "title": "",
  "body": "Use the Pigeonhole Principle to prove that an injection cannot exist between a finite set and a finite set if the cardinality of is greater than the cardinality of .  Let be any function from into . By the Pigeonhole principle with , there exists an element of that is the image of at least two elements of . Therefore, is not an injection. "
},
{
  "id": "exercises-8-2-13",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#exercises-8-2-13",
  "type": "Exercise",
  "number": "8.2.3.12",
  "title": "",
  "body": "Prove that the set of all infinite sequences of 0's and 1's is not a countable set.  The proof is indirect and follows a technique called the Cantor diagonal process. Assume to the contrary that the set is countable, then the elements can be listed: where each is an infinite sequence of 0s and 1s. Consider the array:   We assume that this array contains all infinite sequences of 0s and 1s. Consider the sequence defined by   Notice that differs from each in the th position and so cannot be in the list. This is a contradiction, which completes our proof.  "
},
{
  "id": "exercises-8-2-14",
  "level": "2",
  "url": "section8_2-properties-of-functions.html#exercises-8-2-14",
  "type": "Exercise",
  "number": "8.2.3.13",
  "title": "",
  "body": "Prove that the set of all functions on the integers is an uncountable set.  "
},
{
  "id": "section8_3-function-composition",
  "level": "1",
  "url": "section8_3-function-composition.html",
  "type": "Section",
  "number": "8.3",
  "title": "Function Composition",
  "body": "Function Composition   Now that we have a good understanding of what a function is, our next step is to consider an important operation on functions. Our purpose is not to develop the algebra of functions as completely as we did for the algebras of logic, matrices, and sets, but the reader should be aware of the similarities between the algebra of functions and that of matrices. We first define equality of functions.   Function Equality  Equality of Functions Function Equality  Let ; that is, let and both be functions from into . Then is equal to (denoted ) if and only if for all .  Two functions that have different domains cannot be equal. For example, defined by and defined by are not equal even though the formula that defines them is the same.  On the other hand, it is not uncommon for two functions to be equal even though they are defined differently. For example consider the functions and , where is defined by and is defined by appear to be very different functions. However, they are equal because for .   Function Composition  One of the most important operations on functions is that of composition.  Composition of Functions  Composition of Functions  Function Composition  The composition of with  Let and . Then the composition of followed by , written , is a function from into defined by , which is read of of .   The reader should note that it is traditional to write the composition of functions from right to left. Thus, in the above definition, the first function performed in computing is .   A basic example Let be defined by , , and . Let be defined by and . Then is defined by , and . For example, . Note that is not defined. Why?  Let be defined by and let be defined by . Then, since we have is defined by . Here is also defined and is defined by . Moreover, since for at least one real number, . Therefore, the commutative law is not true for functions under the operation of composition. However, the associative law is true for functions under the operation of composition.   Function composition is associative  If , , and , then .  Note: In order to prove that two functions are equal, we must use the definition of equality of functions. Assuming that the functions have the same domain, they are equal if, for each domain element, the images of that element under the two functions are equal.  We wish to prove that for all , which is the domain of both functions. Similarly, .  Notice that no matter how the functions the expression is grouped, the final image of any element of is and so .  If is a function on a set , then the compositions , are valid, and we denote them as , . These repeated composition of with itself can be defined recursively. We will discuss this form of definition in detail in .  Powers of Functions  Powers of Functions  the square of a function.  Let .    ; that is, , for .   For , ; that is, for .    Two useful theorems concerning composition are given below. The proofs are left for the exercises.  The composition of injections is an injection If and are injections, then is an injection.  The composition of surjections is a surjection If and are surjections, then is a surjection.   We would now like to define the concepts of identity and inverse for functions under composition. The motivation and descriptions of the definitions of these terms come from the definitions of the terms in the set of real numbers and for matrices. For real numbers, the numbers 0 and 1 play the unique role that and for any real number . 0 and 1 are the identity elements for the reals under the operations of addition and multiplication, respectively. Similarly, the zero matrix 0 and the identity matrix are such that for any matrix , and . Hence, an elegant way of defining the identity function under the operation of composition would be to imitate the above well-known facts.  Identity Function  Identity Function  The identitiy function (on a set )  For any set , the identity function on is a function from onto , denoted by (or, more specifically, ) such that for all .   Based on the definition of , we can show that for all functions , .  The identity function on If , then the identity function is defined by , and .  The identity function on The identity function on is defined by .   Inverse Functions  We will introduce the inverse of a function with a special case: the inverse of a function on a set. After you've taken the time to understand this concept, you can read about the inverse of a function from one set into another. The reader is encouraged to reread the definition of the inverse of a matrix in Section 5.2 ( ) to see that the following definition of the inverse function is a direct analogue of that definition.  Inverse of a Function on a Set  Inverse Function of a function on a set  The inverse of function read inverse  Let . If there exists a function such that , then is called the inverse of and is denoted by , read inverse.   Notice that in the definition we refer to the inverse as opposed to an inverse. It can be proven that a function can never have more than one inverse (see exercises).  An alternate description of the inverse of a function, which can be proven from the definition, is as follows: Let be such that . Then when it exists, is a function from to such that . Note that  undoes what does.  The inverse of a function on Let and let be the function defined on such that , , and . Then is defined by , , and .  Inverse of a real function If is defined by , then is the function that undoes what does. Since cubes real numbers, must be the reverse process, namely, takes cube roots. Therefore, is defined by . We should show that and . We will do the first, and the reader is encouraged to do the second. Therefore, . Why?  The definition of the inverse of a function alludes to the fact that not all functions have inverses. How do we determine when the inverse of a function exists?  Bijections have inverses Let . exists if and only if f is a bijection; i. e. f is one-to-one and onto. ( ) In this half of the proof, assume that exists and we must prove that is one-to-one and onto. To do so, it is convenient for us to use the relation notation, where is equivalent to . To prove that is one-to-one, assume that . Alternatively, that means and are elements of . We must show that . Since , and are in . By the fact that is a function and cannot have two images, and must be equal, so is one-to-one.  Next, to prove that is onto, observe that for to be a function, it must use all of its domain, namely A. Let be any element of . Then b has an image under , . Another way of writing this is , By the definition of the inverse, this is equivalent to . Hence, is in the range of . Since was chosen arbitrarily, this shows that the range of must be all of .  ( ) Assume is one-to-one and onto and we are to prove exists. We leave this half of the proof to the reader.  Permutation Permutation A bijection of a set into itself is called a permutation of .   Next, we will consider the functions for which the domain and codomain are not necessarily equal. How do we define the inverse in this case?  Inverse of a Function (General Case) Let , If there exists a function such that and , then is called the inverse of and is denoted by , read inverse.   Note the slightly more complicated condition for the inverse in this case because the domains of and are different if and are different. The proof of the following theorem isn't really very different from the special case where .  When does a function have an inverse? Let . exists if and only if f is a bijection.  Another inverse Let and . Define by , , and { } . Then defined by , , and is the inverse of .    Exercises for Section 8.3   Let , , and . Define by equal to the letter in the alphabet, and define by if is a vowel and if is a consonant.   Find .  Does it make sense to discuss ? If not, why not?  Does exist? Why?  Does exist? Why?    is defined by  No, since the domain of is not equal to the codomain of .  No, since is not surjective.  No, since is not injective.    Let . Define by , , and . Find , , and .    Let .   List all permutations of .  Find the inverse and square of each of the permutations of part a, where the square of a permutation, , is the composition .  Show that the composition of any two permutations of is a permutation of .  Prove that if is any set where , then the number of permutations of is .     The permutations of are and , defined in .   Permutations of                   If and are permutations of , then they are both injections and their composition, , is a injection, by . By , is also a surjection; therefore, is a bijection on , a permutation.  Proof by induction: Basis: . The number of permutations of is one, the identity function, and 1! .  Induction: Assume that the number of permutations on a set with elements, , is !. Furthermore, assume that and that contains an element called . Let . We can reduce the definition of a permutation, , on to two steps. First, we select any one of the ! permutations on . (Note the use of the induction hypothesis.) Call it . This permutation almost completely defines a permutation on that we will call . For all in , we start by defining to be . We may be making some adjustments, but define it that way for now. Next, we select the image of , which can be done different ways, allowing for any value in . To keep our function bijective, we must adjust as follows: If we select , then we must find the element, , of such that , and redefine the image of to . If we had selected , then there is no adjustment needed. By the rule of products, the number of ways that we can define is      Define , , and , all functions on the integers, by , , and . Determine:           Based on the definition of the identity function, show that for all functions , .   Inverse images. If is any function from into , we can describe the inverse image as a function from into , which is also commonly denoted . If , . If does have an inverse, the inverse image of is .   Let be defined by . What are , and ?  If , where , what is ?    Let  , and all be functions from into defined by , and . Define:                      Define the following functions on the integers by , , and    Which of these functions are one-to-one?  Which of these functions are onto?  Express in simplest terms the compositions , , , , and ,    Let be a nonempty set. Prove that if is a bijection on and , then is the identity function,   You have seen a similar proof in matrix algebra.  For the real matrix , .  Recall that a bijection from a set to itself is also referred to as a permutation of the set. Let be a permutation of such that becomes , becomes , etc.  Let . How many permutations of leave the determinant of invariant, that is, ?   State and prove a theorem on inverse functions analogous to the one that says that if a matrix has an inverse, that inverse is unique.   If and has an inverse, then that inverse is unique.  Proof: Suppose that and are both inverses of , both having domain and codomain .    Let and be functions whose inverses exist. Prove that .  See Exercise 3 of Section 5.4.  Prove and .   Let be elements of such that ; that is, . Since is injective, and since is injective, .  Let be an element of . We must show that there exists an element of whose image under is . Since is surjective, there exists an element of , , such that . Also, since is a surjection, there exists an element of , , such that , .   Prove the second half of .   Prove by induction that if and are invertible functions on some nonempty set , then . The basis has been taken care of in Exercise 10.   Basis: : by exercise 10.  Induction: Assume and and consider .    Our definition of cardinality states that two sets, and , have the same cardinality if there exists a bijection between the two sets. Why does it not matter whether the bijection is from into or into ?  Prove that has the same cardinality as is an equivalence relation on sets.    Construct a table listing as many Laws of Function Composition as you can identify. Use previous lists of laws as a guide.     "
},
{
  "id": "def-equality-of-functions",
  "level": "2",
  "url": "section8_3-function-composition.html#def-equality-of-functions",
  "type": "Definition",
  "number": "8.3.1",
  "title": "Equality of Functions.",
  "body": "Equality of Functions Function Equality  Let ; that is, let and both be functions from into . Then is equal to (denoted ) if and only if for all . "
},
{
  "id": "def-composition-of-functions",
  "level": "2",
  "url": "section8_3-function-composition.html#def-composition-of-functions",
  "type": "Definition",
  "number": "8.3.2",
  "title": "Composition of Functions.",
  "body": "Composition of Functions  Composition of Functions  Function Composition  The composition of with  Let and . Then the composition of followed by , written , is a function from into defined by , which is read of of .  "
},
{
  "id": "ex-simple-composition",
  "level": "2",
  "url": "section8_3-function-composition.html#ex-simple-composition",
  "type": "Example",
  "number": "8.3.3",
  "title": "A basic example.",
  "body": "A basic example Let be defined by , , and . Let be defined by and . Then is defined by , and . For example, . Note that is not defined. Why?  Let be defined by and let be defined by . Then, since we have is defined by . Here is also defined and is defined by . Moreover, since for at least one real number, . Therefore, the commutative law is not true for functions under the operation of composition. However, the associative law is true for functions under the operation of composition. "
},
{
  "id": "function-composition-associative",
  "level": "2",
  "url": "section8_3-function-composition.html#function-composition-associative",
  "type": "Theorem",
  "number": "8.3.4",
  "title": "Function composition is associative.",
  "body": " Function composition is associative  If , , and , then .  Note: In order to prove that two functions are equal, we must use the definition of equality of functions. Assuming that the functions have the same domain, they are equal if, for each domain element, the images of that element under the two functions are equal.  We wish to prove that for all , which is the domain of both functions. Similarly, .  Notice that no matter how the functions the expression is grouped, the final image of any element of is and so . "
},
{
  "id": "def-powers-of-functions",
  "level": "2",
  "url": "section8_3-function-composition.html#def-powers-of-functions",
  "type": "Definition",
  "number": "8.3.5",
  "title": "Powers of Functions.",
  "body": "Powers of Functions  Powers of Functions  the square of a function.  Let .    ; that is, , for .   For , ; that is, for .   "
},
{
  "id": "theorem-composition-of-injections",
  "level": "2",
  "url": "section8_3-function-composition.html#theorem-composition-of-injections",
  "type": "Theorem",
  "number": "8.3.6",
  "title": "The composition of injections is an injection.",
  "body": "The composition of injections is an injection If and are injections, then is an injection. "
},
{
  "id": "theorem-composition-of-surjections",
  "level": "2",
  "url": "section8_3-function-composition.html#theorem-composition-of-surjections",
  "type": "Theorem",
  "number": "8.3.7",
  "title": "The composition of surjections is a surjection.",
  "body": "The composition of surjections is a surjection If and are surjections, then is a surjection.  "
},
{
  "id": "def-identity-function",
  "level": "2",
  "url": "section8_3-function-composition.html#def-identity-function",
  "type": "Definition",
  "number": "8.3.8",
  "title": "Identity Function.",
  "body": "Identity Function  Identity Function  The identitiy function (on a set )  For any set , the identity function on is a function from onto , denoted by (or, more specifically, ) such that for all .  "
},
{
  "id": "ex-an-identity-function",
  "level": "2",
  "url": "section8_3-function-composition.html#ex-an-identity-function",
  "type": "Example",
  "number": "8.3.9",
  "title": "The identity function on <span class=\"process-math\">\\(\\{1,2,3\\}\\)<\/span>.",
  "body": "The identity function on If , then the identity function is defined by , and . "
},
{
  "id": "ex-identity-on-reals",
  "level": "2",
  "url": "section8_3-function-composition.html#ex-identity-on-reals",
  "type": "Example",
  "number": "8.3.10",
  "title": "The identity function on <span class=\"process-math\">\\(\\mathbb{R}\\)<\/span>.",
  "body": "The identity function on The identity function on is defined by . "
},
{
  "id": "def-inverse-function",
  "level": "2",
  "url": "section8_3-function-composition.html#def-inverse-function",
  "type": "Definition",
  "number": "8.3.11",
  "title": "Inverse of a Function on a Set.",
  "body": "Inverse of a Function on a Set  Inverse Function of a function on a set  The inverse of function read inverse  Let . If there exists a function such that , then is called the inverse of and is denoted by , read inverse.  "
},
{
  "id": "ex-simple-inverse",
  "level": "2",
  "url": "section8_3-function-composition.html#ex-simple-inverse",
  "type": "Example",
  "number": "8.3.12",
  "title": "The inverse of a function on <span class=\"process-math\">\\(\\{1,2,3\\}\\)<\/span>.",
  "body": "The inverse of a function on Let and let be the function defined on such that , , and . Then is defined by , , and . "
},
{
  "id": "ex-inverse-of-a-real-function",
  "level": "2",
  "url": "section8_3-function-composition.html#ex-inverse-of-a-real-function",
  "type": "Example",
  "number": "8.3.13",
  "title": "Inverse of a real function.",
  "body": "Inverse of a real function If is defined by , then is the function that undoes what does. Since cubes real numbers, must be the reverse process, namely, takes cube roots. Therefore, is defined by . We should show that and . We will do the first, and the reader is encouraged to do the second. Therefore, . Why? "
},
{
  "id": "theorem-bijections-have-inverses",
  "level": "2",
  "url": "section8_3-function-composition.html#theorem-bijections-have-inverses",
  "type": "Theorem",
  "number": "8.3.14",
  "title": "Bijections have inverses.",
  "body": "Bijections have inverses Let . exists if and only if f is a bijection; i. e. f is one-to-one and onto. ( ) In this half of the proof, assume that exists and we must prove that is one-to-one and onto. To do so, it is convenient for us to use the relation notation, where is equivalent to . To prove that is one-to-one, assume that . Alternatively, that means and are elements of . We must show that . Since , and are in . By the fact that is a function and cannot have two images, and must be equal, so is one-to-one.  Next, to prove that is onto, observe that for to be a function, it must use all of its domain, namely A. Let be any element of . Then b has an image under , . Another way of writing this is , By the definition of the inverse, this is equivalent to . Hence, is in the range of . Since was chosen arbitrarily, this shows that the range of must be all of .  ( ) Assume is one-to-one and onto and we are to prove exists. We leave this half of the proof to the reader. "
},
{
  "id": "def-Permutation",
  "level": "2",
  "url": "section8_3-function-composition.html#def-Permutation",
  "type": "Definition",
  "number": "8.3.15",
  "title": "Permutation.",
  "body": "Permutation Permutation A bijection of a set into itself is called a permutation of .  "
},
{
  "id": "def-general-inverse-function",
  "level": "2",
  "url": "section8_3-function-composition.html#def-general-inverse-function",
  "type": "Definition",
  "number": "8.3.16",
  "title": "Inverse of a Function (General Case).",
  "body": "Inverse of a Function (General Case) Let , If there exists a function such that and , then is called the inverse of and is denoted by , read inverse.  "
},
{
  "id": "theorem-inverse-function-condition",
  "level": "2",
  "url": "section8_3-function-composition.html#theorem-inverse-function-condition",
  "type": "Theorem",
  "number": "8.3.17",
  "title": "When does a function have an inverse?",
  "body": "When does a function have an inverse? Let . exists if and only if f is a bijection. "
},
{
  "id": "example-inverse-another",
  "level": "2",
  "url": "section8_3-function-composition.html#example-inverse-another",
  "type": "Example",
  "number": "8.3.18",
  "title": "Another inverse.",
  "body": "Another inverse Let and . Define by , , and { } . Then defined by , , and is the inverse of . "
},
{
  "id": "exercises-8-3-2",
  "level": "2",
  "url": "section8_3-function-composition.html#exercises-8-3-2",
  "type": "Exercise",
  "number": "8.3.4.1",
  "title": "",
  "body": " Let , , and . Define by equal to the letter in the alphabet, and define by if is a vowel and if is a consonant.   Find .  Does it make sense to discuss ? If not, why not?  Does exist? Why?  Does exist? Why?    is defined by  No, since the domain of is not equal to the codomain of .  No, since is not surjective.  No, since is not injective.   "
},
{
  "id": "exercises-8-3-3",
  "level": "2",
  "url": "section8_3-function-composition.html#exercises-8-3-3",
  "type": "Exercise",
  "number": "8.3.4.2",
  "title": "",
  "body": "Let . Define by , , and . Find , , and .  "
},
{
  "id": "exercises-8-3-4",
  "level": "2",
  "url": "section8_3-function-composition.html#exercises-8-3-4",
  "type": "Exercise",
  "number": "8.3.4.3",
  "title": "",
  "body": " Let .   List all permutations of .  Find the inverse and square of each of the permutations of part a, where the square of a permutation, , is the composition .  Show that the composition of any two permutations of is a permutation of .  Prove that if is any set where , then the number of permutations of is .     The permutations of are and , defined in .   Permutations of                   If and are permutations of , then they are both injections and their composition, , is a injection, by . By , is also a surjection; therefore, is a bijection on , a permutation.  Proof by induction: Basis: . The number of permutations of is one, the identity function, and 1! .  Induction: Assume that the number of permutations on a set with elements, , is !. Furthermore, assume that and that contains an element called . Let . We can reduce the definition of a permutation, , on to two steps. First, we select any one of the ! permutations on . (Note the use of the induction hypothesis.) Call it . This permutation almost completely defines a permutation on that we will call . For all in , we start by defining to be . We may be making some adjustments, but define it that way for now. Next, we select the image of , which can be done different ways, allowing for any value in . To keep our function bijective, we must adjust as follows: If we select , then we must find the element, , of such that , and redefine the image of to . If we had selected , then there is no adjustment needed. By the rule of products, the number of ways that we can define is     "
},
{
  "id": "exercises-8-3-5",
  "level": "2",
  "url": "section8_3-function-composition.html#exercises-8-3-5",
  "type": "Exercise",
  "number": "8.3.4.4",
  "title": "",
  "body": "Define , , and , all functions on the integers, by , , and . Determine:          "
},
{
  "id": "exercises-8-3-6",
  "level": "2",
  "url": "section8_3-function-composition.html#exercises-8-3-6",
  "type": "Exercise",
  "number": "8.3.4.5",
  "title": "",
  "body": "Based on the definition of the identity function, show that for all functions , .  "
},
{
  "id": "exercises-8-3-7",
  "level": "2",
  "url": "section8_3-function-composition.html#exercises-8-3-7",
  "type": "Exercise",
  "number": "8.3.4.6",
  "title": "",
  "body": "Inverse images. If is any function from into , we can describe the inverse image as a function from into , which is also commonly denoted . If , . If does have an inverse, the inverse image of is .   Let be defined by . What are , and ?  If , where , what is ?   "
},
{
  "id": "exercises-8-3-8",
  "level": "2",
  "url": "section8_3-function-composition.html#exercises-8-3-8",
  "type": "Exercise",
  "number": "8.3.4.7",
  "title": "",
  "body": "Let  , and all be functions from into defined by , and . Define:                    "
},
{
  "id": "exercises-8-3-9",
  "level": "2",
  "url": "section8_3-function-composition.html#exercises-8-3-9",
  "type": "Exercise",
  "number": "8.3.4.8",
  "title": "",
  "body": " Define the following functions on the integers by , , and    Which of these functions are one-to-one?  Which of these functions are onto?  Express in simplest terms the compositions , , , , and ,   "
},
{
  "id": "exercises-8-3-10",
  "level": "2",
  "url": "section8_3-function-composition.html#exercises-8-3-10",
  "type": "Exercise",
  "number": "8.3.4.9",
  "title": "",
  "body": "Let be a nonempty set. Prove that if is a bijection on and , then is the identity function,   You have seen a similar proof in matrix algebra. "
},
{
  "id": "exercises-8-3-11",
  "level": "2",
  "url": "section8_3-function-composition.html#exercises-8-3-11",
  "type": "Exercise",
  "number": "8.3.4.10",
  "title": "",
  "body": "For the real matrix , .  Recall that a bijection from a set to itself is also referred to as a permutation of the set. Let be a permutation of such that becomes , becomes , etc.  Let . How many permutations of leave the determinant of invariant, that is, ?  "
},
{
  "id": "exercises-8-3-12",
  "level": "2",
  "url": "section8_3-function-composition.html#exercises-8-3-12",
  "type": "Exercise",
  "number": "8.3.4.11",
  "title": "",
  "body": "State and prove a theorem on inverse functions analogous to the one that says that if a matrix has an inverse, that inverse is unique.   If and has an inverse, then that inverse is unique.  Proof: Suppose that and are both inverses of , both having domain and codomain .   "
},
{
  "id": "exercises-8-3-13",
  "level": "2",
  "url": "section8_3-function-composition.html#exercises-8-3-13",
  "type": "Exercise",
  "number": "8.3.4.12",
  "title": "",
  "body": "Let and be functions whose inverses exist. Prove that .  See Exercise 3 of Section 5.4. "
},
{
  "id": "exercises-8-3-14",
  "level": "2",
  "url": "section8_3-function-composition.html#exercises-8-3-14",
  "type": "Exercise",
  "number": "8.3.4.13",
  "title": "",
  "body": "Prove and .   Let be elements of such that ; that is, . Since is injective, and since is injective, .  Let be an element of . We must show that there exists an element of whose image under is . Since is surjective, there exists an element of , , such that . Also, since is a surjection, there exists an element of , , such that , .  "
},
{
  "id": "exercises-8-3-15",
  "level": "2",
  "url": "section8_3-function-composition.html#exercises-8-3-15",
  "type": "Exercise",
  "number": "8.3.4.14",
  "title": "",
  "body": "Prove the second half of .  "
},
{
  "id": "exercises-8-3-16",
  "level": "2",
  "url": "section8_3-function-composition.html#exercises-8-3-16",
  "type": "Exercise",
  "number": "8.3.4.15",
  "title": "",
  "body": "Prove by induction that if and are invertible functions on some nonempty set , then . The basis has been taken care of in Exercise 10.   Basis: : by exercise 10.  Induction: Assume and and consider .   "
},
{
  "id": "exercises-8-3-17",
  "level": "2",
  "url": "section8_3-function-composition.html#exercises-8-3-17",
  "type": "Exercise",
  "number": "8.3.4.16",
  "title": "",
  "body": "Our definition of cardinality states that two sets, and , have the same cardinality if there exists a bijection between the two sets. Why does it not matter whether the bijection is from into or into ?  Prove that has the same cardinality as is an equivalence relation on sets.   "
},
{
  "id": "exercises-8-3-18",
  "level": "2",
  "url": "section8_3-function-composition.html#exercises-8-3-18",
  "type": "Exercise",
  "number": "8.3.4.17",
  "title": "",
  "body": "Construct a table listing as many Laws of Function Composition as you can identify. Use previous lists of laws as a guide.  "
},
{
  "id": "section8_4-recursion",
  "level": "1",
  "url": "section8_4-recursion.html",
  "type": "Section",
  "number": "8.4",
  "title": "Introduction to Recursion",
  "body": " Introduction to Recursion  Introduction to Recursion   An essential tool that anyone interested in computer science must master is how to think recursively. The ability to understand definitions, concepts, functions, algorithms, etc., that are presented recursively and the ability to put thoughts into a recursive framework are essential in computer science. The goal for this section is to help the reader become more comfortable with recursion in its commonly encountered forms.  Consider the following definitions, all of which should be somewhat familiar to you. When reading them, concentrate on how they are similar.  Binomial Coefficients Polynomials and their evaluation  Here is a recursive definition of binomial coefficients, which we introduced in Chapter 2.  Binomial Coefficient - Recursion Definition Binomial Coefficient Recursive Definition Assume and . We define by    and  if    A word about definitions: Strictly speaking, when mathematical objects such as binomial coefficents are defined, they should be defined just once. Since we defined binomial coefficients earlier, in , other statements describing them should be theorems. The theorem, in this case, would be that the definition above is consistent with the original definition. Our point in this chapter in discussing recursion is to observe alternative definitions that have a recursive nature. In the exercises, you will have the opportunity to prove that the two definitions are indeed equivalent.  Here is how we can apply the recursive definition to compute .    Polynomials and Their Evaluation Polynomials  Polynomial Expression in over (Non-Recursive) Polynomial Expression Non-recursive). Let be an integer, . An degree polynomial in is an expression of the form , where are elements of some designated set of numbers, , called the set of coefficients and .  We refer to as a variable here, although the more precise term for is an indeterminate . There is a distinction between the terms indeterminate and variable, but that distinction will not come into play in our discussions.  Zeroth degree polynomials are called constant polynomials and are simply elements of the set of coefficients.  This definition is often introduced in algebra courses to describe expressions such as , a third-degree, or cubic, polynomial in . This definition has a drawback when the variable is given a value and the expression must be evaluated. For example, suppose that . Your first impulse is likely to do this:   A count of the number of operations performed shows that five multiplications and three additions\/subtractions were performed. The first two multiplications compute and , and the last three multiply the powers of 7 times the coefficients. This gives you the four terms; and adding\/subtracting a list of numbers requires addition\/subtractions. The following definition of a polynomial expression suggests another more efficient method of evaluation.  Polynomial Expression in over (Recursive) Polynomial Expression Recursive definition  Let be a set of coefficients and a variable.   A zeroth degree polynomial expression in over is a nonzero element of .  For , an degree polynomial expression in over is an expression of the form where is an degree polynomial expression in and .      We can easily verify that is a third-degree polynomial expression in over based on this definition: Notice that 4 is a zeroth degree polynomial since it is an integer. Therefore is a first-degree polynomial; therefore, is a second-degree polynomial in over ; therefore, is a third-degree polynomial in over . The final expression for is called its telescoping form . If we use it to calculate , we need only three multiplications and three additions\/subtractions. This is called Horner's method for evaluating a polynomial expression.  More Telescoping Polynomials   The telescoping form of is . Using Horner's method, computing the value of requires four multiplications and four additions\/subtractions for any real number .  has the telescoping form .    Many computer languages represent polynomials as lists of coefficients, usually starting with the constant term. For example, would be represented with the list . In both Mathematica and Sage, polynomial expressions can be entered and manipulated, so the list representation is only internal. Some lower-leveled languages do require users to program polynomial operations with lists. We will leave these programming issues to another source.   Recursively Defined Sequences Sequences Recursively Defined  For the next two examples, consider a sequence of numbers to be a list of numbers consisting of a zeroth number, first number, second number, ... . If a sequence is given the name , the number of is usually written or .  Geometric Growth Sequence  Define the sequence of numbers by  .  These rules stipulate that each number in the list is 1.08 times the previous number, with the starting number equal to 100. For example    The Fibonacci Sequence Fibonacci Sequence The Fibonacci sequence is the sequence defined by     Recursion  All of the previous examples were presented recursively. That is, every object is described in one of two forms. One form is by a simple definition, which is usually called the basis for the recursion. The second form is by a recursive description in which objects are described in terms of themselves, with the following qualification. What is essential for a proper use of recursion is that the objects can be expressed in terms of simpler objects, where simpler means closer to the basis of the recursion. To avoid what might be considered a circular definition, the basis must be reached after a finite number of applications of the recursion.  To determine, for example, the fourth item in the Fibonacci sequence we repeatedly apply the recursive rule for until we are left with an expression involving and :    Iteration  On the other hand, we could compute a term in the Fibonacci sequence, say by starting with the basis terms and working forward as follows:          This is called an iterative computation of the Fibonacci sequence. Here we start with the basis and work our way forward to a less simple number, such as 5. Try to compute using the recursive definition for as we did for . It will take much more time than it would have taken to do the computations above. Iterative computations usually tend to be faster than computations that apply recursion. Therefore, one useful skill is being able to convert a recursive formula into a nonrecursive formula, such as one that requires only iteration or a faster method, if possible.  An iterative formula for is also much more efficient than an application of the recursive definition. The recursive definition is not without its merits, however. First, the recursive equation is often useful in manipulating algebraic expressions involving binomial coefficients. Second, it gives us an insight into the combinatoric interpretation of . In choosing elements from , there are ways of choosing all from , and there are ways of choosing the elements if is to be selected and the remaining elements come from . Note how we used the Law of Addition from Chapter 2 in our reasoning.  BinarySearch Revisited. In the binary search algorithm, the place where recursion is used is easy to pick out. When an item is examined and the key is not the one you want, the search is cut down to a sublist of no more than half the number of items that you were searching in before. Obviously, this is a simpler search. The basis is hidden in the algorithm. The two cases that complete the search can be thought of as the basis. Either you find an item that you want, or the sublist that you have been left to search in is empty, when .  BinarySearch can be translated without much difficulty into any language that allows recursive calls to its subprograms. The advantage to such a program is that its coding would be much shorter than a nonrecursive program that does a binary search. However, in most cases the recursive version will be slower and require more memory at execution time.   Induction and Recursion Induction and Recursion  The definition of the positive integers in terms of Peano's Postulates is a recursive definition. The basis element is the number 1 and the recursion is that if is a positive integer, then so is its successor. In this case, is the simple object and the recursion is of a forward type. Of course, the validity of an induction proof is based on our acceptance of this definition. Therefore, the appearance of induction proofs when recursion is used is no coincidence.  Proof of a formula for A formula for the sequence in is for . A proof by induction follow.  If , then , as defined. Now assume that for some , the formula for is true. hence the formula is true for  The formula that we have just proven for is called a closed form expression. It involves no recursion or summation signs.   Closed Form Expression Closed Form Expression. Let be an algebraic expression involving variables which are allowed to take on values from some predetermined set. is a closed form expression if there exists a number such that the evaluation of with any allowed values of the variables will take no more than operations (alternatively, time units).  Reducing a summation to closed form The sum is not a closed form expression because the number of additions needed to evaluate grows indefinitely with . A closed form expression that computes the value of is , which only requires operations.   Exercises for Section 8.4   By the recursive definition of binomial coefficients, . Continue expanding to express it in terms of quantities defined by the basis. Check your result by applying the factorial definition of .     Define the sequence by and for , . Determine and prove by induction that .   Let .   Write in telescoping form.  Use a calculator to compute using the original form of .  Use a calculator to compute using the telescoping form of .  Compare your speed in parts b and c.    in telescoping form:       Prove the two definitions of binomials coefficients, and , are equivalent.  What is wrong with the following definition of ? and if .  The basis is not reached in a finite number of steps if you try to compute for a nonzero value of .  Prove by induction that if ,   "
},
{
  "id": "def-binomial-coefficient-recursive",
  "level": "2",
  "url": "section8_4-recursion.html#def-binomial-coefficient-recursive",
  "type": "Definition",
  "number": "8.4.1",
  "title": "Binomial Coefficient - Recursion Definition.",
  "body": "Binomial Coefficient - Recursion Definition Binomial Coefficient Recursive Definition Assume and . We define by    and  if   "
},
{
  "id": "subsec8_4_1-binomial-coefficients-5",
  "level": "2",
  "url": "section8_4-recursion.html#subsec8_4_1-binomial-coefficients-5",
  "type": "Observation",
  "number": "8.4.2",
  "title": "",
  "body": "A word about definitions: Strictly speaking, when mathematical objects such as binomial coefficents are defined, they should be defined just once. Since we defined binomial coefficients earlier, in , other statements describing them should be theorems. The theorem, in this case, would be that the definition above is consistent with the original definition. Our point in this chapter in discussing recursion is to observe alternative definitions that have a recursive nature. In the exercises, you will have the opportunity to prove that the two definitions are indeed equivalent. "
},
{
  "id": "def-polynomial-expression-nonrecursive",
  "level": "2",
  "url": "section8_4-recursion.html#def-polynomial-expression-nonrecursive",
  "type": "Definition",
  "number": "8.4.3",
  "title": "Polynomial Expression in <span class=\"process-math\">\\(x\\)<\/span> over <span class=\"process-math\">\\(S\\)<\/span> (Non-Recursive).",
  "body": "Polynomial Expression in over (Non-Recursive) Polynomial Expression Non-recursive). Let be an integer, . An degree polynomial in is an expression of the form , where are elements of some designated set of numbers, , called the set of coefficients and . "
},
{
  "id": "def-polynomial-expression-recursive",
  "level": "2",
  "url": "section8_4-recursion.html#def-polynomial-expression-recursive",
  "type": "Definition",
  "number": "8.4.4",
  "title": "Polynomial Expression in <span class=\"process-math\">\\(x\\)<\/span> over <span class=\"process-math\">\\(S\\)<\/span> (Recursive).",
  "body": "Polynomial Expression in over (Recursive) Polynomial Expression Recursive definition  Let be a set of coefficients and a variable.   A zeroth degree polynomial expression in over is a nonzero element of .  For , an degree polynomial expression in over is an expression of the form where is an degree polynomial expression in and .     "
},
{
  "id": "subsec8_4_2-polynomials-and-their-evaluation-9",
  "level": "2",
  "url": "section8_4-recursion.html#subsec8_4_2-polynomials-and-their-evaluation-9",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "telescoping form Horner's method "
},
{
  "id": "ex-more-telescoping",
  "level": "2",
  "url": "section8_4-recursion.html#ex-more-telescoping",
  "type": "Example",
  "number": "8.4.5",
  "title": "More Telescoping Polynomials.",
  "body": "More Telescoping Polynomials   The telescoping form of is . Using Horner's method, computing the value of requires four multiplications and four additions\/subtractions for any real number .  has the telescoping form .   "
},
{
  "id": "ex-geometric-growth",
  "level": "2",
  "url": "section8_4-recursion.html#ex-geometric-growth",
  "type": "Example",
  "number": "8.4.6",
  "title": "Geometric Growth Sequence.",
  "body": "Geometric Growth Sequence  Define the sequence of numbers by  .  These rules stipulate that each number in the list is 1.08 times the previous number, with the starting number equal to 100. For example   "
},
{
  "id": "ex-fibonacci-sequence",
  "level": "2",
  "url": "section8_4-recursion.html#ex-fibonacci-sequence",
  "type": "Example",
  "number": "8.4.7",
  "title": "The Fibonacci Sequence.",
  "body": "The Fibonacci Sequence Fibonacci Sequence The Fibonacci sequence is the sequence defined by   "
},
{
  "id": "subsec8_4_6-iteration-3",
  "level": "2",
  "url": "section8_4-recursion.html#subsec8_4_6-iteration-3",
  "type": "Table",
  "number": "8.4.8",
  "title": "",
  "body": "       "
},
{
  "id": "ex-geometric-squence-proof",
  "level": "2",
  "url": "section8_4-recursion.html#ex-geometric-squence-proof",
  "type": "Example",
  "number": "8.4.9",
  "title": "Proof of a formula for <span class=\"process-math\">\\(B\\)<\/span>.",
  "body": "Proof of a formula for A formula for the sequence in is for . A proof by induction follow.  If , then , as defined. Now assume that for some , the formula for is true. hence the formula is true for  The formula that we have just proven for is called a closed form expression. It involves no recursion or summation signs.  "
},
{
  "id": "def-closed-form-expression",
  "level": "2",
  "url": "section8_4-recursion.html#def-closed-form-expression",
  "type": "Definition",
  "number": "8.4.10",
  "title": "Closed Form Expression.",
  "body": "Closed Form Expression Closed Form Expression. Let be an algebraic expression involving variables which are allowed to take on values from some predetermined set. is a closed form expression if there exists a number such that the evaluation of with any allowed values of the variables will take no more than operations (alternatively, time units). "
},
{
  "id": "ex-summation-simplifed",
  "level": "2",
  "url": "section8_4-recursion.html#ex-summation-simplifed",
  "type": "Example",
  "number": "8.4.11",
  "title": "Reducing a summation to closed form.",
  "body": "Reducing a summation to closed form The sum is not a closed form expression because the number of additions needed to evaluate grows indefinitely with . A closed form expression that computes the value of is , which only requires operations. "
},
{
  "id": "section8_4-recursion-10-2",
  "level": "2",
  "url": "section8_4-recursion.html#section8_4-recursion-10-2",
  "type": "Exercise",
  "number": "8.4.7.1",
  "title": "",
  "body": " By the recursive definition of binomial coefficients, . Continue expanding to express it in terms of quantities defined by the basis. Check your result by applying the factorial definition of .    "
},
{
  "id": "section8_4-recursion-10-3",
  "level": "2",
  "url": "section8_4-recursion.html#section8_4-recursion-10-3",
  "type": "Exercise",
  "number": "8.4.7.2",
  "title": "",
  "body": "Define the sequence by and for , . Determine and prove by induction that .  "
},
{
  "id": "section8_4-recursion-10-4",
  "level": "2",
  "url": "section8_4-recursion.html#section8_4-recursion-10-4",
  "type": "Exercise",
  "number": "8.4.7.3",
  "title": "",
  "body": "Let .   Write in telescoping form.  Use a calculator to compute using the original form of .  Use a calculator to compute using the telescoping form of .  Compare your speed in parts b and c.    in telescoping form:     "
},
{
  "id": "section8_4-recursion-10-5",
  "level": "2",
  "url": "section8_4-recursion.html#section8_4-recursion-10-5",
  "type": "Exercise",
  "number": "8.4.7.4",
  "title": "",
  "body": "Prove the two definitions of binomials coefficients, and , are equivalent. "
},
{
  "id": "section8_4-recursion-10-6",
  "level": "2",
  "url": "section8_4-recursion.html#section8_4-recursion-10-6",
  "type": "Exercise",
  "number": "8.4.7.5",
  "title": "",
  "body": "What is wrong with the following definition of ? and if .  The basis is not reached in a finite number of steps if you try to compute for a nonzero value of . "
},
{
  "id": "exercise-binomial-sum",
  "level": "2",
  "url": "section8_4-recursion.html#exercise-binomial-sum",
  "type": "Exercise",
  "number": "8.4.7.6",
  "title": "",
  "body": "Prove by induction that if , "
},
{
  "id": "section8_5-Sequences",
  "level": "1",
  "url": "section8_5-Sequences.html",
  "type": "Section",
  "number": "8.5",
  "title": "Sequences",
  "body": " Sequences  Sequences  Sequences and Ways They Are Defined  Sequence Sequence A sequence is a function from the natural numbers into some predetermined set. The image of any natural number can be written as or and is called the  term of . The variable is called the index or argument of the sequence.  For example, a sequence of integers would be a function .  Three sequences defined in different ways   The sequence defined by , , is a sequence of integers.  The sequence defined recursively by and for is a sequence of integers. The terms of can be computed either by applying the recursion formula or by iteration. For example; or   Let be the number of strings of 0's and 1's of length having no consecutive zeros. These terms define a sequence of integers.    Remarks:   A sequence is often called a discrete function .  Although it is important to keep in mind that a sequence is a function, another useful way of visualizing a sequence is as a list. For example, the sequence in the previous example could be written as . Finite sequences can appear much the same way when they are the input to or output from a computer. The index of a sequence can be thought of as a time variable. Imagine the terms of a sequence flashing on a screen every second. Then would be what you see in the second. It is convenient to use terminology like this in describing sequences. For example, the terms that precede the term of would be . They might be called the earlier terms.    A Fundamental Problem  Given the definition of any sequence, a fundamental problem that we will concern ourselves with is to devise a method for determining any specific term in a minimum amount of time. Generally, time can be equated with the number of operations needed. In counting operations, the application of a recursive formula would be considered an operation.   The terms of in are very easy to compute because of the closed form expression. No matter what term you decide to compute, only three operations need to be performed.  How to compute the terms of is not so clear. Suppose that you wanted to know . One approach would be to apply the definition recursively: The recursion equation for would be applied 100 times and 100 additions would then follow. To compute by this method, operations are needed. An iterative computation of is an improvement: Only additions are needed. This still isn't a good situation. As gets large, we take more and more time to compute . The formula is called a recurrence relation on . The process of finding a closed form expression for , one that requires no more than some fixed number of operations, is called solving the recurrence relation.  The determination of is a standard kind of problem in combinatorics. One solution is by way of a recurrence relation. In fact, many problems in combinatorics are most easily solved by first searching for a recurrence relation and then solving it. The following observation will suggest the recurrence relation that we need to determine . If , then every string of 0's and 1's with length and no two consecutive 0's is either or , where and are strings with no two consecutive 0's of length and respectively. From this observation we can see that for . The terms and are easy to determine by enumeration. Now, by iteration, any can be easily determined. For example, can be computed with five additions. A closed form expression for would be an improvement. Note that the recurrence relation for is identical to the one for . Only the basis is different.    Solving different types of recurrence relations for their closed-form solutions is covered in-depth in ICS 241.    Exercises for Section 8.5   Prove by induction that  , is a closed form expression for the sequence in   Basis: , as defined.  Induction: Assume: for some .      Consider sequence defined by , . Complete the table below and determine a recurrence relation that describes .   Let , . Complete the table below and determine a recurrence relation for .     Given lines ( ) on a plane such that no two lines are parallel and no three lines meet at the same point, let be the number of regions into which the lines divide the plane (including the infinite ones (see ). Describe how the recurrence relation can be derived. Given that , determine .   A general configuration of three lines   Illustration of a general configuration of three lines    Imagine drawing line in one of the infinite regions that it passes through. That infinite region is divided into two infinite regions by line . As line is drawn through every one of the previous lines, you enter another region that line divides. Therefore regions are divided and the number of regions is increased by . From this observation we get .   A sample of a radioactive substance is expected to decay by 0.15 percent each hour. If  , is the weight of the sample hours into an experiment, write a recurrence relation for .   Let be the number of multiplications needed to evaluate an degree polynomial. Use the recursive definition of a polynomial expression to define recursively.   For greater than zero, , and .    "
},
{
  "id": "def-sequence",
  "level": "2",
  "url": "section8_5-Sequences.html#def-sequence",
  "type": "Definition",
  "number": "8.5.1",
  "title": "Sequence.",
  "body": "Sequence Sequence A sequence is a function from the natural numbers into some predetermined set. The image of any natural number can be written as or and is called the  term of . The variable is called the index or argument of the sequence. "
},
{
  "id": "ex-three-sequences",
  "level": "2",
  "url": "section8_5-Sequences.html#ex-three-sequences",
  "type": "Example",
  "number": "8.5.2",
  "title": "Three sequences defined in different ways.",
  "body": "Three sequences defined in different ways   The sequence defined by , , is a sequence of integers.  The sequence defined recursively by and for is a sequence of integers. The terms of can be computed either by applying the recursion formula or by iteration. For example; or   Let be the number of strings of 0's and 1's of length having no consecutive zeros. These terms define a sequence of integers.   "
},
{
  "id": "exercises-8-5-2",
  "level": "2",
  "url": "section8_5-Sequences.html#exercises-8-5-2",
  "type": "Exercise",
  "number": "8.5.3.1",
  "title": "",
  "body": " Prove by induction that  , is a closed form expression for the sequence in   Basis: , as defined.  Induction: Assume: for some .   "
},
{
  "id": "exercises-8-5-3",
  "level": "2",
  "url": "section8_5-Sequences.html#exercises-8-5-3",
  "type": "Exercise",
  "number": "8.5.3.2",
  "title": "",
  "body": "  Consider sequence defined by , . Complete the table below and determine a recurrence relation that describes .   Let , . Complete the table below and determine a recurrence relation for .    "
},
{
  "id": "exercises-8-5-4",
  "level": "2",
  "url": "section8_5-Sequences.html#exercises-8-5-4",
  "type": "Exercise",
  "number": "8.5.3.3",
  "title": "",
  "body": "Given lines ( ) on a plane such that no two lines are parallel and no three lines meet at the same point, let be the number of regions into which the lines divide the plane (including the infinite ones (see ). Describe how the recurrence relation can be derived. Given that , determine .   A general configuration of three lines   Illustration of a general configuration of three lines    Imagine drawing line in one of the infinite regions that it passes through. That infinite region is divided into two infinite regions by line . As line is drawn through every one of the previous lines, you enter another region that line divides. Therefore regions are divided and the number of regions is increased by . From this observation we get .  "
},
{
  "id": "exercises-8-5-5",
  "level": "2",
  "url": "section8_5-Sequences.html#exercises-8-5-5",
  "type": "Exercise",
  "number": "8.5.3.4",
  "title": "",
  "body": "A sample of a radioactive substance is expected to decay by 0.15 percent each hour. If  , is the weight of the sample hours into an experiment, write a recurrence relation for .  "
},
{
  "id": "exercises-8-5-6",
  "level": "2",
  "url": "section8_5-Sequences.html#exercises-8-5-6",
  "type": "Exercise",
  "number": "8.5.3.5",
  "title": "",
  "body": "Let be the number of multiplications needed to evaluate an degree polynomial. Use the recursive definition of a polynomial expression to define recursively.   For greater than zero, , and .  "
},
{
  "id": "section8_6-Growth-of-Functions",
  "level": "1",
  "url": "section8_6-Growth-of-Functions.html",
  "type": "Section",
  "number": "8.6",
  "title": "Growth of Functions",
  "body": " Growth of Functions  Growth of Functions    How long will it take to process the company payroll once we complete our planned merger? Should I buy a new payroll program from vendor X or vendor Y? If a particular program is slow, is it badly implemented or is it solving a hard problem?  Questions like these ask us to consider the difficulty of a problem, or the relative efficiency of two or more approaches to solving a problem.  This section and the next introduce the motivation, basic notation, and fundamental techniques of algorithm analysis. In this section we focus on Big O notation a mathematical notation that describes the limiting or asymptotic behavior of a function as the input values become large. In the next section we will use Big O notation to analyze running times of different algorithms using asymptotic algorithm analysis .  Big O Notation Big O Notation    Big O is the most frequently used asymptotic notation. It is often used to give an upper bound on the growth of a function, such as the running time of an algorithm. Big O notation characterizes functions according to their growth rates: different functions with the same growth rate may be represented using the same Big O notation. The letter O is used because the growth rate of a function is also referred to as the order of the function .  Big O  Given functions with non-negative, we say is Big O or: if and only if there exists a constant and a such that for all    This definition is rather complicated, but the idea is simple: means is less than or equal to , except that we’re willing to ignore a constant factor, namely , and to allow exceptions for small , namely, for .   Prove  If we choose and , then holds because for all  .  In the following SageMath cell, we plot , , and with . The resulting plot shows that (red) never exceeds (black dots). That is what we want to show for Big O.    Prove  If we take the polynomial and change it so that all of the constant cofficients are multiplied with we have: It must be true that the original polynomial is less than this new equation: . Therefore, if we choose and we have   In the following SageMath cell, we plot , , and with . The resulting plot shows that (red) never exceeds after (black dots). That is what we want to show for Big O.   Polynomial Big O Theorem Polynomial Big O Theorem  For any polynomial, the degree of the highest order term will be its Big O    Given a polynomial: if we replace all of the lower-order terms with the highest order we have: Therefore, for and .    Prove  If we have negative coefficients in a polynomial, still applies because Big O as defined in is an upper bound on the absolute value of and must be non-negative.  Here we take the absolute value of our polynomial and multipling all of the constant cofficients by we have: Therefore, we have With and .  We can actually get a closer bound if we realize that the is only making the outcome of the polynomial smaller: Therefore, we can also say that for and .  We only need to show that one and one exist to prove Big O. Once they are found, the bound is also true for any larger values of and .  In the following SageMath cell, we plot (red), (blue), and with (black dots). The resulting plot shows that never exceeds after . That is what we want to show for Big O.    Big O of  for . There are terms total. Since , it must be true that: Therefore, with and .   Big O For Common Functional Forms Big O of Common Functions   In we will be using several functions to analyze the running time of algorithms. The most commonly encountered functions are shown in the below.    Growth of functions commonly used for algorithm analysis. Image by Cmglee CC BY-SA 4   Plot showing growth of common functions.  >  In addition to polynomials, we have the following Big O estimates:  Any power of is Big O any larger power of , powers greater than 1:  A logarithm of to a power is Big O any power of , for log bases greater than 1:  Any power of is Big O an exponential in :  Any exponential is Big O an exponential of a larger constant:     Orders of Common Functions  Here is a list of orders (or classes) of functions that are commonly encountered when analyzing algorithms. In each case, is a positive constant and increases without bound. Functions are listed from slowest growing at the top to fastest growing at the bottom.   Notation Name Example   Constant time No looping; Determining if a binary number is even or odd; Calculating    Logarithmic time Loops where is divided by a constant each iteration;  Finding an item in a sorted array with a BinarySearch.   Linear time One loop over all ; Finding an item in an unsorted list or in an unsorted array    Linearithmic time Algorithms that divide by a constant, but then need to reassemble all items in some way;  Fastest possible comparison sort; HeapSort and MergeSort   Quadratic time Two nested loops both over ; Multiplying two -digit numbers by a simple algorithm;  Simple sorting algorithms, such as BubbleSort, SelectionSort, and InsertionSort   Polynomial time  nested loops over ; Matrix multiplication using the standard algorithm.   ,  Exponential time Recursive algorithms that make two or more recursive calls each time;  Determining if two logical statements are equivalent using a truth table ( rows)   Factorial time Solving the travelling salesman problem via brute-force search; enumerating all partitions of a set     to the  Resulting value of      Big O For Combinations of Functions Big O of Function Combinations  The Big O of multiple functions can be combined. If we have a complex function, we can break it down into simpler parts then find the Big O of the simpler functions and combine them.   If two functions are added together, their Big O is the Big O of the larger one. If and :   If two functions are multiplied together, their Big O is the product of the Big O of both. If and :     Big O of  Here we have two functions multiplied together: and . We can calculate the Big O of both separately and combine them.  For the first one applies so we have . For there are no powers or constants so the Big O is just .  Multiplying:    Big O of  Here we have two functions added together: and . We must calculate the Big O of both separately and decide which is largest.  For the first one applies so we have . For , this is an exponential in , so the Big O is just the function itself: . Looking at we can see that grows much faster than the polynomial , therefore   Big Omega Big Omega   This is almost the same definition as Big O, except that Big (Omega) gives a lower bound on the growth of a function or running time of an algorithm. It is used to describe the best case running time for an algorithm on a given data size.   Big  Given functions with non-negative, we say is Big (Omega) or: to mean  if and only if there exists a constant and a such that for all    To prove: we just flip the equation around into Big O form: and find a and where is greater than or equal to .   Big Theta Big Theta   Big (Theta) combines Big O and Big to specify that the growth of a function (or running time of an algorithm) is always equal to some other function plus or minus a constant factor. We take the definitions of both Big O and Big to give both an upper and lower bound. It is used to describe the best and worst case running times for an algorithm on a given data size.   Big  Given functions with non-negative, we say is Big (Theta) or: if and only if: and  means and are equal to within a constant factor.  To prove: we must show for some and and then flip the equation around and show: for some and .  In the following SageMath cell, we plot (red), this is an addition of two functions with the larger one being the exponential , so it should be . We show this by using and plotting both with to show and with to show with black dots. The resulting plot shows that is bounded above by after and it is always bounded below by . That is what we want to show for Big .    Exercises for Section 8.6  Show that is . Find . for all  So is with  So is with Therefore is .  Show that is . Find .  Show that  This is false, because by definition of Big O the equation must be true for all values of , for some value . Therefore   For each pair of functions below, determine whether and whether . If one function is Big O of the other, give values for and .           Determine whether each of the functions: and is by finding a valid and for each, or showing they do not exist.  Therefore is with . Therefore is with .   Arrange these functions into a sequence from smallest to largest Big O                   "
},
{
  "id": "def-big-o",
  "level": "2",
  "url": "section8_6-Growth-of-Functions.html#def-big-o",
  "type": "Definition",
  "number": "8.6.1",
  "title": "Big O.",
  "body": "Big O  Given functions with non-negative, we say is Big O or: if and only if there exists a constant and a such that for all   "
},
{
  "id": "ex-big-o-x-squared",
  "level": "2",
  "url": "section8_6-Growth-of-Functions.html#ex-big-o-x-squared",
  "type": "Example",
  "number": "8.6.2",
  "title": "Prove <span class=\"process-math\">\\(10x^2 = O(x^2)\\)<\/span>.",
  "body": " Prove  If we choose and , then holds because for all  . "
},
{
  "id": "ex-big-o-deg2-poly",
  "level": "2",
  "url": "section8_6-Growth-of-Functions.html#ex-big-o-deg2-poly",
  "type": "Example",
  "number": "8.6.3",
  "title": "Prove <span class=\"process-math\">\\(x^2 + 100x + 10 = O(x^2)\\)<\/span>.",
  "body": " Prove  If we take the polynomial and change it so that all of the constant cofficients are multiplied with we have: It must be true that the original polynomial is less than this new equation: . Therefore, if we choose and we have  "
},
{
  "id": "bigO-of-polynomials",
  "level": "2",
  "url": "section8_6-Growth-of-Functions.html#bigO-of-polynomials",
  "type": "Theorem",
  "number": "8.6.4",
  "title": "Polynomial Big O Theorem.",
  "body": "Polynomial Big O Theorem Polynomial Big O Theorem  For any polynomial, the degree of the highest order term will be its Big O    Given a polynomial: if we replace all of the lower-order terms with the highest order we have: Therefore, for and .  "
},
{
  "id": "ex-big-o-poly-w-neg",
  "level": "2",
  "url": "section8_6-Growth-of-Functions.html#ex-big-o-poly-w-neg",
  "type": "Example",
  "number": "8.6.5",
  "title": "Prove <span class=\"process-math\">\\(6x^4 - 2x^3 + 5 = O(x^4)\\)<\/span>.",
  "body": " Prove  If we have negative coefficients in a polynomial, still applies because Big O as defined in is an upper bound on the absolute value of and must be non-negative.  Here we take the absolute value of our polynomial and multipling all of the constant cofficients by we have: Therefore, we have With and .  We can actually get a closer bound if we realize that the is only making the outcome of the polynomial smaller: Therefore, we can also say that for and .  We only need to show that one and one exist to prove Big O. Once they are found, the bound is also true for any larger values of and . "
},
{
  "id": "ex-big-o-factorial",
  "level": "2",
  "url": "section8_6-Growth-of-Functions.html#ex-big-o-factorial",
  "type": "Example",
  "number": "8.6.6",
  "title": "Big O of <span class=\"process-math\">\\(n!\\)<\/span>",
  "body": " Big O of  for . There are terms total. Since , it must be true that: Therefore, with and . "
},
{
  "id": "fig-big0-common-functions",
  "level": "2",
  "url": "section8_6-Growth-of-Functions.html#fig-big0-common-functions",
  "type": "Figure",
  "number": "8.6.7",
  "title": "",
  "body": " Growth of functions commonly used for algorithm analysis. Image by Cmglee CC BY-SA 4   Plot showing growth of common functions.  > "
},
{
  "id": "table-orders-of-common-functions",
  "level": "2",
  "url": "section8_6-Growth-of-Functions.html#table-orders-of-common-functions",
  "type": "Table",
  "number": "8.6.8",
  "title": "Orders of Common FunctionsHere is a list of orders (or classes) of functions that are commonly encountered when analyzing algorithms.  In each case, <span class=\"process-math\">\\(c\\)<\/span> is a positive constant and <span class=\"process-math\">\\(n\\)<\/span> increases without bound. Functions are listed from slowest growing at the top to fastest growing at the bottom.",
  "body": "Orders of Common Functions  Here is a list of orders (or classes) of functions that are commonly encountered when analyzing algorithms. In each case, is a positive constant and increases without bound. Functions are listed from slowest growing at the top to fastest growing at the bottom.   Notation Name Example   Constant time No looping; Determining if a binary number is even or odd; Calculating    Logarithmic time Loops where is divided by a constant each iteration;  Finding an item in a sorted array with a BinarySearch.   Linear time One loop over all ; Finding an item in an unsorted list or in an unsorted array    Linearithmic time Algorithms that divide by a constant, but then need to reassemble all items in some way;  Fastest possible comparison sort; HeapSort and MergeSort   Quadratic time Two nested loops both over ; Multiplying two -digit numbers by a simple algorithm;  Simple sorting algorithms, such as BubbleSort, SelectionSort, and InsertionSort   Polynomial time  nested loops over ; Matrix multiplication using the standard algorithm.   ,  Exponential time Recursive algorithms that make two or more recursive calls each time;  Determining if two logical statements are equivalent using a truth table ( rows)   Factorial time Solving the travelling salesman problem via brute-force search; enumerating all partitions of a set     to the  Resulting value of    "
},
{
  "id": "ex-big-o-log_poly",
  "level": "2",
  "url": "section8_6-Growth-of-Functions.html#ex-big-o-log_poly",
  "type": "Example",
  "number": "8.6.9",
  "title": "Big O of <span class=\"process-math\">\\(7x^3\\log_{2}x\\)<\/span>.",
  "body": " Big O of  Here we have two functions multiplied together: and . We can calculate the Big O of both separately and combine them.  For the first one applies so we have . For there are no powers or constants so the Big O is just .  Multiplying:  "
},
{
  "id": "ex-big-o-log_plus_poly",
  "level": "2",
  "url": "section8_6-Growth-of-Functions.html#ex-big-o-log_plus_poly",
  "type": "Example",
  "number": "8.6.10",
  "title": "Big O of <span class=\"process-math\">\\(9x^{2} + 3^x\\)<\/span>.",
  "body": " Big O of  Here we have two functions added together: and . We must calculate the Big O of both separately and decide which is largest.  For the first one applies so we have . For , this is an exponential in , so the Big O is just the function itself: . Looking at we can see that grows much faster than the polynomial , therefore "
},
{
  "id": "def-big-omega",
  "level": "2",
  "url": "section8_6-Growth-of-Functions.html#def-big-omega",
  "type": "Definition",
  "number": "8.6.11",
  "title": "Big <span class=\"process-math\">\\(\\Omega\\)<\/span>.",
  "body": "Big  Given functions with non-negative, we say is Big (Omega) or: to mean  if and only if there exists a constant and a such that for all   "
},
{
  "id": "def-big-theta",
  "level": "2",
  "url": "section8_6-Growth-of-Functions.html#def-big-theta",
  "type": "Definition",
  "number": "8.6.12",
  "title": "Big <span class=\"process-math\">\\(\\Theta\\)<\/span>.",
  "body": "Big  Given functions with non-negative, we say is Big (Theta) or: if and only if: and  means and are equal to within a constant factor. "
},
{
  "id": "section8_6-Growth-of-Functions-9-2",
  "level": "2",
  "url": "section8_6-Growth-of-Functions.html#section8_6-Growth-of-Functions-9-2",
  "type": "Exercise",
  "number": "8.6.6.1",
  "title": "",
  "body": "Show that is . Find . for all  So is with  So is with Therefore is . "
},
{
  "id": "section8_6-Growth-of-Functions-9-3",
  "level": "2",
  "url": "section8_6-Growth-of-Functions.html#section8_6-Growth-of-Functions-9-3",
  "type": "Exercise",
  "number": "8.6.6.2",
  "title": "",
  "body": "Show that is . Find . "
},
{
  "id": "section8_6-Growth-of-Functions-9-4",
  "level": "2",
  "url": "section8_6-Growth-of-Functions.html#section8_6-Growth-of-Functions-9-4",
  "type": "Exercise",
  "number": "8.6.6.3",
  "title": "",
  "body": "Show that  This is false, because by definition of Big O the equation must be true for all values of , for some value . Therefore  "
},
{
  "id": "section8_6-Growth-of-Functions-9-5",
  "level": "2",
  "url": "section8_6-Growth-of-Functions.html#section8_6-Growth-of-Functions-9-5",
  "type": "Exercise",
  "number": "8.6.6.4",
  "title": "",
  "body": "For each pair of functions below, determine whether and whether . If one function is Big O of the other, give values for and .          "
},
{
  "id": "section8_6-Growth-of-Functions-9-6",
  "level": "2",
  "url": "section8_6-Growth-of-Functions.html#section8_6-Growth-of-Functions-9-6",
  "type": "Exercise",
  "number": "8.6.6.5",
  "title": "",
  "body": "Determine whether each of the functions: and is by finding a valid and for each, or showing they do not exist.  Therefore is with . Therefore is with .  "
},
{
  "id": "section8_6-Growth-of-Functions-9-7",
  "level": "2",
  "url": "section8_6-Growth-of-Functions.html#section8_6-Growth-of-Functions-9-7",
  "type": "Exercise",
  "number": "8.6.6.6",
  "title": "",
  "body": "Arrange these functions into a sequence from smallest to largest Big O                  "
},
{
  "id": "section9_1-Algorithms",
  "level": "1",
  "url": "section9_1-Algorithms.html",
  "type": "Section",
  "number": "9.1",
  "title": "Introduction to Algorithms",
  "body": " Introduction to Algorithms  Algorithms   Computer programs, bicycle assembly instructions, knitting instructions, and recipes all have several things in common. They all tell us how to do something; and the usual format is as a list of steps or instructions. In addition, they are usually prefaced with a description of the raw materials that are needed (the input) to produce the end result (the output).  We use the term algorithm to describe such lists of instructions. An algorithm is an explicit, precise, unambiguous, mechanically-executable sequence of elementary instructions, usually intended to accomplish a specific purpose. For example, here is an algorithm for singing that annoying song 99 Bottles of Beer on the Wall, for arbitrary numbers of bottles:  BottlesOfBeer   procedure BottlesOfBeer  ( : number of bottles)    For i := n down to 1:     Sing: “i bottles of beer on the wall, i bottles of beer,”     Sing: “Take one down, pass it around, i − 1 bottles of beer on the wall.”    Sing: “No bottles of beer on the wall, no bottles of beer,”    Sing: “Go to the store, buy some more, n bottles of beer on the wall.”       The word algorithm is a corruption of the name of the 9th century Persian mathematician Muhammand ibn Musa al-Khwarizmi. Although they have been a topic of formal academic study for only a few decades, algorithms have been with us since the dawn of civilization. Descriptions of step-by-step arithmetic computation are among the earliest examples of written human language, long predating the works of al-Khwarizmi.  The most familiar method for multiplying large numbers, at least for American students, is the lattice algorithm . This algorithm was popularized by the medieval Italian mathematician and tradesman Leonardo of Pisa, better known as Fibonacci, in his 1202 book Liber Abaci . Fibonacci learned it from Arabic sources including al-Khwarizmi who in turn learned it from Indian sources, who may have learned it from Chinese sources. The oldest surviving descriptions of the algorithm appear in The Mathematical Classic of Sunzi, written in China between the 3rd and 5th centuries, and in Eutocius of Ascalon's commentaries on Archimedes' Measurement of the Circle, written around 500ce, but there is evidence that the algorithm was known much earlier.    Describing Algorithms   The skills required to effectively design and analyze algorithms are entangled with the skills required to effectively describe algorithms. A complete description of an algorithm has four components:   What:  A precise specification of the problem that the algorithm solves.   How:  A precise description of the algorithm itself.   Why: A proof that the algorithm solves the problem it is supposed to solve.   How fast:  An analysis of the running time of the algorithm.    This section and the next will demonstrate ways to specify and describe algorithms and then will introduce some commonly seen algorithms. In we explore ways to analyze the running times of algorithms. Proving algorithmic correctness, the why , is covered in the second semester of Discrete Mathematics.   Most of the algorithms in this book will contain a combination of three kinds of steps: the assignment step, the conditional step, and the loop.  Assignments In order to assign a value to a variable, we use an assignment step, which takes the form: The equals sign in most languages is used for assignment but some languages may use variations such as := or a left pointing arrow. Logical equality, which produces a boolean result and would be used in conditional or looping steps, is most commonly expressed with a double-equals, == .  An example of an assignment is k = n - 1 which tells us to subtract 1 from the value of n and assign that value to variable k . During the execution of an algorithm, a variable may take on only one value at a time. Another example of an assignment is k = k - 1 . This is an instruction to subtract one from the value of k and then reassign that value to k .   Conditional steps  Frequently there are steps that must be performed in an algorithm if and only if a certain condition is met. The conditional or \"if ... then\" step is then employed. For example, suppose that in step 2 of an algorithm we want to assure that the values of variables x and y satisfy the condition x <= y . The following step would accomplish this objective.  An if\/then conditional step.   2. If x > y: 2.1 t = x 2.2 x = y 2.3 y = t    Steps 2.1 through 2.3 would be bypassed if the condition x > y were false before step 2.  One slight variation is the \"if ... then ... else\" step, which allows us to prescribe a step to be taken if the condition is false. For example, if you wanted to exercise today, you might look out the window and execute the following algorithm.  An if\/then\/else conditional step   1. If it is cold or raining: exercise indoors else: go outside and run 2. Rest     Loops  The conditional step tells us to do something once if a logical condition is true. A loop tells us to repeat one or more steps, called the body of the loop, while the logical condition is true. Before every execution of the body, the condition is tested. The following flow diagram serves to illustrate the steps in a while loop.   Flow diagram for a while loop   Flow diagram for a while loop    Suppose you wanted to solve the equation . The following initial assignment and loop could be employed.  A While loop   1. c = your first guess 2. While f(c) != 0: 2.1 c = another guess    Caution: One must always guard against the possibility that the condition of a While loop will never become false. Such \"infinite loops\" are the bane of beginning programmers. The loop above could very well be such a situation, particularly if the equation has no solution, or if the variable takes on real values  In cases where consecutive integer values are to be assigned to a variable, a different loop construction, a For loop, is often employed. For example, suppose we wanted to assign to variable k each of the integer values from m to n and for each of these values perform some undefined steps. We could accomplish this with a While loop:  A While loop from to   1. k := m 2. While k <= n: 2.1 {execute some steps} 2.2 k = k + l    Alternatively, we can perform these steps is with a For loop.  A For loop from to   For k = m to n: {execute some steps}    For loops such as this one have the advantage of being shorter than the equivalent While loop. The While loop construction has the advantage of being able to handle more different situations than the For loop.    The Factorial Algorithm  Functions and algorithms are two very closely related ways to represent processes. In fact, many programming languages use the word function to denote a block of code that defines an algorithm.   The notation , denotes the factorial function. Further explanation is needed to define the process of calculating , such as: where and is a non-negative integer. The factorial algorithm describes step-by-step instructions for calculating when given as input.  Factorial Factorial Algorithm   procedure Factorial  ( : non-negative integer)    prod :    if  :      return 1    else :      for i := n down to 1      prod := prod * i    return prod        Some Common Algorithms  Two tasks that many algorithms have been developed for are searching and sorting on a list of items. This section introduces a few of the more common of these types of algorithms. Additionally, we will discuss a few algorithmic paradigms , different approaches to solving problems algorithmically.   Search Algorithms  The search task involves looking for a particular item in a list of items.   Linear Search  The linear search algorithm must have a list of items and the target item as inputs. There are several ways to format the output, but commonly the output is the target item's location in list if it is found, or some indicator value such as or if the target is not found in the list. Linear Search is an example of a brute force algorithm , it approaches the problem in the most direct way possible, without no attempt at improving efficiency.  The algorithm starts from the beginning of the list of items and compares each item to the target, counting the items as it goes. If the list item is the same as the target item, then the location variable is updated with the count. When it gets to the end of the list, it outputs the value in the location variable.  Let be the item to look for and be the list of items to search.  First, compare with the first item .  If and are equal, set location to 1.  Else, compare with the second item   If and are equal, set location to 2.  Continue until the whole list has been scanned.  Return location value or 0 if no match was found.   Linear Search Linear Search Algorithm   procedure linear search  ( : target; : list of items)    index := 1    location := 0    while index n     if       then loc := index     index := index + 1    return loc         We can make the linear search algorithm more efficient by modifying the loop condition so that the while loop will stop if the target item is found. This eliminates having to continue to compare items if a matching one has been seen.  Smarter Linear Search   procedure faster linear search:  ( : target; : list of items)    index := 1    location := 0    while (index n) and ( )     index := index + 1    if index n     then loc := index    return loc          In the following implementation of the Faster Linear Search in SageMath, we search within a randomly generated list of integers.   Maximum Element Linear Search can be modified to find an item in a list with a specific property. For example, we can modify the algorithm to find the largest item in the list, rather than a specific item of our choosing. To do this we must change how the algorithm compares elements.  The algorithm for finding the maximum element in a list starts from the beginning of the list of items. It compares the first two items and keeps the larger one, then it compares that to the third item again keeping the larger, this continues through the entire list. When it gets to the end of the list, it outputs the value that it has saved. This must be the maximum element in the list.  Let be the largest item seen so far and be the list of items to search.  First, set to the value of the first item, .  Then compare with the second item, , if is larger, set .  Next, compare with the third item, , if is larger, set .  Continue until the whole list has been scanned.  Return the value of .   Maximum Element in a List Maximum Element Algorithm   procedure maximum element:  ( : list of items)    index := 1    maximum :=    while index n     if maximum      then maximum :=     index := index + 1    return maximum         In the following implementation of the Maximum Element in SageMath, we find the maximum of a randomly generated list of integers.     Binary Search The binary search algorithm is a much more efficient way to search for an item in a list than linear search, however, the list to be searched must be put into a sorted order before searching can be done. Binary search is an example of a divide-and-conquer algorithm where the problem is repeatedly divided into smaller problems until solving the problem is very easy. We will come back to see the recursive version of Binary Search in on recursive algorithms. Here we describe the iterative , or looping, version.  The binary search algorithm starts by comparing the item in the middle position of the sorted list to the target. If the middle item is the same as the target item, then the location is returned. If the target is larger than the middle item, the lower half of the list is disregarded, the middle becomes the new start of the list and the target is compared to the item halfway between the new start and the end. If the target is smaller than the middle item, the upper half of the list is disregarded, the middle becomes the new end of the list, and the target is compared to the item halfway between the beginning and the new end. This procedure continues until the target is found or the list is reduced to a single item and that doesn't match the target.   Iterative Binary Search Binary Search Algorithm (Iterative)   procedure binary search  ( : target; : sorted list of items)    loc := -1    begin := 1    end := n    found := FALSE    while (begin end) and (not found)     mid := (begin + end) \/ 2     if       then loc := mid      found := TRUE     else if       then end := mid - 1     else       begin := mid + 1    return loc          In the following implementation of the Iterative Binary Search in SageMath, we search within a sorted list of integers.     Sorting Algorithms  The sorting task involves rearranging a list of items into a sorted order. The development of efficient sorting algorithms has been an important part of theoretical computer science for many years, and there are many different sorting algorithms. In this section we introduce two of the simpler brute-force sorting algorithms.   Bubble Sort Bubble sort is very simple. It runs through the list to be sorted several times, comparing neighboring pairs of items. If the first item is larger than the second, they swap places. Then it moves forward and compares the next pair, and so on. This causes the largest item in the list to bubble down to its correct sorted position at the end of the list in the first pass through to list. In the next pass through the list, the second largest item will end up in its correct sorted position (second from the end). In the third pass, the third largest item will be in its sorted position, and so on. Each time the algorithm passes through the list, it can stop looking for swaps sooner, when it gets to the previously placed items. The algorithm has to make almost as many passes through the list as there are items in it. In each pass execept the last, only one item is guaranteed to be put into its correct position. In the final pass, the last two smallest items are correctly placed because there are only two positions left at that point. The algorithm finishes after making passes through the list, if is the length of the list it sorted.   Bubble Sort Bubble Sort Algorithm   procedure bubble sort  ( : list of items)    end := n     for (i = 0 to (end - 1))     for (j = 0 to (end-i-1))      if  swap them    return list          In the following implementation of Bubble Sort in SageMath, we sort a randomized list of integers.     Insertion Sort Insertion sort works by keeping the list it is sorting in two sections, sorted and unsorted. It starts with the just the first item in the list as the sorted part and the whole rest unsorted. It then puts the second item in sorted order with the first by swapping places if the second is smaller than the first. Now the sorted part is two items long and the rest is unsorted. Then it takes the third item and puts it in its correct position in the sorted part by shifting any larger items over to make room for that item. Then it moves the sorted\/unsorted boundary over. This is repeated until the whole list is included in the sorted part.   Insertion Sort Insertion Sort Algorithm   procedure insertion sort  ( : list of items)    end := n     for (i = 1 to end)    j := i      while (j > 0) and ( )      swap  and       j:= j - 1     i := i + 1     return list          In the following implementation of Insertion Sort in SageMath, we sort a randomized list of integers.     Greedy Algorithms An optimization problem is where the task is to minimize or maximize some value over a whole range of possibilities. Problems such as finding a delivery route with the shortest mileage or making a schedule of classes using the fewest number of classrooms or predicting the most probable winner in an election are all optimization problems. These kinds of problems are hard to solve algorithmically because the number of possibilities can become unmanageable.  Greedy algorithms are one type of approach to optimization problems. A greedy algorithm doesn't try to solve the overall problem in an optimal way, instead it makes the best choice it can at each step towards a solution. Often, greedy algorithms are remarkably accurate and efficient. Many optimization tasks are so difficult that a greedy algorithm is the only known way to compute an answer, as we will see in ICS 241.  Greedy Change Making Algorithm Say we want to develop an algorithm for an automated change machine. How can we program our machine to return any amount of change with the fewest number of coins possible? This is a simple optimization problem. We don't want to approach this in a brute force manner where our machine would have to figure out all possible combinations of coins and then choose the one that requires the least coins. Instead we will use a greedy method.  In the greedy paradigm we want our machine to make the best choice at each step. In this case, that will mean always adding the largest value coin possible to the change without exceeding the amount remaining to return.  If the machine can hold quarters, dimes, nickels, and pennies we will make a sorted list holding their values from high to low: and another list holding the coin types in the same order {quarter, dime, nickel, penny}. These will be the and values below and would be 4.   Greedy Change Making Greedy Change Making Algorithm   procedure makeChange  ( : change amount; : list of coin values; : list of coin types)    for (i = 1 to n)     while ( )      give coin of type       x := x -        In the following implementation of the Greedy Change Making algorithm in SageMath the coins it would return are printed out.       Exercises for Section 9.1   Describe, in words, what the following algorithm does:   Alg1  ( : positive integer)       while  :             return       This algorithm calculates the sum of the first positive integers: .  Describe in words what the following algorithm does:   Alg2  ( : positive integer)          while  is even             return        Write in pseudocode an algorithm that finds the largest and smallest elements in a list of integers of length and returns the sum of those two.    LargestAndSmallest  ( : list of integers)             while  :     if  :          if  :              return        Write in pseudocode an algorithm for finding the average of the elements in a list of integers of length .   Write a complete trace of bubble sort on the list [6, 2, 3, 1, 5, 4] showing the lists obtained at each step (each change in values of and ).    1. [6 2 3 1 5 4]  Before anything happens \\\\  2. [2 6 3 1 5 4]  , so swap \\\\  3. [2 3 6 1 5 4]  , so swap \\\\  4. [2 3 1 6 5 4]  , so swap \\\\  5. [2 3 1 5 6 4]  , so swap \\\\  6. [2 3 1 5 4 6]  , so swap \\\\  7. [2 1 3 5 4 6]  , so skip. , so swap. \\\\  8. [2 1 3 4 5 6]  , so skip. , so swap. \\\\  9. [1 2 3 4 5 6]  , so skip. , so swap. \\\\  The remaining passes won't swap anything since the list is now sorted.   Write a complete trace of insertion sort on the list [6, 2, 3, 1, 5, 4] showing the lists obtained at each step (each change in values of and ).    "
},
{
  "id": "alg-99-bottles",
  "level": "2",
  "url": "section9_1-Algorithms.html#alg-99-bottles",
  "type": "Algorithm",
  "number": "9.1.1",
  "title": "BottlesOfBeer.",
  "body": "BottlesOfBeer   procedure BottlesOfBeer  ( : number of bottles)    For i := n down to 1:     Sing: “i bottles of beer on the wall, i bottles of beer,”     Sing: “Take one down, pass it around, i − 1 bottles of beer on the wall.”    Sing: “No bottles of beer on the wall, no bottles of beer,”    Sing: “Go to the store, buy some more, n bottles of beer on the wall.”      "
},
{
  "id": "subsubsec9_1_1_2-conditionalstep-3",
  "level": "2",
  "url": "section9_1-Algorithms.html#subsubsec9_1_1_2-conditionalstep-3",
  "type": "Listing",
  "number": "9.1.2",
  "title": "",
  "body": "An if\/then conditional step.   2. If x > y: 2.1 t = x 2.2 x = y 2.3 y = t   "
},
{
  "id": "subsubsec9_1_1_2-conditionalstep-6",
  "level": "2",
  "url": "section9_1-Algorithms.html#subsubsec9_1_1_2-conditionalstep-6",
  "type": "Listing",
  "number": "9.1.3",
  "title": "",
  "body": "An if\/then\/else conditional step   1. If it is cold or raining: exercise indoors else: go outside and run 2. Rest   "
},
{
  "id": "fig-while-flow",
  "level": "2",
  "url": "section9_1-Algorithms.html#fig-while-flow",
  "type": "Figure",
  "number": "9.1.4",
  "title": "",
  "body": " Flow diagram for a while loop   Flow diagram for a while loop   "
},
{
  "id": "subsubsec9_1_1_3-loops-5",
  "level": "2",
  "url": "section9_1-Algorithms.html#subsubsec9_1_1_3-loops-5",
  "type": "Listing",
  "number": "9.1.5",
  "title": "",
  "body": "A While loop   1. c = your first guess 2. While f(c) != 0: 2.1 c = another guess   "
},
{
  "id": "subsubsec9_1_1_3-loops-8",
  "level": "2",
  "url": "section9_1-Algorithms.html#subsubsec9_1_1_3-loops-8",
  "type": "Listing",
  "number": "9.1.6",
  "title": "",
  "body": "A While loop from to   1. k := m 2. While k <= n: 2.1 {execute some steps} 2.2 k = k + l   "
},
{
  "id": "subsubsec9_1_1_3-loops-10",
  "level": "2",
  "url": "section9_1-Algorithms.html#subsubsec9_1_1_3-loops-10",
  "type": "Listing",
  "number": "9.1.7",
  "title": "",
  "body": "A For loop from to   For k = m to n: {execute some steps}   "
},
{
  "id": "alg-factorial",
  "level": "2",
  "url": "section9_1-Algorithms.html#alg-factorial",
  "type": "Algorithm",
  "number": "9.1.8",
  "title": "Factorial.",
  "body": "Factorial Factorial Algorithm   procedure Factorial  ( : non-negative integer)    prod :    if  :      return 1    else :      for i := n down to 1      prod := prod * i    return prod      "
},
{
  "id": "subsec9_1_3-some-common-algorithms-2-1",
  "level": "2",
  "url": "section9_1-Algorithms.html#subsec9_1_3-some-common-algorithms-2-1",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "algorithmic paradigms "
},
{
  "id": "alg-linear-search",
  "level": "2",
  "url": "section9_1-Algorithms.html#alg-linear-search",
  "type": "Algorithm",
  "number": "9.1.9",
  "title": "Linear Search.",
  "body": "Linear Search Linear Search Algorithm   procedure linear search  ( : target; : list of items)    index := 1    location := 0    while index n     if       then loc := index     index := index + 1    return loc        "
},
{
  "id": "alg-linear-search2",
  "level": "2",
  "url": "section9_1-Algorithms.html#alg-linear-search2",
  "type": "Algorithm",
  "number": "9.1.10",
  "title": "Smarter Linear Search.",
  "body": "Smarter Linear Search   procedure faster linear search:  ( : target; : list of items)    index := 1    location := 0    while (index n) and ( )     index := index + 1    if index n     then loc := index    return loc        "
},
{
  "id": "alg-max-element",
  "level": "2",
  "url": "section9_1-Algorithms.html#alg-max-element",
  "type": "Algorithm",
  "number": "9.1.11",
  "title": "Maximum Element in a List.",
  "body": "Maximum Element in a List Maximum Element Algorithm   procedure maximum element:  ( : list of items)    index := 1    maximum :=    while index n     if maximum      then maximum :=     index := index + 1    return maximum        "
},
{
  "id": "alg-iterative-binary-search",
  "level": "2",
  "url": "section9_1-Algorithms.html#alg-iterative-binary-search",
  "type": "Algorithm",
  "number": "9.1.12",
  "title": "Iterative Binary Search.",
  "body": "Iterative Binary Search Binary Search Algorithm (Iterative)   procedure binary search  ( : target; : sorted list of items)    loc := -1    begin := 1    end := n    found := FALSE    while (begin end) and (not found)     mid := (begin + end) \/ 2     if       then loc := mid      found := TRUE     else if       then end := mid - 1     else       begin := mid + 1    return loc        "
},
{
  "id": "alg-bubble-sort",
  "level": "2",
  "url": "section9_1-Algorithms.html#alg-bubble-sort",
  "type": "Algorithm",
  "number": "9.1.13",
  "title": "Bubble Sort.",
  "body": "Bubble Sort Bubble Sort Algorithm   procedure bubble sort  ( : list of items)    end := n     for (i = 0 to (end - 1))     for (j = 0 to (end-i-1))      if  swap them    return list        "
},
{
  "id": "alg-insertion-sort",
  "level": "2",
  "url": "section9_1-Algorithms.html#alg-insertion-sort",
  "type": "Algorithm",
  "number": "9.1.14",
  "title": "Insertion Sort.",
  "body": "Insertion Sort Insertion Sort Algorithm   procedure insertion sort  ( : list of items)    end := n     for (i = 1 to end)    j := i      while (j > 0) and ( )      swap  and       j:= j - 1     i := i + 1     return list        "
},
{
  "id": "subsubsec9_1_3_3-greedy-algorithms-2",
  "level": "2",
  "url": "section9_1-Algorithms.html#subsubsec9_1_3_3-greedy-algorithms-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "optimization problem "
},
{
  "id": "alg-greedy-change",
  "level": "2",
  "url": "section9_1-Algorithms.html#alg-greedy-change",
  "type": "Algorithm",
  "number": "9.1.15",
  "title": "Greedy Change Making.",
  "body": "Greedy Change Making Greedy Change Making Algorithm   procedure makeChange  ( : change amount; : list of coin values; : list of coin types)    for (i = 1 to n)     while ( )      give coin of type       x := x -       "
},
{
  "id": "exercises-9-1-2",
  "level": "2",
  "url": "section9_1-Algorithms.html#exercises-9-1-2",
  "type": "Exercise",
  "number": "9.1.4.1",
  "title": "",
  "body": "Describe, in words, what the following algorithm does:   Alg1  ( : positive integer)       while  :             return       This algorithm calculates the sum of the first positive integers: . "
},
{
  "id": "exercises-9-1-3",
  "level": "2",
  "url": "section9_1-Algorithms.html#exercises-9-1-3",
  "type": "Exercise",
  "number": "9.1.4.2",
  "title": "",
  "body": "Describe in words what the following algorithm does:   Alg2  ( : positive integer)          while  is even             return       "
},
{
  "id": "exercises-9-1-4",
  "level": "2",
  "url": "section9_1-Algorithms.html#exercises-9-1-4",
  "type": "Exercise",
  "number": "9.1.4.3",
  "title": "",
  "body": "Write in pseudocode an algorithm that finds the largest and smallest elements in a list of integers of length and returns the sum of those two.    LargestAndSmallest  ( : list of integers)             while  :     if  :          if  :              return       "
},
{
  "id": "exercises-9-1-5",
  "level": "2",
  "url": "section9_1-Algorithms.html#exercises-9-1-5",
  "type": "Exercise",
  "number": "9.1.4.4",
  "title": "",
  "body": "Write in pseudocode an algorithm for finding the average of the elements in a list of integers of length .  "
},
{
  "id": "exercises-9-1-6",
  "level": "2",
  "url": "section9_1-Algorithms.html#exercises-9-1-6",
  "type": "Exercise",
  "number": "9.1.4.5",
  "title": "",
  "body": "Write a complete trace of bubble sort on the list [6, 2, 3, 1, 5, 4] showing the lists obtained at each step (each change in values of and ).    1. [6 2 3 1 5 4]  Before anything happens \\\\  2. [2 6 3 1 5 4]  , so swap \\\\  3. [2 3 6 1 5 4]  , so swap \\\\  4. [2 3 1 6 5 4]  , so swap \\\\  5. [2 3 1 5 6 4]  , so swap \\\\  6. [2 3 1 5 4 6]  , so swap \\\\  7. [2 1 3 5 4 6]  , so skip. , so swap. \\\\  8. [2 1 3 4 5 6]  , so skip. , so swap. \\\\  9. [1 2 3 4 5 6]  , so skip. , so swap. \\\\  The remaining passes won't swap anything since the list is now sorted.  "
},
{
  "id": "exercises-9-1-7",
  "level": "2",
  "url": "section9_1-Algorithms.html#exercises-9-1-7",
  "type": "Exercise",
  "number": "9.1.4.6",
  "title": "",
  "body": "Write a complete trace of insertion sort on the list [6, 2, 3, 1, 5, 4] showing the lists obtained at each step (each change in values of and ).  "
},
{
  "id": "section9_2-Recursive_Algorithms",
  "level": "1",
  "url": "section9_2-Recursive_Algorithms.html",
  "type": "Section",
  "number": "9.2",
  "title": "Recursive Algorithms",
  "body": " Recursive Algorithms  Recursive Algorithms    In order to understand recursion, you must first understand recursion.   Recursion is the concept where an object (such as a function, a set, or an algorithm) is defined in the following way:  There are one or more base cases.  There are one or more rules that define an object in terms of smaller objects that have already been defined.  We have already seen recursive functions and set definitions in . In this section we will see several examples of recursive algorithms.  The previous section starts with an algorithm for singing 99 Bottles of Beer on the Wall . We can redefine that as a recursive algorithm: RecursiveBottlesOfBeer   procedure RecursiveBottlesOfBeer  ( : number of bottles)    If n = 0:     Sing: “No bottles of beer on the wall, no bottles of beer,”     Sing: “Go to the store, buy some more, n bottles of beer on the wall.”    Else:      Sing: “n bottles of beer on the wall, n bottles of beer,”     Sing: “Take one down, pass it around, n − 1 bottles of beer on the wall.”     RecursiveBottlesOfBeer (n-1)      This has all the hallmarks of a recursive algorithm, the loop in the non-recursive version is gone and replaced with a recursive case: the call to RecursiveBottlesOfBeer with a smaller input (n - 1). The base case is where no bottles of beer are left, n = 0, a different verse is sung and there is no recursive call, the recursion stops.    Euclid's Algorithm Euclid's Algorithm  We might call Euclid's method the granddaddy of all algorithms, because it is the oldest nontrivial algorithm that has survived to the present day Donald E. Knuth, The Art of Computer Programming, Vol. 2, 1997 . The greatest common divisor of two integers and is the largest integer that divides both and . We denote this largest integer by . For example, the common divisors of and are , , , and . Since is the largest among them, . Observe that, for any integer , .  Assume we are given two large integers and , say and . How can we compute their greatest common divisor? One approach is to determine the prime factorizations of and : and From this, we see that  Unfortunately, an efficient algorithm is not known for obtaining the prime factorization of a very large integer. As a result, this approach to compute the greatest common divisor of two large integers is not good.  Around 300 BC, Euclid published an algorithm that is both very simple and efficient. This algorithm is based on the modulo or mod operation, which we introduce first.  The Modulo Operation Modulo Operation  Let and be integers. If we divide by , then we obtain a quotient  and a remainder  , which are the unique integers that satisfy The modulo operation, denoted by , is the function that maps the pair to the remainder . Thus, we will write  For example,  , because ,  , because ,  , because ,  , because .    The Euclidean Algorithm Euclid's Algorithm  Euclid's algorithm takes as input two positive integers and , where , and returns .  The algorithm starts by computing and stores the result in a variable~ . If , then the algorithm returns the value . Otherwise, we have , in which case the algorithm recursively computes the greatest common divisor of and . The algorithm is presented in pseudocode below.  Euclid's GCD Algorithm   procedure Euclid  ( : integers with )   ;    if  :     return:      else:     Euclid         Let us look at an example. If we run Euclid(75,45), then the algorithm computes , which is . Then, it runs Euclid(45,30), during which the algorithm computes , which is . Next, it runs Euclid(30,15), during which the algorithm computes , which is . At this moment, the algorithm returns , which is indeed the greatest common divisor of the input values and .  In the following implementation of Euclid's Algorithm in SageMath, we repeat the process of finding Euclid(75,45).      Recursive Searching Recursive Searching  Most algorithms with tasks that are repeated in a loop can be defined recursively. Recursive algorithms have the advantage of less complex definitions leading to shorter computer programs, however as we will see in this sometimes comes with poor execution efficiency leading to drastically slower running times.  Recursive Linear Search  We can make our Linear Search algorithm from recursive by replacing the while loop with a recursive call. We must add an input to keep track of the location to look at in the list. There are two base cases: the not found case where the entire list has been searched; and the found case where the target is found at the current location. Both base cases return a value, either the location of the found target or 0 to indicate it is not in the list. The recursive case returns the result of a recursive call with the location moved forward by one.  Recursive Linear Search   procedure recursive_linear_search:  ( : target; : list of items; : location, starts at 1)    If  :     return: 0    Else If :     return: loc    Else:      return recursive_linear_search( ; ; )        In the following implementation of the Recursive Linear Search in SageMath, we search within the same randomly generated list of integers as Linear Search in the previous section. Printouts have been added to show the pattern of recursive calls.   Recursive Maximum Element Similarly to Linear Search, the Maximum Element algorithm can be made recursive. In this task the algorithm must examine every element in the list, so there is only one base case: when the end of the list is reached. An input must be added to keep track of the maximum element between recursive calls. The recursive case is almost identical to Linear Search, it just moves the process to the next list element.  Recursive Maximum Element Recursive Maximum Element Algorithm   procedure RecursiveMaximumElement:  ( : list of items; : location, starts at 1; : largest element seen)    if  :     return: max    else:      if loc = 1      then max :=     else if max      then max :=     return RecursiveMaximumElement( ; ; ; max)       In the following implementation of Recursive Maximum Element in SageMath, we find the maximum of a randomly generated list of integers.    Recursive Binary Search  Unlike the two algorithms above, Binary Search is more commonly implemented as a recursive algorithm. The recursive version we present here is the most common definition.  There are two base cases. The first base case is when all possible elements have been compared and the target is not found. This occurs when the begin position is greater than the end position, no elements are left to examine so -1 is returned. The second base case is when the target is found, the middle element is equal to the target and the location of that middle element is returned. There are also two recursive cases, one for if the target is larger than the middle element and one for if the target is smaller than the middle element. If the target is larger than the middle, the recursive call will look at the upper half of the remaining list, if the target is smaller than the middle element, the other recursive call looks at the lower half of the remaining list.   Recursive Binary Search Binary Search Algorithm (Recursive)   procedure BinarySearch  ( : target; : sorted list of items; begin: pos; end: pos)    mid := (begin + end) \/ 2    if begin > end:     return -1    else if       return mid    else if  :     return BinarySearch ( ; ; begin; mid-1)    else { }     return BinarySearch ( ; ; (mid+1); end)        In the following implementation of the Binary Search in SageMath, we search within a sorted list of integers. Extra printouts of the list being considered at each step have been added. The end position is the length of the list - 1 because of 0 indexing.     Recursive Sorting Recursive Sorting  The sorting algorithms in the previous section are not usually implemented recursively so we will not present recursive versions here. However, there are many recursive sorting algorithms that are considered more efficient than those we have already seen. One recursive sorting algorithm is Merge Sort.  Merge Sort  Merge Sort is a recursive sorting algorithm that works as follows. To sort the sequence of numbers ,  it recursively sorts the first half of the sequence , where , and stores the sorted sequence in a list ,  it recursively sorts the second half of the sequence and stores the sorted sequence in a list ,  it merges the two sorted lists and into one sorted list.    The MergeSort process is visualized in the image below:  Merge Sort Diagram. VineetKumar at English Wikipedia [Public domain], via Wikimedia Commons   Diagram showing splits and merges of Merge Sort   Below, you see this recursive algorithm in pseudocode.   Merge Sort Merge Sort Algorithm   procedure MergeSort  ( : list of items; : length of list)    if  :          list consisting of the first elements of     list consisting of the last elements of                  return          We still have to specify the non-recursive algorithm . Of course, this algorithm uses the fact that both and are sorted lists. The task is to merge two sorted lists into one sorted list.  This is done in the following way. Initialize an empty list . (At the end, this list will contain the final sorted sequence.)   Let be the first element of and let be the first element of .  If , then remove from and append it to (i.e., add at the end of ).  Otherwise (i.e., if ), remove from and append it to .  Repeat these steps until one of and is empty. If is empty, then append to . Otherwise, append to . Here is the algorithm in pseudocode:   Merge Merge Algorithm   procedure Merge  ( : sorted list of items; : sorted list of items)     empty list    while  not empty and not empty:      first element of ;     first element of ;     if  :      remove from ;      append to     else :      remove from ;      append to    if is empty:     append to    else     append to    return           Correctness of Algorithm MergeSort  I hope you are convinced that the output of algorithm is a sorted list that contains all elements of and (and no other elements). How do we prove that algorithm is correct, i.e., correctly sorts the elements in any list of numbers? Since the algorithm is recursive, we prove this by induction.  The two base cases are when or . It follows from the pseudocode for that it simply returns the input list , which is obviously sorted.  Let and assume that for any integer with and for any list of numbers, algorithm returns a list containing the elements of in sorted order. Let be a list of numbers. By going through the pseudocode for , we observe the following:   The recursive call is on a list with less than numbers. Therefore, by the induction hypothesis, its output, which is the list , is sorted.  The recursive call is on a list with less than numbers. Again by the induction hypothesis, its output, which is the list , is sorted.  Algorithm gets as input the two sorted lists and , and returns a list . Since algorithm is correct, it then follows that is a sorted list.   It follows that the final list , which is returned by algorithm , is sorted.  This proves the correctness of algorithm for any integer and any list of numbers.    Exercises for Section 9.2   Consider a recursive algorithm for computing the factorial function ( )   Recursive Factorial Factorial Algorithm (Recursive)   procedure RecursiveFactorial  ( : non-negative integer)    if  :      return 1    else :      return n * RecursiveFactorial        Make a trace of the recursive calls for RecursiveFactorial(3)  For RecursiveFactorial(3), how many times will the base case be executed?     FACTORIAL(3) return 3 * FACTORIAL(2) return 2 * FACTORIAL(1) return 1 * FACTORIAL(0) FACTORIAL(3) return 3 * FACTORIAL(2) return 2 * FACTORIAL(1) return 1 * 1 FACTORIAL(3) return 3 * FACTORIAL(2) return 2 * 1 FACTORIAL(3) return 3 * 2  The base case will only execute once.     Consider the recursive implementation of the Fibonacci sequence:   Recursive Fibonacci Fibonacci Algorithm (Recursive)   procedure RecursiveFibonacci  ( : non-negative integer)    if  :      return 1    else if  :      return 1    else :      return RecursiveFibonacci + RecursiveFibonacci        Make a trace of the recursive calls for RecursiveFibonacci(5)  For RecursiveFibonacci(5), how many times will the base case be executed?   Write in pseudocode a recursive algorithm that finds the sum of all of the elements in a list of integers of length .     procedure RecursiveSum:  ( : list of items; : location, starts at 1)    if  :     return:      else:      return a_{loc} + RecursiveSum( ; )       Write in pseudocode a recursive algorithm that finds the sum of all of the first positive integers.   Write a complete trace of binary search for 6 on the list [1, 2, 3, 4, 5, 6, 7 , 8 , 9] showing the lists obtained and the values of begin , end , and mid at each step.    list:[1, 2, 3, 4, 5, 6, 7, 8, 9], begin= 0, end = 8, mid = 4  list:[6, 7, 8, 9], begin= 5, end = 8, mid = 6  list:[6, 7], begin= 5, end = 6, mid = 5  found at 5    Write a complete trace of merge sort on the list [6, 2, 3, 1, 5, 4] showing the lists obtained at each step. Make sure to show the order in which the splits and merges occur (not like ).    "
},
{
  "id": "alg-99-bottles-recursive",
  "level": "2",
  "url": "section9_2-Recursive_Algorithms.html#alg-99-bottles-recursive",
  "type": "Algorithm",
  "number": "9.2.1",
  "title": "RecursiveBottlesOfBeer.",
  "body": "RecursiveBottlesOfBeer   procedure RecursiveBottlesOfBeer  ( : number of bottles)    If n = 0:     Sing: “No bottles of beer on the wall, no bottles of beer,”     Sing: “Go to the store, buy some more, n bottles of beer on the wall.”    Else:      Sing: “n bottles of beer on the wall, n bottles of beer,”     Sing: “Take one down, pass it around, n − 1 bottles of beer on the wall.”     RecursiveBottlesOfBeer (n-1)      "
},
{
  "id": "alg-euclid",
  "level": "2",
  "url": "section9_2-Recursive_Algorithms.html#alg-euclid",
  "type": "Algorithm",
  "number": "9.2.2",
  "title": "Euclid’s GCD Algorithm.",
  "body": "Euclid's GCD Algorithm   procedure Euclid  ( : integers with )   ;    if  :     return:      else:     Euclid        "
},
{
  "id": "alg-recursive-linear-search",
  "level": "2",
  "url": "section9_2-Recursive_Algorithms.html#alg-recursive-linear-search",
  "type": "Algorithm",
  "number": "9.2.3",
  "title": "Recursive Linear Search.",
  "body": "Recursive Linear Search   procedure recursive_linear_search:  ( : target; : list of items; : location, starts at 1)    If  :     return: 0    Else If :     return: loc    Else:      return recursive_linear_search( ; ; )      "
},
{
  "id": "alg-recursive_max-element",
  "level": "2",
  "url": "section9_2-Recursive_Algorithms.html#alg-recursive_max-element",
  "type": "Algorithm",
  "number": "9.2.4",
  "title": "Recursive Maximum Element.",
  "body": "Recursive Maximum Element Recursive Maximum Element Algorithm   procedure RecursiveMaximumElement:  ( : list of items; : location, starts at 1; : largest element seen)    if  :     return: max    else:      if loc = 1      then max :=     else if max      then max :=     return RecursiveMaximumElement( ; ; ; max)      "
},
{
  "id": "alg-recursive-binary-search",
  "level": "2",
  "url": "section9_2-Recursive_Algorithms.html#alg-recursive-binary-search",
  "type": "Algorithm",
  "number": "9.2.5",
  "title": "Recursive Binary Search.",
  "body": "Recursive Binary Search Binary Search Algorithm (Recursive)   procedure BinarySearch  ( : target; : sorted list of items; begin: pos; end: pos)    mid := (begin + end) \/ 2    if begin > end:     return -1    else if       return mid    else if  :     return BinarySearch ( ; ; begin; mid-1)    else { }     return BinarySearch ( ; ; (mid+1); end)      "
},
{
  "id": "subsec9_2_2-recursive-searching-8-5-1",
  "level": "2",
  "url": "section9_2-Recursive_Algorithms.html#subsec9_2_2-recursive-searching-8-5-1",
  "type": "Note",
  "number": "9.2.6",
  "title": "",
  "body": "The end position is the length of the list - 1 because of 0 indexing. "
},
{
  "id": "fig-merge-sort",
  "level": "2",
  "url": "section9_2-Recursive_Algorithms.html#fig-merge-sort",
  "type": "Figure",
  "number": "9.2.7",
  "title": "",
  "body": "Merge Sort Diagram. VineetKumar at English Wikipedia [Public domain], via Wikimedia Commons   Diagram showing splits and merges of Merge Sort  "
},
{
  "id": "alg-merge-sort",
  "level": "2",
  "url": "section9_2-Recursive_Algorithms.html#alg-merge-sort",
  "type": "Algorithm",
  "number": "9.2.8",
  "title": "Merge Sort.",
  "body": "Merge Sort Merge Sort Algorithm   procedure MergeSort  ( : list of items; : length of list)    if  :          list consisting of the first elements of     list consisting of the last elements of                  return        "
},
{
  "id": "alg-merge",
  "level": "2",
  "url": "section9_2-Recursive_Algorithms.html#alg-merge",
  "type": "Algorithm",
  "number": "9.2.9",
  "title": "Merge.",
  "body": "Merge Merge Algorithm   procedure Merge  ( : sorted list of items; : sorted list of items)     empty list    while  not empty and not empty:      first element of ;     first element of ;     if  :      remove from ;      append to     else :      remove from ;      append to    if is empty:     append to    else     append to    return        "
},
{
  "id": "section9_2-Recursive_Algorithms-7-2",
  "level": "2",
  "url": "section9_2-Recursive_Algorithms.html#section9_2-Recursive_Algorithms-7-2",
  "type": "Exercise",
  "number": "9.2.4.1",
  "title": "",
  "body": " Consider a recursive algorithm for computing the factorial function ( )   Recursive Factorial Factorial Algorithm (Recursive)   procedure RecursiveFactorial  ( : non-negative integer)    if  :      return 1    else :      return n * RecursiveFactorial        Make a trace of the recursive calls for RecursiveFactorial(3)  For RecursiveFactorial(3), how many times will the base case be executed?     FACTORIAL(3) return 3 * FACTORIAL(2) return 2 * FACTORIAL(1) return 1 * FACTORIAL(0) FACTORIAL(3) return 3 * FACTORIAL(2) return 2 * FACTORIAL(1) return 1 * 1 FACTORIAL(3) return 3 * FACTORIAL(2) return 2 * 1 FACTORIAL(3) return 3 * 2  The base case will only execute once.   "
},
{
  "id": "section9_2-Recursive_Algorithms-7-3",
  "level": "2",
  "url": "section9_2-Recursive_Algorithms.html#section9_2-Recursive_Algorithms-7-3",
  "type": "Exercise",
  "number": "9.2.4.2",
  "title": "",
  "body": " Consider the recursive implementation of the Fibonacci sequence:   Recursive Fibonacci Fibonacci Algorithm (Recursive)   procedure RecursiveFibonacci  ( : non-negative integer)    if  :      return 1    else if  :      return 1    else :      return RecursiveFibonacci + RecursiveFibonacci        Make a trace of the recursive calls for RecursiveFibonacci(5)  For RecursiveFibonacci(5), how many times will the base case be executed?  "
},
{
  "id": "section9_2-Recursive_Algorithms-7-4",
  "level": "2",
  "url": "section9_2-Recursive_Algorithms.html#section9_2-Recursive_Algorithms-7-4",
  "type": "Exercise",
  "number": "9.2.4.3",
  "title": "",
  "body": "Write in pseudocode a recursive algorithm that finds the sum of all of the elements in a list of integers of length .     procedure RecursiveSum:  ( : list of items; : location, starts at 1)    if  :     return:      else:      return a_{loc} + RecursiveSum( ; )      "
},
{
  "id": "section9_2-Recursive_Algorithms-7-5",
  "level": "2",
  "url": "section9_2-Recursive_Algorithms.html#section9_2-Recursive_Algorithms-7-5",
  "type": "Exercise",
  "number": "9.2.4.4",
  "title": "",
  "body": "Write in pseudocode a recursive algorithm that finds the sum of all of the first positive integers.  "
},
{
  "id": "section9_2-Recursive_Algorithms-7-6",
  "level": "2",
  "url": "section9_2-Recursive_Algorithms.html#section9_2-Recursive_Algorithms-7-6",
  "type": "Exercise",
  "number": "9.2.4.5",
  "title": "",
  "body": "Write a complete trace of binary search for 6 on the list [1, 2, 3, 4, 5, 6, 7 , 8 , 9] showing the lists obtained and the values of begin , end , and mid at each step.    list:[1, 2, 3, 4, 5, 6, 7, 8, 9], begin= 0, end = 8, mid = 4  list:[6, 7, 8, 9], begin= 5, end = 8, mid = 6  list:[6, 7], begin= 5, end = 6, mid = 5  found at 5   "
},
{
  "id": "section9_2-Recursive_Algorithms-7-7",
  "level": "2",
  "url": "section9_2-Recursive_Algorithms.html#section9_2-Recursive_Algorithms-7-7",
  "type": "Exercise",
  "number": "9.2.4.6",
  "title": "",
  "body": "Write a complete trace of merge sort on the list [6, 2, 3, 1, 5, 4] showing the lists obtained at each step. Make sure to show the order in which the splits and merges occur (not like ).  "
},
{
  "id": "section9_3-AlgorthmicComplexity",
  "level": "1",
  "url": "section9_3-AlgorthmicComplexity.html",
  "type": "Section",
  "number": "9.3",
  "title": "Algorithmic Complexity",
  "body": " Algorithmic Complexity  Algorithmic Complexity    The most common way of ranking different algorithms for the same problem is by how quickly they run. Ideally, we want the fastest possible algorithm for any particular problem. But how do we measure running time?  As a specific example, how long does it take to sing the song BottlesOfBeer(n) ? This is obviously a function of the input value n, but it also depends on how quickly you can sing. Some singers might take ten seconds to sing a verse; others might take twenty. Technology widens the possibilities even further. Dictating the song over a telegraph using Morse code might take a full minute per verse. Downloading an mp3 over the Web might take a tenth of a second per verse. Duplicating the mp3 in a computer’s main memory might take only a few microseconds per verse.  What’s important here is how the singing time changes as n grows. Singing BottlesOfBeer(2n) requires about twice much time as singing BottlesOfBeer(n) , no matter what technology is being used.  We can measure time by counting how many times the algorithm executes a certain instruction or reaches a certain milestone in the code . For example, we might notice that the word beer is sung three times in every verse of BottlesOfBeer , so the number of times you sing beer is a good indication of the total singing time. For this question, we can give an exact answer: BottlesOfBeer(n) mentions beer exactly times. This is reflected in the asymptotic singing time  Basic Operations and Input Size Basic Operations   Of primary consideration when estimating an algorithm's performance is the number of basic operations required by the algorithm to process an input of a certain size. The terms \"basic operations\" and \"size\" are both rather vague and depend on the algorithm being analyzed. Size is often the number of inputs processed. For example, when singing BottlesOfBeer the size of the input is the number of bottles of beer you start with. When comparing sorting algorithms the size of the problem is typically measured by the number of records to be sorted. A basic operation must have the property that its time to complete does not depend on the particular values of its operands. Adding or comparing two integer variables are examples of basic operations. Summing the contents of an array containing integers is not, because the cost depends on the value of (i.e., the size of the input).  Because the most important factor affecting running time is normally size of the input, for a given input size we often express the time to run the algorithm as a function of , written as . We will always assume is a non-negative value. We can then determine the order or asymptotic complexity of the algorithm by calculating the Big O of .    Counting Basic Operations in the MaximumElement Algorithm  Consider the that solves the problem of finding the largest value in an array of integers. The algorithm looks at each integer in turn, saving the largest value seen so far. Here, the size of the problem is the number of integers stored in in the list. The basic operation is to compare an integer's value to that of the largest value seen so far. It is reasonable to assume that it takes a fixed amount of time to do one such comparison, regardless of the value of the two integers or their positions in the array.  Let us call the amount of time required to compare two integers in function MaximumElement . We do not care right now what the precise value of might be. Nor are we concerned with the time required to increment variable index because this must be done for each value in the list, or the time for the actual assignment when a larger value is found, or the little bit of extra time taken to initialize maximum . We just want a reasonable approximation for the time taken to execute the algorithm. The total time to run MaximumElement is therefore approximately , because we must make comparisons, with each comparison costing time. We say that MaximumElement (and by extension, the largest-value sequential search algorithm for any typical implementation) has a running time expressed by the function . The asymptotic complexity of MaximumElement is therefore the Big O of . This is a Linear Complexity algorithm because .   An Algorithm with Constant Running Time  The running time of a statement that assigns the first value of an integer array to a variable is simply the time required to copy the value of the first array value. We can assume this assignment takes a constant amount of time regardless of the value. Let us call the amount of time necessary to copy an integer. No matter how large the array on a typical computer (given reasonable conditions for memory and array size), the time to copy the value from the first position of the array is always .Thus, the equation for this algorithm is simply indicating that the size of the input has no effect on the running time. This is a Constant Complexity algorithm because , it has constant running time. .   Quadratic Running Time  Consider the following function written in Python:   What is the running time for this function? We can assume that incrementing sum takes constant time; call this time . (We can ignore the time required to initialize sum , and to increment the loop counters i and j . In practice, these costs can safely be bundled into time .) The total number of increment operations is . The inner j loop runs times for each of values of i , so we have operations total. Thus, we say that the running time is and the algorithm has quadratic complexity: . Therefore NestedLoops has a quadratic running time.    Analyzing Algorithmic Complexity Algorithmic Complexity  Analyzing algorithmic complexity or running time can get tricky, but it always follows a few basic rules: Look for loops in the algorithm.  If there are no loops, operations run in constant time,  If there are loops that run a fixed number of times, that is constant time,  If there is one loop using a counter that runs from 1 to that requires linear time,  If there is one loop where is divided by a constant, that requires logarithmic time, .  If there are nested loops, where each one has a counter over , that will be an running time where is the number of loops nested.   Look for recursive calls in the algorithm.  These work similarly to loops, if 1 is subtracted from it is , if is divided it will be , and so on.  Nested structures multiply their Big Os to make the overall algorithm Big O.  Structures that happen one after another, the algorithm's Big O will be the largest individual Big O.   Below we will analyze the complexity of several algorithms that were introduced in and   Complexity of the LinearSearch Algorithm  Consider the LinearSearch algorithms and that find a target value in an array of integers. The algorithm looks at each integer in turn, comparing it to the target. Here, the size of the problem is the number of integers stored in in the list. The basic operation is to compare an integer's value to that of the target. As with MaximumElement above, it is reasonable to assume that it takes a fixed amount of time to do one such comparison, regardless of the value of the two integers or their positions in the array.  Let us call the amount of time required to compare two integers, the time required to increment variable index because this must be done for each value in the list, the time for the assignment to loc when the target is found, and the time taken to initialize index and loc . The total time to run LinearSearch is therefore approximately , because we must make comparisons and increments, but the assignment of the target and initialization only happen once. LinearSearch has a running time expressed by the function . The Big O can then be calculated as follows: The asymptotic complexity of LinearSearch is therefore the Big O of . This is a Linear Complexity algorithm because .   Complexity of the BinarySearch Algorithm  Consider the that finds a target value in a sorted list of integers. The algorithm calculates the middle position and looks at the element in that position in turn, comparing it to the target. Here too, the size of the problem is the number of integers stored in in the list. The basic operation is to compare an integer's value to that of the target. Assume that it takes a fixed amount of time to do one such comparison.  Let us call the amount of time required to compare two integers, the time required to calculate the middle index, the time to reassign either begin or end , and the time taken to initialize loc, begin and end .  An important property to remember for this analysis is if is a power of 2, say , then  Assume the length of the list is . At each iteration, the algorithm divides the list in half so the length of the new list is . This happens until the remaining list has a single element, it has length . Therefore, the maximum number of splits that can occur is .  The total time to run BinarySearch is therefore approximately . BinarySearch has a running time expressed by the function . The Big O can then be calculated as follows: The asymptotic complexity and running time of BinarySearch is therefore . As can be seen in , this is a far faster algorithm than  LinearSearch .  The recursive version of BinarySearch has the same complexity as the iterative version: . The only difference is that instead of splitting the list in half and looping, it splits the list in half and makes a recursive call to itself.   Complexity of the MergeSort Algorithm   We now analyze the running time of algorithm MergeSort , . It follows from the pseudocode that, when running this algorithm together with its recursive calls, several calls are made to algorithm Merge , . What we need to count is the total number of comparisons that are made. That is, we will determine the total number of times that the line if in algorithm Merge is executed when running algorithm MergeSort(L,n) .  We first observe that the number of comparisons made by algorithm Merge(L1,L2) is at most .  Let be an integer and assume for simplicity that is a power of two, i.e., for some integer . We define to be the maximum number of comparisons made when running algorithm MergeSort(L,n) on any input list of numbers. Note that we include in all comparisons that are made during all calls to Merge that are part of all recursive calls that are generated when running MergeSort(L,n) .  Consider a list of numbers, where is a power of two. For , it follows from the pseudocode for MergeSort(L,n) that T(1) = 0 . Assume that and consider again the pseudocode for MergeSort(L,n) . Which parts of the algorithm make comparisons between input elements?  The call MergeSort(L1,m) is a recursive call on a list of numbers. By definition, the total number of comparisons made in this call (together with all its recursive subcalls) is at most .   The call MergeSort(L2,n-m) is a recursive call on a list of numbers. By definition, the total number of comparisons made in this call (together with all its recursive subcalls) is at most .  Finally, algorithm MergeSort(L,n) calls the non-recursive algorithm Merge(L1,L2) . We have seen above that the number of comparisons made in this call is at most .   By adding the number of comparisons, we get Thus, we obtain the following recurrence relation:  Our goal was to determine , but at this moment, we only have a recurrence relation for this function. We will solve this recurrence relation using a technique called unfolding:  Recall that we assume that for some integer . We furthermore assume that is a large integer. We know from above that If we replace by , which is a valid thing to do, we get By combining these two inequalities, we get Let us repeat this: Replacing by the recurrence equation gives By substituting this into the inequality for , we get  In the next step, we replace by in the recurrence equation, which gives By substituting this into the inequality for , we get  At this moment, you will see the pattern and, at the end, we get the inequality Since , we have , which is from the base case of the recurrence relation. Also, implies that . We conclude that  We thus have solved the recurrence relation. In case you have doubts about the validity of the unfolding method, we verify by induction that indeed The base case is when . In this case, we have and . Let be a power of and assume that From the recurrence relation, we get By substituting the induction hypothesis into this inequality, we get Thus, by induction, for any integer that is a power of .  Until now, we have only counted the number of comparisons made by algorithm MergeSort . It follows from the pseudocode that the total running time, i.e., the total number of elementary steps, is within a constant factor of the total number of comparisons. Therefore, if is a power of , the running time of algorithm MergeSort(L,n) is .  For general values of , the recurrence relation for the number of comparisons becomes the following:  It can be shown by induction that this recurrence relation solves to . We have proved the following result:  Big O of MergeSort For any list of numbers, the running time of algorithm MergeSort(L,n) is .    Exercises for Section 9.3  Show that BubbleSort, , has complexity. The outer loop runs times.  The number of inner loops varies with , each time it makes loops. If it makes loops, if it makes loops, ..., down to loops. These two loops correspond to the sum of the first integers which is equal to .  Inside the loop, there is a comparison and the swap does three assignments, making 4 basic operations.  So we have which is a polynomial with as the highest order term. Therefore, BubbleSort is   Show that the greedy algorithm for making change, , has complexity in terms of the number of comparisons made. Where is the amount of change to be given.  This is the pseudocode for Selection Sort  Selection Sort Selection Sort   procedure SelectionSort  ( : list of numbers)     for  to         for  to      if   then      if        swap and          Trace the Selection Sort on the list: 6, 3, 9, 2, 8. Show all steps, all value changes of and and the list at end of each loop.  Determine the worst-case time complexity of Selection Sort. Explain your answer, don't just write what the big-O is.          Is 3 less than 6? Yes:   Is 9 less than 3? No   Is 2 less than 3? Yes:   Is 8 less than 2? No  Done with i loop   Swap 6 and 2  New list: 2, 3, 9, 6, 8     Is 9 less than 3? No   Is 6 less than 3? No \\\\  Is 8 less than 3? No \\\\ Done with i loop \\\\  No swap \\\\ New list: 2, 3, 9, 6, 8 \\\\    Is 6 less than 9? Yes:   Is 8 less than 6? No \\\\ Done with i loop \\\\  Swap 9 and 6 \\\\ New list: 2, 3, 6, 9, 8 \\\\    Is 8 less than 9? Yes:  Done with i loop \\\\  Swap 9 and 8 \\\\ New list: 2, 3, 6, 8, 9 \\\\ done.   Selection Sort is because the loop runs times, and the loop inside that runs in worst case times.    Determine the worst-case time complexity of Insertion Sort, . Explain your answer, don't just write what the big-O is.  Determine the worst-case time complexity of Recursive Linear Search, . Explain your answer, don't just write what the big-O is. Each call to the recursive function RecursiveLinearSearch runs in constant time. There are no loops only two comparisons. We are only concerned about the worst case for Big O, which is when the target is not in the list. The location variable controls the number of recursive calls that happen. This starts at 1 and increases by 1 in every recursive call. It stops when the base case is reached when That means the number of recursive calls that are made is . The total number of operations is then: . Therefore the algorithm is  Determine the worst-case time complexity of Recursive Binary Search, . Explain your answer, don't just write what the big-O is.   "
},
{
  "id": "ex-counting-ops-max-element",
  "level": "2",
  "url": "section9_3-AlgorthmicComplexity.html#ex-counting-ops-max-element",
  "type": "Example",
  "number": "9.3.1",
  "title": "Counting Basic Operations in the MaximumElement Algorithm.",
  "body": " Counting Basic Operations in the MaximumElement Algorithm  Consider the that solves the problem of finding the largest value in an array of integers. The algorithm looks at each integer in turn, saving the largest value seen so far. Here, the size of the problem is the number of integers stored in in the list. The basic operation is to compare an integer's value to that of the largest value seen so far. It is reasonable to assume that it takes a fixed amount of time to do one such comparison, regardless of the value of the two integers or their positions in the array.  Let us call the amount of time required to compare two integers in function MaximumElement . We do not care right now what the precise value of might be. Nor are we concerned with the time required to increment variable index because this must be done for each value in the list, or the time for the actual assignment when a larger value is found, or the little bit of extra time taken to initialize maximum . We just want a reasonable approximation for the time taken to execute the algorithm. The total time to run MaximumElement is therefore approximately , because we must make comparisons, with each comparison costing time. We say that MaximumElement (and by extension, the largest-value sequential search algorithm for any typical implementation) has a running time expressed by the function . The asymptotic complexity of MaximumElement is therefore the Big O of . This is a Linear Complexity algorithm because . "
},
{
  "id": "ex-constant-time",
  "level": "2",
  "url": "section9_3-AlgorthmicComplexity.html#ex-constant-time",
  "type": "Example",
  "number": "9.3.2",
  "title": "An Algorithm with Constant Running Time.",
  "body": " An Algorithm with Constant Running Time  The running time of a statement that assigns the first value of an integer array to a variable is simply the time required to copy the value of the first array value. We can assume this assignment takes a constant amount of time regardless of the value. Let us call the amount of time necessary to copy an integer. No matter how large the array on a typical computer (given reasonable conditions for memory and array size), the time to copy the value from the first position of the array is always .Thus, the equation for this algorithm is simply indicating that the size of the input has no effect on the running time. This is a Constant Complexity algorithm because , it has constant running time. . "
},
{
  "id": "ex-quadratic-time",
  "level": "2",
  "url": "section9_3-AlgorthmicComplexity.html#ex-quadratic-time",
  "type": "Example",
  "number": "9.3.3",
  "title": "Quadratic Running Time.",
  "body": " Quadratic Running Time  Consider the following function written in Python:   What is the running time for this function? We can assume that incrementing sum takes constant time; call this time . (We can ignore the time required to initialize sum , and to increment the loop counters i and j . In practice, these costs can safely be bundled into time .) The total number of increment operations is . The inner j loop runs times for each of values of i , so we have operations total. Thus, we say that the running time is and the algorithm has quadratic complexity: . Therefore NestedLoops has a quadratic running time.  "
},
{
  "id": "ex-complexity-linear-search",
  "level": "2",
  "url": "section9_3-AlgorthmicComplexity.html#ex-complexity-linear-search",
  "type": "Example",
  "number": "9.3.4",
  "title": "Complexity of the LinearSearch Algorithm.",
  "body": " Complexity of the LinearSearch Algorithm  Consider the LinearSearch algorithms and that find a target value in an array of integers. The algorithm looks at each integer in turn, comparing it to the target. Here, the size of the problem is the number of integers stored in in the list. The basic operation is to compare an integer's value to that of the target. As with MaximumElement above, it is reasonable to assume that it takes a fixed amount of time to do one such comparison, regardless of the value of the two integers or their positions in the array.  Let us call the amount of time required to compare two integers, the time required to increment variable index because this must be done for each value in the list, the time for the assignment to loc when the target is found, and the time taken to initialize index and loc . The total time to run LinearSearch is therefore approximately , because we must make comparisons and increments, but the assignment of the target and initialization only happen once. LinearSearch has a running time expressed by the function . The Big O can then be calculated as follows: The asymptotic complexity of LinearSearch is therefore the Big O of . This is a Linear Complexity algorithm because . "
},
{
  "id": "ex-complexity-binary-search",
  "level": "2",
  "url": "section9_3-AlgorthmicComplexity.html#ex-complexity-binary-search",
  "type": "Example",
  "number": "9.3.5",
  "title": "Complexity of the BinarySearch Algorithm.",
  "body": " Complexity of the BinarySearch Algorithm  Consider the that finds a target value in a sorted list of integers. The algorithm calculates the middle position and looks at the element in that position in turn, comparing it to the target. Here too, the size of the problem is the number of integers stored in in the list. The basic operation is to compare an integer's value to that of the target. Assume that it takes a fixed amount of time to do one such comparison.  Let us call the amount of time required to compare two integers, the time required to calculate the middle index, the time to reassign either begin or end , and the time taken to initialize loc, begin and end .  An important property to remember for this analysis is if is a power of 2, say , then  Assume the length of the list is . At each iteration, the algorithm divides the list in half so the length of the new list is . This happens until the remaining list has a single element, it has length . Therefore, the maximum number of splits that can occur is .  The total time to run BinarySearch is therefore approximately . BinarySearch has a running time expressed by the function . The Big O can then be calculated as follows: The asymptotic complexity and running time of BinarySearch is therefore . As can be seen in , this is a far faster algorithm than  LinearSearch .  The recursive version of BinarySearch has the same complexity as the iterative version: . The only difference is that instead of splitting the list in half and looping, it splits the list in half and makes a recursive call to itself. "
},
{
  "id": "ex-complexity-merge-sort",
  "level": "2",
  "url": "section9_3-AlgorthmicComplexity.html#ex-complexity-merge-sort",
  "type": "Example",
  "number": "9.3.6",
  "title": "Complexity of the MergeSort Algorithm.",
  "body": " Complexity of the MergeSort Algorithm   We now analyze the running time of algorithm MergeSort , . It follows from the pseudocode that, when running this algorithm together with its recursive calls, several calls are made to algorithm Merge , . What we need to count is the total number of comparisons that are made. That is, we will determine the total number of times that the line if in algorithm Merge is executed when running algorithm MergeSort(L,n) .  We first observe that the number of comparisons made by algorithm Merge(L1,L2) is at most .  Let be an integer and assume for simplicity that is a power of two, i.e., for some integer . We define to be the maximum number of comparisons made when running algorithm MergeSort(L,n) on any input list of numbers. Note that we include in all comparisons that are made during all calls to Merge that are part of all recursive calls that are generated when running MergeSort(L,n) .  Consider a list of numbers, where is a power of two. For , it follows from the pseudocode for MergeSort(L,n) that T(1) = 0 . Assume that and consider again the pseudocode for MergeSort(L,n) . Which parts of the algorithm make comparisons between input elements?  The call MergeSort(L1,m) is a recursive call on a list of numbers. By definition, the total number of comparisons made in this call (together with all its recursive subcalls) is at most .   The call MergeSort(L2,n-m) is a recursive call on a list of numbers. By definition, the total number of comparisons made in this call (together with all its recursive subcalls) is at most .  Finally, algorithm MergeSort(L,n) calls the non-recursive algorithm Merge(L1,L2) . We have seen above that the number of comparisons made in this call is at most .   By adding the number of comparisons, we get Thus, we obtain the following recurrence relation:  Our goal was to determine , but at this moment, we only have a recurrence relation for this function. We will solve this recurrence relation using a technique called unfolding:  Recall that we assume that for some integer . We furthermore assume that is a large integer. We know from above that If we replace by , which is a valid thing to do, we get By combining these two inequalities, we get Let us repeat this: Replacing by the recurrence equation gives By substituting this into the inequality for , we get  In the next step, we replace by in the recurrence equation, which gives By substituting this into the inequality for , we get  At this moment, you will see the pattern and, at the end, we get the inequality Since , we have , which is from the base case of the recurrence relation. Also, implies that . We conclude that  We thus have solved the recurrence relation. In case you have doubts about the validity of the unfolding method, we verify by induction that indeed The base case is when . In this case, we have and . Let be a power of and assume that From the recurrence relation, we get By substituting the induction hypothesis into this inequality, we get Thus, by induction, for any integer that is a power of .  Until now, we have only counted the number of comparisons made by algorithm MergeSort . It follows from the pseudocode that the total running time, i.e., the total number of elementary steps, is within a constant factor of the total number of comparisons. Therefore, if is a power of , the running time of algorithm MergeSort(L,n) is .  For general values of , the recurrence relation for the number of comparisons becomes the following:  It can be shown by induction that this recurrence relation solves to . We have proved the following result:  Big O of MergeSort For any list of numbers, the running time of algorithm MergeSort(L,n) is .  "
},
{
  "id": "section9_3-AlgorthmicComplexity-6-2",
  "level": "2",
  "url": "section9_3-AlgorthmicComplexity.html#section9_3-AlgorthmicComplexity-6-2",
  "type": "Exercise",
  "number": "9.3.3.1",
  "title": "",
  "body": "Show that BubbleSort, , has complexity. The outer loop runs times.  The number of inner loops varies with , each time it makes loops. If it makes loops, if it makes loops, ..., down to loops. These two loops correspond to the sum of the first integers which is equal to .  Inside the loop, there is a comparison and the swap does three assignments, making 4 basic operations.  So we have which is a polynomial with as the highest order term. Therefore, BubbleSort is  "
},
{
  "id": "section9_3-AlgorthmicComplexity-6-3",
  "level": "2",
  "url": "section9_3-AlgorthmicComplexity.html#section9_3-AlgorthmicComplexity-6-3",
  "type": "Exercise",
  "number": "9.3.3.2",
  "title": "",
  "body": "Show that the greedy algorithm for making change, , has complexity in terms of the number of comparisons made. Where is the amount of change to be given. "
},
{
  "id": "section9_3-AlgorthmicComplexity-6-4",
  "level": "2",
  "url": "section9_3-AlgorthmicComplexity.html#section9_3-AlgorthmicComplexity-6-4",
  "type": "Exercise",
  "number": "9.3.3.3",
  "title": "",
  "body": "This is the pseudocode for Selection Sort  Selection Sort Selection Sort   procedure SelectionSort  ( : list of numbers)     for  to         for  to      if   then      if        swap and          Trace the Selection Sort on the list: 6, 3, 9, 2, 8. Show all steps, all value changes of and and the list at end of each loop.  Determine the worst-case time complexity of Selection Sort. Explain your answer, don't just write what the big-O is.          Is 3 less than 6? Yes:   Is 9 less than 3? No   Is 2 less than 3? Yes:   Is 8 less than 2? No  Done with i loop   Swap 6 and 2  New list: 2, 3, 9, 6, 8     Is 9 less than 3? No   Is 6 less than 3? No \\\\  Is 8 less than 3? No \\\\ Done with i loop \\\\  No swap \\\\ New list: 2, 3, 9, 6, 8 \\\\    Is 6 less than 9? Yes:   Is 8 less than 6? No \\\\ Done with i loop \\\\  Swap 9 and 6 \\\\ New list: 2, 3, 6, 9, 8 \\\\    Is 8 less than 9? Yes:  Done with i loop \\\\  Swap 9 and 8 \\\\ New list: 2, 3, 6, 8, 9 \\\\ done.   Selection Sort is because the loop runs times, and the loop inside that runs in worst case times.   "
},
{
  "id": "section9_3-AlgorthmicComplexity-6-5",
  "level": "2",
  "url": "section9_3-AlgorthmicComplexity.html#section9_3-AlgorthmicComplexity-6-5",
  "type": "Exercise",
  "number": "9.3.3.4",
  "title": "",
  "body": "Determine the worst-case time complexity of Insertion Sort, . Explain your answer, don't just write what the big-O is. "
},
{
  "id": "section9_3-AlgorthmicComplexity-6-6",
  "level": "2",
  "url": "section9_3-AlgorthmicComplexity.html#section9_3-AlgorthmicComplexity-6-6",
  "type": "Exercise",
  "number": "9.3.3.5",
  "title": "",
  "body": "Determine the worst-case time complexity of Recursive Linear Search, . Explain your answer, don't just write what the big-O is. Each call to the recursive function RecursiveLinearSearch runs in constant time. There are no loops only two comparisons. We are only concerned about the worst case for Big O, which is when the target is not in the list. The location variable controls the number of recursive calls that happen. This starts at 1 and increases by 1 in every recursive call. It stops when the base case is reached when That means the number of recursive calls that are made is . The total number of operations is then: . Therefore the algorithm is "
},
{
  "id": "section9_3-AlgorthmicComplexity-6-7",
  "level": "2",
  "url": "section9_3-AlgorthmicComplexity.html#section9_3-AlgorthmicComplexity-6-7",
  "type": "Exercise",
  "number": "9.3.3.6",
  "title": "",
  "body": "Determine the worst-case time complexity of Recursive Binary Search, . Explain your answer, don't just write what the big-O is. "
},
{
  "id": "s-basic-definitions",
  "level": "1",
  "url": "s-basic-definitions.html",
  "type": "Section",
  "number": "10.1",
  "title": "Basic Definitions",
  "body": "Basic Definitions   In Chapter 1 we introduced the concept of the Cartesian product of sets. Let's assume that a person owns three shirts and two pairs of pants. More precisely, let and . Then is the set of all six possible combinations of shirts and pants that the individual could wear. However, an individual may wish to restrict themself to combinations which are color coordinated, or related. This may not be all possible pairs in but will certainly be a subset of . For example, one such subset may be: .   Relations Between Two Sets  Relation Relation Let and be sets. A relation from into is any subset of .  A simple example Let and . Then is a relation from into .  Of course, there are many others we could describe; 64, to be exact.  Divisibility Example Let and define a relation from into by if and only if divides evenly into . The set of pairs that qualify for membership is .   Relations on a Set  Relation on a Set Relation on a Set A relation from a set into itself is called a relation on .  The relation divides in will appear throughout the book. Here is a general definition on the whole set of integers.  Divides  Divides  divides , or divides evenly into  Let , . We say that divides , denoted , if and only if there exists an integer such that .   Be very careful in writing about the relation divides. The vertical line symbol use for this relation, if written carelessly, can look like division. While is either true or false, is a number.  Based on the equation , we can say that is equivalent to , or divides evenly into . In fact the divides is short for divides evenly into. You might find the equation initially easier to understand, but in the long run we will find the equation more convenient.  Sometimes it is helpful to illustrate a relation with a graph. Consider . A graph of can be drawn as in . The arrows indicate that 1 is related to 4 under . Also, 2 is related to 4 under , and 3 is related to 5, while the upper arrow denotes that is a relation from the whole set into the set .   The graph of a relation   The graph of relation described in    A typical element in a relation is an ordered pair . In some cases, can be described by actually listing the pairs which are in , as in the previous examples. This may not be convenient if is relatively large. Other notations are used with certain well-known relations. Consider the less than or equal relation on the real numbers. We could define it as a set of ordered pairs this way: However, the notation is clear and self-explanatory; it is a more natural, and hence preferred, notation to use than .  Many of the relations we will work with resemble the relation , so is a common way to express the fact that is related to through the relation .  Relation Notation Relation Notation Let be a relation from a set into a set . Then the fact that is frequently written . is related to through the relation   Composition of Relations  With , , and , let be the relation divides, from into , and let be the relation from into . So and .  Notice that in that we can, for certain elements of , go through elements in to results in . That is:            Relation Composition - a graphical view   A graph of the composition of two relations.    Based on this observation, we can define a new relation, call it , from into . In order for to be in , it must be possible to travel along a path in from to . In other words, if and only if . The name was chosen because it reminds us that this new relation was formed by the two previous relations and . The complete listing of all elements in is . We summarize in a definition.  Composition of Relations Composition of Relations the composition of relation with relation Let be a relation from a set into a set , and let be a relation from into a set . The composition of with , written , is the set of pairs of the form , where if and only if there exists such that and .   Remark: A word of warning to those readers familiar with composition of functions. As indicated above, the traditional way of describing a composition of two relations is where is the first relation and the second. However, function composition is traditionally expressed in the opposite order: , where is the first function and is the second.   Exercises  For each of the following relations defined on , determine which of the given ordered pairs belong to    iff ; (2, 3), (2, 4), (2, 8), (2, 17)   iff ; (2, 3), (3, 2), (2, 4), (5, 8)   iff ; (1,1), (2, 3), (2, 4), (2, 6)             The following relations are on . Let be the relation iff and the relation iff .   List all elements in .  List all elements in .  Illustrate and via a diagram.  Is the relation equal to the relation ?    Let and define on by iff . We define and . Find:       =           Given and , relations on , and , what are and ? Hint: Even when a relation involves infinite sets, you can often get insights into them by drawing partial graphs.   Let be the relation on the power set, , of a finite set of cardinality defined by iff .   Consider the specific case , and determine the cardinality of the set .  What is the cardinality of for an arbitrary ? Express your answer in terms of . (Hint: There are three places that each element of S can go in building an element of .)   When , there are 27 pairs in the relation.  Imagine building a pair of disjoint subsets of . For each element of there are three places that it can go: into the first set of the ordered pair, into the second set, or into neither set. Therefore the number of pairs in the relation is , by the product rule.    Let , , and be relations on any set . Prove that if then .    "
},
{
  "id": "Relation",
  "level": "2",
  "url": "s-basic-definitions.html#Relation",
  "type": "Definition",
  "number": "10.1.1",
  "title": "Relation.",
  "body": "Relation Relation Let and be sets. A relation from into is any subset of . "
},
{
  "id": "ex-simple-relation",
  "level": "2",
  "url": "s-basic-definitions.html#ex-simple-relation",
  "type": "Example",
  "number": "10.1.2",
  "title": "A simple example.",
  "body": "A simple example Let and . Then is a relation from into .  Of course, there are many others we could describe; 64, to be exact. "
},
{
  "id": "ex-divides-example",
  "level": "2",
  "url": "s-basic-definitions.html#ex-divides-example",
  "type": "Example",
  "number": "10.1.3",
  "title": "Divisibility Example.",
  "body": "Divisibility Example Let and define a relation from into by if and only if divides evenly into . The set of pairs that qualify for membership is . "
},
{
  "id": "relation-on-a-set",
  "level": "2",
  "url": "s-basic-definitions.html#relation-on-a-set",
  "type": "Definition",
  "number": "10.1.4",
  "title": "Relation on a Set.",
  "body": "Relation on a Set Relation on a Set A relation from a set into itself is called a relation on . "
},
{
  "id": "Divides",
  "level": "2",
  "url": "s-basic-definitions.html#Divides",
  "type": "Definition",
  "number": "10.1.5",
  "title": "Divides.",
  "body": "Divides  Divides  divides , or divides evenly into  Let , . We say that divides , denoted , if and only if there exists an integer such that .  "
},
{
  "id": "graph-10-1-1-relation",
  "level": "2",
  "url": "s-basic-definitions.html#graph-10-1-1-relation",
  "type": "Figure",
  "number": "10.1.6",
  "title": "",
  "body": " The graph of a relation   The graph of relation described in   "
},
{
  "id": "table-relation-composition-example",
  "level": "2",
  "url": "s-basic-definitions.html#table-relation-composition-example",
  "type": "Table",
  "number": "10.1.7",
  "title": "",
  "body": "        "
},
{
  "id": "graph-10-1-relation-composition",
  "level": "2",
  "url": "s-basic-definitions.html#graph-10-1-relation-composition",
  "type": "Figure",
  "number": "10.1.8",
  "title": "",
  "body": " Relation Composition - a graphical view   A graph of the composition of two relations.   "
},
{
  "id": "def-composition-of-relations",
  "level": "2",
  "url": "s-basic-definitions.html#def-composition-of-relations",
  "type": "Definition",
  "number": "10.1.9",
  "title": "Composition of Relations.",
  "body": "Composition of Relations Composition of Relations the composition of relation with relation Let be a relation from a set into a set , and let be a relation from into a set . The composition of with , written , is the set of pairs of the form , where if and only if there exists such that and .  "
},
{
  "id": "exercises-10-1-2",
  "level": "2",
  "url": "s-basic-definitions.html#exercises-10-1-2",
  "type": "Exercise",
  "number": "10.1.4.1",
  "title": "",
  "body": "For each of the following relations defined on , determine which of the given ordered pairs belong to    iff ; (2, 3), (2, 4), (2, 8), (2, 17)   iff ; (2, 3), (3, 2), (2, 4), (5, 8)   iff ; (1,1), (2, 3), (2, 4), (2, 6)            "
},
{
  "id": "exercises-10-1-3",
  "level": "2",
  "url": "s-basic-definitions.html#exercises-10-1-3",
  "type": "Exercise",
  "number": "10.1.4.2",
  "title": "",
  "body": "The following relations are on . Let be the relation iff and the relation iff .   List all elements in .  List all elements in .  Illustrate and via a diagram.  Is the relation equal to the relation ?   "
},
{
  "id": "exercises-10-1-4",
  "level": "2",
  "url": "s-basic-definitions.html#exercises-10-1-4",
  "type": "Exercise",
  "number": "10.1.4.3",
  "title": "",
  "body": "Let and define on by iff . We define and . Find:       =          "
},
{
  "id": "exercises-10-1-5",
  "level": "2",
  "url": "s-basic-definitions.html#exercises-10-1-5",
  "type": "Exercise",
  "number": "10.1.4.4",
  "title": "",
  "body": "Given and , relations on , and , what are and ? Hint: Even when a relation involves infinite sets, you can often get insights into them by drawing partial graphs.  "
},
{
  "id": "exercises-10-1-6",
  "level": "2",
  "url": "s-basic-definitions.html#exercises-10-1-6",
  "type": "Exercise",
  "number": "10.1.4.5",
  "title": "",
  "body": "Let be the relation on the power set, , of a finite set of cardinality defined by iff .   Consider the specific case , and determine the cardinality of the set .  What is the cardinality of for an arbitrary ? Express your answer in terms of . (Hint: There are three places that each element of S can go in building an element of .)   When , there are 27 pairs in the relation.  Imagine building a pair of disjoint subsets of . For each element of there are three places that it can go: into the first set of the ordered pair, into the second set, or into neither set. Therefore the number of pairs in the relation is , by the product rule.   "
},
{
  "id": "exercises-10-1-7",
  "level": "2",
  "url": "s-basic-definitions.html#exercises-10-1-7",
  "type": "Exercise",
  "number": "10.1.4.6",
  "title": "",
  "body": "Let , , and be relations on any set . Prove that if then .  "
},
{
  "id": "s-graphs-of-relations-on-a-set",
  "level": "1",
  "url": "s-graphs-of-relations-on-a-set.html",
  "type": "Section",
  "number": "10.2",
  "title": "Graphs of Relations on a Set",
  "body": "Graphs of Relations on a Set   In this section we introduce directed graphs as a way to visualize relations on a set.   Digraphs  Let , and let In representing this relation as a graph, elements of are called the vertices of the graph. They are typically represented by labeled points or small circles. We connect vertex to vertex with an arrow, called an edge, going from vertex to vertex if and only if . This type of graph of a relation is called a directed graph or digraph . is a digraph for . Notice that since 0 is related to itself, we draw a self-loop at 0. Directed graph Digraph   Digraph of a relation   Digraph of the relation     The actual location of the vertices in a digraph is immaterial. The actual location of vertices we choose is called an embedding of a graph Embedding of a graph . The main idea is to place the vertices in such a way that the graph is easy to read. After drawing a rough-draft graph of a relation, we may decide to relocate the vertices so that the final result will be neater. could also be presented as in .   Alternate embedding of the previous directed graph   Altenative embedding of the digraph of relation .     A vertex of a graph is also called a node, point, or a junction. An edge of a graph is also referred to as an arc, a line, or a branch. Do not be concerned if two graphs of a given relation look different as long as the connections between vertices are the same in two graphs.  Another directed graph Consider the relation whose digraph is . What information does this give us? The graph tells us that is a relation on and that .   Digraph of the relation   Digraph of another relation.       We will be building on the next example in the following section.  Ordering subsets of a two element universe Let , and let . Then is a relation on whose digraph is .   Graph for set containment on subsets of    Digraph representing the subset relation on a powerset.    We will see in the next section that since has certain structural properties that describe partial orderings. We will be able to draw a much simpler type graph than this one, but for now the graph above serves our purposes.    Exercises  Let , and let be the relation on . Draw a digraph for .   Left: digraph for on . Right: Hasse diagram for same relation (to be seen later) >  Digraph and Hasse diagram representing the relation     Let , and let be the relation divides on . Draw a digraph for .   Let . Define on by if and only if is even. Draw a digraph for .  See   Digraph of the relation   Digraph showing the relation      Let be the set of strings of 0's and 1's of length 3 or less. Define the relation of on by if is contained within . For example, . Draw a digraph for this relation.  Do the same for the relation defined by if is a prefix of . For example, , but is false.    Recall the relation in Exercise 5 of , defined on the power set, , of a set . The definition was iff . Draw the digraph for where .   Let and define on by if and only if and share a common divisor greater than 1. Draw a digraph for .    "
},
{
  "id": "s-graphs-of-relations-on-a-set-3-2",
  "level": "2",
  "url": "s-graphs-of-relations-on-a-set.html#s-graphs-of-relations-on-a-set-3-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "directed graph digraph "
},
{
  "id": "fig-graph-10-2-1",
  "level": "2",
  "url": "s-graphs-of-relations-on-a-set.html#fig-graph-10-2-1",
  "type": "Figure",
  "number": "10.2.1",
  "title": "",
  "body": " Digraph of a relation   Digraph of the relation    "
},
{
  "id": "s-graphs-of-relations-on-a-set-3-4",
  "level": "2",
  "url": "s-graphs-of-relations-on-a-set.html#s-graphs-of-relations-on-a-set-3-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "embedding of a graph "
},
{
  "id": "fig-graph-10-2-2",
  "level": "2",
  "url": "s-graphs-of-relations-on-a-set.html#fig-graph-10-2-2",
  "type": "Figure",
  "number": "10.2.2",
  "title": "",
  "body": " Alternate embedding of the previous directed graph   Altenative embedding of the digraph of relation .    "
},
{
  "id": "ex-another-simple-graph",
  "level": "2",
  "url": "s-graphs-of-relations-on-a-set.html#ex-another-simple-graph",
  "type": "Example",
  "number": "10.2.3",
  "title": "Another directed graph.",
  "body": "Another directed graph Consider the relation whose digraph is . What information does this give us? The graph tells us that is a relation on and that .   Digraph of the relation   Digraph of another relation.      "
},
{
  "id": "ex-subsets-2-ordering",
  "level": "2",
  "url": "s-graphs-of-relations-on-a-set.html#ex-subsets-2-ordering",
  "type": "Example",
  "number": "10.2.5",
  "title": "Ordering subsets of a two element universe.",
  "body": "Ordering subsets of a two element universe Let , and let . Then is a relation on whose digraph is .   Graph for set containment on subsets of    Digraph representing the subset relation on a powerset.    We will see in the next section that since has certain structural properties that describe partial orderings. We will be able to draw a much simpler type graph than this one, but for now the graph above serves our purposes.  "
},
{
  "id": "exercises-10-2-2",
  "level": "2",
  "url": "s-graphs-of-relations-on-a-set.html#exercises-10-2-2",
  "type": "Exercise",
  "number": "10.2.2.1",
  "title": "",
  "body": "Let , and let be the relation on . Draw a digraph for .   Left: digraph for on . Right: Hasse diagram for same relation (to be seen later) >  Digraph and Hasse diagram representing the relation    "
},
{
  "id": "exercises-10-2-3",
  "level": "2",
  "url": "s-graphs-of-relations-on-a-set.html#exercises-10-2-3",
  "type": "Exercise",
  "number": "10.2.2.2",
  "title": "",
  "body": "Let , and let be the relation divides on . Draw a digraph for .  "
},
{
  "id": "exercises-10-2-4",
  "level": "2",
  "url": "s-graphs-of-relations-on-a-set.html#exercises-10-2-4",
  "type": "Exercise",
  "number": "10.2.2.3",
  "title": "",
  "body": "Let . Define on by if and only if is even. Draw a digraph for .  See   Digraph of the relation   Digraph showing the relation    "
},
{
  "id": "exercises-10-2-5",
  "level": "2",
  "url": "s-graphs-of-relations-on-a-set.html#exercises-10-2-5",
  "type": "Exercise",
  "number": "10.2.2.4",
  "title": "",
  "body": " Let be the set of strings of 0's and 1's of length 3 or less. Define the relation of on by if is contained within . For example, . Draw a digraph for this relation.  Do the same for the relation defined by if is a prefix of . For example, , but is false.   "
},
{
  "id": "exercises-10-2-6",
  "level": "2",
  "url": "s-graphs-of-relations-on-a-set.html#exercises-10-2-6",
  "type": "Exercise",
  "number": "10.2.2.5",
  "title": "",
  "body": "Recall the relation in Exercise 5 of , defined on the power set, , of a set . The definition was iff . Draw the digraph for where .  "
},
{
  "id": "exercises-10-2-7",
  "level": "2",
  "url": "s-graphs-of-relations-on-a-set.html#exercises-10-2-7",
  "type": "Exercise",
  "number": "10.2.2.6",
  "title": "",
  "body": "Let and define on by if and only if and share a common divisor greater than 1. Draw a digraph for .  "
},
{
  "id": "s-properties-of-relations",
  "level": "1",
  "url": "s-properties-of-relations.html",
  "type": "Section",
  "number": "10.3",
  "title": "Properties of Relations",
  "body": "Properties of Relations  Individual Properties  Consider the set and the relations divides and on . We notice that these two relations on have three properties in common:   Every element in divides itself and is less than or equal to itself. This is called the reflexive property.  If we search for two elements from where the first divides the second and the second divides the first, then we are forced to choose the two numbers to be the same. In other words, no two different numbers are related in both directions. The reader can verify that a similar fact is true for the relation on . This is called the antisymmetric property.  Next if we choose three values (not necessarily distinct) from such that the first divides the second and the second divides the third, then we always find that the first number divides the third. Again, the same is true if we replace divides with is less than or equal to. This is called the transitive property.   Relations that satisfy these properties are of special interest to us. Formal definitions of the properties follow.  Reflexive Relation Reflexive Relation Let be a set and let be a relation on . Then is reflexive if and only if for all .  Antisymmetric Relation Antisymmetric Relation Let be a set and let be a relation on . Then is antisymmetric if and only if whenever and then is false.   An equivalent condition for antisymmetry is that if and then . You are encouraged to convince yourself that this is true. This condition is often more convenient to prove than the definition, even though the definition is probably easier to understand.  A word of warning about antisymmetry: Students frequently find it difficult to understand this definition. Keep in mind that this term is defined through an If...then... statement. The question that you must ask is: Is it true that whenever there are elements and from where and , it follows that is not related to ? If so, then the relation is antisymmetric.  Another way to determine whether a relation is antisymmetric is to examine (or imagine) its digraph. The relation is not antisymmetric if there exists a pair of vertices that are connected by edges in both directions.  Transitive Relation Transitive Relation Let be a set and let be a relation on . is transitive if and only if whenever and then .   Partial Orderings  Not all relations have all three of the properties discussed above, but those that do are a special type of relation.  Partial Ordering Partial Ordering Poset A relation on a set that is reflexive, antisymmetric, and transitive is called a partial ordering on . A set on which there is a partial ordering relation defined is called a partially ordered set Partially ordered set or poset .  Set Containment as a Partial Ordering Let be a set. Then together with the relation (set containment) is a poset. To prove this we observe that the three properties hold, as discussed in Chapter 4.   Let . The fact that follows from the definition of subset. Hence, set containment is reflexive.  Let and assume that and . Could it be that ? No. There must be some element such that , but . This is exactly what we need to conclude that is not contained in . Hence, set containment is antisymmetric.  Let and assume that and . Does it follow that ? Yes, if , then because . Now that we have and we have assumed , we conclude that . Therefore, and so set containment is transitive.  is the graph for the set containment relation on the power set of .   Hasse Diagram Ordering Diagram is helpful insofar as it reminds us that each set is a subset of itself and shows us at a glance the relationship between the various subsets in . However, when a relation is a partial ordering, we can streamline a graph like this one. The streamlined form of a graph is called a Hasse diagram or ordering diagram . A Hasse diagram takes into account the following facts.   By the reflexive property, each vertex must be related to itself, so the arrows from a vertex to itself (called self-loops ) are not drawn in a Hasse diagram. They are simply assumed.  By the antisymmetry property, connections between two distinct elements in a directed graph can only go one way, if at all. When there is a connection, we agree to always place the second element above the first (as we do above with the connection from to ). For this reason, we can just draw a connection without an arrow, just a line.  By the transitive property, if there are edges connecting one element up to a second element and the second element up to a third element, then there will be a direct connection from the first to the third. We see this in with connected to and then connected to . Notice the edge connecting to . Whenever we identify this situation, remove the connection from the first to the third in a Hasse diagram and simply observe that an upward path of any length implies that the lower element is related to the upper one.   Using these observations as a guide, we can draw a Hasse diagram for on as in .   Hasse diagram for set containment on subsets of    Hasse diagram representing the subset relation on a powerset.    Definition of a relation using a Hasse diagram Consider the partial ordering relation whose Hasse diagram is .   Hasse diagram for the pentagonal poset   Hasse diagram for the pentagonal poset     How do we read this diagram? What is ? What is ? What does the digraph of look like? Certainly and , , , , etc., Notice that is implied by the fact that there is a path of length three upward from 1 to 5. This follows from the edges that are shown and the transitive property that is presumed in a poset. Since and , we know that . We then combine with to infer . Without going into details why, here is a complete list of pairs defined by .   A digraph for is . It is certainly more complicated to read and difficult to draw than the Hasse diagram.   Digraph for the pentagonal poset   Digraph for the pentagonal poset      A classic example of a partial ordering relation is on the real numbers, . Indeed, when graphing partial ordering relations, it is natural to plot the elements from the given poset starting with the least element to the greatest and to use terms like least,  greatest, etc. Because of this the reader should be forewarned that some texts use the symbol for arbitrary partial orderings. This can be quite confusing for the novice, so we continue to use generic letters , , etc.   Equivalence Relations Equivalence Relations  Another common property of relations is symmetry.  Symmetric Relation  Symmetric Relation Let be a relation on a set . is symmetric if and only if whenever , it follows that .  Consider the relation of equality defined on any set . Certainly implies that so equality is a symmetric relation on .  Surprisingly, equality is also an antisymmetric relation on . This is due to the fact that the condition that defines the antisymmetry property, and , is a contradiction. Remember, a conditional proposition is always true when the condition is false. So a relation can be both symmetric and antisymmetric on a set! Again recall that these terms are not negatives of one other. That said, there are very few important relations other than equality that are both symmetric and antisymmetric.  Equivalence Relation Equivalence Relation A relation on a set is called an equivalence relation if and only if it is reflexive, symmetric, and transitive.  The classic example of an equivalence relation is equality on a set . In fact, the term equivalence relation is used because those relations which satisfy the definition behave quite like the equality relation. Here is another important equivalence relation.  Equivalent Fractions Let * be the set of nonzero integers. One of the most basic equivalence relations in mathematics is the relation on defined by if and only if . We will leave it to the reader to, verify that is indeed an equivalence relation. Be aware that since the elements of are ordered pairs, proving symmetry involves four numbers and transitivity involves six numbers. Two ordered pairs, and , are related if the fractions and are numerically equal.  Our next example involves the following fundamental relations on the set of integers.  Congruence Modulo  Congruence Modulo m  is congruent to modulo  is congruent to modulo  Let be a positive integer, . We define congruence modulo m to be the relation defined on the integers by    We observe the following about congruence modulo :   This relation is reflexive, for if , .  This relation is symmetric. We can prove this through the following chain of implications. .   Finally, this relation is transitive. We leave it to the reader to prove that if and , then .   Frequently, you will see the equivalent notation for congruence modulo .  Random Relations usually have no properties Consider the relation s described by the digraph in . This was created by randomly selecting whether or not two elements from were related or not. Convince yourself that the following are true:   This relation is not reflexive.  It is not antisymmetric.  Also, it is not symmetric.  It is not transitive.  Is an equivalence relation or a partial ordering?    Digraph of a random relation   A digraph of a random relation     Not every random choice of a relation will be so totally negative, but as the underlying set increases, the likelihood any of the properties are true begins to vanish.   Exercises    Let and . Draw a Hasse diagram for on .  Let . Show that divides, , is a partial ordering on .  Draw a Hasse diagram for divides on .  Compare the graphs of parts a and c.      Solution Hasse diagrams for parts a and c.     See .    on is reflexive because is true and the relation. on is antisymmetric because if is true and the relation, then is not true and the relation, unless . on is transitive because , if and the relation, then and . Therefore for some integer and for some integer . Thus , , and the relation. Therefore on is a partial ordering.   See .  The graphs are the same if we disregard the names of the vertices.    Repeat Exercise 1 with and . Here is a Hasse diagram for the part (a).    Hasse Diagram for part a.      Consider the relations defined by the digraphs in .  Determine whether the given relations are reflexive, symmetric, antisymmetric, or transitive. Try to develop procedures for determining the validity of these properties from the graphs,  Which of the graphs are of equivalence relations or of partial orderings?    Some digraphs of relations   Digraphs of relations for exercise 3.      Properties of relations defined by given digraphs   Part reflexive? symmetric? antisymmetric? transitive?  i yes no no yes  ii yes no yes yes  iii no no no no  iv no yes yes yes  v yes yes no yes  vi yes no yes yes  vii no no no no    Graphs ii and vi show partial ordering relations. Graph v is of an equivalence relation.    Determine which of the following are equivalence relations and\/or partial ordering relations for the given sets:    , and defined by if and only if is parallel to . Assume every line is parallel to itself.   and defined by if and only if .    Consider the relation on defined by .   Is reflexive?  Is symmetric?  Is transitive?  Draw a graph of .   No, since , for example  Yes, because .  No, since and , but , for example.       Digraph solution to part c.     For the set of cities on a map, consider the relation if and only if city is connected by a road to city . A city is considered to be connected to itself, and two cities are connected even though there are cities on the road between them. Is this an equivalence relation or a partial ordering? Explain.   Equivalence Classes Let and let   Verify that is an equivalence relation on .  Let and define . the equivalence class of under  is called the equivalence class of under Equivalence Class . Find for each element .  Show that forms a partition of for this set .  Let be an equivalence relation on an arbitrary set . Prove that the set of all equivalence classes under constitutes a partition of .     It must be shown that is reflexive, symmetric, and transitive.     and  Let be any set and let be an equivalence relation on . Let be any element of . since is reflexive, so each element of is in some equivalence class. Therefore, the union of all equivalence classes equals . Next we show that any two equivalence classes are either identical or disjoint and we are done. Let and be two equivalence classes, and assume that . We want to show that . To show that , let . . Also, there exists an element, , of that is in the intersection of and by our assumption. Therefore,  Next,   Similarly, .     Define on the power set of by , where . Prove that is an equivalence relation. What are the equivalence classes under ?   Consider the following relations on . Which are equivalence relations? For the equivalence relations, list the equivalence classes.    iff the English spellings of and begin with the same letter.   iff is a positive integer.   iff is an even integer.   Equivalence Relation, , and  Not an Equivalence Relation.  Equivalence Relation, and     Building on :   Prove that congruence modulo is transitive.  What are the equivalence classes under congruence modulo 2?  What are the equivalence classes under congruence modulo 10?    In this exercise, we prove that implication is a partial ordering. Let be any set of propositions.   Verify that is a tautology, thereby showing that is a reflexive relation on .  Prove that is antisymmetric on . Note: we do not use = when speaking of propositions, but rather equivalence, .  Prove that is transitive on .  Given that is the proposition on , draw the Hasse diagram for the relation on .     These proofs follow from the biconditional equivalence in .    Apply the chain rule.     Hasse diagram for implication       Let be a poset with the Hasse diagram shown below. Another relation is defined as follows: if and only if there exists such that and in the poset .   Prove that is reflexive.  Prove that is symmetric.  A compatible with respect to relation is any subset of set such that . A compatible is a maximal compatible if is not a proper subset of another compatible. Give all maximal compatibles with respect to relation defined above.  Discuss a characterization of the set of maximal compatibles for relation when is a general finite poset. What conditions, if any, on a general finite poset will make an equivalence relation?    Hasse diagram for in exercise 12.   Hasse diagram for exercise 12      "
},
{
  "id": "def-reflexive-relation",
  "level": "2",
  "url": "s-properties-of-relations.html#def-reflexive-relation",
  "type": "Definition",
  "number": "10.3.1",
  "title": "Reflexive Relation.",
  "body": "Reflexive Relation Reflexive Relation Let be a set and let be a relation on . Then is reflexive if and only if for all . "
},
{
  "id": "def-antisymmetric-relation",
  "level": "2",
  "url": "s-properties-of-relations.html#def-antisymmetric-relation",
  "type": "Definition",
  "number": "10.3.2",
  "title": "Antisymmetric Relation.",
  "body": "Antisymmetric Relation Antisymmetric Relation Let be a set and let be a relation on . Then is antisymmetric if and only if whenever and then is false.  "
},
{
  "id": "def-transitive-relation",
  "level": "2",
  "url": "s-properties-of-relations.html#def-transitive-relation",
  "type": "Definition",
  "number": "10.3.3",
  "title": "Transitive Relation.",
  "body": "Transitive Relation Transitive Relation Let be a set and let be a relation on . is transitive if and only if whenever and then . "
},
{
  "id": "partial-ordering",
  "level": "2",
  "url": "s-properties-of-relations.html#partial-ordering",
  "type": "Definition",
  "number": "10.3.4",
  "title": "Partial Ordering.",
  "body": "Partial Ordering Partial Ordering Poset A relation on a set that is reflexive, antisymmetric, and transitive is called a partial ordering on . A set on which there is a partial ordering relation defined is called a partially ordered set Partially ordered set or poset . "
},
{
  "id": "ex-subset-partial-ordering",
  "level": "2",
  "url": "s-properties-of-relations.html#ex-subset-partial-ordering",
  "type": "Example",
  "number": "10.3.5",
  "title": "Set Containment as a Partial Ordering.",
  "body": "Set Containment as a Partial Ordering Let be a set. Then together with the relation (set containment) is a poset. To prove this we observe that the three properties hold, as discussed in Chapter 4.   Let . The fact that follows from the definition of subset. Hence, set containment is reflexive.  Let and assume that and . Could it be that ? No. There must be some element such that , but . This is exactly what we need to conclude that is not contained in . Hence, set containment is antisymmetric.  Let and assume that and . Does it follow that ? Yes, if , then because . Now that we have and we have assumed , we conclude that . Therefore, and so set containment is transitive.  is the graph for the set containment relation on the power set of .  "
},
{
  "id": "ss-partial-ordering-5",
  "level": "2",
  "url": "s-properties-of-relations.html#ss-partial-ordering-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Hasse diagram ordering diagram "
},
{
  "id": "subsets_2_hasse",
  "level": "2",
  "url": "s-properties-of-relations.html#subsets_2_hasse",
  "type": "Figure",
  "number": "10.3.6",
  "title": "",
  "body": " Hasse diagram for set containment on subsets of    Hasse diagram representing the subset relation on a powerset.   "
},
{
  "id": "ex-def-by-hasse",
  "level": "2",
  "url": "s-properties-of-relations.html#ex-def-by-hasse",
  "type": "Example",
  "number": "10.3.7",
  "title": "Definition of a relation using a Hasse diagram.",
  "body": "Definition of a relation using a Hasse diagram Consider the partial ordering relation whose Hasse diagram is .   Hasse diagram for the pentagonal poset   Hasse diagram for the pentagonal poset     How do we read this diagram? What is ? What is ? What does the digraph of look like? Certainly and , , , , etc., Notice that is implied by the fact that there is a path of length three upward from 1 to 5. This follows from the edges that are shown and the transitive property that is presumed in a poset. Since and , we know that . We then combine with to infer . Without going into details why, here is a complete list of pairs defined by .   A digraph for is . It is certainly more complicated to read and difficult to draw than the Hasse diagram.   Digraph for the pentagonal poset   Digraph for the pentagonal poset    "
},
{
  "id": "def-symmetric-relation",
  "level": "2",
  "url": "s-properties-of-relations.html#def-symmetric-relation",
  "type": "Definition",
  "number": "10.3.10",
  "title": "Symmetric Relation.",
  "body": "Symmetric Relation  Symmetric Relation Let be a relation on a set . is symmetric if and only if whenever , it follows that . "
},
{
  "id": "def-equivalence-relation",
  "level": "2",
  "url": "s-properties-of-relations.html#def-equivalence-relation",
  "type": "Definition",
  "number": "10.3.11",
  "title": "Equivalence Relation.",
  "body": "Equivalence Relation Equivalence Relation A relation on a set is called an equivalence relation if and only if it is reflexive, symmetric, and transitive. "
},
{
  "id": "ex-fraction-equivalence",
  "level": "2",
  "url": "s-properties-of-relations.html#ex-fraction-equivalence",
  "type": "Example",
  "number": "10.3.12",
  "title": "Equivalent Fractions.",
  "body": "Equivalent Fractions Let * be the set of nonzero integers. One of the most basic equivalence relations in mathematics is the relation on defined by if and only if . We will leave it to the reader to, verify that is indeed an equivalence relation. Be aware that since the elements of are ordered pairs, proving symmetry involves four numbers and transitivity involves six numbers. Two ordered pairs, and , are related if the fractions and are numerically equal. "
},
{
  "id": "def-congruence-mod-m",
  "level": "2",
  "url": "s-properties-of-relations.html#def-congruence-mod-m",
  "type": "Definition",
  "number": "10.3.13",
  "title": "Congruence Modulo <span class=\"process-math\">\\(m\\)<\/span>.",
  "body": "Congruence Modulo  Congruence Modulo m  is congruent to modulo  is congruent to modulo  Let be a positive integer, . We define congruence modulo m to be the relation defined on the integers by   "
},
{
  "id": "ex-no-propery-relation",
  "level": "2",
  "url": "s-properties-of-relations.html#ex-no-propery-relation",
  "type": "Example",
  "number": "10.3.14",
  "title": "Random Relations usually have no properties.",
  "body": "Random Relations usually have no properties Consider the relation s described by the digraph in . This was created by randomly selecting whether or not two elements from were related or not. Convince yourself that the following are true:   This relation is not reflexive.  It is not antisymmetric.  Also, it is not symmetric.  It is not transitive.  Is an equivalence relation or a partial ordering?    Digraph of a random relation   A digraph of a random relation     Not every random choice of a relation will be so totally negative, but as the underlying set increases, the likelihood any of the properties are true begins to vanish. "
},
{
  "id": "exercises-10-3-2",
  "level": "2",
  "url": "s-properties-of-relations.html#exercises-10-3-2",
  "type": "Exercise",
  "number": "10.3.4.1",
  "title": "",
  "body": "  Let and . Draw a Hasse diagram for on .  Let . Show that divides, , is a partial ordering on .  Draw a Hasse diagram for divides on .  Compare the graphs of parts a and c.      Solution Hasse diagrams for parts a and c.     See .    on is reflexive because is true and the relation. on is antisymmetric because if is true and the relation, then is not true and the relation, unless . on is transitive because , if and the relation, then and . Therefore for some integer and for some integer . Thus , , and the relation. Therefore on is a partial ordering.   See .  The graphs are the same if we disregard the names of the vertices.   "
},
{
  "id": "exercises-10-3-3",
  "level": "2",
  "url": "s-properties-of-relations.html#exercises-10-3-3",
  "type": "Exercise",
  "number": "10.3.4.2",
  "title": "",
  "body": "Repeat Exercise 1 with and . Here is a Hasse diagram for the part (a).    Hasse Diagram for part a.    "
},
{
  "id": "exercises-10-3-4",
  "level": "2",
  "url": "s-properties-of-relations.html#exercises-10-3-4",
  "type": "Exercise",
  "number": "10.3.4.3",
  "title": "",
  "body": " Consider the relations defined by the digraphs in .  Determine whether the given relations are reflexive, symmetric, antisymmetric, or transitive. Try to develop procedures for determining the validity of these properties from the graphs,  Which of the graphs are of equivalence relations or of partial orderings?    Some digraphs of relations   Digraphs of relations for exercise 3.      Properties of relations defined by given digraphs   Part reflexive? symmetric? antisymmetric? transitive?  i yes no no yes  ii yes no yes yes  iii no no no no  iv no yes yes yes  v yes yes no yes  vi yes no yes yes  vii no no no no    Graphs ii and vi show partial ordering relations. Graph v is of an equivalence relation.   "
},
{
  "id": "exercises-10-3-5",
  "level": "2",
  "url": "s-properties-of-relations.html#exercises-10-3-5",
  "type": "Exercise",
  "number": "10.3.4.4",
  "title": "",
  "body": "Determine which of the following are equivalence relations and\/or partial ordering relations for the given sets:    , and defined by if and only if is parallel to . Assume every line is parallel to itself.   and defined by if and only if .   "
},
{
  "id": "exercises-10-3-6",
  "level": "2",
  "url": "s-properties-of-relations.html#exercises-10-3-6",
  "type": "Exercise",
  "number": "10.3.4.5",
  "title": "",
  "body": "Consider the relation on defined by .   Is reflexive?  Is symmetric?  Is transitive?  Draw a graph of .   No, since , for example  Yes, because .  No, since and , but , for example.       Digraph solution to part c.    "
},
{
  "id": "exercises-10-3-7",
  "level": "2",
  "url": "s-properties-of-relations.html#exercises-10-3-7",
  "type": "Exercise",
  "number": "10.3.4.6",
  "title": "",
  "body": "For the set of cities on a map, consider the relation if and only if city is connected by a road to city . A city is considered to be connected to itself, and two cities are connected even though there are cities on the road between them. Is this an equivalence relation or a partial ordering? Explain.  "
},
{
  "id": "equivalence-classes",
  "level": "2",
  "url": "s-properties-of-relations.html#equivalence-classes",
  "type": "Exercise",
  "number": "10.3.4.7",
  "title": "Equivalence Classes.",
  "body": "Equivalence Classes Let and let   Verify that is an equivalence relation on .  Let and define . the equivalence class of under  is called the equivalence class of under Equivalence Class . Find for each element .  Show that forms a partition of for this set .  Let be an equivalence relation on an arbitrary set . Prove that the set of all equivalence classes under constitutes a partition of .     It must be shown that is reflexive, symmetric, and transitive.     and  Let be any set and let be an equivalence relation on . Let be any element of . since is reflexive, so each element of is in some equivalence class. Therefore, the union of all equivalence classes equals . Next we show that any two equivalence classes are either identical or disjoint and we are done. Let and be two equivalence classes, and assume that . We want to show that . To show that , let . . Also, there exists an element, , of that is in the intersection of and by our assumption. Therefore,  Next,   Similarly, .    "
},
{
  "id": "exercises-10-3-9",
  "level": "2",
  "url": "s-properties-of-relations.html#exercises-10-3-9",
  "type": "Exercise",
  "number": "10.3.4.8",
  "title": "",
  "body": "Define on the power set of by , where . Prove that is an equivalence relation. What are the equivalence classes under ?  "
},
{
  "id": "exercises-10-3-10",
  "level": "2",
  "url": "s-properties-of-relations.html#exercises-10-3-10",
  "type": "Exercise",
  "number": "10.3.4.9",
  "title": "",
  "body": "Consider the following relations on . Which are equivalence relations? For the equivalence relations, list the equivalence classes.    iff the English spellings of and begin with the same letter.   iff is a positive integer.   iff is an even integer.   Equivalence Relation, , and  Not an Equivalence Relation.  Equivalence Relation, and    "
},
{
  "id": "exercises-10-3-11",
  "level": "2",
  "url": "s-properties-of-relations.html#exercises-10-3-11",
  "type": "Exercise",
  "number": "10.3.4.10",
  "title": "",
  "body": "Building on :   Prove that congruence modulo is transitive.  What are the equivalence classes under congruence modulo 2?  What are the equivalence classes under congruence modulo 10?   "
},
{
  "id": "exercises-10-3-12",
  "level": "2",
  "url": "s-properties-of-relations.html#exercises-10-3-12",
  "type": "Exercise",
  "number": "10.3.4.11",
  "title": "",
  "body": "In this exercise, we prove that implication is a partial ordering. Let be any set of propositions.   Verify that is a tautology, thereby showing that is a reflexive relation on .  Prove that is antisymmetric on . Note: we do not use = when speaking of propositions, but rather equivalence, .  Prove that is transitive on .  Given that is the proposition on , draw the Hasse diagram for the relation on .     These proofs follow from the biconditional equivalence in .    Apply the chain rule.     Hasse diagram for implication      "
},
{
  "id": "exercise-10-3-12",
  "level": "2",
  "url": "s-properties-of-relations.html#exercise-10-3-12",
  "type": "Exercise",
  "number": "10.3.4.12",
  "title": "",
  "body": "Let be a poset with the Hasse diagram shown below. Another relation is defined as follows: if and only if there exists such that and in the poset .   Prove that is reflexive.  Prove that is symmetric.  A compatible with respect to relation is any subset of set such that . A compatible is a maximal compatible if is not a proper subset of another compatible. Give all maximal compatibles with respect to relation defined above.  Discuss a characterization of the set of maximal compatibles for relation when is a general finite poset. What conditions, if any, on a general finite poset will make an equivalence relation?    Hasse diagram for in exercise 12.   Hasse diagram for exercise 12    "
},
{
  "id": "s-matrices-of-relations",
  "level": "1",
  "url": "s-matrices-of-relations.html",
  "type": "Section",
  "number": "10.4",
  "title": "Matrices of Relations",
  "body": "Matrices of Relations   We have discussed two of the many possible ways of representing a relation, namely as a digraph or as a set of ordered pairs. In this section we will discuss the representation of relations by matrices.  Representing a Relation with a Matrix  Adjacency Matrix Adjacency Matrix Let and be finite sets of cardinality and , respectively. Let be a relation from into . Then can be represented by the matrix defined by  is called the adjacency matrix (or the relation matrix) of .   A simple example  Let and let be the relation on . Since is a relation from into the same set (the of the definition), we have , , and , while , , and . Next, since   , we have  , we have  , we have   , we have   All other entries of are zero, so     Composition as Matrix Multiplication  From the definition of and of composition, we note that The adjacency matrix of is .  We do not write only for notational purposes. In fact, can be obtained from the matrix product ; however, we must use a slightly different form of arithmetic.  Boolean Arithmetic  Boolean Arithmetic Boolean arithmetic is the arithmetic defined on using Boolean addition and Boolean multiplication, defined by            Notice that from , this is the arithmetic of logic, where replaces or and replaces and.  Composition by Multiplication Suppose that and . Then using Boolean arithmetic, and .  Composition is Matrix Multiplication Let , , and be finite sets where is a relation from into and is a relation from into . If and are the adjacency matrices of and , respectively, then the product using Boolean arithmetic is the adjacency matrix of the composition .  Remark: A convenient help in constructing the adjacency matrix of a relation from a set into a set is to write the elements from in a column preceding the first column of the adjacency matrix, and the elements of in a row above the first row. Initially, in would be To fill in the matrix, is 1 if and only if . So that, since the pair , the entry of corresponding to the row labeled 2 and the column labeled 5 in the matrix is a 1.  Relations and Information This final example gives an insight into how relational data base programs can systematically answer questions pertaining to large masses of information. Matrices (on the left) and (on the right) define the relations and where if software can be run with operating system , and if operating system can run on computer . Although the relation between the software and computers is not implicit from the data given, we can easily compute this information. The matrix of is , which is This matrix tells us at a glance which software will run on the computers listed. In this case, all software will run on all computers with the exception of program P2, which will not run on the computer C3, and program P4, which will not run on the computer C1.   Exercises  Let , , and . Let be the relation from into defined by , and let be the relation from into defined by .   Determine the adjacency matrices of and .  Use the definition of composition to find .  Verify the result in part b by finding the product of the adjacency matrices of and .       and           Determine the adjacency matrix of each relation given via the digraphs in Exercise 3 of .  Using the matrices found in part (a) above, find of each relation in Exercise 3 of .  Find the digraph of directly from the given digraph and compare your results with those of part (b).    Suppose that the matrices in are relations on . What relations do and describe?   M : if and only if  N : if and only if is less than .     Let be the set of weekdays, Monday through Friday, let be a set of employees of a tutoring center, and let be a set of computer languages for which tutoring is offered, . We define (schedule) from into by if is scheduled to work on day . We also define from into by if can tutor students in language . If and are defined by matrices      compute using Boolean arithmetic and give an interpretation of the relation it defines, and  compute using regular arithmetic and give an interpretation of what the result describes.    How many different reflexive, symmetric relations are there on a set with three elements?  Consider the possible matrices. The diagonal entries of the matrix for such a relation must be 1. When the three entries above the diagonal are determined, the entries below are also determined. Therefore, there are fitting the description.   Let . Let be the relation on with adjacency matrix   Explain why is a partial ordering on .  Draw its Hasse diagram.    Define relations and on by and .   Represent and as both graphs and matrices.  Determine , , and ; and represent them clearly in any way.    and          Prove that if is a transitive relation on a set , then .  Find an example of a transitive relation for which .    We define on the set of all relation matrices by the rule that if and are any two relation matrices, if and only if for all .   Prove that is a partial ordering on all relation matrices.  Prove that , but the converse is not true.  If and are matrices of equivalence relations and , how are the equivalence classes defined by related to the equivalence classes defined by ?    Reflexive: for all , therefore  Antisymmetric: Assume and for all . Therefore, for all and so  Transitive: Assume and are matrices where and , for all . Then for all , and so .  .  To verify that the converse is not true we need only one example. For , let and all other entries equal , and let be the zero matrix. Since and are both the zero matrix, , but since is false.  The matrices are defined on the same set . Let be the equivalence classes defined by and let be those defined by . Claim: .     "
},
{
  "id": "def-adjacency-matrix",
  "level": "2",
  "url": "s-matrices-of-relations.html#def-adjacency-matrix",
  "type": "Definition",
  "number": "10.4.1",
  "title": "Adjacency Matrix.",
  "body": "Adjacency Matrix Adjacency Matrix Let and be finite sets of cardinality and , respectively. Let be a relation from into . Then can be represented by the matrix defined by  is called the adjacency matrix (or the relation matrix) of .  "
},
{
  "id": "ex-first-10-4",
  "level": "2",
  "url": "s-matrices-of-relations.html#ex-first-10-4",
  "type": "Example",
  "number": "10.4.2",
  "title": "A simple example.",
  "body": "A simple example  Let and let be the relation on . Since is a relation from into the same set (the of the definition), we have , , and , while , , and . Next, since   , we have  , we have  , we have   , we have   All other entries of are zero, so   "
},
{
  "id": "def-boolean-arithmetic",
  "level": "2",
  "url": "s-matrices-of-relations.html#def-boolean-arithmetic",
  "type": "Definition",
  "number": "10.4.3",
  "title": "Boolean Arithmetic.",
  "body": "Boolean Arithmetic  Boolean Arithmetic Boolean arithmetic is the arithmetic defined on using Boolean addition and Boolean multiplication, defined by           "
},
{
  "id": "ex-composition-matrices",
  "level": "2",
  "url": "s-matrices-of-relations.html#ex-composition-matrices",
  "type": "Example",
  "number": "10.4.5",
  "title": "Composition by Multiplication.",
  "body": "Composition by Multiplication Suppose that and . Then using Boolean arithmetic, and . "
},
{
  "id": "theorem-composition-is-multiplication",
  "level": "2",
  "url": "s-matrices-of-relations.html#theorem-composition-is-multiplication",
  "type": "Theorem",
  "number": "10.4.6",
  "title": "Composition is Matrix Multiplication.",
  "body": "Composition is Matrix Multiplication Let , , and be finite sets where is a relation from into and is a relation from into . If and are the adjacency matrices of and , respectively, then the product using Boolean arithmetic is the adjacency matrix of the composition . "
},
{
  "id": "ex-relations-information",
  "level": "2",
  "url": "s-matrices-of-relations.html#ex-relations-information",
  "type": "Example",
  "number": "10.4.7",
  "title": "Relations and Information.",
  "body": "Relations and Information This final example gives an insight into how relational data base programs can systematically answer questions pertaining to large masses of information. Matrices (on the left) and (on the right) define the relations and where if software can be run with operating system , and if operating system can run on computer . Although the relation between the software and computers is not implicit from the data given, we can easily compute this information. The matrix of is , which is This matrix tells us at a glance which software will run on the computers listed. In this case, all software will run on all computers with the exception of program P2, which will not run on the computer C3, and program P4, which will not run on the computer C1. "
},
{
  "id": "exercises-10-4-2",
  "level": "2",
  "url": "s-matrices-of-relations.html#exercises-10-4-2",
  "type": "Exercise",
  "number": "10.4.3.1",
  "title": "",
  "body": "Let , , and . Let be the relation from into defined by , and let be the relation from into defined by .   Determine the adjacency matrices of and .  Use the definition of composition to find .  Verify the result in part b by finding the product of the adjacency matrices of and .       and        "
},
{
  "id": "exercises-10-4-3",
  "level": "2",
  "url": "s-matrices-of-relations.html#exercises-10-4-3",
  "type": "Exercise",
  "number": "10.4.3.2",
  "title": "",
  "body": "  Determine the adjacency matrix of each relation given via the digraphs in Exercise 3 of .  Using the matrices found in part (a) above, find of each relation in Exercise 3 of .  Find the digraph of directly from the given digraph and compare your results with those of part (b).   "
},
{
  "id": "exercises-10-4-4",
  "level": "2",
  "url": "s-matrices-of-relations.html#exercises-10-4-4",
  "type": "Exercise",
  "number": "10.4.3.3",
  "title": "",
  "body": "Suppose that the matrices in are relations on . What relations do and describe?   M : if and only if  N : if and only if is less than .    "
},
{
  "id": "exercises-10-4-5",
  "level": "2",
  "url": "s-matrices-of-relations.html#exercises-10-4-5",
  "type": "Exercise",
  "number": "10.4.3.4",
  "title": "",
  "body": "Let be the set of weekdays, Monday through Friday, let be a set of employees of a tutoring center, and let be a set of computer languages for which tutoring is offered, . We define (schedule) from into by if is scheduled to work on day . We also define from into by if can tutor students in language . If and are defined by matrices      compute using Boolean arithmetic and give an interpretation of the relation it defines, and  compute using regular arithmetic and give an interpretation of what the result describes.   "
},
{
  "id": "exercises-10-4-6",
  "level": "2",
  "url": "s-matrices-of-relations.html#exercises-10-4-6",
  "type": "Exercise",
  "number": "10.4.3.5",
  "title": "",
  "body": "How many different reflexive, symmetric relations are there on a set with three elements?  Consider the possible matrices. The diagonal entries of the matrix for such a relation must be 1. When the three entries above the diagonal are determined, the entries below are also determined. Therefore, there are fitting the description.  "
},
{
  "id": "exercises-10-4-7",
  "level": "2",
  "url": "s-matrices-of-relations.html#exercises-10-4-7",
  "type": "Exercise",
  "number": "10.4.3.6",
  "title": "",
  "body": "Let . Let be the relation on with adjacency matrix   Explain why is a partial ordering on .  Draw its Hasse diagram.   "
},
{
  "id": "exercises-10-4-8",
  "level": "2",
  "url": "s-matrices-of-relations.html#exercises-10-4-8",
  "type": "Exercise",
  "number": "10.4.3.7",
  "title": "",
  "body": "Define relations and on by and .   Represent and as both graphs and matrices.  Determine , , and ; and represent them clearly in any way.    and       "
},
{
  "id": "exercises-10-4-9",
  "level": "2",
  "url": "s-matrices-of-relations.html#exercises-10-4-9",
  "type": "Exercise",
  "number": "10.4.3.8",
  "title": "",
  "body": "  Prove that if is a transitive relation on a set , then .  Find an example of a transitive relation for which .   "
},
{
  "id": "exercises-10-4-10",
  "level": "2",
  "url": "s-matrices-of-relations.html#exercises-10-4-10",
  "type": "Exercise",
  "number": "10.4.3.9",
  "title": "",
  "body": "We define on the set of all relation matrices by the rule that if and are any two relation matrices, if and only if for all .   Prove that is a partial ordering on all relation matrices.  Prove that , but the converse is not true.  If and are matrices of equivalence relations and , how are the equivalence classes defined by related to the equivalence classes defined by ?    Reflexive: for all , therefore  Antisymmetric: Assume and for all . Therefore, for all and so  Transitive: Assume and are matrices where and , for all . Then for all , and so .  .  To verify that the converse is not true we need only one example. For , let and all other entries equal , and let be the zero matrix. Since and are both the zero matrix, , but since is false.  The matrices are defined on the same set . Let be the equivalence classes defined by and let be those defined by . Claim: .   "
},
{
  "id": "s-closure-operations-on-relations",
  "level": "1",
  "url": "s-closure-operations-on-relations.html",
  "type": "Section",
  "number": "10.5",
  "title": "Closure Operations on Relations",
  "body": "Closure Operations on Relations   In , we studied relations and one important operation on relations, namely composition. This operation enables us to generate new relations from previously known relations. In , we discussed some key properties of relations. We now wish to consider the situation of constructing a new relation from an existing relation where, first, contains and, second, satisfies the transitive property.   Transitive Closure  Consider a telephone network in which the main office is connected to, and can communicate to, individuals and . Both and can communicate to another person, ; however, the main office cannot communicate with . Assume communication is only one way, as indicated. This situation can be described by the relation . We would like to change the system so that the main office can communicate with person and still maintain the previous system. We, of course, want the most economical system.  This can be rephrased as follows; Find the smallest relation which contains as a subset and which is transitive; .  Transitive Closure Transitive Closure The transitive closure of Let be a set and be a relation on . The transitive closure of , denoted by , is the smallest transitive relation that contains as a subset.  Let , and let be a relation on . This relation is called the successor relation on since each element is related to its successor. How do we compute ? By inspection we note that must be in . Let's analyze why. This is so because and , and the transitive property forces to be in .  In general, it follows that if and then . This condition is exactly the membership requirement for the pair to be in the composition . So every element in must be an element in . So we now know that, contains at least . In particular, for this example, since and , we have   Is the relation transitive? Again, by inspection, is not an element of , but and . Therefore, the composition produces , and it must be an element of since and are required to be in . This shows that . This process must be continued until the resulting relation is transitive. If is finite, as is true in this example, the transitive closure will be obtained in a finite number of steps. For this example,   Transitive Closure on a Finite Set If is a relation on a set and , then the transitive closure of is the union of the first powers of . That is,  Let's now consider the matrix analogue of the transitive closure.  Consider the relation on the set . The matrix of is  Recall that can be determined through computing the matrix powers . For our example,              How do we relate to the powers of ?  Matrix of a Transitive Closure Let be a relation on a finite set and let be the matrix of , the transitive closure of . Then , using Boolean arithmetic.  Using this theorem, we find is the matrix consisting of all , thus, is all of .   Algorithms for computing transitive closure  Let be a relation on the set with relation matrix . The matrix of the transitive closure , can be computed by the equation . By using ordinary polynomial evaluation methods, you can compute with matrix multiplications:  For example, if , .  We can make use of the fact that if is a relation matrix, due to the fact that in Boolean arithmetic. Let . Then  .  Similarly, and by induction we can prove   Notice how each matrix multiplication doubles the number of terms that have been added to the sum that you currently have computed. In algorithmic form, we can compute as follows.  Transitive Closure Algorithm  Let be a relation matrix and let be its transitive closure matrix, which is to be computed as matrix    1.0. S = M 2.0 T= S*(I+S) 3.0 While T != S 3.1 S = T 3.2 T= S*(I+S) \/\/ using Boolean arithmetic 4.0 Return T        Often the higher-powered terms in do not contribute anything to . When the condition becomes true in Step 3, this is an indication that no higher-powered terms are needed.  To compute using this algorithm, you need to perform no more than matrix multiplications, where is the least integer that is greater than or equal to . For example, if is a relation on 25 elements, no more than matrix multiplications are needed.    A second algorithm, Warshall's Algorithm, reduces computation time to the time that it takes to multiply two square matrices with the same order as the relation matrix in question.  Warshall's Algorithm  Let be an relation matrix and let be its transitive closure matrix, which is to be computed as matrix using Boolean arithmetic    1.0 W = M 2.0 for k = 1 to n: for i = 1 to n: for j = 1 to n: W[i,j]= W[i,j] + W[i,k] * W[k,j] 3.0 Return W       Exercises  Let and . Compute using the matrix representation of . Verify your results by checking against the result obtained directly from the definition of transitive closure.   Let and . Determine by any means. Represent your answer as a matrix.     Draw digraphs of the relations , , , and where is defined in the first exercise above.  Verify that in terms of the graph of , if and only if is reachable from along a path of any finite nonzero length.    See graphs below.  For example, and using one can go from 0 to 4 using a path of length 3.     Digraph of   digraph of     Digraph of   digraph of       Digraph of   digraph of     Digraph of   digraph of      Let be the relation represented by the following digraph.   Digraph of in exercise 4.   Graph for exercise 4     Find using the definition based on order pairs.  Determine the digraph of directly from the digraph of .  Verify your result in part (b) by computing the digraph from your result in part (a).      Define reflexive closure and symmetric closure by imitating the definition of transitive closure.  Use your definitions to compute the reflexive and symmetric closures of examples in the text.  What are the transitive reflexive closures of these examples?  Convince yourself that the reflexive closure of the relation on the set of positive integers is .   Definition: Reflexive Closure. Let be a relation on . The reflexive closure of is the smallest reflexive relation that contains .  Theorem: The reflexive closure of is the union of with    What common relations on are the transitive closures of the following relations?    if and only if .   if and only if .     Let be any set and a relation on , prove that .  Is the transitive closure of a symmetric relation always both symmetric and reflexive? Explain.  By the definition of transitive closure, is the smallest relation which contains ; therefore, it is transitive. The transitive closure of , , is the smallest transitive relation that contains . Since is transitive, .  The transitive closure of a symmetric relation is symmetric, but it may not be reflexive. If one element is not related to any elements, then the transitive closure will not relate that element to others.     The definition of the of refers to the smallest transitive relation that contains as a subset. Show that the intersection of all transitive relations on containing is a transitive relation containing and is precisely .   "
},
{
  "id": "def-transitive-closure",
  "level": "2",
  "url": "s-closure-operations-on-relations.html#def-transitive-closure",
  "type": "Definition",
  "number": "10.5.1",
  "title": "Transitive Closure.",
  "body": "Transitive Closure Transitive Closure The transitive closure of Let be a set and be a relation on . The transitive closure of , denoted by , is the smallest transitive relation that contains as a subset. "
},
{
  "id": "theorem-transitive-closure-formula",
  "level": "2",
  "url": "s-closure-operations-on-relations.html#theorem-transitive-closure-formula",
  "type": "Theorem",
  "number": "10.5.2",
  "title": "Transitive Closure on a Finite Set.",
  "body": "Transitive Closure on a Finite Set If is a relation on a set and , then the transitive closure of is the union of the first powers of . That is, "
},
{
  "id": "s-closure-operations-on-relations-3-12",
  "level": "2",
  "url": "s-closure-operations-on-relations.html#s-closure-operations-on-relations-3-12",
  "type": "Table",
  "number": "10.5.3",
  "title": "",
  "body": "           "
},
{
  "id": "theorem-matrix-transitive-closure",
  "level": "2",
  "url": "s-closure-operations-on-relations.html#theorem-matrix-transitive-closure",
  "type": "Theorem",
  "number": "10.5.4",
  "title": "Matrix of a Transitive Closure.",
  "body": "Matrix of a Transitive Closure Let be a relation on a finite set and let be the matrix of , the transitive closure of . Then , using Boolean arithmetic. "
},
{
  "id": "alg-trans-closure",
  "level": "2",
  "url": "s-closure-operations-on-relations.html#alg-trans-closure",
  "type": "Algorithm",
  "number": "10.5.5",
  "title": "Transitive Closure Algorithm.",
  "body": "Transitive Closure Algorithm  Let be a relation matrix and let be its transitive closure matrix, which is to be computed as matrix    1.0. S = M 2.0 T= S*(I+S) 3.0 While T != S 3.1 S = T 3.2 T= S*(I+S) \/\/ using Boolean arithmetic 4.0 Return T     "
},
{
  "id": "s-closure-operations-on-relations-4-9",
  "level": "2",
  "url": "s-closure-operations-on-relations.html#s-closure-operations-on-relations-4-9",
  "type": "Note",
  "number": "10.5.7",
  "title": "",
  "body": "  Often the higher-powered terms in do not contribute anything to . When the condition becomes true in Step 3, this is an indication that no higher-powered terms are needed.  To compute using this algorithm, you need to perform no more than matrix multiplications, where is the least integer that is greater than or equal to . For example, if is a relation on 25 elements, no more than matrix multiplications are needed.   "
},
{
  "id": "alg-warshall",
  "level": "2",
  "url": "s-closure-operations-on-relations.html#alg-warshall",
  "type": "Algorithm",
  "number": "10.5.8",
  "title": "Warshall’s Algorithm.",
  "body": "Warshall's Algorithm  Let be an relation matrix and let be its transitive closure matrix, which is to be computed as matrix using Boolean arithmetic    1.0 W = M 2.0 for k = 1 to n: for i = 1 to n: for j = 1 to n: W[i,j]= W[i,j] + W[i,k] * W[k,j] 3.0 Return W     "
},
{
  "id": "exercises-10-5-2",
  "level": "2",
  "url": "s-closure-operations-on-relations.html#exercises-10-5-2",
  "type": "Exercise",
  "number": "10.5.3.1",
  "title": "",
  "body": "Let and . Compute using the matrix representation of . Verify your results by checking against the result obtained directly from the definition of transitive closure.  "
},
{
  "id": "exercises-10-5-3",
  "level": "2",
  "url": "s-closure-operations-on-relations.html#exercises-10-5-3",
  "type": "Exercise",
  "number": "10.5.3.2",
  "title": "",
  "body": "Let and . Determine by any means. Represent your answer as a matrix.  "
},
{
  "id": "exercises-10-5-4",
  "level": "2",
  "url": "s-closure-operations-on-relations.html#exercises-10-5-4",
  "type": "Exercise",
  "number": "10.5.3.3",
  "title": "",
  "body": "  Draw digraphs of the relations , , , and where is defined in the first exercise above.  Verify that in terms of the graph of , if and only if is reachable from along a path of any finite nonzero length.    See graphs below.  For example, and using one can go from 0 to 4 using a path of length 3.     Digraph of   digraph of     Digraph of   digraph of       Digraph of   digraph of     Digraph of   digraph of     "
},
{
  "id": "exercises-10-5-5",
  "level": "2",
  "url": "s-closure-operations-on-relations.html#exercises-10-5-5",
  "type": "Exercise",
  "number": "10.5.3.4",
  "title": "",
  "body": "Let be the relation represented by the following digraph.   Digraph of in exercise 4.   Graph for exercise 4     Find using the definition based on order pairs.  Determine the digraph of directly from the digraph of .  Verify your result in part (b) by computing the digraph from your result in part (a).   "
},
{
  "id": "exercises-10-5-6",
  "level": "2",
  "url": "s-closure-operations-on-relations.html#exercises-10-5-6",
  "type": "Exercise",
  "number": "10.5.3.5",
  "title": "",
  "body": "  Define reflexive closure and symmetric closure by imitating the definition of transitive closure.  Use your definitions to compute the reflexive and symmetric closures of examples in the text.  What are the transitive reflexive closures of these examples?  Convince yourself that the reflexive closure of the relation on the set of positive integers is .   Definition: Reflexive Closure. Let be a relation on . The reflexive closure of is the smallest reflexive relation that contains .  Theorem: The reflexive closure of is the union of with   "
},
{
  "id": "exercises-10-5-7",
  "level": "2",
  "url": "s-closure-operations-on-relations.html#exercises-10-5-7",
  "type": "Exercise",
  "number": "10.5.3.6",
  "title": "",
  "body": "What common relations on are the transitive closures of the following relations?    if and only if .   if and only if .  "
},
{
  "id": "exercises-10-5-8",
  "level": "2",
  "url": "s-closure-operations-on-relations.html#exercises-10-5-8",
  "type": "Exercise",
  "number": "10.5.3.7",
  "title": "",
  "body": "  Let be any set and a relation on , prove that .  Is the transitive closure of a symmetric relation always both symmetric and reflexive? Explain.  By the definition of transitive closure, is the smallest relation which contains ; therefore, it is transitive. The transitive closure of , , is the smallest transitive relation that contains . Since is transitive, .  The transitive closure of a symmetric relation is symmetric, but it may not be reflexive. If one element is not related to any elements, then the transitive closure will not relate that element to others.   "
},
{
  "id": "exercises-10-5-9",
  "level": "2",
  "url": "s-closure-operations-on-relations.html#exercises-10-5-9",
  "type": "Exercise",
  "number": "10.5.3.8",
  "title": "",
  "body": " The definition of the of refers to the smallest transitive relation that contains as a subset. Show that the intersection of all transitive relations on containing is a transitive relation containing and is precisely . "
},
{
  "id": "s-Systems-of-Equations",
  "level": "1",
  "url": "s-Systems-of-Equations.html",
  "type": "Section",
  "number": "11.1",
  "title": "Systems of Equations",
  "body": " Systems of Equations  Systems of Equations   In this section we will learn how to solve multiple linear equations with multiple unknowns using matrices.    Elementary Operations  Consider the following example.   Solution Set  Solution Set  Find and such that   The set of ordered pairs, (x, y) which solve both equations is called the solution set .  You can verify that is a solution to the above system. The interesting question is this: If you were not given this information to verify, how could you determine the solution? You can do this by using the following basic operations on the equations, none of which change the set of solutions of the system of equations.    Elementary Operations  Elementary Operations   Elementary operations are those operations consisting of the following.   Interchange the order in which the equations are listed.    Multiply any equation by a nonzero number.    Replace any equation with itself added to a multiple of another equation.       To illustrate the third of these operations on this particular system, consider the following.  The system has the same solution set as the system  To obtain the second system, take the second equation of the first system and add times the first equation to obtain . Now, this clearly shows that and so it follows from the other equation that and so .   Of course a linear system may involve many equations and many variables. The solution set is still the collection of solutions to the equations. In every case, the above operations of do not change the set of solutions to the system of linear equations.    Suppose you have two equations, involving the variables,  where and are expressions involving the variables and and are constants. (In the above example there are only two variables, and and while .) Then the system has the same solution set as Also the system has the same solutions as the system, . The system has the same solution as the system provided .    If solves then it solves the first equation in . Also, it satisfies and so, since it also solves it must solve . Therefore, if solves it must also solve . On the other hand, if it solves the system and , then and so you can subtract these equal quantities from both sides of to obtain showing that it satisfies .  The second assertion of the theorem which says that the system has the same solution as the system, is seen to be true because it involves nothing more than listing the two equations in a different order. They are the same equations.  The third assertion of the theorem which says has the same solution as the system provided is verified as follows: If is a solution of , then it is a solution to because the second system only involves multiplying the equation, by . If is a solution of , then upon multiplying by the number , you find that     Stated simply, the above theorem shows that the elementary operations do not change the solution set of a system of equations.  Here is an example in which there are three equations and three variables. You want to find values for such that each of the given equations are satisfied when these values are plugged in to the equations.    Find the solutions to the system,       To solve this system replace the second equation by times the first equation added to the second. This yields the system Now take times the second and add to the third. More precisely, replace the third equation with times the second added to the third. This yields the system At this point, you can tell what the solution is. This system has the same solution as the original system and in the above, . Then using this in the second equation, it follows and so . Now using this in the top equation yields and so . This process is called back substitution .  Alternatively, you could have continued as follows. Add times the bottom equation to the middle and then add times the bottom to the top. This yields Now add times the second to the top. This yields a system which has the same solution set as the original system. This avoided back substitution and led to the same solution set.       Gauss Elimination  Gauss Elimination  A less cumbersome way to represent a linear system is to write it as an augmented matrix . For example the linear system in can be written as It has exactly the same information as the original system but here it is understood there is an column , a column, , and a column, . The rows correspond to the equations in the system. Thus the top row in the augmented matrix corresponds to the equation, . Now when you replace an equation with a multiple of another equation added to itself, you are just taking a row of this augmented matrix and replacing it with a multiple of another row added to it. Thus the first step in solving would be to take times the first row of the augmented matrix above and add it to the second row,  Note how this corresponds to the first step in solving . Next take (-2) times the second row and add to the third, This augmented matrix corresponds to the system which is the same as the second step in solving . By back substitution you obtain the solution , , and .  In general a linear system is of the form  where the are variables and the and are constants. This system can be represented by the augmented matrix Changes to a system of equations as a result of an elementary operation translate into changes of an augmented matrix resulting from a row operation. Note that implies that the row operations deliver an augmented matrix for a system of equations which has the same solution set as the original system.   Row Operations   Row Operations    The row operations consist of the following   Switch two rows.    Multiply a row by a nonzero number.    Replace a row by a multiple of another row added to it.        Gauss elimination  Gauss Elimination  is a systematic procedure to simplify an augmented matrix to a reduced form. In the following definition, the term  leading entry  refers to the first nonzero entry of a row when scanning the row from left to right.   Echelon Form   Echelon Form    An augmented matrix is in echelon form if   All nonzero rows are above any rows of zeros.    Each leading entry of a row is in a column to the right of the leading entries of any rows above it.       How do you know when to stop doing row operations? You might stop when you have obtained an echelon form as described above, but you certainly should stop doing row operations if you have gotten a matrix in row reduced echelon form described next.   Row Reduced Echelon Form   Row Reduced Echelon Form    An augmented matrix is in row reduced echelon form if   All nonzero rows are above any rows of zeros.    Each leading entry of a row is in a column to the right of the leading entries of any rows above it.    All entries in a column above and below a leading entry are zero.    Each leading entry is a 1, the only nonzero entry in its column.        Matrices in Row Reduced Echelon Form   Here are some matrices which are in row reduced echelon form. .     Matrices in Echelon Form   Here are matrices in echelon form which are not in row reduced echelon form but which are in echelon form.     Matrices not in Echelon Form   Here are matrices which are not in echelon form.     Pivot Positions and Pivot Columns   Pivot Position    Pivot Column    A pivot position in a matrix is the location of a leading entry in an echelon form resulting from the application of row operations to the matrix. A pivot column is a column that contains a pivot position.    For example consider the following.   Putting a Matrix into Row Reduced Echelon Form   Suppose Where are the pivot positions and pivot columns?    Replace the second row by -3 times the first added to the second. This yields This is not in reduced echelon form so replace the bottom row by -4 times the top row added to the bottom. This yields This is still not in reduced echelon form. Replace the bottom row by -1 times the middle row added to the bottom. This yields which is in echelon form, although not in reduced echelon form. Therefore, the pivot positions in the original matrix are the locations corresponding to the first row and first column and the second row and second columns as shown in the following: Thus the pivot columns in the matrix are the first two columns.    The following is the algorithm for obtaining a matrix which is in row reduced echelon form.    This algorithm tells how to start with a matrix and do row operations on it in such a way as to end up with a matrix in row reduced echelon form.   Find the first nonzero column from the left. This is the first pivot column. The position at the top of the first pivot column is the first pivot position. Switch rows if necessary to place a nonzero number in the first pivot position.    Use row operations to zero out the entries below the first pivot position.    Ignore the row containing the most recent pivot position identified and the rows above it. Repeat steps 1 and 2 to the remaining sub-matrix, the rectangular array of numbers obtained from the original matrix by deleting the rows you just ignored. Repeat the process until there are no more rows to modify. The matrix will then be in echelon form.    Moving from right to left, use the nonzero elements in the pivot positions to zero out the elements in the pivot columns which are above the pivots.    Divide each nonzero row by the value of the leading entry. The result will be a matrix in row reduced echelon form.   This row reduction procedure applies to both augmented matrices and non augmented matrices. There is nothing special about the augmented column with respect to the row reduction procedure.      Here is a matrix. Do row reductions till you obtain a matrix in echelon form. Then complete the process by producing one in row reduced echelon form.    The pivot column is the second. Hence the pivot position is the one in the first row and second column. Switch the first two rows to obtain a nonzero entry in this pivot position.   Step two is not necessary because all the entries below the first pivot position in the resulting matrix are zero. Now ignore the top row and the columns to the left of this first pivot position. Thus you apply the same operations to the smaller matrix   The next pivot column is the third corresponding to the first in this smaller matrix and the second pivot position is therefore, the one which is in the second row and third column.  In this case it is not necessary to switch any rows to place a nonzero entry in this position because there is already a nonzero entry there. Multiply the third row of the original matrix by -2 and then add the second row to it. This yields   The next matrix the steps in the algorithm are applied to is   The first pivot column is the first column in this case and no switching of rows is necessary because there is a nonzero entry in the first pivot position. Therefore, the algorithm yields for the next step   Now the algorithm will be applied to the matrix There is only one column and it is nonzero so this single column is the pivot column. Therefore, the algorithm yields the following matrix for the echelon form.   To complete placing the matrix in reduced echelon form, multiply the third row by 3 and add -2 times the fourth row to it. This yields   Next multiply the second row by 3 and take 2 times the fourth row and add to it. Then add the fourth row to the first.   Next work on the fourth column in the same way.   Take times the second row and add to the first.   Finally, divide by the value of the leading entries in the nonzero rows.     The above algorithm is the way a computer would obtain a reduced echelon form for a given matrix. It is not necessary for you to pretend you are a computer but if you like to do so, the algorithm described above will work. The main idea is to do row operations in such a way as to end up with a matrix in echelon form or row reduced echelon form because when this has been done, the resulting augmented matrix will allow you to describe the solutions to the linear system of equations in a meaningful way. When you do row operations until you obtain row reduced echelon form, the process is called the Gauss Jordan method  Gauss Jordan Method  . Otherwise, it is called Gauss elimination .    Give the complete solution to the system of equations, , , and .    The augmented matrix for this system is   Multiply the second row by 2, the first row by 5, and then take (-1) times the first row and add to the second. Then multiply the first row by 1\/5. This yields   Switch the last two rows to get   then take -3 times the top added to 2 times the middle to get .  Multiply bottom by 19 and take the second row times -1 added to the bottom. This gives a row of zeros with -2 at the right end, representing the equation 0x + 0y + 0z = -2 which has no solution so there is no solution to this system of equations. When this happens, the system is called inconsistent . In this case it is very easy to describe the solution set. The system has no solution.    Here is another example based on the use of row operations.    Give the complete solution to the system of equations, , , and .    The augmented matrix of this system is   Replace the last row with 2 times the top row added to 3 times the bottom row combining two row operations. This gives The entry 3 in this sequence of row operations is called the pivot . It is used to create zeros in the other places of the column.  Next take -1 times the middle row and add to the bottom. Here the 1 in the second row is the pivot. This is in reduced echelon form. The equations corresponding to this reduced echelon form are and . Apparently can equal any number. Lets call this number .  In this context is called a parameter .  Therefore, the solution set of this system is , , and where is completely arbitrary. The system has an infinite set of solutions which are given in the above simple way. This is what it is all about, finding the solutions to the system.    There is some terminology connected to this which is useful. Recall how each column corresponds to a variable in the original system of equations. The variables corresponding to a pivot column are called basic variables . The other variables are called free variables . In there was one free variable, , and two basic variables, and . In de- scribing the solution to the system of equations, the free variables are assigned a parameter. In this parameter was . Sometimes there are many free variables and in these cases, you need to use many parameters. Here is another example.    Find the solution to the system       The augmented matrix is   Take -1 times the first row and add to the second. Then take -1 times the first row and add to the third. This yields   Now add the second row to the bottom row This matrix is in echelon form and you see the basic variables are and while the free variables are and . Assign to and to . Then the second row yields the equation, while the top equation yields the equation, and so since , this gives showing that , , , and . One can write this in the form This is another example of a system which has an infinite solution set but this time the solution set depends on two parameters, not one.  Most people find it less confusing in the case of an infinite solution set to first place the augmented matrix in row reduced echelon form rather than just echelon form before seeking to write down the description of the solution. In the above, this means we don't stop with the echelon form above. Instead we first place it in reduced echelon form as follows. Then the solution is from the second row and from the first. Thus letting and , the solution as is given previously.    The number of free variables is always equal to the number of different parameters used to describe the solution. If there are no free variables, then either there is no solution as in the case where row operations yield an echelon form like or there is a unique solution as in the case where row operations yield an echelon form like Also, sometimes there are free variables and no solution as in the following: There are a lot of cases to consider but it is not necessary to make a major production of this. Do row operations till you obtain a matrix in echelon form or reduced echelon form and determine whether there is a solution. If there is, see if there are free variables. In this case, there will be infinitely many solutions. Find them by assigning different parameters to the free variables and obtain the solution. If there are no free variables, then there will be a unique solution which is easily determined once the augmented matrix is in echelon or row reduced echelon form. In every case, the process yields a straightforward way to describe the solutions to the linear system. As indicated above, you are probably less likely to become confused if you place the augmented matrix in row reduced echelon form rather than just echelon form.  In summary,   System of Linear Equations   System of Linear Equations    A system of linear equations is a list of equations, where are numbers, and is a number. The above is a system of equations in the variables, . Nothing is said about the relative size of and . Written more simply in terms of summation notation, the above can be written in the form It is desired to find solving each of the equations listed.    As illustrated above, such a system of linear equations may have a unique solution, no solution, or infinitely many solutions and these are the only three cases which can occur for any linear system. Furthermore, you do exactly the same things to solve any linear system. You write the augmented matrix and do row operations until you get a simpler system in which it is possible to see the solution, usually obtaining a matrix in echelon or reduced echelon form. All is based on the observation that the row operations do not change the solution set. You can have more equations than variables, fewer equations than variables, etc. It doesn't matter. You always set up the augmented matrix and go to work on it.    A system of linear equations is called consistent if there exists a solution. It is called inconsistent if there is no solution.    These are reasonable words to describe the situations of having or not having a solution. If you think of each equation as a condition which must be satisfied by the variables, con- sistent would mean there is some choice of variables which can satisfy all the conditions. Inconsistent would mean there is no choice of the variables which can satisfy each of the conditions.     Exercises   Find the point which lies on both lines, and .   Set up augmented matrix: Add the first line to the second. Divide line two by  So . Backsubstituting: , so . Therefore is the point .    Solve Exercise 1 graphically. That is, graph each line and see where they intersect.     Graph of Exercise 11.1.1   Graph of lines described in Exercise 1        Find the point of intersection of the two lines and .    Solve Exercise 3 graphically. That is, graph each line and see where they intersect.    Do the three lines, , , and have a common point of intersection? If so, find the point and if not, tell why they don’t have such a common point of intersection   Set up augmented matrix: Add the first line to the third. Add the first line to the second. Add the second line to the third. Divide line two by  So . Backsubstituting to line one: , so . The common intersecting point is .    Do the three planes, , , and have a common point of intersection? If so, find one and if not, tell why there is no such point.    You have a system of equations in two variables, . Explain the geometric significance of   No solution.    A unique solution.    An infinite number of solutions.         No solution. The lines are parallel.    A unique solution. The lines must intersect.    An infinite number of solutions. The lines must be the same line.       If a system of equations has more equations than variables, can it have a solution? If so, give an example and if not, tell why not.    Find such that is the augmented matrix of an inconsistent matrix.   What we want is for one of the rows to be all zeros except for the last term. If we multiply the top row by and add that to the bottom row, we get We want to make an such that the . Solving for , we get 4. which simplifies to , which is inconsistent.    Find such that is the augmented matrix of a consistent matrix.    Determine if the system is consistent. If so, is the solution unique?       We have the corresponding matrix:   Add row 1 to row 4:   Add row 1 to row 3:   Add row 1 to row 2:   Add row 2 to row 3:   Add row 2 to row 4:   Therefore we see that we have a problem because rows 3 and 4 are saying and . Or we could keep going with the row operations and add row 3 to row 4: Add row 2 to row 4: which then definitively shows that the system is not consistent.    Determine if the system is consistent. If so, is the solution unique?        Find the general solution of the system whose augmented matrix is    Adding row 1 to row 3:   Adding row 1 to row 2:   Adding row 2 to row 3:   Multiplying row 3 by :   So , continuing row operations: add row 3 to row 2 So , continuing row operations: add row 2 to row 1 So .  The solution is then     Find the general solution of the system whose augmented matrix is     Give the complete solution to the system of equations, , , and .   We have the corresponding augmented matrix: Add row one to row 2: Add row one to row 3: Multiply row 2 by and row 3 by So.... . Add row 2 to row 3: This shows that is going to be a free variable. Assign to .The top row yields the equation , since , this gives . Solving for we get , so the final solution can be written:     Give the complete solution to the system of equations, , , and .    "
},
{
  "id": "ss-elementary-operations-3",
  "level": "2",
  "url": "s-Systems-of-Equations.html#ss-elementary-operations-3",
  "type": "Example",
  "number": "11.1.1",
  "title": "Solution Set.",
  "body": " Solution Set  Solution Set  Find and such that   The set of ordered pairs, (x, y) which solve both equations is called the solution set .  You can verify that is a solution to the above system. The interesting question is this: If you were not given this information to verify, how could you determine the solution? You can do this by using the following basic operations on the equations, none of which change the set of solutions of the system of equations.  "
},
{
  "id": "def-elementary-operations",
  "level": "2",
  "url": "s-Systems-of-Equations.html#def-elementary-operations",
  "type": "Definition",
  "number": "11.1.2",
  "title": "Elementary Operations.",
  "body": " Elementary Operations  Elementary Operations   Elementary operations are those operations consisting of the following.   Interchange the order in which the equations are listed.    Multiply any equation by a nonzero number.    Replace any equation with itself added to a multiple of another equation.     "
},
{
  "id": "ex-some-elementary-operations",
  "level": "2",
  "url": "s-Systems-of-Equations.html#ex-some-elementary-operations",
  "type": "Example",
  "number": "11.1.3",
  "title": "",
  "body": " To illustrate the third of these operations on this particular system, consider the following.  The system has the same solution set as the system  To obtain the second system, take the second equation of the first system and add times the first equation to obtain . Now, this clearly shows that and so it follows from the other equation that and so .  "
},
{
  "id": "thm-elementary-operations",
  "level": "2",
  "url": "s-Systems-of-Equations.html#thm-elementary-operations",
  "type": "Theorem",
  "number": "11.1.4",
  "title": "",
  "body": "  Suppose you have two equations, involving the variables,  where and are expressions involving the variables and and are constants. (In the above example there are only two variables, and and while .) Then the system has the same solution set as Also the system has the same solutions as the system, . The system has the same solution as the system provided .    If solves then it solves the first equation in . Also, it satisfies and so, since it also solves it must solve . Therefore, if solves it must also solve . On the other hand, if it solves the system and , then and so you can subtract these equal quantities from both sides of to obtain showing that it satisfies .  The second assertion of the theorem which says that the system has the same solution as the system, is seen to be true because it involves nothing more than listing the two equations in a different order. They are the same equations.  The third assertion of the theorem which says has the same solution as the system provided is verified as follows: If is a solution of , then it is a solution to because the second system only involves multiplying the equation, by . If is a solution of , then upon multiplying by the number , you find that    "
},
{
  "id": "ex-elementary-operations",
  "level": "2",
  "url": "s-Systems-of-Equations.html#ex-elementary-operations",
  "type": "Example",
  "number": "11.1.5",
  "title": "",
  "body": "  Find the solutions to the system,       To solve this system replace the second equation by times the first equation added to the second. This yields the system Now take times the second and add to the third. More precisely, replace the third equation with times the second added to the third. This yields the system At this point, you can tell what the solution is. This system has the same solution as the original system and in the above, . Then using this in the second equation, it follows and so . Now using this in the top equation yields and so . This process is called back substitution .  Alternatively, you could have continued as follows. Add times the bottom equation to the middle and then add times the bottom to the top. This yields Now add times the second to the top. This yields a system which has the same solution set as the original system. This avoided back substitution and led to the same solution set.   "
},
{
  "id": "ss-gauss-elimination-3",
  "level": "2",
  "url": "s-Systems-of-Equations.html#ss-gauss-elimination-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "augmented matrix "
},
{
  "id": "def-row-operations",
  "level": "2",
  "url": "s-Systems-of-Equations.html#def-row-operations",
  "type": "Definition",
  "number": "11.1.6",
  "title": "Row Operations.",
  "body": " Row Operations   Row Operations    The row operations consist of the following   Switch two rows.    Multiply a row by a nonzero number.    Replace a row by a multiple of another row added to it.      "
},
{
  "id": "ss-gauss-elimination-6",
  "level": "2",
  "url": "s-Systems-of-Equations.html#ss-gauss-elimination-6",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Gauss elimination  leading entry  "
},
{
  "id": "def-echelon-form",
  "level": "2",
  "url": "s-Systems-of-Equations.html#def-echelon-form",
  "type": "Definition",
  "number": "11.1.7",
  "title": "Echelon Form.",
  "body": " Echelon Form   Echelon Form    An augmented matrix is in echelon form if   All nonzero rows are above any rows of zeros.    Each leading entry of a row is in a column to the right of the leading entries of any rows above it.      "
},
{
  "id": "def-row-reduced-echelon-form",
  "level": "2",
  "url": "s-Systems-of-Equations.html#def-row-reduced-echelon-form",
  "type": "Definition",
  "number": "11.1.8",
  "title": "Row Reduced Echelon Form.",
  "body": " Row Reduced Echelon Form   Row Reduced Echelon Form    An augmented matrix is in row reduced echelon form if   All nonzero rows are above any rows of zeros.    Each leading entry of a row is in a column to the right of the leading entries of any rows above it.    All entries in a column above and below a leading entry are zero.    Each leading entry is a 1, the only nonzero entry in its column.      "
},
{
  "id": "example-row-reduced-echelon-matrices",
  "level": "2",
  "url": "s-Systems-of-Equations.html#example-row-reduced-echelon-matrices",
  "type": "Example",
  "number": "11.1.9",
  "title": "Matrices in Row Reduced Echelon Form.",
  "body": " Matrices in Row Reduced Echelon Form   Here are some matrices which are in row reduced echelon form. .   "
},
{
  "id": "example-echelon-matrices",
  "level": "2",
  "url": "s-Systems-of-Equations.html#example-echelon-matrices",
  "type": "Example",
  "number": "11.1.10",
  "title": "Matrices in Echelon Form.",
  "body": " Matrices in Echelon Form   Here are matrices in echelon form which are not in row reduced echelon form but which are in echelon form.   "
},
{
  "id": "example-not-echelon-matrices",
  "level": "2",
  "url": "s-Systems-of-Equations.html#example-not-echelon-matrices",
  "type": "Example",
  "number": "11.1.11",
  "title": "Matrices not in Echelon Form.",
  "body": " Matrices not in Echelon Form   Here are matrices which are not in echelon form.   "
},
{
  "id": "def-pivot",
  "level": "2",
  "url": "s-Systems-of-Equations.html#def-pivot",
  "type": "Definition",
  "number": "11.1.12",
  "title": "Pivot Positions and Pivot Columns.",
  "body": " Pivot Positions and Pivot Columns   Pivot Position    Pivot Column    A pivot position in a matrix is the location of a leading entry in an echelon form resulting from the application of row operations to the matrix. A pivot column is a column that contains a pivot position.   "
},
{
  "id": "ss-gauss-elimination-15",
  "level": "2",
  "url": "s-Systems-of-Equations.html#ss-gauss-elimination-15",
  "type": "Example",
  "number": "11.1.13",
  "title": "Putting a Matrix into Row Reduced Echelon Form.",
  "body": " Putting a Matrix into Row Reduced Echelon Form   Suppose Where are the pivot positions and pivot columns?    Replace the second row by -3 times the first added to the second. This yields This is not in reduced echelon form so replace the bottom row by -4 times the top row added to the bottom. This yields This is still not in reduced echelon form. Replace the bottom row by -1 times the middle row added to the bottom. This yields which is in echelon form, although not in reduced echelon form. Therefore, the pivot positions in the original matrix are the locations corresponding to the first row and first column and the second row and second columns as shown in the following: Thus the pivot columns in the matrix are the first two columns.   "
},
{
  "id": "alg-row-reduced-echelon",
  "level": "2",
  "url": "s-Systems-of-Equations.html#alg-row-reduced-echelon",
  "type": "Algorithm",
  "number": "11.1.14",
  "title": "",
  "body": "  This algorithm tells how to start with a matrix and do row operations on it in such a way as to end up with a matrix in row reduced echelon form.   Find the first nonzero column from the left. This is the first pivot column. The position at the top of the first pivot column is the first pivot position. Switch rows if necessary to place a nonzero number in the first pivot position.    Use row operations to zero out the entries below the first pivot position.    Ignore the row containing the most recent pivot position identified and the rows above it. Repeat steps 1 and 2 to the remaining sub-matrix, the rectangular array of numbers obtained from the original matrix by deleting the rows you just ignored. Repeat the process until there are no more rows to modify. The matrix will then be in echelon form.    Moving from right to left, use the nonzero elements in the pivot positions to zero out the elements in the pivot columns which are above the pivots.    Divide each nonzero row by the value of the leading entry. The result will be a matrix in row reduced echelon form.   This row reduction procedure applies to both augmented matrices and non augmented matrices. There is nothing special about the augmented column with respect to the row reduction procedure.   "
},
{
  "id": "ss-gauss-elimination-18",
  "level": "2",
  "url": "s-Systems-of-Equations.html#ss-gauss-elimination-18",
  "type": "Example",
  "number": "11.1.15",
  "title": "",
  "body": "  Here is a matrix. Do row reductions till you obtain a matrix in echelon form. Then complete the process by producing one in row reduced echelon form.    The pivot column is the second. Hence the pivot position is the one in the first row and second column. Switch the first two rows to obtain a nonzero entry in this pivot position.   Step two is not necessary because all the entries below the first pivot position in the resulting matrix are zero. Now ignore the top row and the columns to the left of this first pivot position. Thus you apply the same operations to the smaller matrix   The next pivot column is the third corresponding to the first in this smaller matrix and the second pivot position is therefore, the one which is in the second row and third column.  In this case it is not necessary to switch any rows to place a nonzero entry in this position because there is already a nonzero entry there. Multiply the third row of the original matrix by -2 and then add the second row to it. This yields   The next matrix the steps in the algorithm are applied to is   The first pivot column is the first column in this case and no switching of rows is necessary because there is a nonzero entry in the first pivot position. Therefore, the algorithm yields for the next step   Now the algorithm will be applied to the matrix There is only one column and it is nonzero so this single column is the pivot column. Therefore, the algorithm yields the following matrix for the echelon form.   To complete placing the matrix in reduced echelon form, multiply the third row by 3 and add -2 times the fourth row to it. This yields   Next multiply the second row by 3 and take 2 times the fourth row and add to it. Then add the fourth row to the first.   Next work on the fourth column in the same way.   Take times the second row and add to the first.   Finally, divide by the value of the leading entries in the nonzero rows.    "
},
{
  "id": "ss-gauss-elimination-19",
  "level": "2",
  "url": "s-Systems-of-Equations.html#ss-gauss-elimination-19",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Gauss Jordan method Gauss elimination "
},
{
  "id": "ss-gauss-elimination-20",
  "level": "2",
  "url": "s-Systems-of-Equations.html#ss-gauss-elimination-20",
  "type": "Example",
  "number": "11.1.16",
  "title": "",
  "body": "  Give the complete solution to the system of equations, , , and .    The augmented matrix for this system is   Multiply the second row by 2, the first row by 5, and then take (-1) times the first row and add to the second. Then multiply the first row by 1\/5. This yields   Switch the last two rows to get   then take -3 times the top added to 2 times the middle to get .  Multiply bottom by 19 and take the second row times -1 added to the bottom. This gives a row of zeros with -2 at the right end, representing the equation 0x + 0y + 0z = -2 which has no solution so there is no solution to this system of equations. When this happens, the system is called inconsistent . In this case it is very easy to describe the solution set. The system has no solution.   "
},
{
  "id": "ex-infinite-sols",
  "level": "2",
  "url": "s-Systems-of-Equations.html#ex-infinite-sols",
  "type": "Example",
  "number": "11.1.17",
  "title": "",
  "body": "  Give the complete solution to the system of equations, , , and .    The augmented matrix of this system is   Replace the last row with 2 times the top row added to 3 times the bottom row combining two row operations. This gives The entry 3 in this sequence of row operations is called the pivot . It is used to create zeros in the other places of the column.  Next take -1 times the middle row and add to the bottom. Here the 1 in the second row is the pivot. This is in reduced echelon form. The equations corresponding to this reduced echelon form are and . Apparently can equal any number. Lets call this number .  In this context is called a parameter .  Therefore, the solution set of this system is , , and where is completely arbitrary. The system has an infinite set of solutions which are given in the above simple way. This is what it is all about, finding the solutions to the system.   "
},
{
  "id": "ss-gauss-elimination-23",
  "level": "2",
  "url": "s-Systems-of-Equations.html#ss-gauss-elimination-23",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "basic variables free variables "
},
{
  "id": "ex-two-parameters",
  "level": "2",
  "url": "s-Systems-of-Equations.html#ex-two-parameters",
  "type": "Example",
  "number": "11.1.18",
  "title": "",
  "body": "  Find the solution to the system       The augmented matrix is   Take -1 times the first row and add to the second. Then take -1 times the first row and add to the third. This yields   Now add the second row to the bottom row This matrix is in echelon form and you see the basic variables are and while the free variables are and . Assign to and to . Then the second row yields the equation, while the top equation yields the equation, and so since , this gives showing that , , , and . One can write this in the form This is another example of a system which has an infinite solution set but this time the solution set depends on two parameters, not one.  Most people find it less confusing in the case of an infinite solution set to first place the augmented matrix in row reduced echelon form rather than just echelon form before seeking to write down the description of the solution. In the above, this means we don't stop with the echelon form above. Instead we first place it in reduced echelon form as follows. Then the solution is from the second row and from the first. Thus letting and , the solution as is given previously.   "
},
{
  "id": "ss-gauss-elimination-25",
  "level": "2",
  "url": "s-Systems-of-Equations.html#ss-gauss-elimination-25",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "different "
},
{
  "id": "def-system-of-linear-eqs",
  "level": "2",
  "url": "s-Systems-of-Equations.html#def-system-of-linear-eqs",
  "type": "Definition",
  "number": "11.1.19",
  "title": "System of Linear Equations.",
  "body": " System of Linear Equations   System of Linear Equations    A system of linear equations is a list of equations, where are numbers, and is a number. The above is a system of equations in the variables, . Nothing is said about the relative size of and . Written more simply in terms of summation notation, the above can be written in the form It is desired to find solving each of the equations listed.   "
},
{
  "id": "def-consistent-lin-eq",
  "level": "2",
  "url": "s-Systems-of-Equations.html#def-consistent-lin-eq",
  "type": "Definition",
  "number": "11.1.20",
  "title": "",
  "body": "  A system of linear equations is called consistent if there exists a solution. It is called inconsistent if there is no solution.   "
},
{
  "id": "exercises-11-1-2",
  "level": "2",
  "url": "s-Systems-of-Equations.html#exercises-11-1-2",
  "type": "Exercise",
  "number": "11.1.3.1",
  "title": "",
  "body": " Find the point which lies on both lines, and .   Set up augmented matrix: Add the first line to the second. Divide line two by  So . Backsubstituting: , so . Therefore is the point .  "
},
{
  "id": "exercises-11-1-3",
  "level": "2",
  "url": "s-Systems-of-Equations.html#exercises-11-1-3",
  "type": "Exercise",
  "number": "11.1.3.2",
  "title": "",
  "body": " Solve Exercise 1 graphically. That is, graph each line and see where they intersect.     Graph of Exercise 11.1.1   Graph of lines described in Exercise 1      "
},
{
  "id": "exercises-11-1-4",
  "level": "2",
  "url": "s-Systems-of-Equations.html#exercises-11-1-4",
  "type": "Exercise",
  "number": "11.1.3.3",
  "title": "",
  "body": " Find the point of intersection of the two lines and .  "
},
{
  "id": "exercises-11-1-5",
  "level": "2",
  "url": "s-Systems-of-Equations.html#exercises-11-1-5",
  "type": "Exercise",
  "number": "11.1.3.4",
  "title": "",
  "body": " Solve Exercise 3 graphically. That is, graph each line and see where they intersect.  "
},
{
  "id": "exercises-11-1-6",
  "level": "2",
  "url": "s-Systems-of-Equations.html#exercises-11-1-6",
  "type": "Exercise",
  "number": "11.1.3.5",
  "title": "",
  "body": " Do the three lines, , , and have a common point of intersection? If so, find the point and if not, tell why they don’t have such a common point of intersection   Set up augmented matrix: Add the first line to the third. Add the first line to the second. Add the second line to the third. Divide line two by  So . Backsubstituting to line one: , so . The common intersecting point is .  "
},
{
  "id": "exercises-11-1-7",
  "level": "2",
  "url": "s-Systems-of-Equations.html#exercises-11-1-7",
  "type": "Exercise",
  "number": "11.1.3.6",
  "title": "",
  "body": " Do the three planes, , , and have a common point of intersection? If so, find one and if not, tell why there is no such point.  "
},
{
  "id": "exercises-11-1-8",
  "level": "2",
  "url": "s-Systems-of-Equations.html#exercises-11-1-8",
  "type": "Exercise",
  "number": "11.1.3.7",
  "title": "",
  "body": " You have a system of equations in two variables, . Explain the geometric significance of   No solution.    A unique solution.    An infinite number of solutions.         No solution. The lines are parallel.    A unique solution. The lines must intersect.    An infinite number of solutions. The lines must be the same line.     "
},
{
  "id": "exercises-11-1-9",
  "level": "2",
  "url": "s-Systems-of-Equations.html#exercises-11-1-9",
  "type": "Exercise",
  "number": "11.1.3.8",
  "title": "",
  "body": " If a system of equations has more equations than variables, can it have a solution? If so, give an example and if not, tell why not.  "
},
{
  "id": "exercises-11-1-10",
  "level": "2",
  "url": "s-Systems-of-Equations.html#exercises-11-1-10",
  "type": "Exercise",
  "number": "11.1.3.9",
  "title": "",
  "body": " Find such that is the augmented matrix of an inconsistent matrix.   What we want is for one of the rows to be all zeros except for the last term. If we multiply the top row by and add that to the bottom row, we get We want to make an such that the . Solving for , we get 4. which simplifies to , which is inconsistent.  "
},
{
  "id": "exercises-11-1-11",
  "level": "2",
  "url": "s-Systems-of-Equations.html#exercises-11-1-11",
  "type": "Exercise",
  "number": "11.1.3.10",
  "title": "",
  "body": " Find such that is the augmented matrix of a consistent matrix.  "
},
{
  "id": "exercises-11-1-12",
  "level": "2",
  "url": "s-Systems-of-Equations.html#exercises-11-1-12",
  "type": "Exercise",
  "number": "11.1.3.11",
  "title": "",
  "body": " Determine if the system is consistent. If so, is the solution unique?       We have the corresponding matrix:   Add row 1 to row 4:   Add row 1 to row 3:   Add row 1 to row 2:   Add row 2 to row 3:   Add row 2 to row 4:   Therefore we see that we have a problem because rows 3 and 4 are saying and . Or we could keep going with the row operations and add row 3 to row 4: Add row 2 to row 4: which then definitively shows that the system is not consistent.  "
},
{
  "id": "exercises-11-1-13",
  "level": "2",
  "url": "s-Systems-of-Equations.html#exercises-11-1-13",
  "type": "Exercise",
  "number": "11.1.3.12",
  "title": "",
  "body": " Determine if the system is consistent. If so, is the solution unique?      "
},
{
  "id": "exercises-11-1-14",
  "level": "2",
  "url": "s-Systems-of-Equations.html#exercises-11-1-14",
  "type": "Exercise",
  "number": "11.1.3.13",
  "title": "",
  "body": " Find the general solution of the system whose augmented matrix is    Adding row 1 to row 3:   Adding row 1 to row 2:   Adding row 2 to row 3:   Multiplying row 3 by :   So , continuing row operations: add row 3 to row 2 So , continuing row operations: add row 2 to row 1 So .  The solution is then   "
},
{
  "id": "exercises-11-1-15",
  "level": "2",
  "url": "s-Systems-of-Equations.html#exercises-11-1-15",
  "type": "Exercise",
  "number": "11.1.3.14",
  "title": "",
  "body": " Find the general solution of the system whose augmented matrix is   "
},
{
  "id": "exercises-11-1-16",
  "level": "2",
  "url": "s-Systems-of-Equations.html#exercises-11-1-16",
  "type": "Exercise",
  "number": "11.1.3.15",
  "title": "",
  "body": " Give the complete solution to the system of equations, , , and .   We have the corresponding augmented matrix: Add row one to row 2: Add row one to row 3: Multiply row 2 by and row 3 by So.... . Add row 2 to row 3: This shows that is going to be a free variable. Assign to .The top row yields the equation , since , this gives . Solving for we get , so the final solution can be written:   "
},
{
  "id": "exercises-11-1-17",
  "level": "2",
  "url": "s-Systems-of-Equations.html#exercises-11-1-17",
  "type": "Exercise",
  "number": "11.1.3.16",
  "title": "",
  "body": " Give the complete solution to the system of equations, , , and .  "
},
{
  "id": "Section11_2",
  "level": "1",
  "url": "Section11_2.html",
  "type": "Section",
  "number": "11.2",
  "title": "Revisiting Matrix Arithmetic",
  "body": " Revisiting Matrix Arithmetic  Matrices  Matrix Arithmetic   In this section we will review and expand upon what we learned about matrices and matrix arithmetic in .    Addition and Scalar Multiplication of Matrices  You have now solved systems of equations by writing them in terms of an augmented matrix and then doing row operations on this augmented matrix. It turns out such rectangular arrays of numbers are important from many other different points of view. Numbers are also called scalars . In this book, numbers will generally be either real or complex numbers. I will refer to the set of numbers as F sometimes when it is not important to worry about whether the number is real or complex. Thus F can be either the real numbers R or the complex numbers C. However, most of the algebraic considerations hold for more general fields of scalars.  A matrix is a rectangular array of numbers. Several of them are referred to as matrices . For example, here is a matrix. The size or dimension of a matrix is defined as where is the number of rows and is the number of columns. The above matrix is a matrix because there are three rows and four columns. The first row is , the second row is and so forth. The first column is . When specifying the size of a matrix, you always list the number of rows before the number of columns. Also, you can remember the columns are like columns in a Greek temple. They stand upright while the rows just lie there like rows made by a tractor in a plowed field. Elements of the matrix are identified according to position in the matrix. For example, 8 is in position 2, 3 because it is in the second row and the third column. You might remember that you always list the rows before the columns by using the phrase Row man C atholic. The symbol, refers to a matrix. The entry in the row and the column of this matrix is denoted by . Using this notation on the above matrix, etc.  There are various operations which are done on matrices. Matrices can be added mul- tiplied by a scalar, and multiplied by other matrices. To illustrate scalar multiplication, consider the following example in which a matrix is being multiplied by the scalar 3. The new matrix is obtained by multiplying every entry of the original matrix by the given scalar. If is an matrix, is defined to equal .  Two matrices must be the same size to be added. The sum of two matrices is a matrix which is obtained by adding the corresponding entries. Thus Two matrices are equal exactly when they are the same size and the corresponding entries are identical. Thus because they are different sizes. As noted above, you write for the matrix whose entry is . In doing arithmetic with matrices you must define what happens in terms of the sometimes called the entries of the matrix or the components of the matrix.  The above discussion stated for general matrices is given in the following definition.   Scalar Matrix Multiplication   Scalar Matrix Multiplication    If and is a scalar, then .      .    Matrix Addition   Matrix Addition    If and are two matrices. Then where for .      To save on notation, we will often use to refer to the entry of matrix .    Zero Matrix   Zero Matrix    The zero matrix is the matrix having every entry equal to zero. It is denoted by 0.     The zero matrix is .    Matrix Equality   Matrix Equality    Let and be two matrices. Then means that the two matrices are of the same size and for and , for all and .    The following properties of matrices can be easily verified. You should do so. These properties are called the vector space axioms.   Commutative Law Of Addition.     Associative Law for Addition.     Existence of an Additive Identity     Existence of an Additive Inverse      Also for scalars, the following additional properties hold.   Distributive law over Matrix Addition.     Distributive law over Scalar Addition     Associative law for Scalar Multiplication     Rule for Multiplication by 1.      As an example, consider the Commutative Law of Addition. Let and . Why is ? Therefore, because the entries are the same. Note that the conclusion follows from the commutative law of addition of numbers.    Multiplication of Matrices  This is where things get interesting. Matrices can be thought of as a rule for making new vectors from old vectors.   Vectors   Vector    Matrices which are or are called vectors and are often denoted by a bold letter. Thus the matrix is also called a column vector . The matrix is called a row vector .    Although the following description of matrix multiplication may seem strange, it is in fact the most important and useful of the matrix operations. To begin with consider the case where a matrix is multiplied by a column vector. First consider a special case. By definition, this equals   In more general terms, Thus you take times the first column, add to times the second column, and finally times the third column. The above sum is called a linear combination of the given column vectors. These will be discussed more later. In general, a linear combination of vectors is just a sum consisting of scalars times vectors. When you multiply a matrix on the left by a vector on the right, the numbers making up the vector are just the scalars to be used in the linear combination of the columns as illustrated above.  More generally, here is the definition of how to multiply an matrix times a matrix (column vector).    Let be an matrix and be an matrix, where is an column vector. Then written as is the column vector which equals the following linear combination of columns. If the column of is then the sum above takes the form Thus the entry of is . Note that multiplication by an matrix takes an matrix, and produces an matrix (vector).    Here is another example.   Compute First of all this is of the form and so the result should be a . Note how the inside numbers cancel. To get the element in the second row and first and only column, compute You should do the rest of the problem and verify    The next task is to multiply an matrix times an matrix. Before doing so the following may be helpful.  For and matrices, in order to form the product, , the number of columns of must equal the number of rows of . Thus the form of the product must be Not the two outside numbers give the size of the product. Remember: If the two middle numbers don't match, you can't multiply the matrices!     When the number of columns of equals the number of rows of the two matrices are said to be conformable and the product is obtained as follows. Let be an matrix and let be an matrix. Then is of the form where is an matrix or column vector. Then the matrix is defined as follows: where is an matrix or column vector which gives the column of .     Multiply the following:    The first thing you need to check before doing anything else is whether it is possible to do the multiplication. The first matrix on left is a and the second matrix on right is a . Therefore, is it possible to multiply these matrices. According to the above discussion it should be a matrix of the form You know how to multiply a matrix times a vector and so you do so to obtain each of the three columns.          Multiply the following,    First check if it is possible. This is of the form . The inside numbers do not match and so you can't do this multiplication. This means that anything you write will be absolute nonsense because it is impossible to multiply these matrices in this order. Aren't they the same two matrices considered in the previous example? Yes they are. It is just that here they are in a different order. This shows something you must always remember about matrix multiplication. Order Matters! Matrix Multiplication Is Not Commutative! This is very different than multiplication of numbers!      The Entry of a Product  It is important to describe matrix multiplication in terms of entries of the matrices. What is the entry of ? It would be the entry of the column of . Thus it would be the entry of . Now and from the above defintion, the entry is In terms of pictures of the matrix, you are doing Then as explained above, the column is of the form which is an matrix or column vector which equals The second entry of this matrix is Similarly, the entry of this matrix is This shows the following definition for matrix multiplication in terms of the entries of the project coincides with     Let be an matrix and let be an matrix. Then is an matrix and Another way to write this is Note that to get you multiply the row of and the column of . In terms of the dot product from calculus, the entry of is the dot product of the row of with the column of .    I will summarize the above discussion in the following proposition which shows that the above definition delivers the earlier one in about . It is important to realize these two definitions are equivalent.    Let be an matrix. Let where each is a column vector or matrix so is an matrix. Then is an matrix and so the column of is just .    From the definition of multiplication of matrices, . However, and so, from the way we multiply a matrix times a vector, Thus, the entry from the top of is the entry in the column of showing that indeed the claim is true.      Multiply if possible .   First check to see if this is possible. It is of the form and since the inside numbers match, the two matrices are conformable and it is possible to do the multiplication. The result should be a matrix. The answer is of the form where the commas separate the columns in the resulting product. Thus the above product equals a matrix as desired. In terms of the entries and the above definition, the entry in the third row and second column of the product should equal     You should try a few more such examples to verify the above definition in terms of the entries works for other entries.  Multiply if possible .  This is not possible because it is of the form and the middle numbers don't match. In other words the two matrices are not conformable in the indicated order.    Multiply if possible .  This is possible because in this case it is of the form and the middle numbers do match so the matrices are conformable. When the multiplication is done it equals Check this and be sure you come up with the same answer.    Multiply if possible .  In this case it is of the form . The middle numbers match so you can do it. Verify       Properties of Matrix Multiplication  As pointed out above, sometimes it is possible to multiply matrices in one order but not in the other order. What if it makes sense to multiply them in either order? Will the two products be equal then?   Compare and   The first product is   The second product is You see these are not equal. Again you cannot conclude that for matrix multiplication even when multiplication is defined in both orders. However, there are some properties which do hold.     If all multiplications and additions make sense, the following hold for matrices, and scalars.     Using , Thus as claimed. Formula is entirely similar.  Formula is the associative law of multiplication. Using definition  This proves .       Matrix Transpose  Another important operation on matrices is that of taking the transpose . The following example shows what is meant by this operation, denoted by placing a as an exponent on the matrix. What happened? The first column became the first row and the second column became the second row. Thus the matrix became a matrix. The number 3 was in the second row and the first column and it ended up in the first row and second column. Here is the definition.    Let be an matrix. Then denotes the matrix which is defined as follows.        The transpose of a matrix has the following important properties.   Let be an matrix and let be a matrix. Then and if and are scalars,     From the definition, The proof of the second formula is left as an exercise.        An matrix is said to be symmetric if . It is said to be skew symmetric if .     Let Then Therefore, is symmetric.    Let Then Therefore, is skew symmetric.     Identity Matrix  There is a special matrix called and referred to as the identity matrix. It is always a square matrix, meaning the number of rows equals the number of columns and it has the property that there are ones down the main diagonal and zeroes elsewhere. Here are some identity matrices of various sizes. The first is the identity matrix, the second is the identity matrix, the third is the identity matrix, and the fourth is the identity matrix. By extension, you can likely see what the identity matrix would be. It is so important that there is a special symbol to denote the entry of the identity matrix where is the Kronecker symbol defined by It is called the identity matrix because it is a multiplicative identity in the following sense.   Suppose is an matrix and is the identity matrix. Then . If is the identity matrix, it also follows that .     and so . The other case is left as an exercise for you.        Exercises   Here are some matrices:    Find if possible If it is not possible explain why.           Here are some matrices:    Find if possible If it is not possible explain why.    Here are some matrices:    Find if possible If it is not possible explain why.               Here are some matrices:    Find if possible If it is not possible explain why.    Let and   Find if possible:                                If not possible, explain why.                 is not possible, the number of columns of do not match the number of rows of .          is not possible because the number of columns of are not the same as the number of rows of .            Suppose and are square matrices of the same size. Which of the following are correct?                                         Let Find all matrices, such that .   If is all zeros then :   Otherwise let , then whenever and .    Let and . Find and if possible.    Let . Is it possible to choose such that ? If so, what should equal?   Yes, if , the matrices are identical so the order of multiplication doesn't matter, the outcome is the same.    Let . Is it possible to choose such that ? If so, what should equal?      Prove that where is an matrix.   In matrix multiplication, the row of the first matrix affects only the row of the output. The row of is all 0s except for a 1 in the column. Calculating the element in the output matrix will be a sum of products of row of and column of . By definition these row and column vectors must be the same length. The products will all 0s, except for the term, which will be . Therefore the element in the output matrix will be identical to , so     Give an example of matrices, such that and yet .    "
},
{
  "id": "ss-Add-Scalar-Multi-Matrices-2",
  "level": "2",
  "url": "Section11_2.html#ss-Add-Scalar-Multi-Matrices-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "scalars "
},
{
  "id": "ss-Add-Scalar-Multi-Matrices-3",
  "level": "2",
  "url": "Section11_2.html#ss-Add-Scalar-Multi-Matrices-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "matrix matrices "
},
{
  "id": "ss-Add-Scalar-Multi-Matrices-5",
  "level": "2",
  "url": "Section11_2.html#ss-Add-Scalar-Multi-Matrices-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "entries components "
},
{
  "id": "def-scalar-matrix-mult",
  "level": "2",
  "url": "Section11_2.html#def-scalar-matrix-mult",
  "type": "Definition",
  "number": "11.2.1",
  "title": "Scalar Matrix Multiplication.",
  "body": " Scalar Matrix Multiplication   Scalar Matrix Multiplication    If and is a scalar, then .   "
},
{
  "id": "ss-Add-Scalar-Multi-Matrices-8",
  "level": "2",
  "url": "Section11_2.html#ss-Add-Scalar-Multi-Matrices-8",
  "type": "Example",
  "number": "11.2.2",
  "title": "",
  "body": "  .  "
},
{
  "id": "def-lin-alg-matrix-addition",
  "level": "2",
  "url": "Section11_2.html#def-lin-alg-matrix-addition",
  "type": "Definition",
  "number": "11.2.3",
  "title": "Matrix Addition.",
  "body": " Matrix Addition   Matrix Addition    If and are two matrices. Then where for .   "
},
{
  "id": "ss-Add-Scalar-Multi-Matrices-10",
  "level": "2",
  "url": "Section11_2.html#ss-Add-Scalar-Multi-Matrices-10",
  "type": "Example",
  "number": "11.2.4",
  "title": "",
  "body": "  To save on notation, we will often use to refer to the entry of matrix .  "
},
{
  "id": "def-zero-matrix",
  "level": "2",
  "url": "Section11_2.html#def-zero-matrix",
  "type": "Definition",
  "number": "11.2.5",
  "title": "Zero Matrix.",
  "body": " Zero Matrix   Zero Matrix    The zero matrix is the matrix having every entry equal to zero. It is denoted by 0.   "
},
{
  "id": "ss-Add-Scalar-Multi-Matrices-12",
  "level": "2",
  "url": "Section11_2.html#ss-Add-Scalar-Multi-Matrices-12",
  "type": "Example",
  "number": "11.2.6",
  "title": "",
  "body": " The zero matrix is .  "
},
{
  "id": "def-lin-alg-matrix-equality",
  "level": "2",
  "url": "Section11_2.html#def-lin-alg-matrix-equality",
  "type": "Definition",
  "number": "11.2.7",
  "title": "Matrix Equality.",
  "body": " Matrix Equality   Matrix Equality    Let and be two matrices. Then means that the two matrices are of the same size and for and , for all and .   "
},
{
  "id": "def-vectors",
  "level": "2",
  "url": "Section11_2.html#def-vectors",
  "type": "Definition",
  "number": "11.2.8",
  "title": "Vectors.",
  "body": " Vectors   Vector    Matrices which are or are called vectors and are often denoted by a bold letter. Thus the matrix is also called a column vector . The matrix is called a row vector .   "
},
{
  "id": "subsec-mult-of-matrices-5",
  "level": "2",
  "url": "Section11_2.html#subsec-mult-of-matrices-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "linear combination "
},
{
  "id": "def-matrix-vector-mult",
  "level": "2",
  "url": "Section11_2.html#def-matrix-vector-mult",
  "type": "Definition",
  "number": "11.2.9",
  "title": "",
  "body": "  Let be an matrix and be an matrix, where is an column vector. Then written as is the column vector which equals the following linear combination of columns. If the column of is then the sum above takes the form Thus the entry of is . Note that multiplication by an matrix takes an matrix, and produces an matrix (vector).   "
},
{
  "id": "subsec-mult-of-matrices-9",
  "level": "2",
  "url": "Section11_2.html#subsec-mult-of-matrices-9",
  "type": "Example",
  "number": "11.2.10",
  "title": "",
  "body": " Compute First of all this is of the form and so the result should be a . Note how the inside numbers cancel. To get the element in the second row and first and only column, compute You should do the rest of the problem and verify   "
},
{
  "id": "def-conformable-matrices",
  "level": "2",
  "url": "Section11_2.html#def-conformable-matrices",
  "type": "Definition",
  "number": "11.2.11",
  "title": "",
  "body": "  When the number of columns of equals the number of rows of the two matrices are said to be conformable and the product is obtained as follows. Let be an matrix and let be an matrix. Then is of the form where is an matrix or column vector. Then the matrix is defined as follows: where is an matrix or column vector which gives the column of .   "
},
{
  "id": "subsec-mult-of-matrices-13",
  "level": "2",
  "url": "Section11_2.html#subsec-mult-of-matrices-13",
  "type": "Example",
  "number": "11.2.12",
  "title": "",
  "body": " Multiply the following:    The first thing you need to check before doing anything else is whether it is possible to do the multiplication. The first matrix on left is a and the second matrix on right is a . Therefore, is it possible to multiply these matrices. According to the above discussion it should be a matrix of the form You know how to multiply a matrix times a vector and so you do so to obtain each of the three columns.        "
},
{
  "id": "subsec-mult-of-matrices-14",
  "level": "2",
  "url": "Section11_2.html#subsec-mult-of-matrices-14",
  "type": "Example",
  "number": "11.2.13",
  "title": "",
  "body": " Multiply the following,    First check if it is possible. This is of the form . The inside numbers do not match and so you can't do this multiplication. This means that anything you write will be absolute nonsense because it is impossible to multiply these matrices in this order. Aren't they the same two matrices considered in the previous example? Yes they are. It is just that here they are in a different order. This shows something you must always remember about matrix multiplication. Order Matters! Matrix Multiplication Is Not Commutative! This is very different than multiplication of numbers!   "
},
{
  "id": "def-ijth-entry-of-matrix-prod",
  "level": "2",
  "url": "Section11_2.html#def-ijth-entry-of-matrix-prod",
  "type": "Definition",
  "number": "11.2.14",
  "title": "",
  "body": "  Let be an matrix and let be an matrix. Then is an matrix and Another way to write this is Note that to get you multiply the row of and the column of . In terms of the dot product from calculus, the entry of is the dot product of the row of with the column of .   "
},
{
  "id": "prop-kth-column-is-Abk",
  "level": "2",
  "url": "Section11_2.html#prop-kth-column-is-Abk",
  "type": "Proposition",
  "number": "11.2.15",
  "title": "",
  "body": "  Let be an matrix. Let where each is a column vector or matrix so is an matrix. Then is an matrix and so the column of is just .    From the definition of multiplication of matrices, . However, and so, from the way we multiply a matrix times a vector, Thus, the entry from the top of is the entry in the column of showing that indeed the claim is true.    "
},
{
  "id": "subsec-ijth-entry-of-matrix-prod-6",
  "level": "2",
  "url": "Section11_2.html#subsec-ijth-entry-of-matrix-prod-6",
  "type": "Example",
  "number": "11.2.16",
  "title": "",
  "body": " Multiply if possible .   First check to see if this is possible. It is of the form and since the inside numbers match, the two matrices are conformable and it is possible to do the multiplication. The result should be a matrix. The answer is of the form where the commas separate the columns in the resulting product. Thus the above product equals a matrix as desired. In terms of the entries and the above definition, the entry in the third row and second column of the product should equal    "
},
{
  "id": "subsec-ijth-entry-of-matrix-prod-8",
  "level": "2",
  "url": "Section11_2.html#subsec-ijth-entry-of-matrix-prod-8",
  "type": "Example",
  "number": "11.2.17",
  "title": "",
  "body": "Multiply if possible .  This is not possible because it is of the form and the middle numbers don't match. In other words the two matrices are not conformable in the indicated order.   "
},
{
  "id": "subsec-ijth-entry-of-matrix-prod-9",
  "level": "2",
  "url": "Section11_2.html#subsec-ijth-entry-of-matrix-prod-9",
  "type": "Example",
  "number": "11.2.18",
  "title": "",
  "body": "Multiply if possible .  This is possible because in this case it is of the form and the middle numbers do match so the matrices are conformable. When the multiplication is done it equals Check this and be sure you come up with the same answer.   "
},
{
  "id": "subsec-ijth-entry-of-matrix-prod-10",
  "level": "2",
  "url": "Section11_2.html#subsec-ijth-entry-of-matrix-prod-10",
  "type": "Example",
  "number": "11.2.19",
  "title": "",
  "body": "Multiply if possible .  In this case it is of the form . The middle numbers match so you can do it. Verify    "
},
{
  "id": "subsec-props-of-matrix-mult-3",
  "level": "2",
  "url": "Section11_2.html#subsec-props-of-matrix-mult-3",
  "type": "Example",
  "number": "11.2.20",
  "title": "",
  "body": " Compare and   The first product is   The second product is You see these are not equal. Again you cannot conclude that for matrix multiplication even when multiplication is defined in both orders. However, there are some properties which do hold.  "
},
{
  "id": "prop-matrix-mult-distributivity",
  "level": "2",
  "url": "Section11_2.html#prop-matrix-mult-distributivity",
  "type": "Proposition",
  "number": "11.2.21",
  "title": "",
  "body": "  If all multiplications and additions make sense, the following hold for matrices, and scalars.     Using , Thus as claimed. Formula is entirely similar.  Formula is the associative law of multiplication. Using definition  This proves .    "
},
{
  "id": "subsec-matrix-transpose-2",
  "level": "2",
  "url": "Section11_2.html#subsec-matrix-transpose-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "transpose "
},
{
  "id": "def-matrix-transpose",
  "level": "2",
  "url": "Section11_2.html#def-matrix-transpose",
  "type": "Definition",
  "number": "11.2.22",
  "title": "",
  "body": "  Let be an matrix. Then denotes the matrix which is defined as follows.    "
},
{
  "id": "subsec-matrix-transpose-4",
  "level": "2",
  "url": "Section11_2.html#subsec-matrix-transpose-4",
  "type": "Example",
  "number": "11.2.23",
  "title": "",
  "body": "  "
},
{
  "id": "lem-transpose-distributivity",
  "level": "2",
  "url": "Section11_2.html#lem-transpose-distributivity",
  "type": "Lemma",
  "number": "11.2.24",
  "title": "",
  "body": "  Let be an matrix and let be a matrix. Then and if and are scalars,     From the definition, The proof of the second formula is left as an exercise.    "
},
{
  "id": "def-symmetric-matrix",
  "level": "2",
  "url": "Section11_2.html#def-symmetric-matrix",
  "type": "Definition",
  "number": "11.2.25",
  "title": "",
  "body": "  An matrix is said to be symmetric if . It is said to be skew symmetric if .   "
},
{
  "id": "subsec-matrix-transpose-7",
  "level": "2",
  "url": "Section11_2.html#subsec-matrix-transpose-7",
  "type": "Example",
  "number": "11.2.26",
  "title": "",
  "body": " Let Then Therefore, is symmetric.  "
},
{
  "id": "subsec-matrix-transpose-8",
  "level": "2",
  "url": "Section11_2.html#subsec-matrix-transpose-8",
  "type": "Example",
  "number": "11.2.27",
  "title": "",
  "body": " Let Then Therefore, is skew symmetric.  "
},
{
  "id": "subsec-identity-matrix-2",
  "level": "2",
  "url": "Section11_2.html#subsec-identity-matrix-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Kronecker symbol identity matrix multiplicative identity "
},
{
  "id": "exercises-11-2-2",
  "level": "2",
  "url": "Section11_2.html#exercises-11-2-2",
  "type": "Exercise",
  "number": "11.2.7.1",
  "title": "",
  "body": " Here are some matrices:    Find if possible If it is not possible explain why.         "
},
{
  "id": "exercises-11-2-3",
  "level": "2",
  "url": "Section11_2.html#exercises-11-2-3",
  "type": "Exercise",
  "number": "11.2.7.2",
  "title": "",
  "body": " Here are some matrices:    Find if possible If it is not possible explain why.  "
},
{
  "id": "exercises-11-2-4",
  "level": "2",
  "url": "Section11_2.html#exercises-11-2-4",
  "type": "Exercise",
  "number": "11.2.7.3",
  "title": "",
  "body": " Here are some matrices:    Find if possible If it is not possible explain why.             "
},
{
  "id": "exercises-11-2-5",
  "level": "2",
  "url": "Section11_2.html#exercises-11-2-5",
  "type": "Exercise",
  "number": "11.2.7.4",
  "title": "",
  "body": " Here are some matrices:    Find if possible If it is not possible explain why.  "
},
{
  "id": "exercises-11-2-6",
  "level": "2",
  "url": "Section11_2.html#exercises-11-2-6",
  "type": "Exercise",
  "number": "11.2.7.5",
  "title": "",
  "body": " Let and   Find if possible:                                If not possible, explain why.                 is not possible, the number of columns of do not match the number of rows of .          is not possible because the number of columns of are not the same as the number of rows of .          "
},
{
  "id": "exercises-11-2-7",
  "level": "2",
  "url": "Section11_2.html#exercises-11-2-7",
  "type": "Exercise",
  "number": "11.2.7.6",
  "title": "",
  "body": " Suppose and are square matrices of the same size. Which of the following are correct?                                       "
},
{
  "id": "exercises-11-2-8",
  "level": "2",
  "url": "Section11_2.html#exercises-11-2-8",
  "type": "Exercise",
  "number": "11.2.7.7",
  "title": "",
  "body": " Let Find all matrices, such that .   If is all zeros then :   Otherwise let , then whenever and .  "
},
{
  "id": "exercises-11-2-9",
  "level": "2",
  "url": "Section11_2.html#exercises-11-2-9",
  "type": "Exercise",
  "number": "11.2.7.8",
  "title": "",
  "body": " Let and . Find and if possible.  "
},
{
  "id": "exercises-11-2-10",
  "level": "2",
  "url": "Section11_2.html#exercises-11-2-10",
  "type": "Exercise",
  "number": "11.2.7.9",
  "title": "",
  "body": " Let . Is it possible to choose such that ? If so, what should equal?   Yes, if , the matrices are identical so the order of multiplication doesn't matter, the outcome is the same.  "
},
{
  "id": "exercises-11-2-11",
  "level": "2",
  "url": "Section11_2.html#exercises-11-2-11",
  "type": "Exercise",
  "number": "11.2.7.10",
  "title": "",
  "body": " Let . Is it possible to choose such that ? If so, what should equal?  "
},
{
  "id": "exercises-11-2-12",
  "level": "2",
  "url": "Section11_2.html#exercises-11-2-12",
  "type": "Exercise",
  "number": "11.2.7.11",
  "title": "",
  "body": " Prove that where is an matrix.   In matrix multiplication, the row of the first matrix affects only the row of the output. The row of is all 0s except for a 1 in the column. Calculating the element in the output matrix will be a sum of products of row of and column of . By definition these row and column vectors must be the same length. The products will all 0s, except for the term, which will be . Therefore the element in the output matrix will be identical to , so   "
},
{
  "id": "exercises-11-2-13",
  "level": "2",
  "url": "Section11_2.html#exercises-11-2-13",
  "type": "Exercise",
  "number": "11.2.7.12",
  "title": "",
  "body": " Give an example of matrices, such that and yet .  "
},
{
  "id": "Section11_3",
  "level": "1",
  "url": "Section11_3.html",
  "type": "Section",
  "number": "11.3",
  "title": "Matrix Inverses",
  "body": " Matrix Inverses     Now we come to the most useful property a matrix can have, to be invertible , meaning it has an inverse matrix . A system of linear equations only has a solution if, when it's represented in a matrix, that matrix is invertible. Matrix inverses also allow faster solving of systems of linear equations. This property is crucial for many computer science applications, such as these from the Wikipedia article: Invertible matrix :   In computer graphics and image processing, invertible matrices are fundamental for transformations. Whether rotating, scaling, or translating images, these matrices facilitate seamless manipulation, contributing to the creation of visually appealing graphics.    The world of cybersecurity relies on invertible matrices for encryption and decryption processes. Algorithms that involve matrix operations play a crucial role in securing sensitive information, making invertible matrices indispensable in cryptographic protocols.    In finance, invertible matrices find applications in portfolio optimization. Efficiently managing diverse assets and risk requires mathematical models that involve invertible matrices, ensuring robust financial strategies.    The backbone of many machine learning algorithms is formed by invertible matrices. From feature engineering to training models, these matrices contribute to the stability and efficiency of algorithms, enhancing predictive accuracy.    In data science, invertible matrices are employed for dimensionality reduction techniques. Simplifying complex datasets without losing crucial information is achieved through the application of these matrices, aiding in more manageable and insightful analyses.       Inverse Matrix   Inverse Matrix  Inverse Matrix   An matrix A has an inverse, if and only if . Such a matrix is called invertible.    It is very important to observe that the inverse of a matrix, if it exists, is unique. Another way to think of this is that if it acts like the inverse, then it is the inverse.    Suppose exists and . Then .         Unlike ordinary multiplication of numbers, it can happen that but may fail to have an inverse. This is illustrated in the following example.   A matrix without an inverse   Let . Does have an inverse?    One might think would have an inverse because it does not equal zero. However, and if existed, this could not happen because you could write  a contradiction. Thus the answer is that does not have an inverse.     Showing a matrix is an inverse   Let . Show is the inverse of .    To check this, multiply and showing that this matrix is indeed the inverse of .      Finding The Inverse Of A Matrix  In the last example, how would you find ? You wish to find a matrix such that This requires the solution to the systems of equations, and Writing the augmented matrix for these two systems gives for the first system and for the second. Let's solve the first system. Take times the first row and add to the second to get Now take times the second row and add it to the first to get Putting in the variables, this says and   Now solve the second system, ( ) to find and . Take times the first row and add to the second to get . Now take times the second row and add it to the first to get Putting in the variables, this says and Therefore, the inverse matrix is   Didn't the above seem rather repetitive? Note that exactly the same row operations were used in both systems. In each case, the end result was something of the form where is the identity and gave a column of the inverse. In the above, , the first column of the inverse was obtained first and then the second column   To simplify this procedure, you could have written and row reduced until you obtained and read off the inverse as the matrix on the right side.  This is the reason for the following simple procedure for finding the inverse of a matrix. This procedure is called the Gauss-Jordan procedure .   Gauss-Jordan Procedure  Gauss-Jordan Procedure   Suppose is an matrix. To find if it exists, form the augmented matrix and then, if possible do row operations until you obtain an matrix of the form When this has been done, . If it is impossible to row reduce to a matrix of the form , then has no inverse.    Actually, all this shows is how to find a right inverse if it exists. Later it will be shown that the right inverse is the inverse. See or the Elementary Linear Algebra book at http:\/\/www.Saylor.org. for proof of this.   Using Gauss-Jordan to find a matrix inverse   Let Find if it exists.    Set up the augmented matrix  Next take times the first row and add to the second followed by times the first row added to the last. This yields Then take 5 times the second row and add to -2 times the last row Next take the last row and add to times the top row. This yields Now take times the second row and add to the top. Finally divide the top row by , the second row by and the bottom row by 14 which yields Therefore, the inverse is      Gauss-Jordan on a matrix with no inverse   Let Find if it exists.    Write the augmented matrix  and proceed to do row operations attempting to obtain . Take (-1) times the top row and add to the second. Then take (-2) times the top row and add to the bottom. Next add (-1) times the second row to the bottom row. At this point, you can see there will be no inverse because you have obtained a row of zeros in the left half of the augmented matrix . Thus there will be no way to obtain on the left.     Checking Gauss-Jordan outcome correctness   Let Find if it exists.    Form the augmented matrix Now do row operations until the matrix on the left becomes the identity matrix. This yields after some computations, and so the inverse of A is the matrix on the right, Checking the answer is easy. Just multiply the matrices and see if it works. Always check your answer because if you are like some of us, you will usually have made a mistake.     Solving systems of equations with a matrix inverse   In this example, it is shown how to use the inverse of a matrix to find the solution to a system of equations. Consider the following system of equations. Use the inverse of a suitable matrix to give the solutions to this system.   The system of equations can be written in terms of matrices as More simply, this is of the form . Suppose you find the inverse of the matrix . Then you could multiply both sides of this equation by to obtain This gives the solution as . Note that once you have found the inverse, you can easily get the solution for different right hand sides without any effort. It is always just . In the given example, the inverse of the matrix is This was shown above in . Therefore, from what was just explained, the solution to the given system is What if the right side of had been What would be the solution to By the above discussion, it is just This illustrates why once you have found the inverse of a given matrix, you can use it to solve many different systems easily.      Exercises    Let Find if possible using the Gauss-Jordan method. If does not exist, determine why.   Set up augmented matrix to use Gauss-Jordan: Multiply row 2 by 2: Add row 1 to row 2: Divide row 2 by 7: Subtract row 2 from row 1: Divide row 1 by 2: The inverse is the matrix on the right:   Check by multiplying the inverse with the original matrix: Which is what we want.     Let Find if possible using the Gauss-Jordan method. If does not exist, determine why.     Let Find if possible using the Gauss-Jordan method. If does not exist, determine why.   Set up augmented matrix to use Gauss-Jordan: Subtract 3 times row 1 from 2 times row 2 Divide row 2 by -3 Subtract row 2 from row 1 Divide row 1 by 2 So the inverse matrix is   Check by multiplying the inverse with the original matrix: Which is what we want.     Let Find if possible using the Gauss-Jordan method. If does not exist, determine why.     Let Find if possible using the Gauss-Jordan method. If does not exist, determine why.   Set up augmented matrix to use Gauss-Jordan: Row 3 - 4* row 1: Row 2 - 2* row 1: Row 3 - row 2: There is no inverse. The left side cannot be made into .    Let Find if possible using the Gauss-Jordan method. If does not exist, determine why.    Using the inverse of the matrix, find the solution to this system:    Set up augmented matrix to use Gauss-Jordan:   Now perform row operations: Row 2 - 2 * row 1 Row 3 - row 1 Row 2  Row 3 row 2 Row 3  Row 1 row 3 Row 2 row 3 Row 1 row 2   The inverse matrix is    Therefore, the solution is .    Using the inverse of the matrix, find the solution to this system:     Using the inverse of the matrix, find the solution to this system:    We have already calculated the inverse for this matrix above in Exercise 7, it is   Solving for  .    Using the inverse of the matrix, find the solution to this system:     "
},
{
  "id": "Section11_3-2-1",
  "level": "2",
  "url": "Section11_3.html#Section11_3-2-1",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "invertible inverse matrix "
},
{
  "id": "def-inverse-matrix",
  "level": "2",
  "url": "Section11_3.html#def-inverse-matrix",
  "type": "Definition",
  "number": "11.3.1",
  "title": "Inverse Matrix.",
  "body": " Inverse Matrix  Inverse Matrix   An matrix A has an inverse, if and only if . Such a matrix is called invertible.   "
},
{
  "id": "thm-matrix-inverse-prop",
  "level": "2",
  "url": "Section11_3.html#thm-matrix-inverse-prop",
  "type": "Theorem",
  "number": "11.3.2",
  "title": "",
  "body": "  Suppose exists and . Then .        "
},
{
  "id": "subsec-inverse-matrix-6",
  "level": "2",
  "url": "Section11_3.html#subsec-inverse-matrix-6",
  "type": "Example",
  "number": "11.3.3",
  "title": "A matrix without an inverse.",
  "body": " A matrix without an inverse   Let . Does have an inverse?    One might think would have an inverse because it does not equal zero. However, and if existed, this could not happen because you could write  a contradiction. Thus the answer is that does not have an inverse.   "
},
{
  "id": "subsec-inverse-matrix-7",
  "level": "2",
  "url": "Section11_3.html#subsec-inverse-matrix-7",
  "type": "Example",
  "number": "11.3.4",
  "title": "Showing a matrix is an inverse.",
  "body": " Showing a matrix is an inverse   Let . Show is the inverse of .    To check this, multiply and showing that this matrix is indeed the inverse of .   "
},
{
  "id": "subsec-finding-matrix-inverse-6",
  "level": "2",
  "url": "Section11_3.html#subsec-finding-matrix-inverse-6",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Gauss-Jordan procedure "
},
{
  "id": "def-gauss-jordan-proc",
  "level": "2",
  "url": "Section11_3.html#def-gauss-jordan-proc",
  "type": "Definition",
  "number": "11.3.5",
  "title": "Gauss-Jordan Procedure.",
  "body": " Gauss-Jordan Procedure  Gauss-Jordan Procedure   Suppose is an matrix. To find if it exists, form the augmented matrix and then, if possible do row operations until you obtain an matrix of the form When this has been done, . If it is impossible to row reduce to a matrix of the form , then has no inverse.   "
},
{
  "id": "subsec-finding-matrix-inverse-9",
  "level": "2",
  "url": "Section11_3.html#subsec-finding-matrix-inverse-9",
  "type": "Example",
  "number": "11.3.6",
  "title": "Using Gauss-Jordan to find a matrix inverse.",
  "body": " Using Gauss-Jordan to find a matrix inverse   Let Find if it exists.    Set up the augmented matrix  Next take times the first row and add to the second followed by times the first row added to the last. This yields Then take 5 times the second row and add to -2 times the last row Next take the last row and add to times the top row. This yields Now take times the second row and add to the top. Finally divide the top row by , the second row by and the bottom row by 14 which yields Therefore, the inverse is    "
},
{
  "id": "subsec-finding-matrix-inverse-10",
  "level": "2",
  "url": "Section11_3.html#subsec-finding-matrix-inverse-10",
  "type": "Example",
  "number": "11.3.7",
  "title": "Gauss-Jordan on a matrix with no inverse.",
  "body": " Gauss-Jordan on a matrix with no inverse   Let Find if it exists.    Write the augmented matrix  and proceed to do row operations attempting to obtain . Take (-1) times the top row and add to the second. Then take (-2) times the top row and add to the bottom. Next add (-1) times the second row to the bottom row. At this point, you can see there will be no inverse because you have obtained a row of zeros in the left half of the augmented matrix . Thus there will be no way to obtain on the left.   "
},
{
  "id": "ex-gauss-jordan-3",
  "level": "2",
  "url": "Section11_3.html#ex-gauss-jordan-3",
  "type": "Example",
  "number": "11.3.8",
  "title": "Checking Gauss-Jordan outcome correctness.",
  "body": " Checking Gauss-Jordan outcome correctness   Let Find if it exists.    Form the augmented matrix Now do row operations until the matrix on the left becomes the identity matrix. This yields after some computations, and so the inverse of A is the matrix on the right, Checking the answer is easy. Just multiply the matrices and see if it works. Always check your answer because if you are like some of us, you will usually have made a mistake.   "
},
{
  "id": "subsec-finding-matrix-inverse-12",
  "level": "2",
  "url": "Section11_3.html#subsec-finding-matrix-inverse-12",
  "type": "Example",
  "number": "11.3.9",
  "title": "Solving systems of equations with a matrix inverse.",
  "body": " Solving systems of equations with a matrix inverse   In this example, it is shown how to use the inverse of a matrix to find the solution to a system of equations. Consider the following system of equations. Use the inverse of a suitable matrix to give the solutions to this system.   The system of equations can be written in terms of matrices as More simply, this is of the form . Suppose you find the inverse of the matrix . Then you could multiply both sides of this equation by to obtain This gives the solution as . Note that once you have found the inverse, you can easily get the solution for different right hand sides without any effort. It is always just . In the given example, the inverse of the matrix is This was shown above in . Therefore, from what was just explained, the solution to the given system is What if the right side of had been What would be the solution to By the above discussion, it is just This illustrates why once you have found the inverse of a given matrix, you can use it to solve many different systems easily.   "
},
{
  "id": "exercises-11-3-2",
  "level": "2",
  "url": "Section11_3.html#exercises-11-3-2",
  "type": "Exercise",
  "number": "11.3.3.1",
  "title": "",
  "body": " Let Find if possible using the Gauss-Jordan method. If does not exist, determine why.   Set up augmented matrix to use Gauss-Jordan: Multiply row 2 by 2: Add row 1 to row 2: Divide row 2 by 7: Subtract row 2 from row 1: Divide row 1 by 2: The inverse is the matrix on the right:   Check by multiplying the inverse with the original matrix: Which is what we want.  "
},
{
  "id": "exercises-11-3-3",
  "level": "2",
  "url": "Section11_3.html#exercises-11-3-3",
  "type": "Exercise",
  "number": "11.3.3.2",
  "title": "",
  "body": " Let Find if possible using the Gauss-Jordan method. If does not exist, determine why.  "
},
{
  "id": "exercises-11-3-4",
  "level": "2",
  "url": "Section11_3.html#exercises-11-3-4",
  "type": "Exercise",
  "number": "11.3.3.3",
  "title": "",
  "body": " Let Find if possible using the Gauss-Jordan method. If does not exist, determine why.   Set up augmented matrix to use Gauss-Jordan: Subtract 3 times row 1 from 2 times row 2 Divide row 2 by -3 Subtract row 2 from row 1 Divide row 1 by 2 So the inverse matrix is   Check by multiplying the inverse with the original matrix: Which is what we want.  "
},
{
  "id": "exercises-11-3-5",
  "level": "2",
  "url": "Section11_3.html#exercises-11-3-5",
  "type": "Exercise",
  "number": "11.3.3.4",
  "title": "",
  "body": " Let Find if possible using the Gauss-Jordan method. If does not exist, determine why.  "
},
{
  "id": "exercises-11-3-6",
  "level": "2",
  "url": "Section11_3.html#exercises-11-3-6",
  "type": "Exercise",
  "number": "11.3.3.5",
  "title": "",
  "body": " Let Find if possible using the Gauss-Jordan method. If does not exist, determine why.   Set up augmented matrix to use Gauss-Jordan: Row 3 - 4* row 1: Row 2 - 2* row 1: Row 3 - row 2: There is no inverse. The left side cannot be made into .  "
},
{
  "id": "exercises-11-3-7",
  "level": "2",
  "url": "Section11_3.html#exercises-11-3-7",
  "type": "Exercise",
  "number": "11.3.3.6",
  "title": "",
  "body": " Let Find if possible using the Gauss-Jordan method. If does not exist, determine why.  "
},
{
  "id": "exercises-11-3-8",
  "level": "2",
  "url": "Section11_3.html#exercises-11-3-8",
  "type": "Exercise",
  "number": "11.3.3.7",
  "title": "",
  "body": " Using the inverse of the matrix, find the solution to this system:    Set up augmented matrix to use Gauss-Jordan:   Now perform row operations: Row 2 - 2 * row 1 Row 3 - row 1 Row 2  Row 3 row 2 Row 3  Row 1 row 3 Row 2 row 3 Row 1 row 2   The inverse matrix is    Therefore, the solution is .  "
},
{
  "id": "exercises-11-3-9",
  "level": "2",
  "url": "Section11_3.html#exercises-11-3-9",
  "type": "Exercise",
  "number": "11.3.3.8",
  "title": "",
  "body": " Using the inverse of the matrix, find the solution to this system:   "
},
{
  "id": "exercises-11-3-10",
  "level": "2",
  "url": "Section11_3.html#exercises-11-3-10",
  "type": "Exercise",
  "number": "11.3.3.9",
  "title": "",
  "body": " Using the inverse of the matrix, find the solution to this system:    We have already calculated the inverse for this matrix above in Exercise 7, it is   Solving for  .  "
},
{
  "id": "exercises-11-3-11",
  "level": "2",
  "url": "Section11_3.html#exercises-11-3-11",
  "type": "Exercise",
  "number": "11.3.3.10",
  "title": "",
  "body": " Using the inverse of the matrix, find the solution to this system:   "
},
{
  "id": "Section11_4",
  "level": "1",
  "url": "Section11_4.html",
  "type": "Section",
  "number": "11.4",
  "title": "Matrix Determinants",
  "body": " Matrix Determinants  Matrix Determinant   The determinant is a number (a scalar value) that is a certain function of the entries of a square matrix. The determinant of a matrix is commonly denoted , , or . Its value characterizes some properties of the matrix and the area of the shape it represents geometrically. Historically, determinants were used long before matrices: A determinant was originally defined as a property of a system of linear equations. The determinant \"determines\" whether the system has a unique solution (which occurs precisely if the determinant is non-zero).  We will see in this section that the determinant is used to determine if a matrix has an inverse (the system of equations has a unique solution), to find an inverse matrix if it exists, and to solve systems of linear equations more quickly. The determinant has many other uses which would be covered in more advanced mathematics courses. See also the Wikipedia article: Determinant.     Cofactors and Deteriminants  Let be an matrix. The determinant of , denoted as is a number. If the matrix is a matrix, this number is very easy to find.   Determinant of a Matrix   Let . Then .  The determinant is also often denoted by enclosing the matrix with two vertical lines. Thus       Find .    From the definition this is .    Having defined what is meant by the determinant of a matrix, what about a matrix?   matrix minor  Matrix Minor   Suppose is a matrix. The  minor , denoted as or minor , is the determinant of the matrix which results from deleting the row and the column.     Consider the matrix   The (1,2) minor is the determinant of the matrix which results when you delete the first row and the second column. This minor is therefore   The (2,3) minor is the determinant of the matrix which results when you delete the second row and the third column. This minor is therefore     Cofactor  cofactor   Suppose is a matrix. The  cofactor is defined to be minor). In words, you multiply times the minor to get the cofactor.  The cofactors of a matrix are so important that special notation is appropriate when referring to them. The cofactor of a matrix will be denoted by . It is also convenient to refer to the cofactor of an entry of a matrix as follows. For an entry of the matrix, its cofactor is just . Thus the cofactor of the entry is just the cofactor.     Consider the matrix   The (1,2) minor is the determinant of the matrix which results when you delete the first row and the second column. This minor is therefore   It follows   The (2,3) minor is the determinant of the matrix which results when you delete the second row and the third column. This minor is therefore   Therefore,   Similarly,      Expanding Along a Row or Column   The determinant of a matrix , is obtained by picking a row (column) and taking the product of each entry in that row (column) with its cofactor and adding these up. This process when applied to the row (column) is known as expanding the determinant along the row (column) .     Find the determinant of Here is how it is done by expanding around the first column.    You see, we just followed the rule in the above definition. We took the 1 in the first column and multiplied it by its cofactor, the 4 in the first column and multiplied it by its cofactor, and the 3 in the first column and multiplied it by its cofactor. Then we added these numbers together.  You could also expand the determinant along the second row as follows. Observe this gives the same number. You should try expanding along other rows and columns. If you don't make any mistakes, you will always get the same answer.   What about a matrix? You know now how to find the determinant of a matrix. The pattern is the same.    Suppose A is a matrix. The  minor is the determinant of the matrix you obtain when you delete the row and the column. The  cofactor , is defined to be . In words, you multiply times the minor to get the cofactor.     Laplace Expansion   The determinant of a matrix , is obtained by expanding along a row (column) just as was done for a matrix in , except the expanding process must be repeated again for each of the resulting matrices to obtain their determinants.  This method of evaluating a determinant by expanding along a row or a column can be done for any size square matrix and is called the method of Laplace expansion . The process must be repeated until the resulting matrices are small enough to easily calculate their determinants.      Find where     As in the case of a matrix, you can expand this along any row or column. Lets pick the third column.     Now you know how to expand each of the matrices along a row or a column. If you do so, you will get assuming you make no mistakes. You could expand this matrix along any row or any column and assuming you make no mistakes, you will always get the same thing which is defined to be the determinant of the matrix . .    Note that each of the four terms in the example solution above involves three terms consisting of determinants of matrices and each of these will need 2 terms. Therefore, there will be terms to evaluate in order to find the determinant using the method of Laplace expansion. Suppose now you have a matrix and you follow the above pattern for evaluating determinants. By analogy to the above, there will be terms involved in the evaluation of such a determinant by Laplace expansion along a row or column. This is a lot of terms.  In addition to the difficulties just discussed, you should regard the above claim that you always get the same answer by picking any row or column with considerable skepticism. It is incredible and not at all obvious. However, it requires a little effort to establish it. This is done in the Elementary Linear Algebra book chapter 7 on the theory of the determinant.   matrix cofactor  Cofactor Matrix   Let be an matrix and suppose the determinant of a matrix has been defined. Then a new matrix called the cofactor matrix , is defined by where to obtain delete the row and the column of , take the determinant of the matrix which results, (This is called the  minor of . ) and then multiply this number by .  Thus equals the cofactor. To make the formulas easier to remember, will denote the entry of the cofactor matrix.    With this definition of the cofactor matrix, here is how to define the determinant of an matrix.   Determininant as Sum of Cofactor Matrices   Let be an matrix where and suppose the determinant of an has been defined. Then     The first sum consists of expanding the determinant along the row and the second expands the determinant along the column.    Expanding the n matrix along any row or column always gives the same answer so the above definition is a good definition.       The Determinant of a Triangular Matrix  Notwithstanding the difficulties involved in using the method of Laplace expansion, certain types of matrices are very easy to deal with.   triangular matrix  Triangular Matrices   A matrix , is upper triangular if whenever . Thus in such a matrix, every entry below the main diagonal (the entries of the form ) equals zero, as shown. A lower triangular matrix is defined similarly as a matrix for which all entries above the main diagonal are equal to zero.    You should verify the following using the above theorem on Laplace expansion.   Determinant of a Triangular Matrix   Let be an upper (lower) triangular matrix. Then is obtained by taking the product of the entries on the main diagonal.      Let Find     From the above corollary, it suffices to take the product of the diagonal elements. Thus     Without using the corollary, you could expand along the first column. This gives  and the only non-zero term in the expansion is the first one Now expand this along the first column to obtain  Next expand this last determinant along the first column to obtain the above equals which is just the product of the entries down the main diagonal of the original matrix.      Properties of Determinants  There are many properties satisfied by determinants. Some of these properties have to do with row operations. Recall the row operations:    Switching two rows negates the determinant   Let be an matrix and let be a matrix which results from switching two rows of . Then . Also, if one row of is a multiple of another row of , then .      Let , and let .  Then and      Multiplying a matrix by a scalar, also multiplies the determinant   Let be an matrix and let be a matrix which results from multiplying some row of by a scalar . Then .      Let , .  The first row of is 2 times the first row of .   and      Row operation 3 doesn't change the determinant   Let be an matrix and let be a matrix which results from applying row operation 3. That is, you replace some row by a multiple of another row added to itself. Then       Let and let . Thus the second row of is one times the first row added to the second row.   and      Columns have the same effect   In - you can replace the word \"row\" with the word \"column\".    There are two other major properties of determinants which do not involve row operations.    The determinant of a matrix product is the product of the determinants    Let and be two matrices, then        Compare and for     First and so Now and Thus      The determinant of a matrix is the determinant of its transpose    Let be an matrix, then         Compare and for      and Thus        Finding Determinants Using Row Operations  From the above section, - , can be used to find determinants using row operations. As pointed out above, the method of Laplace expansion will not be practical for any matrix of large size. Here is an example in which all the row operations are used.    Find the determinant of the matrix     Replace the second row by (-5) times the first row added to it. Then replace the third row by (-4) times the first row added to it. Finally, replace the fourth row by (-2) times the first row added to it. This yields the matrix and from it has the same determinant as . Now using other row operations, where The second row of was replaced by times the third row added to the second row. By this didn't change the value of the determinant. Then the last row was multiplied by . By the resulting matrix has a determinant which is times the determinant of the un-multiplied matrix. Therefore, we multiplied by to retain the correct value. Now replace the last row with 2 times the third added to it. This does not change the value of the determinant by . Finally switch the third and second rows. This causes the determinant to be multiplied by . Thus where You could do more row operations or you could note that this can be easily expanded along the first column followed by expanding the matrix which results along its first column. Thus and so and       Find the determinant of the matrix     Replace the second row by times the first row added to it. Next take times the first row and add to the third and finally take times the first row and add to the last row. This yields By this matrix has the same determinant as the original matrix. Remember you can work with the columns also. Take times the last column and add to the second column. This yields By this matrix has the same determinant as the original matrix. Now take times the third row and add to the top row. This gives. which by has the same determinant as the original matrix. Let's expand it now along the first column. This yields the following for the determinant of the original matrix. which equals   We suggest you do not try to be fancy in using row operations. That is, stick mostly to the one which replaces a row or column with a multiple of another row or column added to it. Also note there is no way to check your answer other than working the problem more than one way. To be sure you have gotten it right you must do this.       A Formula For The Inverse  The definition of the determinant in terms of Laplace expansion along a row or column also provides a way to give a formula for the inverse of a matrix. Recall the definition of the inverse of a matrix in . Also recall the definition of the cofactor matrix given in . This cofactor matrix was just the matrix which results from replacing the entry of the matrix with the cofactor.  The following theorem says that to find the inverse, take the transpose of the cofactor matrix and divide by the determinant. The transpose of the cofactor matrix is called the adjugate or sometimes the classical adjoint of the matrix . In other words, is equal to 1 divided by the determinant of times the adjugate matrix of . This is what the following theorem says with more precision.   Matrix Inverse is Adjugate Divided by Determinant    exists if and only if . If , then where where .    From the definition of the determinant in terms of expansion along a column, and letting , if , Now consider when . Replace the column with the column to obtain a matrix whose determinant equals zero by . However, expanding this matrix along the column yields Summarizing, Now which is the entry of . Therefore,   Using the other formula in and similar reasoning, Now, which is the entry of . Therefore, and it follows that , where In other words,   Now suppose exists. Then by  so       Find the inverse of the matrix     First, find the determinant of this matrix. Using row operations ( - ), the determinant of this matrix equals the determinant of the matrix: which equals 12.  Next, find the cofactor matrix of . Each entry of was replaced by its cofactor. Therefore, from the above theorem, the inverse of should equal   Does it work? You should check to see if it does. When the matrices are multiplied and so it is correct.      Find the inverse of the matrix     First find its determinant. This determinant is . The inverse is therefore equal to Expanding all the determinants this yields   Always check your work. and so we got it right. If the result of multiplying these matrices had been something other than the identity matrix, you would know there was an error. When this happens, you need to search for the mistake if you are interested in getting the right answer. A common mistake is to forget to take the transpose of the cofactor matrix.    This way of finding inverses is especially useful in the case where it is desired to find the inverse of a matrix whose entries are functions.     Suppose Show that exists and then find it.    First note so exists. The cofactor matrix is so the inverse is       Cramer's Rule  Cramer's rule  This formula for the inverse also implies a famous procedure known as Cramer's rule . Cramer's rule gives a formula for the solutions, , to a system of equations, in the special case that is a square matrix. Note this rule does not apply if you have a system of equations in which there is a different number of equations than variables.  In case you are solving a system of equations, for , it follows that if exists, thus solving the system. Now in the case exists, is a formula for . Using this formula, By . the formula for the expansion of a determinant along a column, where here the column of is replaced by the column vector , and the determinant of this modified matrix is taken and divided by This formula is known as Cramer's rule.   Cramer's Rule  Cramer's rule   Suppose is an matrix and it is desired to solve the system , for . Then Cramer's rule says where is obtained by replacing the column of with the column       Find if     Using Cramer's rule, solve for by replacing column 1 with and dividing the determinant of the new matrix by the determinant of the original matrix. Now to find  and   You see the pattern.   For large systems Cramer's rule is less than useful because to use it you must evaluate determinants. However, you have no practical way to evaluate determinants for large matrices other than row operations and if you are using row operations, you might just as well use them to solve the system to begin with. It will be a lot less trouble. Nevertheless, there are situations in which Cramer's rule is useful.    Solve for if     You could do it by row operations but it might be easier in this case to use Cramer’s rule because the matrix of coefficients do not consist of numbers but of functions. Thus        Exercises    Find the determinants of the following matrices.                       Using the \"short cut\" shown in class.       Expanding along row 1.         Using row operations to make a triangular matrix. Subtracting row 1 from rows 2 and 4, and 4 times row 1 from row 3 gives Add 7 times row 2 to row 3 gives Subtract 1\/7 times row 3 from row 4 gives Taking the product of the diagonal        Find the following determinant by expanding along the first row.     Find the following determinant by expanding along the first column.          Find the following determinant by expanding along the second row.     Compute the determinant by cofactor expansion. Pick the easiest row or column to use.    This would normally take a lot of time because the matrix is a , but row three only has one non-zero entry so we will expand along row 3. The only term is the one for column 4: . Now we must find the determinant of the matrix (the minor). Again, this isn't that terrible because the first row only has one non-zero entry. So choosing to expand around row 1, we have only a column 1 term. Now using the formula for the determinant of a matrix we end up with     Find the determinant using row operations.     Find the determinant using row operations.    Here is one way to go about this: Subtracting row 1 from row 2 and then row 1 from row 3. Then subracting row 2 from row 3 So our determinant is:     Find the determinant using row operations.     Find the determinant using row operations.    One way to do this is: Zeroing everything under row 1 in column 1. Subtract 3 times row 1 from row 2, add row 1 to row 3 and subtract 2 times row 1 from row 4. Zeroing everything under row 2 in column 2. Add times row 2 to row 3 and subtract times row 2 from row 4. Zeroing everything under row 3 in column 3. Subtract times row 3 from row 4. The determinant is the product of the diagonal values:       User Cramer's rule to find the solution to       User Cramer's rule to find the solution to      So we have:  (The matrices are the same top and bottom)                Here is a matrix, Determine whether the matrix has an inverse by finding whether the determinant is non-zero. If the determinant is non-zero, find the inverse using the formula for the inverse which involves the cofactor matrix     Here is a matrix, Determine whether the matrix has an inverse by finding whether the determinant is non-zero. If the determinant is non-zero, find the inverse using the formula for the inverse which involves the cofactor matrix    The determinant is 7 so there is an inverse. The inverse is then equal to:       Here is a matrix, Determine whether the matrix has an inverse by finding whether the determinant is non-zero. If the determinant is non-zero, find the inverse using the formula for the inverse which involves the cofactor matrix    Here is a matrix, Determine whether the matrix has an inverse by finding whether the determinant is non-zero. If the determinant is non-zero, find the inverse using the formula for the inverse which involves the cofactor matrix      This matrix doesn't have an inverse.    Here is a matrix, Determine whether the matrix has an inverse by finding whether the determinant is non-zero. If the determinant is non-zero, find the inverse using the formula for the inverse which involves the cofactor matrix.    "
},
{
  "id": "Section11_4-3-1",
  "level": "2",
  "url": "Section11_4.html#Section11_4-3-1",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "determinant "
},
{
  "id": "subsec-cofactors-2-x-2-dets-2",
  "level": "2",
  "url": "Section11_4.html#subsec-cofactors-2-x-2-dets-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "determinant "
},
{
  "id": "def-2-x-2-det",
  "level": "2",
  "url": "Section11_4.html#def-2-x-2-det",
  "type": "Definition",
  "number": "11.4.1",
  "title": "Determinant of a <span class=\"process-math\">\\(2 \\times 2\\)<\/span> Matrix.",
  "body": " Determinant of a Matrix   Let . Then .  The determinant is also often denoted by enclosing the matrix with two vertical lines. Thus    "
},
{
  "id": "subsec-cofactors-2-x-2-dets-4",
  "level": "2",
  "url": "Section11_4.html#subsec-cofactors-2-x-2-dets-4",
  "type": "Example",
  "number": "11.4.2",
  "title": "",
  "body": "  Find .    From the definition this is .   "
},
{
  "id": "def-matrix-minor",
  "level": "2",
  "url": "Section11_4.html#def-matrix-minor",
  "type": "Definition",
  "number": "11.4.3",
  "title": "Matrix Minor.",
  "body": " matrix minor  Matrix Minor   Suppose is a matrix. The  minor , denoted as or minor , is the determinant of the matrix which results from deleting the row and the column.   "
},
{
  "id": "subsec-cofactors-2-x-2-dets-7",
  "level": "2",
  "url": "Section11_4.html#subsec-cofactors-2-x-2-dets-7",
  "type": "Example",
  "number": "11.4.4",
  "title": "",
  "body": " Consider the matrix   The (1,2) minor is the determinant of the matrix which results when you delete the first row and the second column. This minor is therefore   The (2,3) minor is the determinant of the matrix which results when you delete the second row and the third column. This minor is therefore   "
},
{
  "id": "def-ij-cofactor",
  "level": "2",
  "url": "Section11_4.html#def-ij-cofactor",
  "type": "Definition",
  "number": "11.4.5",
  "title": "<span class=\"process-math\">\\(ij^{th}\\)<\/span> Cofactor.",
  "body": " Cofactor  cofactor   Suppose is a matrix. The  cofactor is defined to be minor). In words, you multiply times the minor to get the cofactor.  The cofactors of a matrix are so important that special notation is appropriate when referring to them. The cofactor of a matrix will be denoted by . It is also convenient to refer to the cofactor of an entry of a matrix as follows. For an entry of the matrix, its cofactor is just . Thus the cofactor of the entry is just the cofactor.   "
},
{
  "id": "subsec-cofactors-2-x-2-dets-9",
  "level": "2",
  "url": "Section11_4.html#subsec-cofactors-2-x-2-dets-9",
  "type": "Example",
  "number": "11.4.6",
  "title": "",
  "body": " Consider the matrix   The (1,2) minor is the determinant of the matrix which results when you delete the first row and the second column. This minor is therefore   It follows   The (2,3) minor is the determinant of the matrix which results when you delete the second row and the third column. This minor is therefore   Therefore,   Similarly,   "
},
{
  "id": "def-expanding-along-row",
  "level": "2",
  "url": "Section11_4.html#def-expanding-along-row",
  "type": "Definition",
  "number": "11.4.7",
  "title": "Expanding Along a Row or Column.",
  "body": " Expanding Along a Row or Column   The determinant of a matrix , is obtained by picking a row (column) and taking the product of each entry in that row (column) with its cofactor and adding these up. This process when applied to the row (column) is known as expanding the determinant along the row (column) .   "
},
{
  "id": "subsec-cofactors-2-x-2-dets-11",
  "level": "2",
  "url": "Section11_4.html#subsec-cofactors-2-x-2-dets-11",
  "type": "Example",
  "number": "11.4.8",
  "title": "",
  "body": " Find the determinant of Here is how it is done by expanding around the first column.    You see, we just followed the rule in the above definition. We took the 1 in the first column and multiplied it by its cofactor, the 4 in the first column and multiplied it by its cofactor, and the 3 in the first column and multiplied it by its cofactor. Then we added these numbers together.  You could also expand the determinant along the second row as follows. Observe this gives the same number. You should try expanding along other rows and columns. If you don't make any mistakes, you will always get the same answer.  "
},
{
  "id": "def-det-of-four-by-four",
  "level": "2",
  "url": "Section11_4.html#def-det-of-four-by-four",
  "type": "Definition",
  "number": "11.4.9",
  "title": "",
  "body": "  Suppose A is a matrix. The  minor is the determinant of the matrix you obtain when you delete the row and the column. The  cofactor , is defined to be . In words, you multiply times the minor to get the cofactor.   "
},
{
  "id": "def-laplace-expansion",
  "level": "2",
  "url": "Section11_4.html#def-laplace-expansion",
  "type": "Definition",
  "number": "11.4.10",
  "title": "Laplace Expansion.",
  "body": " Laplace Expansion   The determinant of a matrix , is obtained by expanding along a row (column) just as was done for a matrix in , except the expanding process must be repeated again for each of the resulting matrices to obtain their determinants.  This method of evaluating a determinant by expanding along a row or a column can be done for any size square matrix and is called the method of Laplace expansion . The process must be repeated until the resulting matrices are small enough to easily calculate their determinants.   "
},
{
  "id": "subsec-cofactors-2-x-2-dets-15",
  "level": "2",
  "url": "Section11_4.html#subsec-cofactors-2-x-2-dets-15",
  "type": "Example",
  "number": "11.4.11",
  "title": "",
  "body": "  Find where     As in the case of a matrix, you can expand this along any row or column. Lets pick the third column.     Now you know how to expand each of the matrices along a row or a column. If you do so, you will get assuming you make no mistakes. You could expand this matrix along any row or any column and assuming you make no mistakes, you will always get the same thing which is defined to be the determinant of the matrix . .   "
},
{
  "id": "def-cofactor-equals-minor",
  "level": "2",
  "url": "Section11_4.html#def-cofactor-equals-minor",
  "type": "Definition",
  "number": "11.4.12",
  "title": "Cofactor Matrix.",
  "body": " matrix cofactor  Cofactor Matrix   Let be an matrix and suppose the determinant of a matrix has been defined. Then a new matrix called the cofactor matrix , is defined by where to obtain delete the row and the column of , take the determinant of the matrix which results, (This is called the  minor of . ) and then multiply this number by .  Thus equals the cofactor. To make the formulas easier to remember, will denote the entry of the cofactor matrix.   "
},
{
  "id": "def-det-sum-of-cof",
  "level": "2",
  "url": "Section11_4.html#def-det-sum-of-cof",
  "type": "Definition",
  "number": "11.4.13",
  "title": "Determininant as Sum of Cofactor Matrices.",
  "body": " Determininant as Sum of Cofactor Matrices   Let be an matrix where and suppose the determinant of an has been defined. Then    "
},
{
  "id": "thm-expanding-along-row-column",
  "level": "2",
  "url": "Section11_4.html#thm-expanding-along-row-column",
  "type": "Theorem",
  "number": "11.4.14",
  "title": "",
  "body": "  Expanding the n matrix along any row or column always gives the same answer so the above definition is a good definition.   "
},
{
  "id": "def-upper-triangular-matrix",
  "level": "2",
  "url": "Section11_4.html#def-upper-triangular-matrix",
  "type": "Definition",
  "number": "11.4.15",
  "title": "Triangular Matrices.",
  "body": " triangular matrix  Triangular Matrices   A matrix , is upper triangular if whenever . Thus in such a matrix, every entry below the main diagonal (the entries of the form ) equals zero, as shown. A lower triangular matrix is defined similarly as a matrix for which all entries above the main diagonal are equal to zero.   "
},
{
  "id": "cor-det-of-triangular-matrix",
  "level": "2",
  "url": "Section11_4.html#cor-det-of-triangular-matrix",
  "type": "Corollary",
  "number": "11.4.16",
  "title": "Determinant of a Triangular Matrix.",
  "body": " Determinant of a Triangular Matrix   Let be an upper (lower) triangular matrix. Then is obtained by taking the product of the entries on the main diagonal.   "
},
{
  "id": "subsec-det-of-triangular-matrix-6",
  "level": "2",
  "url": "Section11_4.html#subsec-det-of-triangular-matrix-6",
  "type": "Example",
  "number": "11.4.17",
  "title": "",
  "body": "  Let Find     From the above corollary, it suffices to take the product of the diagonal elements. Thus     Without using the corollary, you could expand along the first column. This gives  and the only non-zero term in the expansion is the first one Now expand this along the first column to obtain  Next expand this last determinant along the first column to obtain the above equals which is just the product of the entries down the main diagonal of the original matrix.   "
},
{
  "id": "thm-switch-rows-neg-det",
  "level": "2",
  "url": "Section11_4.html#thm-switch-rows-neg-det",
  "type": "Theorem",
  "number": "11.4.18",
  "title": "Switching two rows negates the determinant.",
  "body": " Switching two rows negates the determinant   Let be an matrix and let be a matrix which results from switching two rows of . Then . Also, if one row of is a multiple of another row of , then .   "
},
{
  "id": "subsec-props-of-dets-4",
  "level": "2",
  "url": "Section11_4.html#subsec-props-of-dets-4",
  "type": "Example",
  "number": "11.4.19",
  "title": "",
  "body": "  Let , and let .  Then and    "
},
{
  "id": "thm-det-mult-mat-by-scalar",
  "level": "2",
  "url": "Section11_4.html#thm-det-mult-mat-by-scalar",
  "type": "Theorem",
  "number": "11.4.20",
  "title": "Multiplying a matrix by a scalar, also multiplies the determinant.",
  "body": " Multiplying a matrix by a scalar, also multiplies the determinant   Let be an matrix and let be a matrix which results from multiplying some row of by a scalar . Then .   "
},
{
  "id": "subsec-props-of-dets-6",
  "level": "2",
  "url": "Section11_4.html#subsec-props-of-dets-6",
  "type": "Example",
  "number": "11.4.21",
  "title": "",
  "body": "  Let , .  The first row of is 2 times the first row of .   and    "
},
{
  "id": "thm-row-ops-dont-change-det",
  "level": "2",
  "url": "Section11_4.html#thm-row-ops-dont-change-det",
  "type": "Theorem",
  "number": "11.4.22",
  "title": "Row operation 3 doesn’t change the determinant.",
  "body": " Row operation 3 doesn't change the determinant   Let be an matrix and let be a matrix which results from applying row operation 3. That is, you replace some row by a multiple of another row added to itself. Then    "
},
{
  "id": "subsec-props-of-dets-8",
  "level": "2",
  "url": "Section11_4.html#subsec-props-of-dets-8",
  "type": "Example",
  "number": "11.4.23",
  "title": "",
  "body": "  Let and let . Thus the second row of is one times the first row added to the second row.   and    "
},
{
  "id": "thm-rows-cols-same-effect",
  "level": "2",
  "url": "Section11_4.html#thm-rows-cols-same-effect",
  "type": "Theorem",
  "number": "11.4.24",
  "title": "Columns have the same effect.",
  "body": " Columns have the same effect   In - you can replace the word \"row\" with the word \"column\".   "
},
{
  "id": "thm-prod-of-dets",
  "level": "2",
  "url": "Section11_4.html#thm-prod-of-dets",
  "type": "Theorem",
  "number": "11.4.25",
  "title": "The determinant of a matrix product is the product of the determinants.",
  "body": " The determinant of a matrix product is the product of the determinants    Let and be two matrices, then     "
},
{
  "id": "subsec-props-of-dets-12",
  "level": "2",
  "url": "Section11_4.html#subsec-props-of-dets-12",
  "type": "Example",
  "number": "11.4.26",
  "title": "",
  "body": "  Compare and for     First and so Now and Thus    "
},
{
  "id": "thm-det-of-transp",
  "level": "2",
  "url": "Section11_4.html#thm-det-of-transp",
  "type": "Theorem",
  "number": "11.4.27",
  "title": "The determinant of a matrix is the determinant of its transpose.",
  "body": " The determinant of a matrix is the determinant of its transpose    Let be an matrix, then     "
},
{
  "id": "subsec-props-of-dets-14",
  "level": "2",
  "url": "Section11_4.html#subsec-props-of-dets-14",
  "type": "Example",
  "number": "11.4.28",
  "title": "",
  "body": "  Compare and for      and Thus    "
},
{
  "id": "subsec-det-row-ops-3",
  "level": "2",
  "url": "Section11_4.html#subsec-det-row-ops-3",
  "type": "Example",
  "number": "11.4.29",
  "title": "",
  "body": "  Find the determinant of the matrix     Replace the second row by (-5) times the first row added to it. Then replace the third row by (-4) times the first row added to it. Finally, replace the fourth row by (-2) times the first row added to it. This yields the matrix and from it has the same determinant as . Now using other row operations, where The second row of was replaced by times the third row added to the second row. By this didn't change the value of the determinant. Then the last row was multiplied by . By the resulting matrix has a determinant which is times the determinant of the un-multiplied matrix. Therefore, we multiplied by to retain the correct value. Now replace the last row with 2 times the third added to it. This does not change the value of the determinant by . Finally switch the third and second rows. This causes the determinant to be multiplied by . Thus where You could do more row operations or you could note that this can be easily expanded along the first column followed by expanding the matrix which results along its first column. Thus and so and    "
},
{
  "id": "subsec-det-row-ops-4",
  "level": "2",
  "url": "Section11_4.html#subsec-det-row-ops-4",
  "type": "Example",
  "number": "11.4.30",
  "title": "",
  "body": "  Find the determinant of the matrix     Replace the second row by times the first row added to it. Next take times the first row and add to the third and finally take times the first row and add to the last row. This yields By this matrix has the same determinant as the original matrix. Remember you can work with the columns also. Take times the last column and add to the second column. This yields By this matrix has the same determinant as the original matrix. Now take times the third row and add to the top row. This gives. which by has the same determinant as the original matrix. Let's expand it now along the first column. This yields the following for the determinant of the original matrix. which equals   We suggest you do not try to be fancy in using row operations. That is, stick mostly to the one which replaces a row or column with a multiple of another row or column added to it. Also note there is no way to check your answer other than working the problem more than one way. To be sure you have gotten it right you must do this.   "
},
{
  "id": "subsec-formula-for-inverse-3",
  "level": "2",
  "url": "Section11_4.html#subsec-formula-for-inverse-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "adjugate classical adjoint "
},
{
  "id": "thm-inverse-from-cofactor",
  "level": "2",
  "url": "Section11_4.html#thm-inverse-from-cofactor",
  "type": "Theorem",
  "number": "11.4.31",
  "title": "Matrix Inverse is Adjugate Divided by Determinant.",
  "body": " Matrix Inverse is Adjugate Divided by Determinant    exists if and only if . If , then where where .    From the definition of the determinant in terms of expansion along a column, and letting , if , Now consider when . Replace the column with the column to obtain a matrix whose determinant equals zero by . However, expanding this matrix along the column yields Summarizing, Now which is the entry of . Therefore,   Using the other formula in and similar reasoning, Now, which is the entry of . Therefore, and it follows that , where In other words,   Now suppose exists. Then by  so    "
},
{
  "id": "subsec-formula-for-inverse-5",
  "level": "2",
  "url": "Section11_4.html#subsec-formula-for-inverse-5",
  "type": "Example",
  "number": "11.4.32",
  "title": "",
  "body": "  Find the inverse of the matrix     First, find the determinant of this matrix. Using row operations ( - ), the determinant of this matrix equals the determinant of the matrix: which equals 12.  Next, find the cofactor matrix of . Each entry of was replaced by its cofactor. Therefore, from the above theorem, the inverse of should equal   Does it work? You should check to see if it does. When the matrices are multiplied and so it is correct.   "
},
{
  "id": "subsec-formula-for-inverse-6",
  "level": "2",
  "url": "Section11_4.html#subsec-formula-for-inverse-6",
  "type": "Example",
  "number": "11.4.33",
  "title": "",
  "body": "  Find the inverse of the matrix     First find its determinant. This determinant is . The inverse is therefore equal to Expanding all the determinants this yields   Always check your work. and so we got it right. If the result of multiplying these matrices had been something other than the identity matrix, you would know there was an error. When this happens, you need to search for the mistake if you are interested in getting the right answer. A common mistake is to forget to take the transpose of the cofactor matrix.   "
},
{
  "id": "subsec-formula-for-inverse-8",
  "level": "2",
  "url": "Section11_4.html#subsec-formula-for-inverse-8",
  "type": "Example",
  "number": "11.4.34",
  "title": "",
  "body": "  Suppose Show that exists and then find it.    First note so exists. The cofactor matrix is so the inverse is    "
},
{
  "id": "subsec-cramers-rule-3",
  "level": "2",
  "url": "Section11_4.html#subsec-cramers-rule-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Cramer's rule "
},
{
  "id": "def-cramers-rule",
  "level": "2",
  "url": "Section11_4.html#def-cramers-rule",
  "type": "Definition",
  "number": "11.4.35",
  "title": "Cramer’s Rule.",
  "body": " Cramer's Rule  Cramer's rule   Suppose is an matrix and it is desired to solve the system , for . Then Cramer's rule says where is obtained by replacing the column of with the column    "
},
{
  "id": "subsec-cramers-rule-6",
  "level": "2",
  "url": "Section11_4.html#subsec-cramers-rule-6",
  "type": "Example",
  "number": "11.4.36",
  "title": "",
  "body": "  Find if     Using Cramer's rule, solve for by replacing column 1 with and dividing the determinant of the new matrix by the determinant of the original matrix. Now to find  and   You see the pattern.  "
},
{
  "id": "subsec-cramers-rule-8",
  "level": "2",
  "url": "Section11_4.html#subsec-cramers-rule-8",
  "type": "Example",
  "number": "11.4.37",
  "title": "",
  "body": "  Solve for if     You could do it by row operations but it might be easier in this case to use Cramer’s rule because the matrix of coefficients do not consist of numbers but of functions. Thus    "
},
{
  "id": "exercises-11-4-2",
  "level": "2",
  "url": "Section11_4.html#exercises-11-4-2",
  "type": "Exercise",
  "number": "11.4.7.1",
  "title": "",
  "body": " Find the determinants of the following matrices.                       Using the \"short cut\" shown in class.       Expanding along row 1.         Using row operations to make a triangular matrix. Subtracting row 1 from rows 2 and 4, and 4 times row 1 from row 3 gives Add 7 times row 2 to row 3 gives Subtract 1\/7 times row 3 from row 4 gives Taking the product of the diagonal      "
},
{
  "id": "exercises-11-4-3",
  "level": "2",
  "url": "Section11_4.html#exercises-11-4-3",
  "type": "Exercise",
  "number": "11.4.7.2",
  "title": "",
  "body": " Find the following determinant by expanding along the first row.   "
},
{
  "id": "exercises-11-4-4",
  "level": "2",
  "url": "Section11_4.html#exercises-11-4-4",
  "type": "Exercise",
  "number": "11.4.7.3",
  "title": "",
  "body": " Find the following determinant by expanding along the first column.        "
},
{
  "id": "exercises-11-4-5",
  "level": "2",
  "url": "Section11_4.html#exercises-11-4-5",
  "type": "Exercise",
  "number": "11.4.7.4",
  "title": "",
  "body": " Find the following determinant by expanding along the second row.   "
},
{
  "id": "exercises-11-4-6",
  "level": "2",
  "url": "Section11_4.html#exercises-11-4-6",
  "type": "Exercise",
  "number": "11.4.7.5",
  "title": "",
  "body": " Compute the determinant by cofactor expansion. Pick the easiest row or column to use.    This would normally take a lot of time because the matrix is a , but row three only has one non-zero entry so we will expand along row 3. The only term is the one for column 4: . Now we must find the determinant of the matrix (the minor). Again, this isn't that terrible because the first row only has one non-zero entry. So choosing to expand around row 1, we have only a column 1 term. Now using the formula for the determinant of a matrix we end up with   "
},
{
  "id": "exercises-11-4-7",
  "level": "2",
  "url": "Section11_4.html#exercises-11-4-7",
  "type": "Exercise",
  "number": "11.4.7.6",
  "title": "",
  "body": " Find the determinant using row operations.   "
},
{
  "id": "exercises-11-4-8",
  "level": "2",
  "url": "Section11_4.html#exercises-11-4-8",
  "type": "Exercise",
  "number": "11.4.7.7",
  "title": "",
  "body": " Find the determinant using row operations.    Here is one way to go about this: Subtracting row 1 from row 2 and then row 1 from row 3. Then subracting row 2 from row 3 So our determinant is:   "
},
{
  "id": "exercises-11-4-9",
  "level": "2",
  "url": "Section11_4.html#exercises-11-4-9",
  "type": "Exercise",
  "number": "11.4.7.8",
  "title": "",
  "body": " Find the determinant using row operations.   "
},
{
  "id": "exercises-11-4-10",
  "level": "2",
  "url": "Section11_4.html#exercises-11-4-10",
  "type": "Exercise",
  "number": "11.4.7.9",
  "title": "",
  "body": " Find the determinant using row operations.    One way to do this is: Zeroing everything under row 1 in column 1. Subtract 3 times row 1 from row 2, add row 1 to row 3 and subtract 2 times row 1 from row 4. Zeroing everything under row 2 in column 2. Add times row 2 to row 3 and subtract times row 2 from row 4. Zeroing everything under row 3 in column 3. Subtract times row 3 from row 4. The determinant is the product of the diagonal values:   "
},
{
  "id": "exercises-11-4-11",
  "level": "2",
  "url": "Section11_4.html#exercises-11-4-11",
  "type": "Exercise",
  "number": "11.4.7.10",
  "title": "",
  "body": " User Cramer's rule to find the solution to    "
},
{
  "id": "exercises-11-4-12",
  "level": "2",
  "url": "Section11_4.html#exercises-11-4-12",
  "type": "Exercise",
  "number": "11.4.7.11",
  "title": "",
  "body": " User Cramer's rule to find the solution to      So we have:  (The matrices are the same top and bottom)             "
},
{
  "id": "exercises-11-4-13",
  "level": "2",
  "url": "Section11_4.html#exercises-11-4-13",
  "type": "Exercise",
  "number": "11.4.7.12",
  "title": "",
  "body": " Here is a matrix, Determine whether the matrix has an inverse by finding whether the determinant is non-zero. If the determinant is non-zero, find the inverse using the formula for the inverse which involves the cofactor matrix  "
},
{
  "id": "exercises-11-4-14",
  "level": "2",
  "url": "Section11_4.html#exercises-11-4-14",
  "type": "Exercise",
  "number": "11.4.7.13",
  "title": "",
  "body": " Here is a matrix, Determine whether the matrix has an inverse by finding whether the determinant is non-zero. If the determinant is non-zero, find the inverse using the formula for the inverse which involves the cofactor matrix    The determinant is 7 so there is an inverse. The inverse is then equal to:     "
},
{
  "id": "exercises-11-4-15",
  "level": "2",
  "url": "Section11_4.html#exercises-11-4-15",
  "type": "Exercise",
  "number": "11.4.7.14",
  "title": "",
  "body": " Here is a matrix, Determine whether the matrix has an inverse by finding whether the determinant is non-zero. If the determinant is non-zero, find the inverse using the formula for the inverse which involves the cofactor matrix  "
},
{
  "id": "exercises-11-4-16",
  "level": "2",
  "url": "Section11_4.html#exercises-11-4-16",
  "type": "Exercise",
  "number": "11.4.7.15",
  "title": "",
  "body": " Here is a matrix, Determine whether the matrix has an inverse by finding whether the determinant is non-zero. If the determinant is non-zero, find the inverse using the formula for the inverse which involves the cofactor matrix      This matrix doesn't have an inverse.  "
},
{
  "id": "exercises-11-4-17",
  "level": "2",
  "url": "Section11_4.html#exercises-11-4-17",
  "type": "Exercise",
  "number": "11.4.7.16",
  "title": "",
  "body": " Here is a matrix, Determine whether the matrix has an inverse by finding whether the determinant is non-zero. If the determinant is non-zero, find the inverse using the formula for the inverse which involves the cofactor matrix.  "
},
{
  "id": "s-posets-revisited",
  "level": "1",
  "url": "s-posets-revisited.html",
  "type": "Section",
  "number": "12.1",
  "title": "Posets Revisited",
  "body": " Posets Revisited  Posets Revisited  Recall the definition of a from . The entire definition can be stated more compactly:   Partial Ordering  Partial Ordering   Let be a relation on a set . We say that is a partial ordering on if it is reflexive, antisymmetric, and transitive. That is:   is reflexive:    is antisymmetric:     is transitive:    The set together with the relation is called a poset.     Some posets  We recall a few examples of posets:    is a poset. Notice that our generic symbol for the partial ordering, , is selected to remind us that a partial ordering is similar to less than or equal to.    Let . Then is a poset.    Let . Then is a poset.      The posets we will concentrate on in this chapter will be those which have upper and lower bounds in relation to any pair of elements. Next, we define this concept precisely.   Lower Bound, Upper Bound  Lower Bound  Upper Bound   Let be a poset, and . Then is a lower bound of and if and . Also, is an upper bound of and if and .    In most of the posets that will interest us, every pair of elements have both upper and lower bounds, though there are posets for which this is not true.   Greatest Lower Bound  Greatest Lower Bound   Let be a poset. If , then is a greatest lower bound of and if and only if             If such that and , then .      The last condition in the definition of Greatest Lower Bound says that if is also a lower bound, then is greater in relation to than . The definition of a least upper bound is a mirror image of a greatest lower bound:   Least Upper Bound  Least Upper Bound   Let be a poset. If , then is a least upper bound of and if and only if             If such that if and , then .      Notice that the two definitions above refer to ...a greatest lower bound and a least upper bound. Any time you define an object like these you need to have an open mind as to whether more than one such object can exist. In fact, we now can prove that there can't be two greatest lower bounds or two least upper bounds.   Uniqueness of Least Upper and Greatest Lower Bounds   Let be a poset, and . If a greatest lower bound of and exists, then it is unique. The same is true of a least upper bound, if it exists.    Let and be greatest lower bounds of and . We will prove that .    a greatest lower bound of and   is a lower bound of and .     a greatest lower bound of and and a lower bound of and  , by the definition of greatest lower bound.     a greatest lower bound of and  is a lower bound of and .     a greatest lower bound of and and a lower bound of and . by the definition of greatest lower bound.     and by the antisymmetry property of a partial ordering.     The proof of the second statement in the theorem is almost identical to the first and is left to the reader.     Greatest Element, Least Element  Greatest Element  Least Element    least element in a poset     greatest element in a poset    Let be a poset. is called the greatest (maximum) element of if, for all , . In addition, is called the least (minimum) element of if for all , . The greatest and least elements, when they exist, are frequently denoted by and respectively.     Bounds on the divisors of 105  Consider the partial ordering divides on . Then is a poset. To determine the least upper bound of 3 and 7, we look for all , such that and . Certainly, both and satisfy these conditions and no other element of does. Next, since , is the least upper bound of 3 and 7. Similarly, the least upper bound of 3 and 5 is 15. The greatest element of is 105 since for all . To find the greatest lower bound of 15 and 35, we first consider all elements of such that . They are 1, 3, 5, and 15. The elements for which are 1, 5, 7, and 35. From these two lists, we see that and satisfy the required conditions. But since , the greatest lower bound is 5. The least element of is 1 since for all .    The Set of Divisors of an Integer  Divisors of an Integer    the set of divisors of integer    For any positive integer , the divisors of is the set of integers that divide evenly into . We denote this set .    For example, the set of is .   The power set of a three element set  Consider the poset , where . The greatest lower bound of and is . For any other element which is a subset of and (there is only one; what is it?), . The least element of is and the greatest element is . The Hasse diagram of this poset is shown in .   Power Set of    Power Set of the set     The previous examples and definitions indicate that the least upper bound and greatest lower bound are defined in terms of the partial ordering of the given poset. It is not yet clear whether all posets have the property such every pair of elements always has both a least upper bound and greatest lower bound. Indeed, this is not the case (see ).   Exercises   Consider the poset , where .   Find all lower bounds of 10 and 15.    Find the greatest lower bound of 10 and 15.    Find all upper bounds of 10 and 15.    Determine the least upper bound of 10 and 15.    Draw the Hasse diagram for with respect to . Compare this Hasse diagram with that of . Note that the two diagrams are structurally the same.        1, 5    5    30    30    See the Sage cell below with the default input displaying a Hasse diagram for .        List the elements of the sets , , and . For each set, draw the Hasse diagram for divides.    contains Hasse diagrams of posets.   Determine the least upper bound and greatest lower bound of all pairs of elements when they exist. Indicate those pairs that do not have a least upper bound (or a greatest lower bound ).    Find the least and greatest elements when they exist.      Figure for Exercise 3   Eight Hasse diagrams for Exercise 3        Solution for Hasse diagram (b):       is the least element and is the greatest element.      Partial solution for Hasse diagram (f):    and do not exist.    No greatest element exists, but is the least element.          For the poset , what are the greatest lower bound and least upper bound of two elements and ? Are there least and\/or greatest elements?       Prove the second part of , the least upper bound of two elements in a poset is unique, it one exists.    Prove that if a poset has a least element, then that element is unique.      If and are distinct least elements, then     We naturally order the numbers in with less than or equal to, which is a partial ordering. We define an ordering, on the elements of by    Prove that is a partial ordering on .    Draw the ordering diagrams for on , , and .    In general, how does one determine the least upper bound and greatest lower bound of two elements of , and ?    Are there least and\/or greatest elements in ?      "
},
{
  "id": "def-partial-ordering-12",
  "level": "2",
  "url": "s-posets-revisited.html#def-partial-ordering-12",
  "type": "Definition",
  "number": "12.1.1",
  "title": "Partial Ordering.",
  "body": " Partial Ordering  Partial Ordering   Let be a relation on a set . We say that is a partial ordering on if it is reflexive, antisymmetric, and transitive. That is:   is reflexive:    is antisymmetric:     is transitive:    The set together with the relation is called a poset.   "
},
{
  "id": "ex-some-posets",
  "level": "2",
  "url": "s-posets-revisited.html#ex-some-posets",
  "type": "Example",
  "number": "12.1.2",
  "title": "Some posets.",
  "body": " Some posets  We recall a few examples of posets:    is a poset. Notice that our generic symbol for the partial ordering, , is selected to remind us that a partial ordering is similar to less than or equal to.    Let . Then is a poset.    Let . Then is a poset.     "
},
{
  "id": "def-bounds",
  "level": "2",
  "url": "s-posets-revisited.html#def-bounds",
  "type": "Definition",
  "number": "12.1.3",
  "title": "Lower Bound, Upper Bound.",
  "body": " Lower Bound, Upper Bound  Lower Bound  Upper Bound   Let be a poset, and . Then is a lower bound of and if and . Also, is an upper bound of and if and .   "
},
{
  "id": "def-glb",
  "level": "2",
  "url": "s-posets-revisited.html#def-glb",
  "type": "Definition",
  "number": "12.1.4",
  "title": "Greatest Lower Bound.",
  "body": " Greatest Lower Bound  Greatest Lower Bound   Let be a poset. If , then is a greatest lower bound of and if and only if             If such that and , then .     "
},
{
  "id": "def-lub",
  "level": "2",
  "url": "s-posets-revisited.html#def-lub",
  "type": "Definition",
  "number": "12.1.5",
  "title": "Least Upper Bound.",
  "body": " Least Upper Bound  Least Upper Bound   Let be a poset. If , then is a least upper bound of and if and only if             If such that if and , then .     "
},
{
  "id": "theorem-unique-lub-glb",
  "level": "2",
  "url": "s-posets-revisited.html#theorem-unique-lub-glb",
  "type": "Theorem",
  "number": "12.1.6",
  "title": "Uniqueness of Least Upper and Greatest Lower Bounds.",
  "body": " Uniqueness of Least Upper and Greatest Lower Bounds   Let be a poset, and . If a greatest lower bound of and exists, then it is unique. The same is true of a least upper bound, if it exists.    Let and be greatest lower bounds of and . We will prove that .    a greatest lower bound of and   is a lower bound of and .     a greatest lower bound of and and a lower bound of and  , by the definition of greatest lower bound.     a greatest lower bound of and  is a lower bound of and .     a greatest lower bound of and and a lower bound of and . by the definition of greatest lower bound.     and by the antisymmetry property of a partial ordering.     The proof of the second statement in the theorem is almost identical to the first and is left to the reader.   "
},
{
  "id": "def-greatest-least",
  "level": "2",
  "url": "s-posets-revisited.html#def-greatest-least",
  "type": "Definition",
  "number": "12.1.7",
  "title": "Greatest Element, Least Element.",
  "body": " Greatest Element, Least Element  Greatest Element  Least Element    least element in a poset     greatest element in a poset    Let be a poset. is called the greatest (maximum) element of if, for all , . In addition, is called the least (minimum) element of if for all , . The greatest and least elements, when they exist, are frequently denoted by and respectively.   "
},
{
  "id": "ex-bounds-105",
  "level": "2",
  "url": "s-posets-revisited.html#ex-bounds-105",
  "type": "Example",
  "number": "12.1.8",
  "title": "Bounds on the divisors of 105.",
  "body": " Bounds on the divisors of 105  Consider the partial ordering divides on . Then is a poset. To determine the least upper bound of 3 and 7, we look for all , such that and . Certainly, both and satisfy these conditions and no other element of does. Next, since , is the least upper bound of 3 and 7. Similarly, the least upper bound of 3 and 5 is 15. The greatest element of is 105 since for all . To find the greatest lower bound of 15 and 35, we first consider all elements of such that . They are 1, 3, 5, and 15. The elements for which are 1, 5, 7, and 35. From these two lists, we see that and satisfy the required conditions. But since , the greatest lower bound is 5. The least element of is 1 since for all .  "
},
{
  "id": "def-set-of-divisors",
  "level": "2",
  "url": "s-posets-revisited.html#def-set-of-divisors",
  "type": "Definition",
  "number": "12.1.9",
  "title": "The Set of Divisors of an Integer.",
  "body": " The Set of Divisors of an Integer  Divisors of an Integer    the set of divisors of integer    For any positive integer , the divisors of is the set of integers that divide evenly into . We denote this set .   "
},
{
  "id": "ex-power-3",
  "level": "2",
  "url": "s-posets-revisited.html#ex-power-3",
  "type": "Example",
  "number": "12.1.10",
  "title": "The power set of a three element set.",
  "body": " The power set of a three element set  Consider the poset , where . The greatest lower bound of and is . For any other element which is a subset of and (there is only one; what is it?), . The least element of is and the greatest element is . The Hasse diagram of this poset is shown in .   Power Set of    Power Set of the set    "
},
{
  "id": "exercise-12-1-1",
  "level": "2",
  "url": "s-posets-revisited.html#exercise-12-1-1",
  "type": "Exercise",
  "number": "12.1.1",
  "title": "",
  "body": " Consider the poset , where .   Find all lower bounds of 10 and 15.    Find the greatest lower bound of 10 and 15.    Find all upper bounds of 10 and 15.    Determine the least upper bound of 10 and 15.    Draw the Hasse diagram for with respect to . Compare this Hasse diagram with that of . Note that the two diagrams are structurally the same.        1, 5    5    30    30    See the Sage cell below with the default input displaying a Hasse diagram for .      "
},
{
  "id": "exercises-12-1-3",
  "level": "2",
  "url": "s-posets-revisited.html#exercises-12-1-3",
  "type": "Exercise",
  "number": "12.1.2",
  "title": "",
  "body": " List the elements of the sets , , and . For each set, draw the Hasse diagram for divides.  "
},
{
  "id": "exercise-12-1-3",
  "level": "2",
  "url": "s-posets-revisited.html#exercise-12-1-3",
  "type": "Exercise",
  "number": "12.1.3",
  "title": "",
  "body": " contains Hasse diagrams of posets.   Determine the least upper bound and greatest lower bound of all pairs of elements when they exist. Indicate those pairs that do not have a least upper bound (or a greatest lower bound ).    Find the least and greatest elements when they exist.      Figure for Exercise 3   Eight Hasse diagrams for Exercise 3        Solution for Hasse diagram (b):       is the least element and is the greatest element.      Partial solution for Hasse diagram (f):    and do not exist.    No greatest element exists, but is the least element.        "
},
{
  "id": "exercises-12-1-5",
  "level": "2",
  "url": "s-posets-revisited.html#exercises-12-1-5",
  "type": "Exercise",
  "number": "12.1.4",
  "title": "",
  "body": " For the poset , what are the greatest lower bound and least upper bound of two elements and ? Are there least and\/or greatest elements?  "
},
{
  "id": "exercises-12-1-6",
  "level": "2",
  "url": "s-posets-revisited.html#exercises-12-1-6",
  "type": "Exercise",
  "number": "12.1.5",
  "title": "",
  "body": "    Prove the second part of , the least upper bound of two elements in a poset is unique, it one exists.    Prove that if a poset has a least element, then that element is unique.      If and are distinct least elements, then   "
},
{
  "id": "exercises-12-1-7",
  "level": "2",
  "url": "s-posets-revisited.html#exercises-12-1-7",
  "type": "Exercise",
  "number": "12.1.6",
  "title": "",
  "body": " We naturally order the numbers in with less than or equal to, which is a partial ordering. We define an ordering, on the elements of by    Prove that is a partial ordering on .    Draw the ordering diagrams for on , , and .    In general, how does one determine the least upper bound and greatest lower bound of two elements of , and ?    Are there least and\/or greatest elements in ?    "
},
{
  "id": "s-lattices",
  "level": "1",
  "url": "s-lattices.html",
  "type": "Section",
  "number": "12.2",
  "title": "Lattices",
  "body": " Lattices  Lattices  In this section, we restrict our discussion to lattices, those posets for which every pair of elements has both a greatest lower bound and least upper bound. We first introduce some notation.   Join, Meet D Join  Meet    the join, or least upper bound of and     the meet, or greatest lower bound of and    Let be a poset, and . We define:    , read join , as the least upper bound of and , if it exists. and     , read meet , as the greatest lower bound of and , if it exists.       Since the join and meet produce a unique result in all cases where they exist, by , we can consider them as binary operations on a set if they always exist. Thus the following definition:   Lattice  Lattice    A lattice with domain having meet and join operations    A lattice is a poset for which every pair of elements has a greatest lower bound and least upper bound. Since a lattice is an algebraic system with binary operations and , it is denoted by . If we want to make it clear what partial ordering the lattice is based on, we say it is a lattice under .     The power set of a three element set  Consider the poset we examined in . It isn't too surprising that every pair of sets had a greatest lower bound and least upper bound. Thus, we have a lattice in this case; and and . The reader is encouraged to write out the operation tables .   Our first concrete lattice can be generalized to the case of any set , producing the lattice , where the join operation is the set operation of union and the meet operation is the operation intersection; that is, and .  It can be shown (see the exercises) that the commutative laws, associative laws, idempotent laws, and absorption laws are all true for any lattice. A concrete example of this is clearly , since these laws hold in the algebra of sets. This lattice also has distributive property in that join is distributive over meet and meet is distributive over join. However, this is not always the case for lattices in general.   Distributive Lattice  Distributive Lattice   Let be a lattice under . is called a distributive lattice if and only if the distributive laws hold; that is, for all we have      A Nondistributive Lattice  We now give an example of a lattice where the distributive laws do not hold. Let . We define the partial ordering on by the set The operation tables for and on are:   Since every pair of elements in has both a join and a meet, is a lattice (under divides). Is this lattice distributive? We note that: and . Therefore, for some values of . Thus, this lattice is not distributive.   Our next observation uses the term sublattice , which we have not defined at this point, but we would hope that you could anticipate a definition, and we will leave it as an exercises to do so.  It can be shown that a lattice is nondistributive if and only if it contains a sublattice isomorphic to one of the lattices in . The Hasse diagram on the right of this figure, produces the diamond lattice , which is precisely the one that is defined in . The lattice based on the left hand poset is called the pentagon lattice .   Nondistributive lattices, the pentagon and diamond lattices   Hasse diagrams of pentagon and diamond lattices     Exercises   Let be the set of all propositions generated by and . What are the meet and join operations in this lattice under implication? What are the maximum and minimum elements?    Which of the posets in are lattices? Which of the lattices are distributive?       State the commutative laws, associative laws, idempotent laws, and absorption laws for lattices.    Prove laws you stated.       Demonstrate that the pentagon lattice is nondistributive.    What is a reasonable definition of the term sublattice ?   One reasonable definition would by this: Let be a lattice and let be a nonempty subset of . Then is a sublattice of if and only if is closed under both and    Let be a lattice based on a partial ordering . Prove that if ,    .     .     and .       "
},
{
  "id": "def-id",
  "level": "2",
  "url": "s-lattices.html#def-id",
  "type": "Definition",
  "number": "12.2.1",
  "title": "Join, Meet.",
  "body": " Join, Meet D Join  Meet    the join, or least upper bound of and     the meet, or greatest lower bound of and    Let be a poset, and . We define:    , read join , as the least upper bound of and , if it exists. and     , read meet , as the greatest lower bound of and , if it exists.      "
},
{
  "id": "def-lattice",
  "level": "2",
  "url": "s-lattices.html#def-lattice",
  "type": "Definition",
  "number": "12.2.2",
  "title": "Lattice.",
  "body": " Lattice  Lattice    A lattice with domain having meet and join operations    A lattice is a poset for which every pair of elements has a greatest lower bound and least upper bound. Since a lattice is an algebraic system with binary operations and , it is denoted by . If we want to make it clear what partial ordering the lattice is based on, we say it is a lattice under .   "
},
{
  "id": "ex-power-set-3-lattice",
  "level": "2",
  "url": "s-lattices.html#ex-power-set-3-lattice",
  "type": "Example",
  "number": "12.2.3",
  "title": "The power set of a three element set.",
  "body": " The power set of a three element set  Consider the poset we examined in . It isn't too surprising that every pair of sets had a greatest lower bound and least upper bound. Thus, we have a lattice in this case; and and . The reader is encouraged to write out the operation tables .  "
},
{
  "id": "def-distributive-lattice",
  "level": "2",
  "url": "s-lattices.html#def-distributive-lattice",
  "type": "Definition",
  "number": "12.2.4",
  "title": "Distributive Lattice.",
  "body": " Distributive Lattice  Distributive Lattice   Let be a lattice under . is called a distributive lattice if and only if the distributive laws hold; that is, for all we have    "
},
{
  "id": "ex-a-nondistributive-lattice",
  "level": "2",
  "url": "s-lattices.html#ex-a-nondistributive-lattice",
  "type": "Example",
  "number": "12.2.5",
  "title": "A Nondistributive Lattice.",
  "body": " A Nondistributive Lattice  We now give an example of a lattice where the distributive laws do not hold. Let . We define the partial ordering on by the set The operation tables for and on are:   Since every pair of elements in has both a join and a meet, is a lattice (under divides). Is this lattice distributive? We note that: and . Therefore, for some values of . Thus, this lattice is not distributive.  "
},
{
  "id": "s-lattices-13",
  "level": "2",
  "url": "s-lattices.html#s-lattices-13",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "diamond lattice pentagon lattice "
},
{
  "id": "fig-nondistributive-lattices",
  "level": "2",
  "url": "s-lattices.html#fig-nondistributive-lattices",
  "type": "Figure",
  "number": "12.2.6",
  "title": "",
  "body": " Nondistributive lattices, the pentagon and diamond lattices   Hasse diagrams of pentagon and diamond lattices   "
},
{
  "id": "exercises-12-2-2",
  "level": "2",
  "url": "s-lattices.html#exercises-12-2-2",
  "type": "Exercise",
  "number": "12.2.1",
  "title": "",
  "body": " Let be the set of all propositions generated by and . What are the meet and join operations in this lattice under implication? What are the maximum and minimum elements?  "
},
{
  "id": "exercises-12-2-3",
  "level": "2",
  "url": "s-lattices.html#exercises-12-2-3",
  "type": "Exercise",
  "number": "12.2.2",
  "title": "",
  "body": " Which of the posets in are lattices? Which of the lattices are distributive?  "
},
{
  "id": "exercises-12-2-4",
  "level": "2",
  "url": "s-lattices.html#exercises-12-2-4",
  "type": "Exercise",
  "number": "12.2.3",
  "title": "",
  "body": "    State the commutative laws, associative laws, idempotent laws, and absorption laws for lattices.    Prove laws you stated.     "
},
{
  "id": "exercises-12-2-5",
  "level": "2",
  "url": "s-lattices.html#exercises-12-2-5",
  "type": "Exercise",
  "number": "12.2.4",
  "title": "",
  "body": " Demonstrate that the pentagon lattice is nondistributive.  "
},
{
  "id": "exercises-12-2-6",
  "level": "2",
  "url": "s-lattices.html#exercises-12-2-6",
  "type": "Exercise",
  "number": "12.2.5",
  "title": "",
  "body": " What is a reasonable definition of the term sublattice ?   One reasonable definition would by this: Let be a lattice and let be a nonempty subset of . Then is a sublattice of if and only if is closed under both and  "
},
{
  "id": "exercises-12-2-7",
  "level": "2",
  "url": "s-lattices.html#exercises-12-2-7",
  "type": "Exercise",
  "number": "12.2.6",
  "title": "",
  "body": " Let be a lattice based on a partial ordering . Prove that if ,    .     .     and .     "
},
{
  "id": "s-boolean-algebras",
  "level": "1",
  "url": "s-boolean-algebras.html",
  "type": "Section",
  "number": "12.3",
  "title": "Boolean Algebras",
  "body": " Boolean Algebras  Boolean Algebras  In order to define a Boolean algebra, we need the additional concept of complementation. A lattice must have both a greatest element and a least element in order for complementation to take place. The following definition will save us some words in the rest of this section. D  Bounded Lattice  Bounded Lattice   A bounded lattice is a lattice that contains both a least element and a greatest element.    We use the symbols and for the least and greatest elements of a bounded lattice in the remainder of this section.   The Complement of a Lattice Element  Complement of a Lattice Element   Let be a bounded lattice. If , then has a complement if there exists such that     Notice that by the commutative laws for lattices, if complements , then complements .   Complemented Lattice  Complemented Lattice   Let be a bounded lattice. is a complemented lattice if every element of has a complement in .     Set Complement is a Complement  In Chapter 1, we defined the complement of a subset of any universe. This turns out to be a concrete example of the general concept we have just defined, but we will reason through why this is the case here. Let , where . Then is a bounded lattice with and . To find the complement, if it exists, of , for example, we want such that It's not too difficult to see that , since we need to include to make the first condition true and can't include or if the second condition is to be true. Of course this is precisely how we defined in Chapter 1. Since it can be shown that each element of has a complement (see Exercise 1), is a complemented lattice. Note that if is any set and , then is a complemented lattice where the complement of is .   In , we observed that the complement of each element of is unique. Is this always true in a complemented lattice? The answer is no. Consider the following.   A Lattice for which complements are not unique  Let and consider the lattice (under divides ). The least element of is 1 and the greatest element is 30. Let us compute the complement of the element . We want to determine such that and . Certainly, works, but so does , so the complement of in this lattice is not unique. However, is still a complemented lattice since each element does have at least one complement.    Complementation as an operation   Complement of a Lattice Element  as an operation     The complement of lattice element    If a complemented lattice has the property that the complement of every element is unique, then we consider complementation to be a unary operation. The usual notation for the complement of is .    The following theorem gives us an insight into when uniqueness of complements occurs.   One condition for unique complements   If is a complemented, distributive lattice, then the complement of each element is unique.    Let and assume to the contrary that has two complements, namely and . Then by the definition of complement, .  Then On the other hand, Hence , which contradicts the assumption that has two different complements.     Boolean Algebra  Boolean Algebra    a Boolean algebra with operations disjunction, conjunction and complementation    A Boolean algebra is a lattice that contains a least element and a greatest element and that is both complemented and distributive. The notation is used to denote the Boolean algebra with operations disjunction, conjunction and complementation.    Since the complement of each element in a Boolean algebra is unique (by ), complementation is a valid unary operation over the set under discussion, which is why we will list it together with the other two operations to emphasize that we are discussing a set together with three operations. Also, to help emphasize the distinction between lattices and lattices that are Boolean algebras, we will use the letter as the generic symbol for the set of a Boolean algebra; that is, will stand for a general Boolean algebra.   Boolean Algebra of Sets  Let be any set, and let . Then is a Boolean algebra. Here, stands for the complement of an element of with respect to , .  This is a key example for us since all finite Boolean algebras and many infinite Boolean algebras look like this example for some . In fact, a glance at the basic Boolean algebra laws in , in comparison with the set laws of Chapter 4 and the basic laws of logic of Chapter 3, indicates that all three systems behave the same; that is, they are isomorphic.    Divisors of 30  A somewhat less standard example of a Boolean algebra is derived from the lattice of divisors of 30 under the relation divides . If you examine the ordering diagram for this lattice, you see that it is structurally the same as the Boolean algebra of subsets of a three element set. Therefore, the join, meet and complementation operations act the same as union, intersection and set complementation. We might conjecture that the lattice of divisors of any integer will produce a Boolean algebra, but it is only the case of certain integers. Try out a few integers to see if you can identify what is necessary to produce a Boolean algebra.    Basic Boolean Algebra Laws    Commutative Laws          Associative Laws          Distributive Laws          Identity Laws          Complement Laws          Idempotent Laws          Null Laws          Absorption Laws          DeMorgan's Laws          Involution Law           The pairings of the Boolean algebra laws reminds us of the principle of duality, which we state for a Boolean algebra.   Principle of Duality for Boolean Algebras  Duality for Boolean Algebras       Let be a Boolean algebra under , and let be a true statement for . If is obtained from by replacing with (this is equivalent to turning the graph upside down), with , with , with , and with , then is also a true statement in .    We close this section with some comments on notation. The notation for operations in a Boolean algebra is derived from the algebra of logic. However, other notational systems are used. These are summarized in the following chart.   Contrasting Notational Systems for Boolean Algebra    Generic\/Logic  Set Theory  Arithmetic  Verbal             Join             Meet          - or  Complement             partial ordering     Mathematicians most frequently use the generic or logic notation, and, on occasion, use set notation for Boolean algebras. Thinking in terms of sets may be easier for some people. Computer designers traditionally use the arithmetic notation. In this latter notation, DeMorgan's Laws become:    Exercises   Determine the complement of each element in . Is this lattice a Boolean algebra? Why?      This lattice is a Boolean algebra since it is a distributive complemented lattice.       Determine the complement of each element of in .    Repeat part a using the lattice in .    Repeat part a using the lattice in .    Are the lattices in parts a, b, and c Boolean algebras? Why?       Determine which of the lattices of of Section 12.1 are Boolean algebras.   a and g.    Let and .   Prove that is a Boolean algebra.    Write out the operation tables for the Boolean algebra.       It can be shown that the following statement, , holds for any Boolean algebra : if and only if .   Write the dual, , of the statement .    Write the statement and its dual, , in the language of sets.    Are the statements in part b true for all sets?    Write the statement and its dual, , in the language of logic.    Are the statements in part d true for all propositions?             The dual of is    Yes    The dual of is    Yes       State the dual of:    .     .     .       Formulate a definition for isomorphic Boolean algebras.   is isomorphic to if and only if there exists a function such that    is a bijection;               .       For what positive integers, , does the lattice produce a Boolean algebra?    "
},
{
  "id": "def-boundeded-lattice",
  "level": "2",
  "url": "s-boolean-algebras.html#def-boundeded-lattice",
  "type": "Definition",
  "number": "12.3.1",
  "title": "Bounded Lattice.",
  "body": " Bounded Lattice  Bounded Lattice   A bounded lattice is a lattice that contains both a least element and a greatest element.   "
},
{
  "id": "def-lattice-complement",
  "level": "2",
  "url": "s-boolean-algebras.html#def-lattice-complement",
  "type": "Definition",
  "number": "12.3.2",
  "title": "The Complement of a Lattice Element.",
  "body": " The Complement of a Lattice Element  Complement of a Lattice Element   Let be a bounded lattice. If , then has a complement if there exists such that    "
},
{
  "id": "def-complemented-lattice",
  "level": "2",
  "url": "s-boolean-algebras.html#def-complemented-lattice",
  "type": "Definition",
  "number": "12.3.3",
  "title": "Complemented Lattice.",
  "body": " Complemented Lattice  Complemented Lattice   Let be a bounded lattice. is a complemented lattice if every element of has a complement in .   "
},
{
  "id": "ex-set-complement-is-complementation",
  "level": "2",
  "url": "s-boolean-algebras.html#ex-set-complement-is-complementation",
  "type": "Example",
  "number": "12.3.4",
  "title": "Set Complement is a Complement.",
  "body": " Set Complement is a Complement  In Chapter 1, we defined the complement of a subset of any universe. This turns out to be a concrete example of the general concept we have just defined, but we will reason through why this is the case here. Let , where . Then is a bounded lattice with and . To find the complement, if it exists, of , for example, we want such that It's not too difficult to see that , since we need to include to make the first condition true and can't include or if the second condition is to be true. Of course this is precisely how we defined in Chapter 1. Since it can be shown that each element of has a complement (see Exercise 1), is a complemented lattice. Note that if is any set and , then is a complemented lattice where the complement of is .  "
},
{
  "id": "ex-nonunique-complements",
  "level": "2",
  "url": "s-boolean-algebras.html#ex-nonunique-complements",
  "type": "Example",
  "number": "12.3.5",
  "title": "A Lattice for which complements are not unique.",
  "body": " A Lattice for which complements are not unique  Let and consider the lattice (under divides ). The least element of is 1 and the greatest element is 30. Let us compute the complement of the element . We want to determine such that and . Certainly, works, but so does , so the complement of in this lattice is not unique. However, is still a complemented lattice since each element does have at least one complement.  "
},
{
  "id": "def-complement-operation",
  "level": "2",
  "url": "s-boolean-algebras.html#def-complement-operation",
  "type": "Definition",
  "number": "12.3.6",
  "title": "Complementation as an operation.",
  "body": " Complementation as an operation   Complement of a Lattice Element  as an operation     The complement of lattice element    If a complemented lattice has the property that the complement of every element is unique, then we consider complementation to be a unary operation. The usual notation for the complement of is .   "
},
{
  "id": "theorem-unique-complements",
  "level": "2",
  "url": "s-boolean-algebras.html#theorem-unique-complements",
  "type": "Theorem",
  "number": "12.3.7",
  "title": "One condition for unique complements.",
  "body": " One condition for unique complements   If is a complemented, distributive lattice, then the complement of each element is unique.    Let and assume to the contrary that has two complements, namely and . Then by the definition of complement, .  Then On the other hand, Hence , which contradicts the assumption that has two different complements.   "
},
{
  "id": "def-boolean-algebra",
  "level": "2",
  "url": "s-boolean-algebras.html#def-boolean-algebra",
  "type": "Definition",
  "number": "12.3.8",
  "title": "Boolean Algebra.",
  "body": " Boolean Algebra  Boolean Algebra    a Boolean algebra with operations disjunction, conjunction and complementation    A Boolean algebra is a lattice that contains a least element and a greatest element and that is both complemented and distributive. The notation is used to denote the Boolean algebra with operations disjunction, conjunction and complementation.   "
},
{
  "id": "ex-set-boolean-algebra",
  "level": "2",
  "url": "s-boolean-algebras.html#ex-set-boolean-algebra",
  "type": "Example",
  "number": "12.3.9",
  "title": "Boolean Algebra of Sets.",
  "body": " Boolean Algebra of Sets  Let be any set, and let . Then is a Boolean algebra. Here, stands for the complement of an element of with respect to , .  This is a key example for us since all finite Boolean algebras and many infinite Boolean algebras look like this example for some . In fact, a glance at the basic Boolean algebra laws in , in comparison with the set laws of Chapter 4 and the basic laws of logic of Chapter 3, indicates that all three systems behave the same; that is, they are isomorphic.  "
},
{
  "id": "ex-boolean-algebra-d30",
  "level": "2",
  "url": "s-boolean-algebras.html#ex-boolean-algebra-d30",
  "type": "Example",
  "number": "12.3.10",
  "title": "Divisors of 30.",
  "body": " Divisors of 30  A somewhat less standard example of a Boolean algebra is derived from the lattice of divisors of 30 under the relation divides . If you examine the ordering diagram for this lattice, you see that it is structurally the same as the Boolean algebra of subsets of a three element set. Therefore, the join, meet and complementation operations act the same as union, intersection and set complementation. We might conjecture that the lattice of divisors of any integer will produce a Boolean algebra, but it is only the case of certain integers. Try out a few integers to see if you can identify what is necessary to produce a Boolean algebra.  "
},
{
  "id": "table-boolean-laws",
  "level": "2",
  "url": "s-boolean-algebras.html#table-boolean-laws",
  "type": "Table",
  "number": "12.3.11",
  "title": "Basic Boolean Algebra Laws",
  "body": " Basic Boolean Algebra Laws    Commutative Laws          Associative Laws          Distributive Laws          Identity Laws          Complement Laws          Idempotent Laws          Null Laws          Absorption Laws          DeMorgan's Laws          Involution Law          "
},
{
  "id": "def-boolean-duality",
  "level": "2",
  "url": "s-boolean-algebras.html#def-boolean-duality",
  "type": "Definition",
  "number": "12.3.12",
  "title": "Principle of Duality for Boolean Algebras.",
  "body": " Principle of Duality for Boolean Algebras  Duality for Boolean Algebras       Let be a Boolean algebra under , and let be a true statement for . If is obtained from by replacing with (this is equivalent to turning the graph upside down), with , with , with , and with , then is also a true statement in .   "
},
{
  "id": "table-boolean-notation",
  "level": "2",
  "url": "s-boolean-algebras.html#table-boolean-notation",
  "type": "Table",
  "number": "12.3.13",
  "title": "Contrasting Notational Systems for Boolean Algebra",
  "body": " Contrasting Notational Systems for Boolean Algebra    Generic\/Logic  Set Theory  Arithmetic  Verbal             Join             Meet          - or  Complement             partial ordering    "
},
{
  "id": "exercises-12-3-2",
  "level": "2",
  "url": "s-boolean-algebras.html#exercises-12-3-2",
  "type": "Exercise",
  "number": "12.3.1",
  "title": "",
  "body": " Determine the complement of each element in . Is this lattice a Boolean algebra? Why?      This lattice is a Boolean algebra since it is a distributive complemented lattice.  "
},
{
  "id": "exercises-12-3-3",
  "level": "2",
  "url": "s-boolean-algebras.html#exercises-12-3-3",
  "type": "Exercise",
  "number": "12.3.2",
  "title": "",
  "body": "    Determine the complement of each element of in .    Repeat part a using the lattice in .    Repeat part a using the lattice in .    Are the lattices in parts a, b, and c Boolean algebras? Why?     "
},
{
  "id": "exercises-12-3-4",
  "level": "2",
  "url": "s-boolean-algebras.html#exercises-12-3-4",
  "type": "Exercise",
  "number": "12.3.3",
  "title": "",
  "body": " Determine which of the lattices of of Section 12.1 are Boolean algebras.   a and g.  "
},
{
  "id": "exercises-12-3-5",
  "level": "2",
  "url": "s-boolean-algebras.html#exercises-12-3-5",
  "type": "Exercise",
  "number": "12.3.4",
  "title": "",
  "body": " Let and .   Prove that is a Boolean algebra.    Write out the operation tables for the Boolean algebra.     "
},
{
  "id": "exercises-12-3-6",
  "level": "2",
  "url": "s-boolean-algebras.html#exercises-12-3-6",
  "type": "Exercise",
  "number": "12.3.5",
  "title": "",
  "body": " It can be shown that the following statement, , holds for any Boolean algebra : if and only if .   Write the dual, , of the statement .    Write the statement and its dual, , in the language of sets.    Are the statements in part b true for all sets?    Write the statement and its dual, , in the language of logic.    Are the statements in part d true for all propositions?             The dual of is    Yes    The dual of is    Yes     "
},
{
  "id": "exercises-12-3-7",
  "level": "2",
  "url": "s-boolean-algebras.html#exercises-12-3-7",
  "type": "Exercise",
  "number": "12.3.6",
  "title": "",
  "body": " State the dual of:    .     .     .     "
},
{
  "id": "exercises-12-3-8",
  "level": "2",
  "url": "s-boolean-algebras.html#exercises-12-3-8",
  "type": "Exercise",
  "number": "12.3.7",
  "title": "",
  "body": " Formulate a definition for isomorphic Boolean algebras.   is isomorphic to if and only if there exists a function such that    is a bijection;               .     "
},
{
  "id": "exercises-12-3-9",
  "level": "2",
  "url": "s-boolean-algebras.html#exercises-12-3-9",
  "type": "Exercise",
  "number": "12.3.8",
  "title": "",
  "body": " For what positive integers, , does the lattice produce a Boolean algebra?  "
},
{
  "id": "s-atoms-of-a-boolean-algebra",
  "level": "1",
  "url": "s-atoms-of-a-boolean-algebra.html",
  "type": "Section",
  "number": "12.4",
  "title": "Atoms of a Boolean Algebra",
  "body": " Atoms of a Boolean Algebra  In this section we will look more closely at something we've hinted at, which is that every finite Boolean algebra is isomorphic to an algebra of sets. We will show that every finite Boolean algebra has elements for some with precisely generators, called atoms.  Consider the Boolean algebra , whose ordering diagram is depicted in   Illustration of the atom concept D  Hasse diagram of     We note that , , , and ; that is, each of the elements above level one can be described completely and uniquely in terms of the elements on level one. The 's have uniquely generated the nonzero elements of much like a basis in linear algebra generates the elements in a vector space. We also note that the 's are the immediate successors of the minimum element, 0. In any Boolean algebra, the immediate successors of the minimum element are called atoms . For example, let be any nonempty set. In the Boolean algebra (over ), the singleton sets are the generators, or atoms, of the algebraic structure since each element can be described completely and uniquely as the join, or union, of singleton sets.   Atom  Atom of a Boolean Algebra   A nonzero element in a Boolean algebra is called an atom if for every , or .    The condition that tells us that is a successor of ; that is, , as depicted in (a)  The condition is true only when and are not connected. This occurs when is another atom or if is a successor of atoms different from , as depicted in (b).   Conditions for an atom   Two diagrams showing the conditions for an atom    An alternate definition of an atom is based on the concept of covering.   The Covering Relation  covering relation   Given a Boolean algebra , let . We say that  covers  iff and there does not exist with .    It can be proven that the atoms of Boolean algebra are precisely those elements that cover the zero element.  The set of atoms of the Boolean algebra is . To see that is an atom, let be any nonzero element of and note that one of the two conditions or holds. Of course, to apply the definition to this Boolean algebra, we must remind ourselves that in this case the 0-element is 1, the operation is greatest common divisor, and the poset relation is divides. So if , we have (or ), so Condition 1 holds. If , the first condition is not true. (Why?) However, Condition 2, , is true. The reader is encouraged to show that 3 and 5 also satisfy the definition of an atom. Next, if we should compute the join (the least common multiple in this case) of all possible combinations of the atoms 2, 3, and 5 to generate all nonzero (non-1 in this case) elements of . For example, and . We state this concept formally in the following theorem, which we give without proof.    Let be any finite Boolean algebra. Let be the set of all atoms of . Then every nonzero element in can be expressed uniquely as the join of a subset of .    We now ask ourselves if we can be more definitive about the structure of different Boolean algebras of a given order. Certainly, the Boolean algebras and have the same graph (that of ), the same number of atoms, and, in all respects, look the same except for the names of the elements and the operations. In fact, when we apply corresponding operations to corresponding elements, we obtain corresponding results. We know from Chapter 11 that this means that the two structures are isomorphic as Boolean algebras. Furthermore, the graphs of these examples are exactly the same as that of , which is an arbitrary Boolean algebra of order .  In these examples of a Boolean algebra of order 8, we note that each had 3 atoms and number of elements, and all were isomorphic to , where . This leads us to the following questions:   Are there any different (nonisomorphic) Boolean algebras of order 8?    What is the relationship, if any, between finite Boolean algebras and their atoms?    How many different (nonisomorphic) Boolean algebras are there of order 2? Order 3? Order 4? etc.     The answers to these questions are given in the following theorem and corollaries.    Let be any finite Boolean algebra, and let A be the set of all atoms of . Then is isomorphic to     An isomorphism that serves to prove this theorem is defined by , where is interpreted as the zero of . We leave it to the reader to prove that this is indeed an isomorphism.      Every finite Boolean algebra has elements for some positive integer .    Let be the set of all atoms of and let . Then there are exactly elements (subsets) in ,and by , is isomorphic to and must also have elements.      All Boolean algebras of order are isomorphic to one another.     Isomorphisms to be combined   Graphical representation of Boolean algebras of the same order    Every Boolean algebra of order is isomorphic to when . Hence, if and each have elements, they each have atoms. Suppose their sets of atoms are and , respectively. We know there are isomorphisms and , where , . In addition we have an isomorphism, from into , which we ask you to prove in . We can combine these isomorphisms to produce the isomorphism , which proves the corollary.    The above theorem and corollaries tell us that we can only have finite Boolean algebras of orders , and that all finite Boolean algebras of any given order are isomorphic. These are powerful tools in determining the structure of finite Boolean algebras. In the next section, we will discuss one of the easiest ways of describing a Boolean algebra of any given order.   Exercises      Show that is an atom of the Boolean algebra .    Repeat part a for the elements 3 and 5 of .    Verify for the Boolean algebra .         For we must show that for each one of the following is true: or . We do this through the following table: For , a similar verification can be performed.    , , , and .       Let .   Rewrite the definition of atom for . What does mean in this example?    Find all atoms of .    Verify for .       Verify and its corollaries for the Boolean algebras in Exercises 1 and 2 of this section.   If 30 then and is isomorphic to , where and     Give an example of a Boolean algebra of order 16 whose elements are certain subsets of the set    implies that there do not exist Boolean algebras of orders 3, 5, 6, 7, 9, etc. (orders different from ). Without this corollary, directly show that we cannot have a Boolean algebra of order 3.   Assume that is a Boolean algebra of order 3 where and show that this cannot happen by investigating the possibilities for its operation tables.   Assume that is the third element of a Boolean algebra. Then there is only one possible set of tables for join and meet, all following from required properties of the Boolean algebra. Next, to find the complement of we want such that and . No element satisfies both conditions; hence the lattice is not complemented and cannot be a Boolean algebra. The lack of a complement can also be seen from the ordering diagram from which and must be derived.       There are many different, yet isomorphic, Boolean algebras with two elements. Describe one such Boolean algebra that is derived from a power set, , under . Describe a second that is described from , for some , under divides.    Since the elements of a two-element Boolean algebra must be the greatest and least elements, 1 and 0, the tables for the operations on are determined by the Boolean algebra laws. Write out the operation tables for .       Find a Boolean algebra with a countably infinite number of elements.   Let be any countably infinite set, such as the integers. A subset of is cofinite if it is finite or its complement is finite. The set of all cofinite subsets of is:   Countably infinite - this might not be obvious, but here is a hint. Assume . For each finite subset of , map that set to the integer You can do a similar thing to sets that have a finite complement, but map them to negative integers. Only one minor adjustment needs to be made to accommodate both the empty set and .    Closed under union    Closed under intersection, and    Closed under complementation.   Therefore, if , then is a countable Boolean algebra under the usual set operations.    Prove that the direct product of two Boolean algebras is a Boolean algebra.   Copy the corresponding proof for groups in Section 11.6.    Prove if two finite sets and both have elements then is isomorphic to    Prove an element of a Boolean algebra is an atom if and only if it covers the zero element.    "
},
{
  "id": "fig-atoms",
  "level": "2",
  "url": "s-atoms-of-a-boolean-algebra.html#fig-atoms",
  "type": "Figure",
  "number": "12.4.1",
  "title": "",
  "body": " Illustration of the atom concept D  Hasse diagram of    "
},
{
  "id": "s-atoms-of-a-boolean-algebra-5",
  "level": "2",
  "url": "s-atoms-of-a-boolean-algebra.html#s-atoms-of-a-boolean-algebra-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "atoms "
},
{
  "id": "def-atom",
  "level": "2",
  "url": "s-atoms-of-a-boolean-algebra.html#def-atom",
  "type": "Definition",
  "number": "12.4.2",
  "title": "Atom.",
  "body": " Atom  Atom of a Boolean Algebra   A nonzero element in a Boolean algebra is called an atom if for every , or .   "
},
{
  "id": "fig-atom-conditions",
  "level": "2",
  "url": "s-atoms-of-a-boolean-algebra.html#fig-atom-conditions",
  "type": "Figure",
  "number": "12.4.3",
  "title": "",
  "body": " Conditions for an atom   Two diagrams showing the conditions for an atom   "
},
{
  "id": "def-cover",
  "level": "2",
  "url": "s-atoms-of-a-boolean-algebra.html#def-cover",
  "type": "Definition",
  "number": "12.4.4",
  "title": "The Covering Relation.",
  "body": " The Covering Relation  covering relation   Given a Boolean algebra , let . We say that  covers  iff and there does not exist with .   "
},
{
  "id": "theorem-atom-join",
  "level": "2",
  "url": "s-atoms-of-a-boolean-algebra.html#theorem-atom-join",
  "type": "Theorem",
  "number": "12.4.5",
  "title": "",
  "body": "  Let be any finite Boolean algebra. Let be the set of all atoms of . Then every nonzero element in can be expressed uniquely as the join of a subset of .   "
},
{
  "id": "theorem-boolean-set-isomorphism",
  "level": "2",
  "url": "s-atoms-of-a-boolean-algebra.html#theorem-boolean-set-isomorphism",
  "type": "Theorem",
  "number": "12.4.6",
  "title": "",
  "body": "  Let be any finite Boolean algebra, and let A be the set of all atoms of . Then is isomorphic to     An isomorphism that serves to prove this theorem is defined by , where is interpreted as the zero of . We leave it to the reader to prove that this is indeed an isomorphism.   "
},
{
  "id": "corollary-power-of-2",
  "level": "2",
  "url": "s-atoms-of-a-boolean-algebra.html#corollary-power-of-2",
  "type": "Corollary",
  "number": "12.4.7",
  "title": "",
  "body": "  Every finite Boolean algebra has elements for some positive integer .    Let be the set of all atoms of and let . Then there are exactly elements (subsets) in ,and by , is isomorphic to and must also have elements.   "
},
{
  "id": "corollary-one-power-2",
  "level": "2",
  "url": "s-atoms-of-a-boolean-algebra.html#corollary-one-power-2",
  "type": "Corollary",
  "number": "12.4.8",
  "title": "",
  "body": "  All Boolean algebras of order are isomorphic to one another.     Isomorphisms to be combined   Graphical representation of Boolean algebras of the same order    Every Boolean algebra of order is isomorphic to when . Hence, if and each have elements, they each have atoms. Suppose their sets of atoms are and , respectively. We know there are isomorphisms and , where , . In addition we have an isomorphism, from into , which we ask you to prove in . We can combine these isomorphisms to produce the isomorphism , which proves the corollary.   "
},
{
  "id": "exercises-12-4-2",
  "level": "2",
  "url": "s-atoms-of-a-boolean-algebra.html#exercises-12-4-2",
  "type": "Exercise",
  "number": "12.4.1",
  "title": "",
  "body": "    Show that is an atom of the Boolean algebra .    Repeat part a for the elements 3 and 5 of .    Verify for the Boolean algebra .         For we must show that for each one of the following is true: or . We do this through the following table: For , a similar verification can be performed.    , , , and .     "
},
{
  "id": "exercises-12-4-3",
  "level": "2",
  "url": "s-atoms-of-a-boolean-algebra.html#exercises-12-4-3",
  "type": "Exercise",
  "number": "12.4.2",
  "title": "",
  "body": " Let .   Rewrite the definition of atom for . What does mean in this example?    Find all atoms of .    Verify for .     "
},
{
  "id": "exercises-12-4-4",
  "level": "2",
  "url": "s-atoms-of-a-boolean-algebra.html#exercises-12-4-4",
  "type": "Exercise",
  "number": "12.4.3",
  "title": "",
  "body": " Verify and its corollaries for the Boolean algebras in Exercises 1 and 2 of this section.   If 30 then and is isomorphic to , where and   "
},
{
  "id": "exercises-12-4-5",
  "level": "2",
  "url": "s-atoms-of-a-boolean-algebra.html#exercises-12-4-5",
  "type": "Exercise",
  "number": "12.4.4",
  "title": "",
  "body": " Give an example of a Boolean algebra of order 16 whose elements are certain subsets of the set  "
},
{
  "id": "exercises-12-4-6",
  "level": "2",
  "url": "s-atoms-of-a-boolean-algebra.html#exercises-12-4-6",
  "type": "Exercise",
  "number": "12.4.5",
  "title": "",
  "body": " implies that there do not exist Boolean algebras of orders 3, 5, 6, 7, 9, etc. (orders different from ). Without this corollary, directly show that we cannot have a Boolean algebra of order 3.   Assume that is a Boolean algebra of order 3 where and show that this cannot happen by investigating the possibilities for its operation tables.   Assume that is the third element of a Boolean algebra. Then there is only one possible set of tables for join and meet, all following from required properties of the Boolean algebra. Next, to find the complement of we want such that and . No element satisfies both conditions; hence the lattice is not complemented and cannot be a Boolean algebra. The lack of a complement can also be seen from the ordering diagram from which and must be derived.  "
},
{
  "id": "exercises-12-4-7",
  "level": "2",
  "url": "s-atoms-of-a-boolean-algebra.html#exercises-12-4-7",
  "type": "Exercise",
  "number": "12.4.6",
  "title": "",
  "body": "    There are many different, yet isomorphic, Boolean algebras with two elements. Describe one such Boolean algebra that is derived from a power set, , under . Describe a second that is described from , for some , under divides.    Since the elements of a two-element Boolean algebra must be the greatest and least elements, 1 and 0, the tables for the operations on are determined by the Boolean algebra laws. Write out the operation tables for .     "
},
{
  "id": "exercises-12-4-8",
  "level": "2",
  "url": "s-atoms-of-a-boolean-algebra.html#exercises-12-4-8",
  "type": "Exercise",
  "number": "12.4.7",
  "title": "",
  "body": " Find a Boolean algebra with a countably infinite number of elements.   Let be any countably infinite set, such as the integers. A subset of is cofinite if it is finite or its complement is finite. The set of all cofinite subsets of is:   Countably infinite - this might not be obvious, but here is a hint. Assume . For each finite subset of , map that set to the integer You can do a similar thing to sets that have a finite complement, but map them to negative integers. Only one minor adjustment needs to be made to accommodate both the empty set and .    Closed under union    Closed under intersection, and    Closed under complementation.   Therefore, if , then is a countable Boolean algebra under the usual set operations.  "
},
{
  "id": "exercises-12-4-9",
  "level": "2",
  "url": "s-atoms-of-a-boolean-algebra.html#exercises-12-4-9",
  "type": "Exercise",
  "number": "12.4.8",
  "title": "",
  "body": " Prove that the direct product of two Boolean algebras is a Boolean algebra.   Copy the corresponding proof for groups in Section 11.6.  "
},
{
  "id": "exercise-set-boolean-isomorphism",
  "level": "2",
  "url": "s-atoms-of-a-boolean-algebra.html#exercise-set-boolean-isomorphism",
  "type": "Exercise",
  "number": "12.4.9",
  "title": "",
  "body": " Prove if two finite sets and both have elements then is isomorphic to  "
},
{
  "id": "exercise-covering-definition",
  "level": "2",
  "url": "s-atoms-of-a-boolean-algebra.html#exercise-covering-definition",
  "type": "Exercise",
  "number": "12.4.10",
  "title": "",
  "body": " Prove an element of a Boolean algebra is an atom if and only if it covers the zero element.  "
},
{
  "id": "s-finite-boolean-algebras-ntuples",
  "level": "1",
  "url": "s-finite-boolean-algebras-ntuples.html",
  "type": "Section",
  "number": "12.5",
  "title": "Finite Boolean Algebras as <span class=\"process-math\">\\(n\\)<\/span>-tuples of 0’s and 1’s",
  "body": " Finite Boolean Algebras as -tuples of 0's and 1's  From the previous section we know that all finite Boolean algebras are of order , where is the number of atoms in the algebra. We can therefore completely describe every finite Boolean algebra by the algebra of power sets. Is there a more convenient, or at least an alternate way, of defining finite Boolean algebras? In Chapter 11 we found that we could produce new groups by taking Cartesian products of previously known groups. We imitate this process for Boolean algebras.  The simplest nontrivial Boolean algebra is the Boolean algebra on the set . The ordering on is the natural one, . If we treat 0 and 1 as the truth values false and true, respectively, we see that the Boolean operations and are nothing more than the logical operation with the same symbols. The Boolean operation, , (complementation) is the logical (negation). In fact, this is why these symbols were chosen as the names of the Boolean operations. The operation tables for are simply those of or,  and, and not, which we repeat here.   By and its corollaries, all Boolean algebras of order 2 are isomorphic to this one.  We know that if we form we obtain the set , a set of order 4. We define operations on the natural way, namely componentwise, so that , and . We claim that is a Boolean algebra under the componentwise operations. Hence, is a Boolean algebra of order 4. Since all Boolean algebras of order 4 are isomorphic to one other, we have found a simple way of describing all Boolean algebras of order 4.  It is quite clear that we can describe any Boolean algebra of order 8 by considering and, more generally, any Boolean algebra of order with ( factors).    Exercises      Write out the operation tables for    Draw the Hasse diagram for and compare your results with .    Find the atoms of this Boolean algebra.              The graphs are isomorphic.    (0, 1) and (1,0)          Write out the operation tables for    Draw the Hasse diagram for          List all atoms of .    Describe the atoms of .          , , , and are the atoms.    The -tuples of bits with exactly one 1.       tells us we can think of any finite Boolean algebra in terms of sets. In Chapter 4, we defined minsets and minset normal form . Rephrase these definitions in the language of Boolean algebra. The generalization of minsets are called minterms .    "
},
{
  "id": "exercises-12-5-2",
  "level": "2",
  "url": "s-finite-boolean-algebras-ntuples.html#exercises-12-5-2",
  "type": "Exercise",
  "number": "12.5.1",
  "title": "",
  "body": "    Write out the operation tables for    Draw the Hasse diagram for and compare your results with .    Find the atoms of this Boolean algebra.              The graphs are isomorphic.    (0, 1) and (1,0)     "
},
{
  "id": "exercises-12-5-3",
  "level": "2",
  "url": "s-finite-boolean-algebras-ntuples.html#exercises-12-5-3",
  "type": "Exercise",
  "number": "12.5.2",
  "title": "",
  "body": "    Write out the operation tables for    Draw the Hasse diagram for     "
},
{
  "id": "exercises-12-5-4",
  "level": "2",
  "url": "s-finite-boolean-algebras-ntuples.html#exercises-12-5-4",
  "type": "Exercise",
  "number": "12.5.3",
  "title": "",
  "body": "    List all atoms of .    Describe the atoms of .          , , , and are the atoms.    The -tuples of bits with exactly one 1.     "
},
{
  "id": "exercises-12-5-5",
  "level": "2",
  "url": "s-finite-boolean-algebras-ntuples.html#exercises-12-5-5",
  "type": "Exercise",
  "number": "12.5.4",
  "title": "",
  "body": " tells us we can think of any finite Boolean algebra in terms of sets. In Chapter 4, we defined minsets and minset normal form . Rephrase these definitions in the language of Boolean algebra. The generalization of minsets are called minterms .  "
},
{
  "id": "s-boolean-expressions",
  "level": "1",
  "url": "s-boolean-expressions.html",
  "type": "Section",
  "number": "12.6",
  "title": "Boolean Expressions",
  "body": " Boolean Expressions  Boolean Expressions  In this section, we will use our background from the previous sections and set theory to develop a procedure for simplifying Boolean expressions. This procedure has considerable application to the simplification of circuits in switching theory or logical design.   Boolean Expression  Boolean Expression   Let be any Boolean algebra, and let be variables in ; that is, variables that can assume values from . A Boolean expression generated by is any valid combination of the and the elements of with the operations of meet, join, and complementation.    This definition is the analog of the definition of a proposition generated by a set of propositions, presented in .  Each Boolean expression generated by variables, , defines a function where . If is a finite Boolean algebra, then there are a finite number of functions from into . Those functions that are defined in terms of Boolean expressions are called Boolean functions. As we will see, there is an infinite number of Boolean expressions that define each Boolean function. Naturally, the shortest of these expressions will be preferred. Since electronic circuits can be described as Boolean functions with , this economization is quite useful.  In what follows, we make use of in for counting the number of functions.   Two variables over  Consider any Boolean algebra of order 2, . How many functions are there? First, all Boolean algebras of order 2 are isomorphic to so we want to determine the number of functions . If we consider a Boolean function of two variables, and , we note that each variable has two possible values 0 and 1, so there are ways of assigning these two values to the variables. Hence, the table below has rows. So far we have a table such as this one:   How many possible different functions can there be? To list a few:                             etc.    Each of these will fill in the question marks in the table above. The tables for and are   Two functions are different if and only if their tables are different for at least one row. By using the basic laws of Boolean algebra we can see that . Why? So if we simply list by brute force all expressions in we will obtain unnecessary duplication of functions. However, we note that since and can only take on two values, there are only combinations of the two (our table rows) and there are only two possible outcomes for , namely 0 or 1. Thus, there are different functions on 2 variables.   Now, let's count the number of different Boolean functions in a more general setting. We will consider two cases: first, when , and second, when is any finite Boolean algebra with elements.  Let . Each function is defined in terms of a table having rows. Therefore, since there are two possible images for each element of , there are 2 raised to the , or different functions. We will show that every one of these functions is a Boolean function.  Now suppose that . A function from into can still be defined in terms of a table. There are rows to each table and possible images for each row. Therefore, there are raised to the power different functions. We will show that if , not every one of these functions is a Boolean function.  Since all Boolean algebras are isomorphic to a Boolean algebra of sets, the analogues of statements in sets are useful in Boolean algebras.   Minterm  Minterm    the minterm generated by , where if and if    A Boolean expression generated by that has the form where each may be either or is called a minterm generated by . We use the notation for the minterm generated by , where if and if     An example of the notation is that .  By a direct application of the Rule of Products we see that there are different minterms generated by .   Minterm Normal Form  Minterm Normal Form  Disjunctive Normal Form  Sum of Products   A Boolean expression generated by is in minterm normal form if it is the join of expressions of the form , where and is a minterm generated by . That is, it is of the form where , and are the minterms generated by .  This form is also known as Disjunctive Normal Form if speaking in logic terminology as it is a disjunction of conjunctions and as a Sum-of-Products if using the arithmetic notation for join and meet .        We seem to require every minterm generated by , in , and we really do. However, some of the values of can be , which effectively makes the corresponding minterm disappear.    If , then each in a minterm normal form is either 0 or 1. Therefore, is either 0 or .       Uniqueness of Minterm Normal Form   Let be a Boolean expression over B. There exists a unique minterm normal form that is equivalent to in the sense that e and M define the same function from into .    The uniqueness in this theorem does not include the possible ordering of the minterms in (commonly referred to as uniqueness up to the order of minterms ). The proof of this theorem would be quite lengthy, and not very instructive, so we will leave it to the interested reader to attempt. The implications of the theorem are very interesting, however.  If , then there are raised to the different minterm normal forms. Since each different minterm normal form defines a different function, there are a like number of Boolean functions from into . If , there are as many Boolean functions (2 raised to the ) as there are functions from into , since there are raised to the functions from into . The significance of this result is that any desired function can be realized using electronic circuits having 0 or 1 (off or on, positive or negative) values.  More complex, multivalued circuits corresponding to boolean algebras with more than two values would not have this flexibility because of the number of minterm normal forms, and hence the number of boolean functions, is strictly less than the number of functions.  We will close this section by examining minterm normal forms for expressions over , since they are a starting point for circuit economization.   Consider the Boolean expression . One method of determining the minterm normal form of is to think in terms of sets. Consider the diagram with the usual translation of notation in . Then    Visualization of minterms for    Venn diagram visualizing minterms for      Definition of the boolean function                                                                                                                                    Consider the function defined by .  The minterm normal form for can be obtained by taking the join of minterms that correspond to rows that have an image value of 1. If , then include the minterm where Or, to use alternate notation, include in the expression if and only if  Therefore,    The minterm normal form is a first step in obtaining an economical way of expressing a given Boolean function. However, it is often not the simplest form. The process of minimizing Boolean expressions is important to logical circuit design which we will see in the next two sections.   Exercises      Write the 16 possible functions of .    Write out the tables of several of the above Boolean functions to show that they are indeed different.    Determine the minterm normal forms of                                   The truth table for the functions in part (a) are                                   Consider the Boolean expression on    Simplify this expression using basic Boolean algebra laws.    Write this expression in minterm normal form.    Write out the table for the given function defined by and compare it to the tables of the functions in parts a and b.    How many possible different functions in three variables on are there?      Let be a Boolean algebra of order 4, and let be a Boolean function of two variables on .   How many elements are there in the domain of f?    How many different Boolean functions are there of two, variables? Three variables?    Determine the minterm normal form of .    If , define a function from into that is not a Boolean function.        The number of elements in the domain of is    With two variables, there are different Boolean functions. With three variables, there are different Boolean functions.         Consider , defined by , , , , and , with the images of all other pairs in defined arbitrarily. This function is not a Boolean function. If we assume that it is Boolean function then can be computed with a Boolean expression . This expression can be put into minterm normal form:  Therefore, and so, using this formula, This contradicts , and so is not a Boolean function.       "
},
{
  "id": "def-boolean-expression",
  "level": "2",
  "url": "s-boolean-expressions.html#def-boolean-expression",
  "type": "Definition",
  "number": "12.6.1",
  "title": "Boolean Expression.",
  "body": " Boolean Expression  Boolean Expression   Let be any Boolean algebra, and let be variables in ; that is, variables that can assume values from . A Boolean expression generated by is any valid combination of the and the elements of with the operations of meet, join, and complementation.   "
},
{
  "id": "ex-two-variable-b2",
  "level": "2",
  "url": "s-boolean-expressions.html#ex-two-variable-b2",
  "type": "Example",
  "number": "12.6.2",
  "title": "Two variables over <span class=\"process-math\">\\(B_2\\)<\/span>.",
  "body": " Two variables over  Consider any Boolean algebra of order 2, . How many functions are there? First, all Boolean algebras of order 2 are isomorphic to so we want to determine the number of functions . If we consider a Boolean function of two variables, and , we note that each variable has two possible values 0 and 1, so there are ways of assigning these two values to the variables. Hence, the table below has rows. So far we have a table such as this one:   How many possible different functions can there be? To list a few:                             etc.    Each of these will fill in the question marks in the table above. The tables for and are   Two functions are different if and only if their tables are different for at least one row. By using the basic laws of Boolean algebra we can see that . Why? So if we simply list by brute force all expressions in we will obtain unnecessary duplication of functions. However, we note that since and can only take on two values, there are only combinations of the two (our table rows) and there are only two possible outcomes for , namely 0 or 1. Thus, there are different functions on 2 variables.  "
},
{
  "id": "def-minterm",
  "level": "2",
  "url": "s-boolean-expressions.html#def-minterm",
  "type": "Definition",
  "number": "12.6.3",
  "title": "Minterm.",
  "body": " Minterm  Minterm    the minterm generated by , where if and if    A Boolean expression generated by that has the form where each may be either or is called a minterm generated by . We use the notation for the minterm generated by , where if and if    "
},
{
  "id": "def-minterm-normal-form",
  "level": "2",
  "url": "s-boolean-expressions.html#def-minterm-normal-form",
  "type": "Definition",
  "number": "12.6.4",
  "title": "Minterm Normal Form.",
  "body": " Minterm Normal Form  Minterm Normal Form  Disjunctive Normal Form  Sum of Products   A Boolean expression generated by is in minterm normal form if it is the join of expressions of the form , where and is a minterm generated by . That is, it is of the form where , and are the minterms generated by .  This form is also known as Disjunctive Normal Form if speaking in logic terminology as it is a disjunction of conjunctions and as a Sum-of-Products if using the arithmetic notation for join and meet .   "
},
{
  "id": "s-boolean-expressions-17",
  "level": "2",
  "url": "s-boolean-expressions.html#s-boolean-expressions-17",
  "type": "Note",
  "number": "12.6.5",
  "title": "",
  "body": "    We seem to require every minterm generated by , in , and we really do. However, some of the values of can be , which effectively makes the corresponding minterm disappear.    If , then each in a minterm normal form is either 0 or 1. Therefore, is either 0 or .     "
},
{
  "id": "th-minterm-normal-form",
  "level": "2",
  "url": "s-boolean-expressions.html#th-minterm-normal-form",
  "type": "Theorem",
  "number": "12.6.6",
  "title": "Uniqueness of Minterm Normal Form.",
  "body": " Uniqueness of Minterm Normal Form   Let be a Boolean expression over B. There exists a unique minterm normal form that is equivalent to in the sense that e and M define the same function from into .   "
},
{
  "id": "ex-mnf-example-1",
  "level": "2",
  "url": "s-boolean-expressions.html#ex-mnf-example-1",
  "type": "Example",
  "number": "12.6.7",
  "title": "",
  "body": " Consider the Boolean expression . One method of determining the minterm normal form of is to think in terms of sets. Consider the diagram with the usual translation of notation in . Then    Visualization of minterms for    Venn diagram visualizing minterms for    "
},
{
  "id": "table-boolean-function",
  "level": "2",
  "url": "s-boolean-expressions.html#table-boolean-function",
  "type": "Table",
  "number": "12.6.9",
  "title": "Definition of the boolean function <span class=\"process-math\">\\(g\\)<\/span>",
  "body": " Definition of the boolean function                                                                                                                                  "
},
{
  "id": "ex-mnf-example-2",
  "level": "2",
  "url": "s-boolean-expressions.html#ex-mnf-example-2",
  "type": "Example",
  "number": "12.6.10",
  "title": "",
  "body": " Consider the function defined by .  The minterm normal form for can be obtained by taking the join of minterms that correspond to rows that have an image value of 1. If , then include the minterm where Or, to use alternate notation, include in the expression if and only if  Therefore,   "
},
{
  "id": "exercises-12-6-2",
  "level": "2",
  "url": "s-boolean-expressions.html#exercises-12-6-2",
  "type": "Exercise",
  "number": "12.6.1",
  "title": "",
  "body": "    Write the 16 possible functions of .    Write out the tables of several of the above Boolean functions to show that they are indeed different.    Determine the minterm normal forms of                                   The truth table for the functions in part (a) are                                 "
},
{
  "id": "exercises-12-6-3",
  "level": "2",
  "url": "s-boolean-expressions.html#exercises-12-6-3",
  "type": "Exercise",
  "number": "12.6.2",
  "title": "",
  "body": " Consider the Boolean expression on    Simplify this expression using basic Boolean algebra laws.    Write this expression in minterm normal form.    Write out the table for the given function defined by and compare it to the tables of the functions in parts a and b.    How many possible different functions in three variables on are there?    "
},
{
  "id": "exercises-12-6-4",
  "level": "2",
  "url": "s-boolean-expressions.html#exercises-12-6-4",
  "type": "Exercise",
  "number": "12.6.3",
  "title": "",
  "body": " Let be a Boolean algebra of order 4, and let be a Boolean function of two variables on .   How many elements are there in the domain of f?    How many different Boolean functions are there of two, variables? Three variables?    Determine the minterm normal form of .    If , define a function from into that is not a Boolean function.        The number of elements in the domain of is    With two variables, there are different Boolean functions. With three variables, there are different Boolean functions.         Consider , defined by , , , , and , with the images of all other pairs in defined arbitrarily. This function is not a Boolean function. If we assume that it is Boolean function then can be computed with a Boolean expression . This expression can be put into minterm normal form:  Therefore, and so, using this formula, This contradicts , and so is not a Boolean function.     "
},
{
  "id": "s-logic-circuits",
  "level": "1",
  "url": "s-logic-circuits.html",
  "type": "Section",
  "number": "12.7",
  "title": "Logic Gates and Circuits",
  "body": " Logic Gates and Circuits  Switching Theory  Logic Gates  Logic Circuits  Early computers relied on many switches to perform the logical operations needed for computation. This was true as late as the 1970's when early personal computers such as the Altair ( ) started to appear. Pioneering computer scientists such as Claude Shannon realized that the operation of these computers could be simplified by making use of an isomorphism between computer circuits and boolean algebra. The term Switching Theory was used at the time. Logical gates realized through increasingly smaller and smaller integrated circuits still perform the same functions as in early computers, but using purely electronic means. In this section, we give examples of some switching circuits. Soon afterward, we will transition to the more modern form of circuits that are studied in Logic Design , where gates replace switches. Our main goal is to give you an overview of how boolean functions correspond to actual computer circuits. We will introduce the common system notation used in logic design and show how it corresponds with the mathematical notation of Boolean algebras. Any computer scientist should be familiar with both systems.   The Altair Computer, an early PC, by Todd Dailey, Creative Commons   Image of an Altair computer    The simplest switching device is the on-off switch. If the switch is closed\/ON, electrical current will pass through it; if it is open\/OFF, current will not pass through it. If we designate ON by 1, and OFF by 0, we can describe electrical circuits containing switches by Boolean expressions with the variables representing the variable states of switches or the variable bits passing through gates.  The electronics involved in these switches take into account whether we are negating a switch or not. For electromagnetic switches, a magnet is used to control whether the switch is open or closed. The magnets themselves may be controlled by simple ON\/OFF switches. There are two types of electromagnetic switches. One is normally open (OFF) when the magnet is not activated, but activating the magnet will close the circuit and the switch is then ON. A separate type of switch corresponds with a negated switch. For that type, the switch is closed (ON) when the magnet is not activated, and when the magnet is activated, the switch opens (turns OFF). We won't be overly concerned with the details of these switches or the electronics corresponding to logical gates. We will simply assume they are available to plug into a circuit. For simplicity, we use the complement symbol on a varible that labels a switch to indicate that it is a switch of the second type, as in .    Representation of a normally OFF switch controlled by variable    Graphical representation of a normally OFF switch     Representation of a normally ON switch controlled by variable    Graphical representation of a normally ON switch     The standard notation used for Boolean algebra operations in switching theory and logic design is for join, instead of ; and for meet, instead of . Complementation is the same in both notational systems, denoted with an overline.  The expression represents the situation in which a series of two switches appears in sequence as in . In order for current to flow through the circuit, both switches must be ON; that is, AND must both have the value 1. Similarly, a pair of parallel switches, as in , is described algebraically by . Here, current flows through this part of the circuit as long as at least one of the switches, OR , is ON.    Two switches in AND configuration realizing    Graphical representation of two switches in AND configuration      Two switches in OR configuration realizing    Graphical representation of two switches in OR configuration     All laws and concepts developed previously for Boolean algebras hold. The only change is purely notational. We make the change in this section solely to introduce the reader to another frequently used system of notation.  Many of the laws of Boolean algebra can be visualized thought switching theory. For example, the distributive law of meet over join is expressed as The switching circuit analogue of the above statement is that the circuits in the two images below are equivalent. In circuit (b), the presence of two 's might represent two electromagnetic switches controlled by the same magnet.    (a)   The first of equivalent switching circuits     (b)   The second of equivalent switching circuits     The circuits in a computer are now composed of large quantities of gates, which serve the same purpose as switches, but can be miniaturized to a great degree. For example, the OR gate, usually drawn as in implements the logical OR function. This happens electronically, but is equivalent to . The AND gate, which is equivalent to two sequential switches is shown in .   An OR gate   OR gate symbol     An AND gate   AND gate symbol    The complementation process is represented in a gate diagram by an inverter, as pictured in .   Inverter, or NOT gate   Inverter symbol    When drawing more complex circuits, multiple AND's or OR's are sometimes depicted using a more general gate drawing. For example if we want to depict an OR gate with three inputs that is ON as long as at least one input is ON, we would draw it as in , although this would really be two binary gates, as in . Both diagrams are realizing the boolean expression . Strictly speaking, the gates in represent , but the associative law for join tells us that the grouping doesn't matter.    Simple version of a ternary OR gate   OR gate symbol with three inputs     A ternary OR gate created with binary OR gates   A three-input OR created with two binary OR gate symbols     In , we show a few other commonly used gates, XOR, NAND, and NOR, which correspond to the boolean exressions , , and , respectively.      Symbols for XOR, NAND, and NOR gates     Exercises for Section 12.7   Write the following Boolean expression in the notation of logic design.   Draw the circuit diagram of the expression using only AND, OR, and NOT gates with one or two inputs.        Rewrite the expression from Exercise 1 in two ways: one using only the NOR operation and one using only the NAND operation    Draw a logic circuit using only AND, OR and NOT gates that realizes an XOR gate.    Draw a logic circuit using only AND, OR and NOT gates that realizes the Boolean function on three variables that returns 1 if the majority of inputs are 1 and 0 otherwise.       "
},
{
  "id": "s-logic-circuits-5",
  "level": "2",
  "url": "s-logic-circuits.html#s-logic-circuits-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Switching Theory Logic Design "
},
{
  "id": "fig-altair",
  "level": "2",
  "url": "s-logic-circuits.html#fig-altair",
  "type": "Figure",
  "number": "12.7.1",
  "title": "",
  "body": " The Altair Computer, an early PC, by Todd Dailey, Creative Commons   Image of an Altair computer   "
},
{
  "id": "fig-switch-normal-off",
  "level": "2",
  "url": "s-logic-circuits.html#fig-switch-normal-off",
  "type": "Figure",
  "number": "12.7.2",
  "title": "",
  "body": " Representation of a normally OFF switch controlled by variable    Graphical representation of a normally OFF switch   "
},
{
  "id": "fig-switch-normal-on",
  "level": "2",
  "url": "s-logic-circuits.html#fig-switch-normal-on",
  "type": "Figure",
  "number": "12.7.3",
  "title": "",
  "body": " Representation of a normally ON switch controlled by variable    Graphical representation of a normally ON switch   "
},
{
  "id": "fig-and-switch",
  "level": "2",
  "url": "s-logic-circuits.html#fig-and-switch",
  "type": "Figure",
  "number": "12.7.4",
  "title": "",
  "body": " Two switches in AND configuration realizing    Graphical representation of two switches in AND configuration   "
},
{
  "id": "fig-or-switch",
  "level": "2",
  "url": "s-logic-circuits.html#fig-or-switch",
  "type": "Figure",
  "number": "12.7.5",
  "title": "",
  "body": " Two switches in OR configuration realizing    Graphical representation of two switches in OR configuration   "
},
{
  "id": "fig-switches-distributive1",
  "level": "2",
  "url": "s-logic-circuits.html#fig-switches-distributive1",
  "type": "Figure",
  "number": "12.7.6",
  "title": "",
  "body": " (a)   The first of equivalent switching circuits   "
},
{
  "id": "fig-switches-distributive2",
  "level": "2",
  "url": "s-logic-circuits.html#fig-switches-distributive2",
  "type": "Figure",
  "number": "12.7.7",
  "title": "",
  "body": " (b)   The second of equivalent switching circuits   "
},
{
  "id": "fig-or-gate",
  "level": "2",
  "url": "s-logic-circuits.html#fig-or-gate",
  "type": "Figure",
  "number": "12.7.8",
  "title": "",
  "body": " An OR gate   OR gate symbol   "
},
{
  "id": "fig-and-gate",
  "level": "2",
  "url": "s-logic-circuits.html#fig-and-gate",
  "type": "Figure",
  "number": "12.7.9",
  "title": "",
  "body": " An AND gate   AND gate symbol   "
},
{
  "id": "fig-inverter",
  "level": "2",
  "url": "s-logic-circuits.html#fig-inverter",
  "type": "Figure",
  "number": "12.7.10",
  "title": "",
  "body": " Inverter, or NOT gate   Inverter symbol   "
},
{
  "id": "fig-triple-or",
  "level": "2",
  "url": "s-logic-circuits.html#fig-triple-or",
  "type": "Figure",
  "number": "12.7.11",
  "title": "",
  "body": " Simple version of a ternary OR gate   OR gate symbol with three inputs   "
},
{
  "id": "fig-triple-or-real",
  "level": "2",
  "url": "s-logic-circuits.html#fig-triple-or-real",
  "type": "Figure",
  "number": "12.7.12",
  "title": "",
  "body": " A ternary OR gate created with binary OR gates   A three-input OR created with two binary OR gate symbols   "
},
{
  "id": "fig-gates",
  "level": "2",
  "url": "s-logic-circuits.html#fig-gates",
  "type": "Figure",
  "number": "12.7.13",
  "title": "",
  "body": "    Symbols for XOR, NAND, and NOR gates   "
},
{
  "id": "exerc-12_7-1",
  "level": "2",
  "url": "s-logic-circuits.html#exerc-12_7-1",
  "type": "Exercise",
  "number": "12.7.1",
  "title": "",
  "body": " Write the following Boolean expression in the notation of logic design.   Draw the circuit diagram of the expression using only AND, OR, and NOT gates with one or two inputs.      "
},
{
  "id": "exerc-circuit-diagram",
  "level": "2",
  "url": "s-logic-circuits.html#exerc-circuit-diagram",
  "type": "Exercise",
  "number": "12.7.2",
  "title": "",
  "body": " Rewrite the expression from Exercise 1 in two ways: one using only the NOR operation and one using only the NAND operation  "
},
{
  "id": "exercises-12-7-4",
  "level": "2",
  "url": "s-logic-circuits.html#exercises-12-7-4",
  "type": "Exercise",
  "number": "12.7.3",
  "title": "",
  "body": " Draw a logic circuit using only AND, OR and NOT gates that realizes an XOR gate.  "
},
{
  "id": "exercises-12-7-5",
  "level": "2",
  "url": "s-logic-circuits.html#exercises-12-7-5",
  "type": "Exercise",
  "number": "12.7.4",
  "title": "",
  "body": " Draw a logic circuit using only AND, OR and NOT gates that realizes the Boolean function on three variables that returns 1 if the majority of inputs are 1 and 0 otherwise.     "
},
{
  "id": "s-circuit-minimization",
  "level": "1",
  "url": "s-circuit-minimization.html",
  "type": "Section",
  "number": "12.8",
  "title": "Logic Circuit Minimization",
  "body": " Logic Circuit Minimization  Circuit Minimization  Logic Circuit Minimization   Let's start with a logic circuit and see how the laws of boolean algebra can help us simplify it.   Simplification of a circuit  Consider the circuit in . As usual, we assume that three inputs enter on the left and the output exits on the right.   Initial gate diagram   Complex gate diagram    If we trace the inputs through the gates we see that this circuit realizes the boolean function   We simplify the boolean expression that defines , simplifying the circuit in so doing. You should be able to identify the laws of Boolean algebra that are used in each of the steps. See . Therefore, , which can be realized with the much simpler circuit in , without using the input .   Simplified gate diagram   Simplified gate diagram     Next, we start with a table of desired outputs based on three bits of input and design an efficient circuit to realize this output.   Consider the following table of desired outputs for the three input bits .   Desired output table                  0  0  0  0    0  0  1  1    0  1  0  0    0  1  1  0    1  0  0  1    1  0  1  1    1  1  0  0    1  1  1  0     A circuit diagram for this function is . But is this the simplest circuit that realizes the table? See .   A realization of the table of desired outputs.   Circuit diagram of the desired table of outputs       Exercises for Section 12.8   List the laws of boolean algebra that justify the steps in the simplification of the boolean function in . Some steps use more than one law.      Associative, commutative, and idempotent laws.    Distributive law.    Idempotent and complement laws.    Null and identity laws    Distributive law.    Null and identity laws.       Write the following Boolean expression in the notation of logic design.         Find a further simplification of the boolean function in , and draw the corresponding gate diagram for the circuit that it realizes.   A simpler boolean expression for the function is .   An even simpler circuit   Diagram of simplified circuit with 3 gates      Consider the switching circuit in .   Can this circuit be simplifed?   Switching circuit diagram       Draw the corresponding gate diagram for this circuit.    Construct a table of outputs for each of the eight inputs to this circuit.    Determine the minterm normal of the Boolean function based on the table.    Simplify the circuit as much as possible.       Consider the circuit in .   Can this circuit be simplifed?   Circuit diagram with 4 gates       Trace the inputs though this circuit and determine the Boolean function that it realizes.    Construct a table of outputs for each of the eight inputs to this circuit.    Find the minterm normal form of .    Draw the circuit based on the minterm normal form.    Simplify the circuit algebraically and draw the resulting circuit.       Consider the Boolean function     Simplify algebraically.    Draw the gate diagram based on the simplified version of .       "
},
{
  "id": "example-logic-design-1",
  "level": "2",
  "url": "s-circuit-minimization.html#example-logic-design-1",
  "type": "Example",
  "number": "12.8.1",
  "title": "Simplification of a circuit.",
  "body": " Simplification of a circuit  Consider the circuit in . As usual, we assume that three inputs enter on the left and the output exits on the right.   Initial gate diagram   Complex gate diagram    If we trace the inputs through the gates we see that this circuit realizes the boolean function   We simplify the boolean expression that defines , simplifying the circuit in so doing. You should be able to identify the laws of Boolean algebra that are used in each of the steps. See . Therefore, , which can be realized with the much simpler circuit in , without using the input .   Simplified gate diagram   Simplified gate diagram    "
},
{
  "id": "example-logic-design-2",
  "level": "2",
  "url": "s-circuit-minimization.html#example-logic-design-2",
  "type": "Example",
  "number": "12.8.4",
  "title": "",
  "body": " Consider the following table of desired outputs for the three input bits .   Desired output table                  0  0  0  0    0  0  1  1    0  1  0  0    0  1  1  0    1  0  0  1    1  0  1  1    1  1  0  0    1  1  1  0     A circuit diagram for this function is . But is this the simplest circuit that realizes the table? See .   A realization of the table of desired outputs.   Circuit diagram of the desired table of outputs    "
},
{
  "id": "exerc-12_8-1",
  "level": "2",
  "url": "s-circuit-minimization.html#exerc-12_8-1",
  "type": "Exercise",
  "number": "12.8.1",
  "title": "",
  "body": " List the laws of boolean algebra that justify the steps in the simplification of the boolean function in . Some steps use more than one law.      Associative, commutative, and idempotent laws.    Distributive law.    Idempotent and complement laws.    Null and identity laws    Distributive law.    Null and identity laws.     "
},
{
  "id": "exercises-12-8-3",
  "level": "2",
  "url": "s-circuit-minimization.html#exercises-12-8-3",
  "type": "Exercise",
  "number": "12.8.2",
  "title": "",
  "body": " Write the following Boolean expression in the notation of logic design.       "
},
{
  "id": "exerc-simpler-circuit",
  "level": "2",
  "url": "s-circuit-minimization.html#exerc-simpler-circuit",
  "type": "Exercise",
  "number": "12.8.3",
  "title": "",
  "body": " Find a further simplification of the boolean function in , and draw the corresponding gate diagram for the circuit that it realizes.   A simpler boolean expression for the function is .   An even simpler circuit   Diagram of simplified circuit with 3 gates    "
},
{
  "id": "exercises-12-8-5",
  "level": "2",
  "url": "s-circuit-minimization.html#exercises-12-8-5",
  "type": "Exercise",
  "number": "12.8.4",
  "title": "",
  "body": " Consider the switching circuit in .   Can this circuit be simplifed?   Switching circuit diagram       Draw the corresponding gate diagram for this circuit.    Construct a table of outputs for each of the eight inputs to this circuit.    Determine the minterm normal of the Boolean function based on the table.    Simplify the circuit as much as possible.     "
},
{
  "id": "exercises-12-8-6",
  "level": "2",
  "url": "s-circuit-minimization.html#exercises-12-8-6",
  "type": "Exercise",
  "number": "12.8.5",
  "title": "",
  "body": " Consider the circuit in .   Can this circuit be simplifed?   Circuit diagram with 4 gates       Trace the inputs though this circuit and determine the Boolean function that it realizes.    Construct a table of outputs for each of the eight inputs to this circuit.    Find the minterm normal form of .    Draw the circuit based on the minterm normal form.    Simplify the circuit algebraically and draw the resulting circuit.     "
},
{
  "id": "exercises-12-8-7",
  "level": "2",
  "url": "s-circuit-minimization.html#exercises-12-8-7",
  "type": "Exercise",
  "number": "12.8.6",
  "title": "",
  "body": " Consider the Boolean function     Simplify algebraically.    Draw the gate diagram based on the simplified version of .     "
},
{
  "id": "s-recurrence-relations",
  "level": "1",
  "url": "s-recurrence-relations.html",
  "type": "Section",
  "number": "13.1",
  "title": "Recurrence Relations",
  "body": " Recurrence Relations   In this section we will begin our study of recurrence relations and their solutions. Our primary focus will be on the class of finite order linear recurrence relations with constant coefficients (shortened to finite order linear relations). First, we will examine closed form expressions from which these relations arise. Second, we will present an algorithm for solving them. In later sections we will consider some other common relations ( ) and introduce an additional tool for studying recurrence relations: generating functions ( ).      Definition and Terminology   Recurrence Relation  Recurrence Relation   Let be a sequence of numbers. A recurrence relation on is a formula that relates all but a finite number of terms of to previous terms of . That is, there is a in the domain of such that if , then is expressed in terms of some (and possibly all) of the terms that precede . If the domain of is , the terms are not defined by the recurrence formula.Their values are the initial conditions (or boundary conditions, or basis) that complete the definition of .     Some Examples of Recurrence Relations     The Fibonacci sequence is defined by the recurrence relation , with the initial conditions and . The recurrence relation is called a second-order relation because depends on the two previous terms of . Recall that the sequence in Section 8.2, , can be defined with the same recurrence relation, but with different initial conditions.    The relation is a third-order recurrence relation. If values of , , and are specified, then is completely defined.    The recurrence relation , , with has infinite order. To determine when is even, you must go back terms. Since grows unbounded with , no finite order can be given to .        Solving Recurrence Relations   Recurrence Relations  Solving   Sequences are often most easily defined with a recurrence relation; however, the calculation of terms by directly applying a recurrence relation can be time-consuming. The process of determining a closed form expression for the terms of a sequence from its recurrence relation is called solving the relation. There is no single technique or algorithm that can be used to solve all recurrence relations. In fact, some recurrence relations cannot be solved. The relation that defines above is one such example. Most of the recurrence relations that you are likely to encounter in the future are classified as finite order linear recurrence relations with constant coefficients. This class is the one that we will spend most of our time with in this chapter.   Order Linear Recurrence Relation  Order of a Recurrence Relation   Let be a sequence of numbers with domain . An order linear recurrence relation on with constant coefficients is a recurrence relation that can be written in the form where are constants and is a numeric function that is defined for .    Note: We will shorten the name of this class of relations to order linear relations. Therefore, in further discussions, would not be considered a first-order linear relation.   Some Finite Order Linear Relations     The Fibonacci sequence is defined by the second-order linear relation because    The relation is a third-order linear relation. In this case, .    The relation can be written as . Therefore, it is a first-order linear relation.        Recurrence relations obtained from solutions  Recurrence relations obtained from solutions  Before giving an algorithm for solving finite order linear relations, we will examine recurrence relations that arise from certain closed form expressions. The closed form expressions are selected so that we will obtain finite order linear relations from them. This approach may seem a bit contrived, but if you were to write down a few simple algebraic expressions, chances are that most of them would be similar to the ones we are about to examine.  For our first example, consider , defined by , . If , . Therefore, satisfies the first order linear relation and the initial condition serves as an initial condition for .  As a second example, consider , . Quite a bit more algebraic manipulation is required to get our result:                                                   .             .                           The recurrence relation that we have just obtained, defined for , together with the initial conditions and , define .  summarizes our results together with a few other examples that we will let the reader derive. Based on these results, we might conjecture that any closed form expression for a sequence that combines exponential expressions and polynomial expressions will be solutions of finite order linear relations. Not only is this true, but the converse is true: a finite order linear relation defines a closed form expression that is similar to the ones that were just examined. The only additional information that is needed is a set of initial conditions.   Recurrence relations obtained from given sequences    Closed Form Expression  Recurrence Relation                                                              Homogeneous Recurrence Relation  Homogeneous Recurrence Relation.   An order linear relation is homogeneous if for all . For each recurrence relation , the associated homogeneous relation is      First Order Homogeneous Recurrence Relations  is a first-order homogeneous relation. Since it can also be written as , it should be no surprise that it arose from an expression that involves powers of 2. More generally, you would expect that the solution of would involve . Actually, the solution is , where the value of is given by the initial condition.    A Second Order Example  Consider the second-order homogeneous relation together with the initial conditions and . From our discussion above, we can predict that the solution to this relation involves terms of the form , where and are nonzero constants that must be determined. If the solution were to equal this quantity exactly, then Substitute these expressions into the recurrence relation to get Each term on the left-hand side of this equation has a factor of , which is nonzero. Dividing through by this common factor yields  Therefore, the only possible values of are 3 and 4. Equation is called the characteristic equation of the recurrence relation. The fact is that our original recurrence relation is true for any sequence of the form , where and are real numbers. This set of sequences is called the general solution of the recurrence relation. If we didn't have initial conditions for , we would stop here. The initial conditions make it possible for us to find definite values for and .   The solution of this set of simultaneous equations is and and so the solution is .    Characteristic Equation  Characteristic Equation  Characteristic Roots   The characteristic equation of the homogeneous order linear relation is the th degree polynomial equation The left-hand side of this equation is called the characteristic polynomial. The roots of the characteristic polynomial are called the characteristic roots of the equation.     Some characteristic equations     The characteristic equation of is .    The characteristic equation of is Note that the absence of a term means that there is not an term appearing in the characteristic equation.       Algorithm for Solving Homogeneous Finite-order Linear Relations      Write out the characteristic equation of the relation , which is .    Find all roots of the characteristic equation, the characteristic roots.    If there are distinct characteristic roots, , then the general solution of the recurrence relation is . If there are fewer than characteristic roots, then at least one root is a multiple root. If is a double root, then the term is replaced with In general, if is a root of multiplicity , then the term is replaced with .    If initial conditions are given, we get linear equations in unknowns (the from Step 3) by substitution. If possible, solve these equations to determine a final form for .       Although this algorithm is valid for all values of , there are limits to the size of for which the algorithm is feasible. Using just a pencil and paper, we can always solve second-order equations. The quadratic formula for the roots of is The solutions of are then   Although cubic and quartic formulas exist, they are too lengthy to introduce here. For this reason, the only higher-order relations ( ) that you could be expected to solve by hand are ones for which there is an easy factorization of the characteristic polynomial.   A solution using the algorithm  Suppose that is defined by , with and . We can solve this recurrence relation with :     Note that we have written the recurrence relation in nonstandard form. To avoid errors in this easy step, you might consider a rearrangement of the equation to, in this case, . Therefore, the characteristic equation is .    The characteristic roots are and . These roots can be just as easily obtained by factoring the characteristic polynomial into .    The general solution of the recurrence relation is .      The simultaneous equations have the solution and . Therefore, .      Here is one rule that might come in handy: If the coefficients of the characteristic polynomial are all integers, with the constant term equal to , then the only possible rational characteristic roots are divisors of (both positive and negative).  With the aid of a computer (or possibly only a calculator), we can increase . Approximations of the characteristic roots can be obtained by any of several well-known methods, some of which are part of standard software packages. There is no general rule that specifies the values of for which numerical approximations will be feasible. The accuracy that you get will depend on the relation that you try to solve. (See Exercise 17 of this section.)   Solution of a Third Order Recurrence Relation  Solve , where , , and .     The characteristic equation is .    The only rational roots that we can attempt are . By checking these, we obtain the three roots 1, 2, and .    The general solution is . The first term can simply be written .    You can solve this system by elimination to obtain , , and . Therefore,        Solution with a Double Characteristic Root  Solve , where and .     Characteristic equation: .    . Therefore, there is a double characteristic root, 4.    General solution: .       Therefore .        Solution of Nonhomogeneous Finite Order Linear Relations   Nonhomogeneous of Finite Order Linear Relations  Solution   Our algorithm for nonhomogeneous relations will not be as complete as for the homogeneous case. This is due to the fact that different right-hand sides ( 's) call for different rules in obtaining a particular solution.   Algorithm for Solving Nonhomogeneous Finite-order Linear Relations   To solve the recurrence relation     Write the associated homogeneous relation and find its general solution (Steps (a) through (c) of ). Call this the homogeneous solution, .    Start to obtain what is called a particular solution, of the recurrence relation by taking an educated guess at the form of a particular solution. For a large class of right-hand sides, this is not really a guess, since the particular solution is often the same type of function as (see ).    Substitute your guess from Step 2 into the recurrence relation. If you made a good guess, you should be able to determine the unknown coefficients of your guess. If you made a wrong guess, it should be apparent from the result of this substitution, so go back to Step 2.    The general solution of the recurrence relation is the sum of the homogeneous and particular solutions. If no conditions are given, then you are finished. If initial conditions are given, they will translate to linear equations in unknowns and solve the system to get a complete solution.        Particular solutions for given right-hand sides    Right Hand Side,  Form of Particular Solution,    Constant,  Constant,    Linear Function,  Linear Function,    degree polynomial,  degree polynomial,    exponential function,  exponential function,      Solution of a Nonhomogeneous First Order Recurrence Relation  Solve , with .     The associated homogeneous relation, has the characteristic equation ; therefore, . The homogeneous solution is .    Since the right-hand side is a constant, we guess that the particular solution will be a constant, .    If we substitute into the recurrence relation, we get , or . Therefore, .    The general solution of the recurrence relation is The initial condition will give us one equation to solve in order to determine . Therefore, and .       Solution of a Nonhomogeneous Second Order Recurrence Relation  Consider with and .     From , we know that . Caution:Don't apply the initial conditions to until you add !    Since the right-hand side is a linear polynomial, is linear; that is, .    Substitution into the recurrence relation yields:  Two polynomials are equal only if their coefficients are equal. Therefore,     Use the general solution and the initial conditions to get a final solution:    Therefore, .       A quick note on interest rates  When a quantity, such as a savings account balance, is increased by some fixed percent, it is most easily computed with a multiplier. In the case of an increase, the multiplier is 1.08 because any original amount , has added to it, so that the new balance is .  Another example is that if the interest rate is , the multiplier would be 1.035. This presumes that the interest is applied at the end of year for annual interest, often called simple interest . If the interest is applied monthly, and we assume a simplifed case where each month has the same length, the multiplier after every month would be . After a year passes, this multiplier would be applied 12 times, which is the same as multiplying by . That increase from 1.035 to 1.03557 is the effect of compound interest .    A Sort of Annuity  Suppose you open a savings account that pays an annual interest rate of . In addition, suppose you decide to deposit one dollar when you open the account, and you intend to double your deposit each year. Let be your balance after years. can be described by the relation , with . If, instead of doubling the deposit each year, you deposited a constant amount, , the term would be replaced with . A sequence of regular deposits such as this is called a simple annuity.  Returning to the original situation,          should be of the form .    Therefore .       Therefore, .       Matching Roots  Find the general solution to .     The characteristic roots of the associated homogeneous relation are and 4. Therefore, .    A function of the form will not be a particular solution of the nonhomogeneous relation since it solves the associated homogeneous relation. When the right-hand side involves an exponential function with a base that equals a characteristic root,you should multiply your guess at a particular solution by . Our guess at would then be . See for a more complete description of this rule.    Substitute into the recurrence relation for : Each term on the left-hand side has a factor of  Therefore, .    The general solution to the recurrence relation is        When the base of right-hand side is equal to a characteristic root  If the right-hand side of a nonhomogeneous relation involves an exponential with base , and is also a characteristic root of multiplicity , then multiply your guess at a particular solution as prescribed in by , where is the index of the sequence.    Examples of matching bases     If , the characteristic roots are 4 and 5. Since 5 matches the base of the right side, will take the form .    If the only characteristic root is 3, but it is a double root (multiplicity 2). Therefore, the form of the particular solution is .    If , the characteristic roots are and 4. The form of the particular solution will be .    If , the characteristic roots are 1 and 8. If the right-hand side is a polynomial, as it is in this case, then the exponential factor can be introduced. The particular solution will take the form .      We conclude this section with a comment on the situation in which the characteristic equation gives rise to complex roots. If we restrict the coefficients of our finite order linear relations to real numbers, or even to integers, we can still encounter characteristic equations whose roots are complex. Here, we will simply take the time to point out that our algorithms are still valid with complex characteristic roots, but the customary method for expressing the solutions of these relations is different. Since an understanding of these representations requires some background in complex numbers, we will simply suggest that an interested reader can refer to a more advanced treatment of recurrence relations (see also difference equations).    Exercises    Solve the following sets of recurrence relations and initial conditions:     , ,         , ,    ,         , ,             , ,                            , ,     , ,         Find a closed form expression for in .       Find a closed form expression for the terms of the Fibonacci sequence (see ).    The sequence was defined by = the number of strings of zeros and ones with length having no consecutive zeros ( (c)). Its recurrence relation is the same as that of the Fibonacci sequence. Determine a closed form expression for , .         The characteristic equation is , which has solutions and , It is useful to point out that and . The general solution is . Using the initial conditions, we obtain the system: and . The solution to this system is and   Therefore the final solution is            If , , then can be described with the recurrence relation . For each of the following sequences that are defined using a summation, find a closed form expression:      ,    ,    ,     ,       Let be the number of ways that the set , , can be partitioned into two nonempty subsets.     Find a recurrence relation for . (Hint: It will be a first-order linear relation.)    Solve the recurrence relation.         For each two-block partition of , there are two partitions we can create when we add , but there is one additional two-block partition to count for which one block is . Therefore,            If you were to deposit a certain amount of money at the end of each year for a number of years, this sequence of payments would be called an annuity (see ).   Using a recurrence relation, find a closed form expression for the balance or value of an annuity that consists of payments of dollars at a rate of interest of . Note that for a normal annuity, the first payment is made after one year.    With an interest rate of 5.5 percent, how much would you need to deposit into an annuity to have a value of one million dollars after 18 years?    The payment of a loan is a form of annuity in which the initial value is some negative amount (the amount of the loan) and the annuity ends when the value is raised to zero. How much could you borrow if you can afford to pay $5,000 per year for 25 years at 11 percent interest?      Suppose that is a small positive number. Consider the recurrence relation , with initial conditions and . If is small enough, we might consider approximating the relation by replacing with 1 and with 0. Solve the original relation and its approximation. Let a be the solution of the approximation. Compare closed form expressions for and . Their forms are very different because the characteristic roots of the original relation were close together and the approximation resulted in one double characteristic root.If characteristic roots of a relation are relatively far apart, this problem will not occur. For example, compare the general solutions of and .     "
},
{
  "id": "def-recurrence-relation",
  "level": "2",
  "url": "s-recurrence-relations.html#def-recurrence-relation",
  "type": "Definition",
  "number": "13.1.1",
  "title": "Recurrence Relation.",
  "body": " Recurrence Relation  Recurrence Relation   Let be a sequence of numbers. A recurrence relation on is a formula that relates all but a finite number of terms of to previous terms of . That is, there is a in the domain of such that if , then is expressed in terms of some (and possibly all) of the terms that precede . If the domain of is , the terms are not defined by the recurrence formula.Their values are the initial conditions (or boundary conditions, or basis) that complete the definition of .   "
},
{
  "id": "ex-some-recurrence-relations",
  "level": "2",
  "url": "s-recurrence-relations.html#ex-some-recurrence-relations",
  "type": "Example",
  "number": "13.1.2",
  "title": "Some Examples of Recurrence Relations.",
  "body": " Some Examples of Recurrence Relations     The Fibonacci sequence is defined by the recurrence relation , with the initial conditions and . The recurrence relation is called a second-order relation because depends on the two previous terms of . Recall that the sequence in Section 8.2, , can be defined with the same recurrence relation, but with different initial conditions.    The relation is a third-order recurrence relation. If values of , , and are specified, then is completely defined.    The recurrence relation , , with has infinite order. To determine when is even, you must go back terms. Since grows unbounded with , no finite order can be given to .     "
},
{
  "id": "def-n-th-order-rr",
  "level": "2",
  "url": "s-recurrence-relations.html#def-n-th-order-rr",
  "type": "Definition",
  "number": "13.1.3",
  "title": "<span class=\"process-math\">\\(n^{th}\\)<\/span> Order Linear Recurrence Relation.",
  "body": " Order Linear Recurrence Relation  Order of a Recurrence Relation   Let be a sequence of numbers with domain . An order linear recurrence relation on with constant coefficients is a recurrence relation that can be written in the form where are constants and is a numeric function that is defined for .   "
},
{
  "id": "ex-some-finite-order-rr",
  "level": "2",
  "url": "s-recurrence-relations.html#ex-some-finite-order-rr",
  "type": "Example",
  "number": "13.1.4",
  "title": "Some Finite Order Linear Relations.",
  "body": " Some Finite Order Linear Relations     The Fibonacci sequence is defined by the second-order linear relation because    The relation is a third-order linear relation. In this case, .    The relation can be written as . Therefore, it is a first-order linear relation.     "
},
{
  "id": "sss-recurrence-relations-obtained-from-solutions-6",
  "level": "2",
  "url": "s-recurrence-relations.html#sss-recurrence-relations-obtained-from-solutions-6",
  "type": "Table",
  "number": "13.1.5",
  "title": "",
  "body": "                                                 .             .                          "
},
{
  "id": "table-reverse-solutions-rr",
  "level": "2",
  "url": "s-recurrence-relations.html#table-reverse-solutions-rr",
  "type": "Table",
  "number": "13.1.6",
  "title": "Recurrence relations obtained from given sequences",
  "body": " Recurrence relations obtained from given sequences    Closed Form Expression  Recurrence Relation                                                            "
},
{
  "id": "def-homogeneous-recurrence-relation",
  "level": "2",
  "url": "s-recurrence-relations.html#def-homogeneous-recurrence-relation",
  "type": "Definition",
  "number": "13.1.7",
  "title": "Homogeneous Recurrence Relation.",
  "body": " Homogeneous Recurrence Relation  Homogeneous Recurrence Relation.   An order linear relation is homogeneous if for all . For each recurrence relation , the associated homogeneous relation is    "
},
{
  "id": "ex-first-order-homogeneous-rr",
  "level": "2",
  "url": "s-recurrence-relations.html#ex-first-order-homogeneous-rr",
  "type": "Example",
  "number": "13.1.8",
  "title": "First Order Homogeneous Recurrence Relations.",
  "body": " First Order Homogeneous Recurrence Relations  is a first-order homogeneous relation. Since it can also be written as , it should be no surprise that it arose from an expression that involves powers of 2. More generally, you would expect that the solution of would involve . Actually, the solution is , where the value of is given by the initial condition.  "
},
{
  "id": "ex-second-order-rr",
  "level": "2",
  "url": "s-recurrence-relations.html#ex-second-order-rr",
  "type": "Example",
  "number": "13.1.9",
  "title": "A Second Order Example.",
  "body": " A Second Order Example  Consider the second-order homogeneous relation together with the initial conditions and . From our discussion above, we can predict that the solution to this relation involves terms of the form , where and are nonzero constants that must be determined. If the solution were to equal this quantity exactly, then Substitute these expressions into the recurrence relation to get Each term on the left-hand side of this equation has a factor of , which is nonzero. Dividing through by this common factor yields  Therefore, the only possible values of are 3 and 4. Equation is called the characteristic equation of the recurrence relation. The fact is that our original recurrence relation is true for any sequence of the form , where and are real numbers. This set of sequences is called the general solution of the recurrence relation. If we didn't have initial conditions for , we would stop here. The initial conditions make it possible for us to find definite values for and .   The solution of this set of simultaneous equations is and and so the solution is .  "
},
{
  "id": "def-characteristic-equation",
  "level": "2",
  "url": "s-recurrence-relations.html#def-characteristic-equation",
  "type": "Definition",
  "number": "13.1.10",
  "title": "Characteristic Equation.",
  "body": " Characteristic Equation  Characteristic Equation  Characteristic Roots   The characteristic equation of the homogeneous order linear relation is the th degree polynomial equation The left-hand side of this equation is called the characteristic polynomial. The roots of the characteristic polynomial are called the characteristic roots of the equation.   "
},
{
  "id": "ex-some-char-equations",
  "level": "2",
  "url": "s-recurrence-relations.html#ex-some-char-equations",
  "type": "Example",
  "number": "13.1.11",
  "title": "Some characteristic equations.",
  "body": " Some characteristic equations     The characteristic equation of is .    The characteristic equation of is Note that the absence of a term means that there is not an term appearing in the characteristic equation.     "
},
{
  "id": "algorithm-linear-homogeneous-recurrence-relations",
  "level": "2",
  "url": "s-recurrence-relations.html#algorithm-linear-homogeneous-recurrence-relations",
  "type": "Algorithm",
  "number": "13.1.12",
  "title": "Algorithm for Solving Homogeneous Finite-order Linear Relations.",
  "body": " Algorithm for Solving Homogeneous Finite-order Linear Relations      Write out the characteristic equation of the relation , which is .    Find all roots of the characteristic equation, the characteristic roots.    If there are distinct characteristic roots, , then the general solution of the recurrence relation is . If there are fewer than characteristic roots, then at least one root is a multiple root. If is a double root, then the term is replaced with In general, if is a root of multiplicity , then the term is replaced with .    If initial conditions are given, we get linear equations in unknowns (the from Step 3) by substitution. If possible, solve these equations to determine a final form for .      "
},
{
  "id": "ex-hrr-solution-example-1",
  "level": "2",
  "url": "s-recurrence-relations.html#ex-hrr-solution-example-1",
  "type": "Example",
  "number": "13.1.13",
  "title": "A solution using the algorithm.",
  "body": " A solution using the algorithm  Suppose that is defined by , with and . We can solve this recurrence relation with :     Note that we have written the recurrence relation in nonstandard form. To avoid errors in this easy step, you might consider a rearrangement of the equation to, in this case, . Therefore, the characteristic equation is .    The characteristic roots are and . These roots can be just as easily obtained by factoring the characteristic polynomial into .    The general solution of the recurrence relation is .      The simultaneous equations have the solution and . Therefore, .     "
},
{
  "id": "ex-hrr-solution-example-2",
  "level": "2",
  "url": "s-recurrence-relations.html#ex-hrr-solution-example-2",
  "type": "Example",
  "number": "13.1.14",
  "title": "Solution of a Third Order Recurrence Relation.",
  "body": " Solution of a Third Order Recurrence Relation  Solve , where , , and .     The characteristic equation is .    The only rational roots that we can attempt are . By checking these, we obtain the three roots 1, 2, and .    The general solution is . The first term can simply be written .    You can solve this system by elimination to obtain , , and . Therefore,      "
},
{
  "id": "ex-hrr-solution-example-3",
  "level": "2",
  "url": "s-recurrence-relations.html#ex-hrr-solution-example-3",
  "type": "Example",
  "number": "13.1.15",
  "title": "Solution with a Double Characteristic Root.",
  "body": " Solution with a Double Characteristic Root  Solve , where and .     Characteristic equation: .    . Therefore, there is a double characteristic root, 4.    General solution: .       Therefore .     "
},
{
  "id": "algorithm-linear-nonhomogeneous-recurrence-relations",
  "level": "2",
  "url": "s-recurrence-relations.html#algorithm-linear-nonhomogeneous-recurrence-relations",
  "type": "Algorithm",
  "number": "13.1.16",
  "title": "Algorithm for Solving Nonhomogeneous Finite-order Linear Relations.",
  "body": " Algorithm for Solving Nonhomogeneous Finite-order Linear Relations   To solve the recurrence relation     Write the associated homogeneous relation and find its general solution (Steps (a) through (c) of ). Call this the homogeneous solution, .    Start to obtain what is called a particular solution, of the recurrence relation by taking an educated guess at the form of a particular solution. For a large class of right-hand sides, this is not really a guess, since the particular solution is often the same type of function as (see ).    Substitute your guess from Step 2 into the recurrence relation. If you made a good guess, you should be able to determine the unknown coefficients of your guess. If you made a wrong guess, it should be apparent from the result of this substitution, so go back to Step 2.    The general solution of the recurrence relation is the sum of the homogeneous and particular solutions. If no conditions are given, then you are finished. If initial conditions are given, they will translate to linear equations in unknowns and solve the system to get a complete solution.      "
},
{
  "id": "tab-particular-sols",
  "level": "2",
  "url": "s-recurrence-relations.html#tab-particular-sols",
  "type": "Table",
  "number": "13.1.17",
  "title": "Particular solutions for given right-hand sides",
  "body": " Particular solutions for given right-hand sides    Right Hand Side,  Form of Particular Solution,    Constant,  Constant,    Linear Function,  Linear Function,    degree polynomial,  degree polynomial,    exponential function,  exponential function,    "
},
{
  "id": "ex-nhrr-solution-example-1",
  "level": "2",
  "url": "s-recurrence-relations.html#ex-nhrr-solution-example-1",
  "type": "Example",
  "number": "13.1.18",
  "title": "Solution of a Nonhomogeneous First Order Recurrence Relation.",
  "body": " Solution of a Nonhomogeneous First Order Recurrence Relation  Solve , with .     The associated homogeneous relation, has the characteristic equation ; therefore, . The homogeneous solution is .    Since the right-hand side is a constant, we guess that the particular solution will be a constant, .    If we substitute into the recurrence relation, we get , or . Therefore, .    The general solution of the recurrence relation is The initial condition will give us one equation to solve in order to determine . Therefore, and .     "
},
{
  "id": "ex-nhrr-solution-example-2",
  "level": "2",
  "url": "s-recurrence-relations.html#ex-nhrr-solution-example-2",
  "type": "Example",
  "number": "13.1.19",
  "title": "Solution of a Nonhomogeneous Second Order Recurrence Relation.",
  "body": " Solution of a Nonhomogeneous Second Order Recurrence Relation  Consider with and .     From , we know that . Caution:Don't apply the initial conditions to until you add !    Since the right-hand side is a linear polynomial, is linear; that is, .    Substitution into the recurrence relation yields:  Two polynomials are equal only if their coefficients are equal. Therefore,     Use the general solution and the initial conditions to get a final solution:    Therefore, .     "
},
{
  "id": "ss-solution-of-nonhomogeneous-relations-8",
  "level": "2",
  "url": "s-recurrence-relations.html#ss-solution-of-nonhomogeneous-relations-8",
  "type": "Note",
  "number": "13.1.20",
  "title": "A quick note on interest rates.",
  "body": " A quick note on interest rates  When a quantity, such as a savings account balance, is increased by some fixed percent, it is most easily computed with a multiplier. In the case of an increase, the multiplier is 1.08 because any original amount , has added to it, so that the new balance is .  Another example is that if the interest rate is , the multiplier would be 1.035. This presumes that the interest is applied at the end of year for annual interest, often called simple interest . If the interest is applied monthly, and we assume a simplifed case where each month has the same length, the multiplier after every month would be . After a year passes, this multiplier would be applied 12 times, which is the same as multiplying by . That increase from 1.035 to 1.03557 is the effect of compound interest .  "
},
{
  "id": "ex-a-novel-annuity",
  "level": "2",
  "url": "s-recurrence-relations.html#ex-a-novel-annuity",
  "type": "Example",
  "number": "13.1.21",
  "title": "A Sort of Annuity.",
  "body": " A Sort of Annuity  Suppose you open a savings account that pays an annual interest rate of . In addition, suppose you decide to deposit one dollar when you open the account, and you intend to double your deposit each year. Let be your balance after years. can be described by the relation , with . If, instead of doubling the deposit each year, you deposited a constant amount, , the term would be replaced with . A sequence of regular deposits such as this is called a simple annuity.  Returning to the original situation,          should be of the form .    Therefore .       Therefore, .     "
},
{
  "id": "ex-matching-roots",
  "level": "2",
  "url": "s-recurrence-relations.html#ex-matching-roots",
  "type": "Example",
  "number": "13.1.22",
  "title": "Matching Roots.",
  "body": " Matching Roots  Find the general solution to .     The characteristic roots of the associated homogeneous relation are and 4. Therefore, .    A function of the form will not be a particular solution of the nonhomogeneous relation since it solves the associated homogeneous relation. When the right-hand side involves an exponential function with a base that equals a characteristic root,you should multiply your guess at a particular solution by . Our guess at would then be . See for a more complete description of this rule.    Substitute into the recurrence relation for : Each term on the left-hand side has a factor of  Therefore, .    The general solution to the recurrence relation is      "
},
{
  "id": "obs-matching-base",
  "level": "2",
  "url": "s-recurrence-relations.html#obs-matching-base",
  "type": "Observation",
  "number": "13.1.23",
  "title": "When the base of right-hand side is equal to a characteristic root.",
  "body": " When the base of right-hand side is equal to a characteristic root  If the right-hand side of a nonhomogeneous relation involves an exponential with base , and is also a characteristic root of multiplicity , then multiply your guess at a particular solution as prescribed in by , where is the index of the sequence.  "
},
{
  "id": "ex-base-match",
  "level": "2",
  "url": "s-recurrence-relations.html#ex-base-match",
  "type": "Example",
  "number": "13.1.24",
  "title": "Examples of matching bases.",
  "body": " Examples of matching bases     If , the characteristic roots are 4 and 5. Since 5 matches the base of the right side, will take the form .    If the only characteristic root is 3, but it is a double root (multiplicity 2). Therefore, the form of the particular solution is .    If , the characteristic roots are and 4. The form of the particular solution will be .    If , the characteristic roots are 1 and 8. If the right-hand side is a polynomial, as it is in this case, then the exponential factor can be introduced. The particular solution will take the form .     "
},
{
  "id": "exercises-13-1-2-2",
  "level": "2",
  "url": "s-recurrence-relations.html#exercises-13-1-2-2",
  "type": "Exercise",
  "number": "13.1.5.1",
  "title": "",
  "body": "  , ,      "
},
{
  "id": "exercises-13-1-2-3",
  "level": "2",
  "url": "s-recurrence-relations.html#exercises-13-1-2-3",
  "type": "Exercise",
  "number": "13.1.5.2",
  "title": "",
  "body": "  , ,  "
},
{
  "id": "exercises-13-1-2-4",
  "level": "2",
  "url": "s-recurrence-relations.html#exercises-13-1-2-4",
  "type": "Exercise",
  "number": "13.1.5.3",
  "title": "",
  "body": " ,      "
},
{
  "id": "exercises-13-1-2-5",
  "level": "2",
  "url": "s-recurrence-relations.html#exercises-13-1-2-5",
  "type": "Exercise",
  "number": "13.1.5.4",
  "title": "",
  "body": "  , ,  "
},
{
  "id": "exercises-13-1-2-6",
  "level": "2",
  "url": "s-recurrence-relations.html#exercises-13-1-2-6",
  "type": "Exercise",
  "number": "13.1.5.5",
  "title": "",
  "body": "        "
},
{
  "id": "exercises-13-1-2-7",
  "level": "2",
  "url": "s-recurrence-relations.html#exercises-13-1-2-7",
  "type": "Exercise",
  "number": "13.1.5.6",
  "title": "",
  "body": " , ,  "
},
{
  "id": "exercises-13-1-2-8",
  "level": "2",
  "url": "s-recurrence-relations.html#exercises-13-1-2-8",
  "type": "Exercise",
  "number": "13.1.5.7",
  "title": "",
  "body": "        "
},
{
  "id": "exercises-13-1-2-9",
  "level": "2",
  "url": "s-recurrence-relations.html#exercises-13-1-2-9",
  "type": "Exercise",
  "number": "13.1.5.8",
  "title": "",
  "body": "    "
},
{
  "id": "exercises-13-1-2-10",
  "level": "2",
  "url": "s-recurrence-relations.html#exercises-13-1-2-10",
  "type": "Exercise",
  "number": "13.1.5.9",
  "title": "",
  "body": "        "
},
{
  "id": "exercises-13-1-2-11",
  "level": "2",
  "url": "s-recurrence-relations.html#exercises-13-1-2-11",
  "type": "Exercise",
  "number": "13.1.5.10",
  "title": "",
  "body": "  , ,  "
},
{
  "id": "exercises-13-1-2-12",
  "level": "2",
  "url": "s-recurrence-relations.html#exercises-13-1-2-12",
  "type": "Exercise",
  "number": "13.1.5.11",
  "title": "",
  "body": "  , ,      "
},
{
  "id": "exercises-13-1-3",
  "level": "2",
  "url": "s-recurrence-relations.html#exercises-13-1-3",
  "type": "Exercise",
  "number": "13.1.5.12",
  "title": "",
  "body": " Find a closed form expression for in .  "
},
{
  "id": "exercises-13-1-4",
  "level": "2",
  "url": "s-recurrence-relations.html#exercises-13-1-4",
  "type": "Exercise",
  "number": "13.1.5.13",
  "title": "",
  "body": "    Find a closed form expression for the terms of the Fibonacci sequence (see ).    The sequence was defined by = the number of strings of zeros and ones with length having no consecutive zeros ( (c)). Its recurrence relation is the same as that of the Fibonacci sequence. Determine a closed form expression for , .         The characteristic equation is , which has solutions and , It is useful to point out that and . The general solution is . Using the initial conditions, we obtain the system: and . The solution to this system is and   Therefore the final solution is          "
},
{
  "id": "exercises-13-1-5",
  "level": "2",
  "url": "s-recurrence-relations.html#exercises-13-1-5",
  "type": "Exercise",
  "number": "13.1.5.14",
  "title": "",
  "body": " If , , then can be described with the recurrence relation . For each of the following sequences that are defined using a summation, find a closed form expression:      ,    ,    ,     ,     "
},
{
  "id": "exercises-13-1-6",
  "level": "2",
  "url": "s-recurrence-relations.html#exercises-13-1-6",
  "type": "Exercise",
  "number": "13.1.5.15",
  "title": "",
  "body": " Let be the number of ways that the set , , can be partitioned into two nonempty subsets.     Find a recurrence relation for . (Hint: It will be a first-order linear relation.)    Solve the recurrence relation.         For each two-block partition of , there are two partitions we can create when we add , but there is one additional two-block partition to count for which one block is . Therefore,          "
},
{
  "id": "exercises-13-1-7",
  "level": "2",
  "url": "s-recurrence-relations.html#exercises-13-1-7",
  "type": "Exercise",
  "number": "13.1.5.16",
  "title": "",
  "body": " If you were to deposit a certain amount of money at the end of each year for a number of years, this sequence of payments would be called an annuity (see ).   Using a recurrence relation, find a closed form expression for the balance or value of an annuity that consists of payments of dollars at a rate of interest of . Note that for a normal annuity, the first payment is made after one year.    With an interest rate of 5.5 percent, how much would you need to deposit into an annuity to have a value of one million dollars after 18 years?    The payment of a loan is a form of annuity in which the initial value is some negative amount (the amount of the loan) and the annuity ends when the value is raised to zero. How much could you borrow if you can afford to pay $5,000 per year for 25 years at 11 percent interest?    "
},
{
  "id": "exercises-13-1-8",
  "level": "2",
  "url": "s-recurrence-relations.html#exercises-13-1-8",
  "type": "Exercise",
  "number": "13.1.5.17",
  "title": "",
  "body": " Suppose that is a small positive number. Consider the recurrence relation , with initial conditions and . If is small enough, we might consider approximating the relation by replacing with 1 and with 0. Solve the original relation and its approximation. Let a be the solution of the approximation. Compare closed form expressions for and . Their forms are very different because the characteristic roots of the original relation were close together and the approximation resulted in one double characteristic root.If characteristic roots of a relation are relatively far apart, this problem will not occur. For example, compare the general solutions of and .  "
},
{
  "id": "s-some-common-rrs",
  "level": "1",
  "url": "s-some-common-rrs.html",
  "type": "Section",
  "number": "13.2",
  "title": "Some Common Recurrence Relations",
  "body": " Some Common Recurrence Relations    In this section we intend to examine a variety of recurrence relations that are not finite-order linear with constant coefficients. For each part of this section, we will consider a concrete example, present a solution, and, if possible, examine a more general form of the original relation.    A First Basic Example  Consider the homogeneous first-order linear relation without constant coefficients, , , with initial condition . Upon close examination of this relation, we see that the th term is times the term, which is a property of factorial. is a solution of this relation, for if , In addition, since , the initial condition is satisfied. It should be pointed out that from a computational point of view, our solution really isn't much of an improvement since the exact calculation of takes multiplications.  If we examine a similar relation,  with , a table of values for suggests a possible solution: The exponent of 2 in is growing according to the relation with . Thus and . Note that could also be written as , for , but this is not a closed form expression.  In general, the relation for with , where is a function that is defined for all , has the solution  This product form of is not a closed form expression because as grows, the number of multiplications grow. Thus, it is really not a true solution. Often, as for above, a closed form expression can be derived from the product form.    An Analysis of the Binary Search Algorithm   Suppose you intend to use a binary search algorithm (see ) on lists of zero or more sorted items, and that the items are stored in an array, so that you have easy access to each item. A natural question to ask is How much time will it take to complete the search? When a question like this is asked, the time we refer to is often the so-called worst-case time. That is, if we were to search through items, what is the longest amount of time that we will need to complete the search? In order to make an analysis such as this independent of the computer to be used, time is measured by counting the number of steps that are executed. Each step (or sequence of steps) is assigned an absolute time, or weight; therefore, our answer will not be in seconds, but in absolute time units. If the steps in two different algorithms are assigned weights that are consistent, then analyses of the algorithms can be used to compare their relative efficiencies. There are two major steps that must be executed in a call of the binary search algorithm:     If the lower index is less than or equal to the upper index, then the middle of the list is located and its key is compared to the value that you are searching for.    In the worst case, the algorithm must be executed with a list that is roughly half as large as in the previous execution. If we assume that Step 1 takes one time unit and is the worst-case time for a list of items, then For simplicity, we will assume that even though the conditions of Step 1 must be evaluated as false if . You might wonder why is truncated in . If is odd, then for some , the middle of the list will be the item, and no matter what half of the list the search is directed to, the reduced list will have items. On the other hand, if is even, then for . The middle of the list will be the item, and the worst case will occur if we are directed to the items that come after the middle (the through items). Again the reduced list has items.     Solution to and . To determine , the easiest case is when is a power of two. If we compute , , by iteration, our results are The pattern that is established makes it clear that . This result would seem to indicate that every time you double the size of your list, the search time increases by only one unit.  A more complete solution can be obtained if we represent in binary form. For each , there exists a non-negative integer such that For example, if , ; therefore, . If satisfies \\ , its binary representation requires digits. For example, = .  In general, . where . Note that in this form, is easy to describe: it is the digit binary number  Therefore, .  From the pattern that we've just established, reduces to . A formal inductive proof of this statement is possible. However, we expect that most readers would be satisfied with the argument above. Any skeptics are invited to provide the inductive proof.  For those who prefer to see a numeric example, suppose .   Our general conclusion is that the solution to and is that for , , where .  A less cumbersome statement of this fact is that . For example, .    Review of Logarithms  Logarithms  Any discussion of logarithms must start by establishing a base, which can be any positive number other than 1. With the exception of , our base will be 2. We will see that the use of a different base (10 and are the other common ones) only has the effect of multiplying each logarithm by a constant. Therefore, the base that you use really isn't very important. Our choice of base 2 logarithms is convenient for the problems that we are considering.   Base 2 logarithm  Logarithm, base 2   The base 2 logarithm of a positive number represents an exponent and is defined by the following equivalence for any positive real numbers . .     Plot of the base 2 logarithm function   Plot of the log base 2 function from to 9    For example, because and because . A graph of the function in shows that if , the ; that is, when increases, also increases. However, if we move from to , only increases from 10 to 11. This slow rate of increase of the logarithm function is an important point to remember. An algorithm acting on pieces of data that can be executed in time units can handle significantly larger sets of data than an algorithm that can be executed in or time units. The graph of would show the same behavior.  A few more properties that we will use in subsequent discussions involving logarithms are summarized in the following theorem.   Fundamental Properties of Logarithms   Logarithms  Properties    Let and be positive real numbers, and a real number.      Logarithms base   Logarithm  General Base     Logarithm, base of    If , , then for ,     How logarithms with different bases are related   Let , . Then for all , . Therefore, if , base b logarithms can be computed from base 2 logarithms by dividing by the positive scaling factor . If , this scaling factor is negative.    By an analogue of , . Therefore, if we take the base 2 logarithm of both sides of this equality we get: Finally, divide both sides of the last equation by .      and .     Returning to the binary search algorithm, we can derive the final expression for using the properties of logarithms, including that the logarithm function is increasing so that inequalities are maintained when taking logarithms of numbers.     We can apply several of these properties of logarithms to get an alternate expression for :   If the time that was assigned to Step 1 of the binary search algorithm is changed, we wouldn't expect the form of the solution to be very different. If with , then .  A further generalization would be to add a coefficient to : with , where , and is not quite as simple to derive. First, if we consider values of that are powers of 2: If is not a power of 2, by reasoning that is identical to what we used to and , where .  The first term of this expression is a geometric sum, which can be written in closed form. Let be that sum: We've multiplied each term of by and aligned the identical terms in and . Now if we subtract the two equations, Therefore, .  A closed form expression for is      Analysis of Bubble Sort and Merge Sort  Bubble Sort  Merge Sort  The efficiency of any search algorithm such as the binary search relies on fact that the search list is sorted according to a key value and that the search is based on the key value. There are several methods for sorting a list. One example is the bubble sort. You might be familiar with this one since it is a popular first sorting algorithm. A time analysis of the algorithm shows that if is the worst-case time needed to complete the bubble sort on items, then and . The solution of this relation is a quadratic function . The growth rate of a quadratic function such as this one is controlled by its squared term. Any other terms are dwarfed by it as gets large. For the bubble sort, this means that if we double the size of the list that we are to sort, changes to and so becomes . Therefore, the time needed to do a bubble sort is quadrupled. One alternative to bubble sort is the merge sort. Here is a simple version of this algorithm for sorting , . If , the list is sorted trivially. If then:     Divide into and .    Sort and using a merge sort.    Merge the sorted lists and into one sorted list. If the sort is to be done in descending order of key values, you continue to choose the higher key value from the fronts of and and place them in the back of .     Note that will always have items and will have items; thus, if is odd, gets one more item than . We will assume that the time required to perform Step 1 of the algorithm is insignificant compared to the other steps; therefore, we will assign a time value of zero to this step. Step 3 requires roughly comparisons and movements of items from and to ; thus, its time is proportional to . For this reason, we will assume that Step 3 takes time units. Since Step 2 requires time units, with the initial condition   Instead of an exact solution of these equations, we will be content with an estimate for . First, consider the case of , :   Thus, if is a power of 2, . Now if, for some , , then . This can be proved by induction on . As increases from to , increases from to and is slightly larger than . The discrepancy is small enough so that can be considered a solution of and for the purposes of comparing the merge sort with other algorithms. compares with for selected values of .   Comparison of Times for Bubble Sort and Merge Sort    n          10  45  34    50  1225  283    100  4950  665    500  124750  4483    1000  499500  9966       Derangements  Derangement  A derangement is a permutation on a set that has no fixed points . Here is a formal definition:   Derangement   A derangement of a nonempty set is a permutation of (i.e., a bijection from into ) such that for all .    If , an interesting question might be How many derangements are there of ? We know that our answer is bounded above by . We can also expect our answer to be quite a bit smaller than since is the image of itself for of the permutations of .  Let be the number of derangements of . Our answer will come from discovering a recurrence relation on . Suppose that . If we are to construct a derangement of , , then . Thus, the image of can be selected in different ways. No matter which of the choices we make, we can complete the definition of in one of two ways. First, we can decide to make , leaving ways of completing the definition of , since will be a derangement of . Second, if we decide to select , each of the derangements of can be used to define . If is a derangement of such that , then define f by   Note that with our second construction of , , while in the first construction, . Therefore, no derangement of with can be constructed by both methods.  To recap our result, we see that is determined by first choosing one of images of and then constructing the remainder of in one of ways. Therefore,   This homogeneous second-order linear relation with variable coefficients, together with the initial conditions and , completely defines . Instead of deriving a solution of this relation by analytical methods, we will give an empirical derivation of an approximation of . Since the derangements of are drawn from a pool of permutations, we will see what percentage of these permutations are derangements by listing the values of , , and . The results we observe will indicate that as grows, hardly changes at all. If this quotient is computed to eight decimal places, for , . The reciprocal of this number, which seems to be tending toward, is, to eight places, 2.7182818. This number appears in so many places in mathematics that it has its own name, . An approximate solution of our recurrence relation on is then .     Exercises   Solve the following recurrence relations. Indicate whether your solution is an improvement over iteration.      , .     , .     , , .          !    , an improvement.     !, no improvement.       Prove that if , . (Hint: Consider the cases of odd and even separately.)    Solve as completely as possible:     , .    , .     , . (Hint: Write in octal form.)                           Prove by induction that if , , and , , then .   Prove by induction on .    Use the substitution to solve for , with , , and .   The indicated substitution yields . Since , for all . Therefore .    Use the substitution to solve for , with .    Solve as completely as possible:      , , .     , , .         A good approximation to the solution of this recurrence relation is based on the following observation: is a power of a power of two; that is, is , where , then . By applying this recurrence relation times we obtain . Going back to the original form of , or . We would expect that in general, is . We do not see any elementary method for arriving at an exact solution.    Suppose that is a positive integer with . Then can be written in binary form, with and is equal to the sum  . If , then we can estimate this sum to be between and . Therefore, .       Suppose Step 1 of the merge sort algorithm did take a significant amount of time. Assume it takes 0.1 time unit, independent of the value of .     Write out a new recurrence relation for that takes this factor into account.    Solve for , .    Assuming the solution for powers of 2 is a good estimate for all , compare your result to the solution in the text. As gets large, is there really much difference?       "
},
{
  "id": "def-log-base-2",
  "level": "2",
  "url": "s-some-common-rrs.html#def-log-base-2",
  "type": "Definition",
  "number": "13.2.1",
  "title": "Base 2 logarithm.",
  "body": " Base 2 logarithm  Logarithm, base 2   The base 2 logarithm of a positive number represents an exponent and is defined by the following equivalence for any positive real numbers . .   "
},
{
  "id": "fig-log-2-plot",
  "level": "2",
  "url": "s-some-common-rrs.html#fig-log-2-plot",
  "type": "Figure",
  "number": "13.2.2",
  "title": "",
  "body": " Plot of the base 2 logarithm function   Plot of the log base 2 function from to 9   "
},
{
  "id": "theorem-log-properties",
  "level": "2",
  "url": "s-some-common-rrs.html#theorem-log-properties",
  "type": "Theorem",
  "number": "13.2.3",
  "title": "Fundamental Properties of Logarithms.",
  "body": " Fundamental Properties of Logarithms   Logarithms  Properties    Let and be positive real numbers, and a real number.    "
},
{
  "id": "def-logarithm-general-base",
  "level": "2",
  "url": "s-some-common-rrs.html#def-logarithm-general-base",
  "type": "Definition",
  "number": "13.2.4",
  "title": "Logarithms base <span class=\"process-math\">\\(b\\)<\/span>.",
  "body": " Logarithms base   Logarithm  General Base     Logarithm, base of    If , , then for ,   "
},
{
  "id": "theorem-logs-related",
  "level": "2",
  "url": "s-some-common-rrs.html#theorem-logs-related",
  "type": "Theorem",
  "number": "13.2.5",
  "title": "How logarithms with different bases are related.",
  "body": " How logarithms with different bases are related   Let , . Then for all , . Therefore, if , base b logarithms can be computed from base 2 logarithms by dividing by the positive scaling factor . If , this scaling factor is negative.    By an analogue of , . Therefore, if we take the base 2 logarithm of both sides of this equality we get: Finally, divide both sides of the last equation by .   "
},
{
  "id": "ss-review-of-logarithms-11",
  "level": "2",
  "url": "s-some-common-rrs.html#ss-review-of-logarithms-11",
  "type": "Note",
  "number": "13.2.6",
  "title": "",
  "body": "  and .  "
},
{
  "id": "table-sort-analysis",
  "level": "2",
  "url": "s-some-common-rrs.html#table-sort-analysis",
  "type": "Table",
  "number": "13.2.7",
  "title": "Comparison of Times for Bubble Sort and Merge Sort",
  "body": " Comparison of Times for Bubble Sort and Merge Sort    n          10  45  34    50  1225  283    100  4950  665    500  124750  4483    1000  499500  9966    "
},
{
  "id": "def-derangement",
  "level": "2",
  "url": "s-some-common-rrs.html#def-derangement",
  "type": "Definition",
  "number": "13.2.8",
  "title": "Derangement.",
  "body": " Derangement   A derangement of a nonempty set is a permutation of (i.e., a bijection from into ) such that for all .   "
},
{
  "id": "exercises-13-2-2",
  "level": "2",
  "url": "s-some-common-rrs.html#exercises-13-2-2",
  "type": "Exercise",
  "number": "13.2.5.1",
  "title": "",
  "body": " Solve the following recurrence relations. Indicate whether your solution is an improvement over iteration.      , .     , .     , , .          !    , an improvement.     !, no improvement.     "
},
{
  "id": "exercises-13-2-3",
  "level": "2",
  "url": "s-some-common-rrs.html#exercises-13-2-3",
  "type": "Exercise",
  "number": "13.2.5.2",
  "title": "",
  "body": " Prove that if , . (Hint: Consider the cases of odd and even separately.)  "
},
{
  "id": "exercises-13-2-4",
  "level": "2",
  "url": "s-some-common-rrs.html#exercises-13-2-4",
  "type": "Exercise",
  "number": "13.2.5.3",
  "title": "",
  "body": " Solve as completely as possible:     , .    , .     , . (Hint: Write in octal form.)                         "
},
{
  "id": "exercises-13-2-5",
  "level": "2",
  "url": "s-some-common-rrs.html#exercises-13-2-5",
  "type": "Exercise",
  "number": "13.2.5.4",
  "title": "",
  "body": " Prove by induction that if , , and , , then .   Prove by induction on .  "
},
{
  "id": "exercises-13-2-6",
  "level": "2",
  "url": "s-some-common-rrs.html#exercises-13-2-6",
  "type": "Exercise",
  "number": "13.2.5.5",
  "title": "",
  "body": " Use the substitution to solve for , with , , and .   The indicated substitution yields . Since , for all . Therefore .  "
},
{
  "id": "exercises-13-2-7",
  "level": "2",
  "url": "s-some-common-rrs.html#exercises-13-2-7",
  "type": "Exercise",
  "number": "13.2.5.6",
  "title": "",
  "body": " Use the substitution to solve for , with .  "
},
{
  "id": "exercises-13-2-8",
  "level": "2",
  "url": "s-some-common-rrs.html#exercises-13-2-8",
  "type": "Exercise",
  "number": "13.2.5.7",
  "title": "",
  "body": " Solve as completely as possible:      , , .     , , .         A good approximation to the solution of this recurrence relation is based on the following observation: is a power of a power of two; that is, is , where , then . By applying this recurrence relation times we obtain . Going back to the original form of , or . We would expect that in general, is . We do not see any elementary method for arriving at an exact solution.    Suppose that is a positive integer with . Then can be written in binary form, with and is equal to the sum  . If , then we can estimate this sum to be between and . Therefore, .     "
},
{
  "id": "exercises-13-2-9",
  "level": "2",
  "url": "s-some-common-rrs.html#exercises-13-2-9",
  "type": "Exercise",
  "number": "13.2.5.8",
  "title": "",
  "body": " Suppose Step 1 of the merge sort algorithm did take a significant amount of time. Assume it takes 0.1 time unit, independent of the value of .     Write out a new recurrence relation for that takes this factor into account.    Solve for , .    Assuming the solution for powers of 2 is a good estimate for all , compare your result to the solution in the text. As gets large, is there really much difference?     "
},
{
  "id": "s-generating-functions",
  "level": "1",
  "url": "s-generating-functions.html",
  "type": "Section",
  "number": "13.3",
  "title": "Generating Functions",
  "body": " Generating Functions  Generating Functions    This section contains an introduction to the topic of generating functions and how they are used to solve recurrence relations, among other problems. Methods that employ generating functions are based on the concept that you can take a problem involving sequences and translate it into a problem involving generating functions. Once you've solved the new problem, a translation back to sequences gives you a solution of the original problem.  This section covers:   The definition of a generating function.    Solution of a recurrence relation using generating functions to identify the skills needed to use generating functions.    An introduction and\/or review of the skills identified in point 2.    Some applications of generating functions.      Definition   Generating Function of a Sequence  Generating Function   The generating function of a sequence with terms , is the infinite sum The domain and codomain of generating functions will not be of any concern to us since we will only be performing algebraic operations on them.     First Examples     If , , then We can get a closed form expression for by observing that . Therefore, .    Finite sequences have generating functions. For example, the sequence of binomial coefficients , , , , has generating function by application of the binomial formula.    If , . Note that the index that is used in the summation has no significance. Also, note that the lower limit of the summation could start at 1 since .        Solution of a Recurrence Relation Using Generating Functions  We illustrate the use of generating functions by solving , , with and .     Translate the recurrence relation into an equation about generating functions.  Let , , with and . Therefore,     Solve for the generating function of the unknown sequence, .   Close examination of the three sums above shows:      since and .            Therefore,        Determine the sequence whose generating function is the one we got in Step 2.  For our example, we need to know one general fact about the closed form expression of an exponential sequence (a proof will be given later):   Now, in order to recognize in our example, we must write our closed form expression for as a sum of terms like above. Note that the denominator of can be factored: If you look at this last expression for closely, you can imagine how it could be the result of addition of two fractions, where and are two real numbers that must be determined. Starting on the right of , it should be clear that the sum, for any and , would look like the left-hand side. The process of finding values of and that make true is called the partial fractions decomposition of the left-hand side:   Therefore, and   We can apply to each term of :     is the generating function for    is the generating function for .     Therefore, .     From this example, we see that there are several skills that must be mastered in order to work with generating functions. You must be able to:     Manipulate summation expressions and their indices (in Step 2).    Solve algebraic equations and manipulate algebraic expressions, including partial function decompositions (Steps 2 and 3).    Identify sequences with their generating functions (Steps 1 and 3).     We will concentrate on the last skill first, a proficiency in the other skills is a product of doing as many exercises and reading as many examples as possible.  First, we will identify the operations on sequences and on generating functions.    Operations on Sequences   Operations on Sequences   Sequences  Operations on,     pop     push     Convolution of sequences and    Let and be sequences of numbers and let be a real number. Define the sum , the scalar product , the product , the convolution , the pop operation (read pop ), and the push operation (read push ) term-wise for by          If one imagines a sequence to be a matrix with one row and an infinite number of columns, and are exactly as in matrix addition and scalar multiplication. There is no obvious similarity between the other operations and matrix operations.  The pop and push operations can be understood by imagining a sequence to be an infinite stack of numbers with at the top, next, etc., as in a. The sequence is obtained by popping S(0) from the stack, leaving a stack as in b, with S(1) at the top, S(2) next, etc. The sequence is obtained by placing a zero at the top of the stack, resulting in a stack as in c. Keep these figures in mind when we discuss the pop and push operations.   Stack interpretation of pop and push operations   Illustration of stack push and pop operations     Some Sequence Operations  If , , , and :                                                                        Note that .   Multiple Pop and Push  Multiple Pop and Push:    Multiple pop operation on     Multiple push operation on    If S is a sequence of numbers and a positive integer greater than 1, define Similarly, define     In general, and     Operations on Generating Functions   Generating Functions  Operations on,    Operations on Generating Functions   Generating Functions  Operations on,    If and are generating functions and is a real number, then the sum , scalar product , product , and monomial product , are generating functions, where   The last sum is obtained by substituting for in the previous sum.     Some operations on generating functions  If and then      Note: , and from .   Now we establish the connection between the operations on sequences and generating functions. Let and be sequences and let be a real number.  In words, says that the generating function of the sum of two sequences equals the sum of the generating functions of those sequences. Take the time to write out the other four identities in your own words. From the previous examples, these identities should be fairly obvious, with the possible exception of the last two. We will prove as part of the next theorem and leave the proof of to the interested reader. Note that there is no operation on generating functions that is related to sequence multiplication; that is, cannot be simplified.   Generating functions related to Pop and Push   If ,           .       We prove (a) by induction and leave the proof of (b) to the reader.  Basis: Therefore, part (a) is true for .  Induction: Suppose that for some , the statement in part (a) is true: by the induction hypothesis. Now write in the last expression above as so that it fits into the finite summation:   Therefore the statement is true for .      Closed Form Expressions for Generating Functions   Generating Functions  Closed form expressions for   The most basic tool used to express generating functions in closed form is the closed form expression for the geometric series, which is an expression of the form . It can either be terminated or extended infinitely.  Finite Geometric Series:   Infinite Geometric Series:   Restrictions: and represent constants and the right sides of the two equations apply under the following conditions:     must not equal 1 in the finite case. Note that if .    In the infinite case, the absolute value of must be less than 1.     These restrictions don't come into play with generating functions. We could derive by noting that if , , then (See Exercise 10 of Section 8.3). An alternative derivation was used in Section 8.4. We will take the same steps to derive . Let . Then    Generating Functions involving Geometric Sums     If , , is an infinite geometric series with and .Therefore, .    If , 0, then .    If , then .    Let . Then .  Given a choice between the last form of and the previous sum of three fractions, we would prefer leaving it as a sum of three functions. As we saw in an earlier example, a partial fractions decomposition of a fraction such as the last expression requires some effort to produce.    If , then can be determined by multiplying the numerator and denominator by 1\/2 to obtain . We recognize this fraction as the sum of the infinite geometric series with and . Therefore .    If , then we expand to . Therefore ,  , , and, since there are no higher-powered terms, , . A more concise way of describing is , since is interpreted as 0 of .      lists some closed form expressions for the generating functions of some common sequences.   Closed Form Expressions of some Generating Functions    Sequence  Generating Function                                                              Another Complete Solution  Solve , , with and . The solution will be derived using the same steps that were used earlier in this section, with one variation.     Translate to an equation about generating functions. First, we change the index of the recurrence relation by substituting for . The result is , . Now, if , then is the zero sequence, which has a zero generating function. Furthermore, . Therefore,    We want to now solve the following equation for : Multiply by : Expand and collect all terms involving on one side of the equation: Therefore,    Determine S from its generating function. thus a partial fraction decomposition of would be: Therefore, and . The solution of this set of equations is and . . In conclusion, since , .       An Application to Counting  Let and let be the set of all strings of length zero or more that can be made using each of the elements of zero or more times. By the generalized rule of products, there are such strings that have length , , Suppose that is the set of strings of length with the property that all of the 's and 's precede all of the 's, 's, and 's. Thus , but . Let . A closed form expression for can be obtained by recognizing as the convolution of two sequences. To illustrate our point, we will consider the calculation of .  Note that if a string belongs to , it starts with characters from and is followed by characters from . Let be the number of strings of 's and 's with length and let be the number of strings of 's, 's, and 's with length . By the generalized rule of products, and . Among the strings in are the ones that start with two 's and 's and end with 's, 's, and 's. There are such strings. By the law of addition, Note that the sixth term of R is the sixth term of the convolution of with , . Think about the general situation for a while and it should be clear that . Now, our course of action will be to:     Determine the generating functions of and ,    Multiply and to obtain \\, and    Determine on the basis of .        , and         To recognize from , we must do a partial fractions decomposition: Therefore, and . The solution of this pair of equations is and . Since , which is the sum of the generating functions of and ,   For example, . Naturally, this equals the sum that we get from . To put this number in perspective, the total number of strings of length 6 with no restrictions is , and . Therefore approximately 13 percent of the strings of length 6 satisfy the conditions of the problem.        Extra for Experts  The remainder of this section is intended for readers who have had, or who intend to take, a course in combinatorics. We do not advise that it be included in a typical course. The method that was used in the previous example is a very powerful one and can be used to solve many problems in combinatorics. We close this section with a general description of the problems that can be solved in this way, followed by some examples.  Consider the situation in which , , , are actions that must be taken, each of which results in a well-defined outcome. For each define to be the set of possible outcomes of . We will assume that each outcome can be quantified in some way and that the quantification of the elements of is defined by the function . Thus, each outcome has a non-negative integer associated with it. Finally, define a frequency function such that is the number of elements of that have a quantification of .  Now, based on these assumptions, we can define the problems that can be solved. If a process is defined as a sequence of actions as above, and if the outcome of , which would be an element of , is quantified by then the frequency function, , for is the convolution of the frequency functions for , , , , which has a generating function equal to the product of the generating functions of the frequency functions , , , . That is,    Rolling Two Dice  Suppose that you roll a die two times and add up the numbers on the top face for each roll. Since the faces on the die represent the integers 1 through 6, the sum must be between 2 and 12. How many ways can any one of these sums be obtained? Obviously, 2 can be obtained only one way, with two 1's. There are two sequences that yield a sum of 3: 1-2 and 2-1. To obtain all of the frequencies with which the numbers 2 through 12 can be obtained, we set up the situation as follows. For ; is the rolling of the die for the time. and is defined by . Since each number appears on a die exactly once, the frequency function is if , and otherwise. The process of rolling the die two times is quantified by adding up the ; that is, . The generating function for the frequency function of rolling the die two times is then   Now, to get , just read the coefficient of . For example, the coefficient of is 4, so there are four ways to roll a total of 5.  To apply this method, the crucial step is to decompose a large process in the proper way so that it fits into the general situation that we've described.    Distribution of a Committee  Suppose that an organization is divided into three geographic sections, A, B, and C. Suppose that an executive committee of 11 members must be selected so that no more than 5 members from any one section are on the committee and that Sections A, B, and C must have minimums of 3, 2, and 2 members, respectively, on the committee. Looking only at the number of members from each section on the committee, how many ways can the committee be made up? One example of a valid committee would be 4 A's, 4 B's, and 3 C's.  Let be the action of deciding how many members (not who) from Section A will serve on the committee. and . The frequency function, , is defined by if , with otherwise. is then . Similarly, . Since the committee must have 11 members, our answer will be the coefficient of in , which is 10.      Exercises for Section 10.3   What sequences have the following generating functions?     1                                               What sequences have the following generating functions?                            Find closed form expressions for the generating functions of the following sequences:          , where for , with and .    The Fibonacci sequence: , , with .                           Find closed form expressions for the generating functions of the following sequences:      for and for .     , where for , with and .     , where for , with .       For each of the following expressions, find the partial fraction decomposition and identify the sequence having the expression as a generating function.                                           Find the partial fraction decompositions and identify the sequence having the following expressions:                       Given that and , what is the term of the generating function of each of the following sequences:                                                    Given that and , what is the term of the generating function of each of the following sequences:                            A game is played by rolling a die five times. For the roll, one point is added to your score if you roll a number higher than . Otherwise, your score is zero for that roll. For example, the sequence of rolls gives you a total score of three; while a sequence of 1,2,3,4,5 gives you a score of zero. Of the possible sequences of rolls, how many give you a score of zero?, of one? of five?   Coefficients of through in       Suppose that you roll a die ten times in a row and record the square of each number that you roll. How many ways could the sum of the squares of your rolls equal 40? What is the most common outcome?    "
},
{
  "id": "def-generating-function",
  "level": "2",
  "url": "s-generating-functions.html#def-generating-function",
  "type": "Definition",
  "number": "13.3.1",
  "title": "Generating Function of a Sequence.",
  "body": " Generating Function of a Sequence  Generating Function   The generating function of a sequence with terms , is the infinite sum The domain and codomain of generating functions will not be of any concern to us since we will only be performing algebraic operations on them.   "
},
{
  "id": "ex-first-gf-examples",
  "level": "2",
  "url": "s-generating-functions.html#ex-first-gf-examples",
  "type": "Example",
  "number": "13.3.2",
  "title": "First Examples.",
  "body": " First Examples     If , , then We can get a closed form expression for by observing that . Therefore, .    Finite sequences have generating functions. For example, the sequence of binomial coefficients , , , , has generating function by application of the binomial formula.    If , . Note that the index that is used in the summation has no significance. Also, note that the lower limit of the summation could start at 1 since .     "
},
{
  "id": "ss-solution-of-rr-using-generating-functions-3",
  "level": "2",
  "url": "s-generating-functions.html#ss-solution-of-rr-using-generating-functions-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "partial fractions decomposition "
},
{
  "id": "ops-on-sequences-2",
  "level": "2",
  "url": "s-generating-functions.html#ops-on-sequences-2",
  "type": "Definition",
  "number": "13.3.3",
  "title": "Operations on Sequences.",
  "body": " Operations on Sequences   Sequences  Operations on,     pop     push     Convolution of sequences and    Let and be sequences of numbers and let be a real number. Define the sum , the scalar product , the product , the convolution , the pop operation (read pop ), and the push operation (read push ) term-wise for by         "
},
{
  "id": "fig-pop-push",
  "level": "2",
  "url": "s-generating-functions.html#fig-pop-push",
  "type": "Figure",
  "number": "13.3.4",
  "title": "",
  "body": " Stack interpretation of pop and push operations   Illustration of stack push and pop operations   "
},
{
  "id": "ex-some-sequence-operations",
  "level": "2",
  "url": "s-generating-functions.html#ex-some-sequence-operations",
  "type": "Example",
  "number": "13.3.5",
  "title": "Some Sequence Operations.",
  "body": " Some Sequence Operations  If , , , and :                                                                       "
},
{
  "id": "def-multiple-pop-and-push",
  "level": "2",
  "url": "s-generating-functions.html#def-multiple-pop-and-push",
  "type": "Definition",
  "number": "13.3.6",
  "title": "Multiple Pop and Push.",
  "body": " Multiple Pop and Push  Multiple Pop and Push:    Multiple pop operation on     Multiple push operation on    If S is a sequence of numbers and a positive integer greater than 1, define Similarly, define    "
},
{
  "id": "sss-operations-on-generating-functions-3",
  "level": "2",
  "url": "s-generating-functions.html#sss-operations-on-generating-functions-3",
  "type": "Definition",
  "number": "13.3.7",
  "title": "Operations on Generating Functions.",
  "body": " Operations on Generating Functions   Generating Functions  Operations on,    If and are generating functions and is a real number, then the sum , scalar product , product , and monomial product , are generating functions, where   The last sum is obtained by substituting for in the previous sum.   "
},
{
  "id": "ex-some-gf-operations",
  "level": "2",
  "url": "s-generating-functions.html#ex-some-gf-operations",
  "type": "Example",
  "number": "13.3.8",
  "title": "Some operations on generating functions.",
  "body": " Some operations on generating functions  If and then      Note: , and from .  "
},
{
  "id": "gf-of-pop-push",
  "level": "2",
  "url": "s-generating-functions.html#gf-of-pop-push",
  "type": "Theorem",
  "number": "13.3.9",
  "title": "Generating functions related to Pop and Push.",
  "body": " Generating functions related to Pop and Push   If ,           .       We prove (a) by induction and leave the proof of (b) to the reader.  Basis: Therefore, part (a) is true for .  Induction: Suppose that for some , the statement in part (a) is true: by the induction hypothesis. Now write in the last expression above as so that it fits into the finite summation:   Therefore the statement is true for .   "
},
{
  "id": "ex-geometric-sums",
  "level": "2",
  "url": "s-generating-functions.html#ex-geometric-sums",
  "type": "Example",
  "number": "13.3.10",
  "title": "Generating Functions involving Geometric Sums.",
  "body": " Generating Functions involving Geometric Sums     If , , is an infinite geometric series with and .Therefore, .    If , 0, then .    If , then .    Let . Then .  Given a choice between the last form of and the previous sum of three fractions, we would prefer leaving it as a sum of three functions. As we saw in an earlier example, a partial fractions decomposition of a fraction such as the last expression requires some effort to produce.    If , then can be determined by multiplying the numerator and denominator by 1\/2 to obtain . We recognize this fraction as the sum of the infinite geometric series with and . Therefore .    If , then we expand to . Therefore ,  , , and, since there are no higher-powered terms, , . A more concise way of describing is , since is interpreted as 0 of .     "
},
{
  "id": "table-gf-closed-form",
  "level": "2",
  "url": "s-generating-functions.html#table-gf-closed-form",
  "type": "Table",
  "number": "13.3.11",
  "title": "Closed Form Expressions of some Generating Functions",
  "body": " Closed Form Expressions of some Generating Functions    Sequence  Generating Function                                                            "
},
{
  "id": "ex-another-complete-solution",
  "level": "2",
  "url": "s-generating-functions.html#ex-another-complete-solution",
  "type": "Example",
  "number": "13.3.12",
  "title": "Another Complete Solution.",
  "body": " Another Complete Solution  Solve , , with and . The solution will be derived using the same steps that were used earlier in this section, with one variation.     Translate to an equation about generating functions. First, we change the index of the recurrence relation by substituting for . The result is , . Now, if , then is the zero sequence, which has a zero generating function. Furthermore, . Therefore,    We want to now solve the following equation for : Multiply by : Expand and collect all terms involving on one side of the equation: Therefore,    Determine S from its generating function. thus a partial fraction decomposition of would be: Therefore, and . The solution of this set of equations is and . . In conclusion, since , .     "
},
{
  "id": "example-counting-application",
  "level": "2",
  "url": "s-generating-functions.html#example-counting-application",
  "type": "Example",
  "number": "13.3.13",
  "title": "An Application to Counting.",
  "body": " An Application to Counting  Let and let be the set of all strings of length zero or more that can be made using each of the elements of zero or more times. By the generalized rule of products, there are such strings that have length , , Suppose that is the set of strings of length with the property that all of the 's and 's precede all of the 's, 's, and 's. Thus , but . Let . A closed form expression for can be obtained by recognizing as the convolution of two sequences. To illustrate our point, we will consider the calculation of .  Note that if a string belongs to , it starts with characters from and is followed by characters from . Let be the number of strings of 's and 's with length and let be the number of strings of 's, 's, and 's with length . By the generalized rule of products, and . Among the strings in are the ones that start with two 's and 's and end with 's, 's, and 's. There are such strings. By the law of addition, Note that the sixth term of R is the sixth term of the convolution of with , . Think about the general situation for a while and it should be clear that . Now, our course of action will be to:     Determine the generating functions of and ,    Multiply and to obtain \\, and    Determine on the basis of .        , and         To recognize from , we must do a partial fractions decomposition: Therefore, and . The solution of this pair of equations is and . Since , which is the sum of the generating functions of and ,   For example, . Naturally, this equals the sum that we get from . To put this number in perspective, the total number of strings of length 6 with no restrictions is , and . Therefore approximately 13 percent of the strings of length 6 satisfy the conditions of the problem.     "
},
{
  "id": "ex-dice-roll",
  "level": "2",
  "url": "s-generating-functions.html#ex-dice-roll",
  "type": "Example",
  "number": "13.3.14",
  "title": "Rolling Two Dice.",
  "body": " Rolling Two Dice  Suppose that you roll a die two times and add up the numbers on the top face for each roll. Since the faces on the die represent the integers 1 through 6, the sum must be between 2 and 12. How many ways can any one of these sums be obtained? Obviously, 2 can be obtained only one way, with two 1's. There are two sequences that yield a sum of 3: 1-2 and 2-1. To obtain all of the frequencies with which the numbers 2 through 12 can be obtained, we set up the situation as follows. For ; is the rolling of the die for the time. and is defined by . Since each number appears on a die exactly once, the frequency function is if , and otherwise. The process of rolling the die two times is quantified by adding up the ; that is, . The generating function for the frequency function of rolling the die two times is then   Now, to get , just read the coefficient of . For example, the coefficient of is 4, so there are four ways to roll a total of 5.  To apply this method, the crucial step is to decompose a large process in the proper way so that it fits into the general situation that we've described.  "
},
{
  "id": "ex-committee-distribution",
  "level": "2",
  "url": "s-generating-functions.html#ex-committee-distribution",
  "type": "Example",
  "number": "13.3.15",
  "title": "Distribution of a Committee.",
  "body": " Distribution of a Committee  Suppose that an organization is divided into three geographic sections, A, B, and C. Suppose that an executive committee of 11 members must be selected so that no more than 5 members from any one section are on the committee and that Sections A, B, and C must have minimums of 3, 2, and 2 members, respectively, on the committee. Looking only at the number of members from each section on the committee, how many ways can the committee be made up? One example of a valid committee would be 4 A's, 4 B's, and 3 C's.  Let be the action of deciding how many members (not who) from Section A will serve on the committee. and . The frequency function, , is defined by if , with otherwise. is then . Similarly, . Since the committee must have 11 members, our answer will be the coefficient of in , which is 10.   "
},
{
  "id": "s-generating-functions-10-2",
  "level": "2",
  "url": "s-generating-functions.html#s-generating-functions-10-2",
  "type": "Exercise",
  "number": "13.3.7.1",
  "title": "",
  "body": " What sequences have the following generating functions?     1                                             "
},
{
  "id": "s-generating-functions-10-3",
  "level": "2",
  "url": "s-generating-functions.html#s-generating-functions-10-3",
  "type": "Exercise",
  "number": "13.3.7.2",
  "title": "",
  "body": " What sequences have the following generating functions?                          "
},
{
  "id": "s-generating-functions-10-4",
  "level": "2",
  "url": "s-generating-functions.html#s-generating-functions-10-4",
  "type": "Exercise",
  "number": "13.3.7.3",
  "title": "",
  "body": " Find closed form expressions for the generating functions of the following sequences:          , where for , with and .    The Fibonacci sequence: , , with .                         "
},
{
  "id": "s-generating-functions-10-5",
  "level": "2",
  "url": "s-generating-functions.html#s-generating-functions-10-5",
  "type": "Exercise",
  "number": "13.3.7.4",
  "title": "",
  "body": " Find closed form expressions for the generating functions of the following sequences:      for and for .     , where for , with and .     , where for , with .     "
},
{
  "id": "s-generating-functions-10-6",
  "level": "2",
  "url": "s-generating-functions.html#s-generating-functions-10-6",
  "type": "Exercise",
  "number": "13.3.7.5",
  "title": "",
  "body": " For each of the following expressions, find the partial fraction decomposition and identify the sequence having the expression as a generating function.                                         "
},
{
  "id": "s-generating-functions-10-7",
  "level": "2",
  "url": "s-generating-functions.html#s-generating-functions-10-7",
  "type": "Exercise",
  "number": "13.3.7.6",
  "title": "",
  "body": " Find the partial fraction decompositions and identify the sequence having the following expressions:                     "
},
{
  "id": "s-generating-functions-10-8",
  "level": "2",
  "url": "s-generating-functions.html#s-generating-functions-10-8",
  "type": "Exercise",
  "number": "13.3.7.7",
  "title": "",
  "body": " Given that and , what is the term of the generating function of each of the following sequences:                                                  "
},
{
  "id": "s-generating-functions-10-9",
  "level": "2",
  "url": "s-generating-functions.html#s-generating-functions-10-9",
  "type": "Exercise",
  "number": "13.3.7.8",
  "title": "",
  "body": " Given that and , what is the term of the generating function of each of the following sequences:                          "
},
{
  "id": "s-generating-functions-10-10",
  "level": "2",
  "url": "s-generating-functions.html#s-generating-functions-10-10",
  "type": "Exercise",
  "number": "13.3.7.9",
  "title": "",
  "body": " A game is played by rolling a die five times. For the roll, one point is added to your score if you roll a number higher than . Otherwise, your score is zero for that roll. For example, the sequence of rolls gives you a total score of three; while a sequence of 1,2,3,4,5 gives you a score of zero. Of the possible sequences of rolls, how many give you a score of zero?, of one? of five?   Coefficients of through in     "
},
{
  "id": "s-generating-functions-10-11",
  "level": "2",
  "url": "s-generating-functions.html#s-generating-functions-10-11",
  "type": "Exercise",
  "number": "13.3.7.10",
  "title": "",
  "body": " Suppose that you roll a die ten times in a row and record the square of each number that you roll. How many ways could the sum of the squares of your rolls equal 40? What is the most common outcome?  "
},
{
  "id": "Section14_1",
  "level": "1",
  "url": "Section14_1.html",
  "type": "Section",
  "number": "14.1",
  "title": "Revisiting Inductive Proofs",
  "body": " Revisiting Inductive Proofs     Induction is a powerful method for showing a property is true for all nonnegative integers. Induction plays a central role in discrete mathematics and computer science. In fact, its use is a defining characteristic of discrete --as opposed to continuous-- mathematics.  This section begins with a review of inductive proofs from Mathematics for Computer Science (Lehman, Leighton, and Meyer)     Ordinary Induction  Suppose there is a professor who brings a bottomless bag of assorted miniature candy bars to her large class. She offers to share the candy in the following way. First, she lines the students up in order. Next she states two rules:   The student at the beginning of the line gets a candy bar.    If a student gets a candy bar, then the following student in line also gets a candy bar.     Let's number the students by their order in line, starting the count with 0, as usual in computer science. Now we can understand the second rule as a short description of a whole sequence of statements:   If student 0 gets a candy bar, then student 1 also gets one.    If student 1 gets a candy bar, then student 2 also gets one.    If student 2 gets a candy bar, then student 3 also gets one.   Of course, this sequence has a more concise mathematical description:   So suppose you are student 17. By these rules, are you entitled to a miniature candy bar? Well, student 0 gets a candy bar by the first rule. Therefore, by the second rule, student 1 also gets one, which means student 2 gets one, which means student 3 gets one as well, and so on. By 17 applications of the professor's second rule, you get your candy bar! Of course the rules really guarantee a candy bar to every student, no matter how far back in line they may be.  The reasoning that led us to conclude that every student gets a candy bar is essentially all there is to induction.  The Induction Principle   Let be a proposition over a universe (or predicate) on the nonnegative integers. If    is true, and     for all nonnegative integers, (remember from , means IMPLIES ),   then    is true for all nonnegative integers, .        We'll refer to the induction method described above as ordinary induction when we need to distinguish it in this chapter. Formulated as a formal argument as in , this would be  Induction Rule         This Induction Rule works for the same intuitive reason that all the students get candy bars, and we hope the explanation using candy bars makes it clear why the soundness of ordinary induction can be taken for granted. In fact, the rule is so obvious that it's hard to see what more basic principle could be used to justify it. What's not so obvious is how much mileage we get by using it.   A Familiar Example   Below is the formula for the sum of the nonnegative integers up to . The formula holds for all nonnegative integers, so it is the kind of statement to which induction applies directly.    For all        To prove the theorem by induction, define predicate to be . Now the theorem can be restated as the claim that is true for all . This is great, because the Induction Principle lets us reach precisely that conclusion, provided we establish two simpler facts:    is true.     for all nonnegative integers, ,     So now our job is reduced to proving these two statements.   Basis step: The first statement follows because of the convention that a sum of zero terms is equal to 0. So is the true assertion that a sum of zero terms is equal to .   Inductive step: The second statement is more complicated. But remember a basic plan for proving the validity of any implication: assume the statement on the left and then prove the statement on the right. In this case, we assume namely, , in order to prove , which is the equation: These two equations are quite similar; in fact, adding to both sides of equation and simplifying the right side gives the equation : Thus, if > is true, then so is . This argument is valid for every nonnegative integer , so this establishes the second fact required by the induction proof. Therefore, the Induction Principle says that the predicate is true for all nonnegative integers, . The theorem is proved.      A Template for Inductive Proofs  The proof of was relatively simple, but even the most complicated induction proof follows exactly the same template. There are five components:   Define an appropriate predicate: \"Let be the statement \"For every \"    Prove that is true. This is usually easy, as in the example above. This part of the proof is called the base case or basis step .    Define an appropriate inductive hypothesis. The predicate , setting to some arbitrary is called the inductive hypothesis. The eventual conclusion of the induction argument will be that is true for all nonnegative . A clearly stated induction hypothesis is often the most important part of an induction proof, and its omission is the largest source of confused proofs by students. In the simplest cases, the induction hypothesis can be lifted straight from the proposition you are trying to prove, as we did with equation . Sometimes the induction hypothesis will involve several variables, in which case you should indicate which variable serves as (usually is used for this).    Prove that implies for every nonnegative integer . This is called the inductive step . The basic plan is always the same: assume that is true and then use this assumption to prove that is true. These two statements should be fairly similar, but bridging the gap may require some ingenuity. Whatever argument you give must be valid for every nonnegative integer , since the goal is to prove that all the following implications are true:     Invoke induction. State a conclusion, for example: Given these facts, the induction principle allows us to conclude that is true for all nonnegative . This is the logical capstone to the whole argument.     Always be sure to explicitly label the base case and the inductive step (which encompasses steps 4 and 5 above). Doing so will make your proofs clearer and will decrease the chance that you forget a key step—like checking the base case.  The proof of given above is perfectly valid; however, it contains a lot of extraneous explanation that you won't usually see in induction proofs. The writeup below is closer to what you might see in print and should be prepared to produce yourself.   A Clean Writeup   Let be the statement: for every ,    Basis step:  is true, because both sides of the equation equal 0 when    Inductive step: Assuming an inductive hypothesis that is true, that is for some nonnegative integer . Adding to both sides of the equation implies that which proves    Conclusion: So it follows by induction that is true for all nonnegative .     It probably bothers you that induction led to a proof of this summation formula but did not provide an intuitive way to understand it nor did it explain where the formula came from in the first place. This is both a weakness and a strength. It is a weakness when a proof does not provide insight. But it is a strength that a proof can provide a reader with a reliable guarantee of correctness without requiring insight.    Strong Induction  A useful variant of induction is called strong induction. Strong induction and ordinary induction are used for exactly the same thing: proving that a predicate is true for all nonnegative integers. Strong induction is useful when a simple proof that the predicate holds for does not follow just from the fact that it holds at , but from the fact that it holds for other values .   Principle of Strong Induction   Let be a predicate on nonnegative integers. If    is true, and    for all together imply ,   then is true for all .    The only change from the ordinary induction principle is that strong induction allows you make more assumptions in the inductive step of your proof! In an ordinary induction argument, you assume that is true and try to prove that is also true. In a strong induction argument, you may assume that and are all true when you go to prove . So you can assume a stronger set of hypotheses which can make your job easier.  Formulated as a formal argument as in , strong induction is  Strong Induction Rule    Stated more succinctly, the rule is      The template for strong induction proofs is identical to the template given in for ordinary induction except for two things:   you should state that your proof is by strong induction, and    you can assume that and are all true instead of only during the inductive step.      Product of Primes      Every integer greater than 1 is a product of primes.     We will prove by strong induction, letting be the statement: is a product of primes.   Basis step:  is true because 2 is prime, so it is a length one product of primes by convention.   Inductive step: Suppose that and that every number from 2 to is a product of primes. We must show that holds, namely, that is also a product of primes. We argue by cases:   If itself is prime, it is a length one product of primes by convention, and so holds in this case.    Otherwise, is not prime, which by definition means for some integers between 2 and . Now by the strong induction hypothesis, we know that both and are products of primes. By multiplying these products, it follows immediately that is also a product of primes. Therefore, holds in this case as well.      Conclusion: So holds in any case, which completes the proof by strong induction that holds for all .      "
},
{
  "id": "def-induction-principle",
  "level": "2",
  "url": "Section14_1.html#def-induction-principle",
  "type": "Definition",
  "number": "14.1.1",
  "title": "The Induction Principle.",
  "body": " The Induction Principle   Let be a proposition over a universe (or predicate) on the nonnegative integers. If    is true, and     for all nonnegative integers, (remember from , means IMPLIES ),   then    is true for all nonnegative integers, .      "
},
{
  "id": "subsec-ordinary-induction-6",
  "level": "2",
  "url": "Section14_1.html#subsec-ordinary-induction-6",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "ordinary induction "
},
{
  "id": "ex-induction-sum",
  "level": "2",
  "url": "Section14_1.html#ex-induction-sum",
  "type": "Example",
  "number": "14.1.3",
  "title": "A Familiar Example.",
  "body": " A Familiar Example   Below is the formula for the sum of the nonnegative integers up to . The formula holds for all nonnegative integers, so it is the kind of statement to which induction applies directly.    For all        To prove the theorem by induction, define predicate to be . Now the theorem can be restated as the claim that is true for all . This is great, because the Induction Principle lets us reach precisely that conclusion, provided we establish two simpler facts:    is true.     for all nonnegative integers, ,     So now our job is reduced to proving these two statements.   Basis step: The first statement follows because of the convention that a sum of zero terms is equal to 0. So is the true assertion that a sum of zero terms is equal to .   Inductive step: The second statement is more complicated. But remember a basic plan for proving the validity of any implication: assume the statement on the left and then prove the statement on the right. In this case, we assume namely, , in order to prove , which is the equation: These two equations are quite similar; in fact, adding to both sides of equation and simplifying the right side gives the equation : Thus, if > is true, then so is . This argument is valid for every nonnegative integer , so this establishes the second fact required by the induction proof. Therefore, the Induction Principle says that the predicate is true for all nonnegative integers, . The theorem is proved.   "
},
{
  "id": "subsec-template-inductive-proofs-2",
  "level": "2",
  "url": "Section14_1.html#subsec-template-inductive-proofs-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "base case basis step inductive step "
},
{
  "id": "subsec-template-inductive-proofs-5",
  "level": "2",
  "url": "Section14_1.html#subsec-template-inductive-proofs-5",
  "type": "Example",
  "number": "14.1.5",
  "title": "A Clean Writeup.",
  "body": " A Clean Writeup   Let be the statement: for every ,    Basis step:  is true, because both sides of the equation equal 0 when    Inductive step: Assuming an inductive hypothesis that is true, that is for some nonnegative integer . Adding to both sides of the equation implies that which proves    Conclusion: So it follows by induction that is true for all nonnegative .    "
},
{
  "id": "def-strong-induction",
  "level": "2",
  "url": "Section14_1.html#def-strong-induction",
  "type": "Definition",
  "number": "14.1.6",
  "title": "Principle of Strong Induction.",
  "body": " Principle of Strong Induction   Let be a predicate on nonnegative integers. If    is true, and    for all together imply ,   then is true for all .   "
},
{
  "id": "thm-strong-induction-rule",
  "level": "2",
  "url": "Section14_1.html#thm-strong-induction-rule",
  "type": "Theorem",
  "number": "14.1.7",
  "title": "Strong Induction Rule.",
  "body": " Strong Induction Rule    Stated more succinctly, the rule is    "
},
{
  "id": "subsec-review-strong-induction-7",
  "level": "2",
  "url": "Section14_1.html#subsec-review-strong-induction-7",
  "type": "Example",
  "number": "14.1.8",
  "title": "Product of Primes.",
  "body": " Product of Primes      Every integer greater than 1 is a product of primes.     We will prove by strong induction, letting be the statement: is a product of primes.   Basis step:  is true because 2 is prime, so it is a length one product of primes by convention.   Inductive step: Suppose that and that every number from 2 to is a product of primes. We must show that holds, namely, that is also a product of primes. We argue by cases:   If itself is prime, it is a length one product of primes by convention, and so holds in this case.    Otherwise, is not prime, which by definition means for some integers between 2 and . Now by the strong induction hypothesis, we know that both and are products of primes. By multiplying these products, it follows immediately that is also a product of primes. Therefore, holds in this case as well.      Conclusion: So holds in any case, which completes the proof by strong induction that holds for all .    "
},
{
  "id": "Section14_2",
  "level": "1",
  "url": "Section14_2.html",
  "type": "Section",
  "number": "14.2",
  "title": "Program Correctness",
  "body": " Program Correctness    Under Construction!    Two Exponentiation Algorithms  Consider the following algorithm implemented in Sage to compute , given an arbitrary integer , non-negative exponent , and a modulus , . The default sample evaluation computes , but you can edit the final line for other inputs.    It should be fairly clear that this algorithm will successfully compute since it mimics the basic definition of exponentiation. However, this algorithm is highly inefficient. The algorithm that is most commonly used for the task of exponentiation is the following one, also implemented in Sage.   The only difficulty with the \"fast algorithm\" is that it might not be so obvious that it always works. When implemented, it can be verified by example, but an even more rigorous verification can be done using the Invariant Relation Theorem. Before stating the theorem, we define some terminology.    Proving the correctness of the fast algorithm   Pre and Post Values    pre and post values of a variable    Given a variable , the pre value of , denoted , is the value before an iteration of a loop. The post value, denoted , is the value after the iteration.     Pre and post values in the fast exponentiation algorithm  In the fast exponentiation algorithm, the relationships between the pre and post values of the three variables are as follows.       Invariant Relation   Given an algorithm's inputs and a set of variables that are used in the algorithm, an invariant relation is a set of one or more equations that are true prior to entering a loop and remain true in every iteration of the loop.     Invariant Relation for Fast Exponentiation   We claim that the invariant relation in the fast algorithm is . We will prove that this is indeed true below.     The Invariant Relation Theorem   Given a loop within an algorithm, if is a relation with the properties     R is true before entering the loop    the truth of R is maintained in any iteration of the loop    the condition for exiting the loop will always be reached in a finite number of iterations.     then R will be true upon exiting the loop.    The condition that the loop ends in a finite number of iterations lets us apply mathematical induction with the induction variable being the number of iterations. We leave the details to the reader.    We can verify the correctness of the fast exponentiation algorithm using the Invariant Relation Theorem. First we note that prior to entering the loop, . Assuming the relation is true at the start of any iteration, that is , then Finally, the value of will decrease to zero in a finite number of steps because the number of binary digits of decreases by one with each iteration. At the end of the loop, which verifies the correctness of the algorithm.    Exercises   How are the pre and post values in the slow exponentiation algorithm related? What is the invariant relation between the variables in the slow algorithm?    Verify the correctness of the following algorithm to compute the greatest common divisor of two integers that are not both zero.    The invariant of this algorithm is .    Verify the correctness of the in Chapter 1.    "
},
{
  "id": "def-pre-post-values",
  "level": "2",
  "url": "Section14_2.html#def-pre-post-values",
  "type": "Definition",
  "number": "14.2.1",
  "title": "Pre and Post Values.",
  "body": " Pre and Post Values    pre and post values of a variable    Given a variable , the pre value of , denoted , is the value before an iteration of a loop. The post value, denoted , is the value after the iteration.   "
},
{
  "id": "ex-pre-post-fast",
  "level": "2",
  "url": "Section14_2.html#ex-pre-post-fast",
  "type": "Example",
  "number": "14.2.2",
  "title": "Pre and post values in the fast exponentiation algorithm.",
  "body": " Pre and post values in the fast exponentiation algorithm  In the fast exponentiation algorithm, the relationships between the pre and post values of the three variables are as follows.     "
},
{
  "id": "def-invariant-relation",
  "level": "2",
  "url": "Section14_2.html#def-invariant-relation",
  "type": "Definition",
  "number": "14.2.3",
  "title": "Invariant Relation.",
  "body": " Invariant Relation   Given an algorithm's inputs and a set of variables that are used in the algorithm, an invariant relation is a set of one or more equations that are true prior to entering a loop and remain true in every iteration of the loop.   "
},
{
  "id": "ex-invariant-fast-expo",
  "level": "2",
  "url": "Section14_2.html#ex-invariant-fast-expo",
  "type": "Example",
  "number": "14.2.4",
  "title": "Invariant Relation for Fast Exponentiation.",
  "body": " Invariant Relation for Fast Exponentiation   We claim that the invariant relation in the fast algorithm is . We will prove that this is indeed true below.   "
},
{
  "id": "th-invariant-relation-theorem",
  "level": "2",
  "url": "Section14_2.html#th-invariant-relation-theorem",
  "type": "Theorem",
  "number": "14.2.5",
  "title": "The Invariant Relation Theorem.",
  "body": " The Invariant Relation Theorem   Given a loop within an algorithm, if is a relation with the properties     R is true before entering the loop    the truth of R is maintained in any iteration of the loop    the condition for exiting the loop will always be reached in a finite number of iterations.     then R will be true upon exiting the loop.    The condition that the loop ends in a finite number of iterations lets us apply mathematical induction with the induction variable being the number of iterations. We leave the details to the reader.   "
},
{
  "id": "exercises-app-alg1-2",
  "level": "2",
  "url": "Section14_2.html#exercises-app-alg1-2",
  "type": "Exercise",
  "number": "14.2.3.1",
  "title": "",
  "body": " How are the pre and post values in the slow exponentiation algorithm related? What is the invariant relation between the variables in the slow algorithm?  "
},
{
  "id": "exercises-app-alg1-3",
  "level": "2",
  "url": "Section14_2.html#exercises-app-alg1-3",
  "type": "Exercise",
  "number": "14.2.3.2",
  "title": "",
  "body": " Verify the correctness of the following algorithm to compute the greatest common divisor of two integers that are not both zero.    The invariant of this algorithm is .  "
},
{
  "id": "exercises-app-alg1-4",
  "level": "2",
  "url": "Section14_2.html#exercises-app-alg1-4",
  "type": "Exercise",
  "number": "14.2.3.3",
  "title": "",
  "body": " Verify the correctness of the in Chapter 1.  "
},
{
  "id": "s-graphs-introduction",
  "level": "1",
  "url": "s-graphs-introduction.html",
  "type": "Section",
  "number": "15.1",
  "title": "Graphs - General Introduction",
  "body": " Graphs - General Introduction   Definitions  Recall that we introduced directed graphs in as a tool to visualize relations on a set. Here is a formal definition.   Simple Directed Graph   Graph  Simple Directed   Directed Graph   A simple directed graph consists of a nonempty set of vertices , , and a set of edges , , that is a subset of the set .     Some Terminology and Comments  Each edge is an ordered pair of elements from the vertex set. The first entry is the initial vertex of the edge and the second entry is the terminal vertex . Despite the set terminology in this definition, we often think of a graph as a picture, an aid in visualizing a situation. In Chapter 6, we introduced this concept to help understand relations on sets. Although those relations were principally of a mathematical nature, it remains true that when we see a graph, it tells us how the elements of a set are related to one another. We have chosen not to allow a graph with an empty vertex set, the so-called empty graph. There are both advantages and disadvantages to allowing the empty graph, so you may encounter it in other references.    A Simple Directed Graph  is an example of a simple directed graph. In set terms, this graph is , where and . Note how each edge is labeled either 0 or 1. There are often reasons for labeling even simple graphs. Some labels are to help make a graph easier to discuss; others are more significant. We will discuss the significance of the labels on this graph later.   A directed graph   A directed graph      In certain cases there may be a need for more than one edge between two vertices, and we need to expand the class of directed graphs.   Multigraph  Multigraph   Graph  Multigraph    A multigraph is a set of vertices with a set of edges that can contain more than one edge between the vertices.    One important point to keep in mind is that if we identify a graph as being a multigraph, it isn't necessary that there are two or more edges between some of the vertices. It is only just allowed . In other words, every simple graph is a multigraph. This is analogous to how a rectangle is a more general geometric figure than a square, but a square is still considered a rectangle.   A Multigraph  A common occurrence of a multigraph is a road map. The cities and towns on the map can be thought of as vertices, while the roads are the edges. It is not uncommon to have more than one road connecting two cities. In order to give clear travel directions, we name or number roads so that there is no ambiguity. We use the same method to describe the edges of the multigraph in . There is no question what is; however, referring to the edge would be ambiguous.   A directed multigraph   A directed multigraph     There are cases where the order of the vertices is not significant and so we use a different mathematical model for this situation:   Undirected Graph  Undirected Graph   Graph  Undirected    An undirected graph consists of a set , called a vertex set, and a set of two-element subsets of , called the edge set. The two-element subsets are drawn as lines connecting the vertices. It is customary to not allow self loops in undirected graphs.     An Undirected Graph  A network of computers can be described easily using a graph. describes a network of five computers, , , , , and . An edge between any two vertices indicates that direct two-way communication is possible between the two computers. Note that the edges of this graph are not directed. This is due to the fact that the relation that is being displayed is symmetric (i.e., if can communicate with , then can communicate with ). Although directed edges could be used here, it would simply clutter the graph.    Communications Map   Graph representation of a network     Island Road Map  Map of a small island with roads     This undirected graph, in set terms, is and  There are several other situations for which this graph can serve as a model. One of them is to interpret the vertices as cities and the edges as roads, an abstraction of a map such as the one in . Another interpretation is as an abstraction of the floor plan of a house. See . Vertex represents the outside of the house; all others represent rooms. Two vertices are connected if there is a door between them.    Complete Undirected Graph  Complete Undirected Graph.    A complete undirected graph with vertices    A complete undirected graph on vertices is an undirected graph with the property that each pair of distinct vertices are connected to one another. Such a graph is usually denoted by .     A Labeled Graph  A flowchart is a common example of a simple graph that requires labels for its vertices and some of its edges. is one such example that illustrates how many problems are solved.   A flow chart - an example of a labeled graph   A labeled graph    At the start of the problem-solving process, we are at the vertex labeled Start and at the end (if we are lucky enough to have solved the problem) we will be at the vertex labeled End. The sequence of vertices that we pass through as we move from Start to End is called a path. The Start vertex is called the initial vertex of the path, while the End is called the final, or terminal, vertex. Suppose that the problem is solved after two attempts; then the path that was taken is . An alternate path description would be to list the edges that were used: . This second method of describing a path has the advantage of being applicable for multigraphs. On the graph in , the vertex list does not clearly describe a path between 1 and 3, but is unambiguous.    A Summary of Path Notation and Terminology  If and are two vertices of a graph, then a path between and describes a motion from and along edges of the graph. Vertex is called the initial vertex of the path and is called the terminal vertex. A path between and can always be described by its edge list, the list of edges that were used: , where: (1) the initial vertex of is ; (2) the terminal vertex of is the initial vertex of , ; and (3) the terminal vertex of is . The number of edges in the edge list is the path length . A path on a simple graph can also be described by a vertex list. A path of length will have a list of vertices , , , where, for , is an edge on the graph. A circuit is a path that terminates at its initial vertex.  Suppose that a path between two vertices has an edge list . A subpath of this graph is any portion of the path described by one or more consecutive edges in the edge list. For example, is a subpath of . Any path is its own subpath; however, we call it an improper subpath of itself. All other nonempty subpaths are called proper subpaths.  A path or circuit is simple if it contains no proper subpath that is a circuit. This is the same as saying that a path or circuit is simple if it does not visit any vertex more than once except for the common initial and terminal vertex in the circuit. In the problem-solving method described in , the path that you take is simple only if you reach a solution on the first try.     Subgraphs  Intuitively, you could probably predict what the term subgraph means. A graph contained within a graph, right? But since a graph involves two sets, vertices and edges, does it involve a subset of both of these sets, or just one of them? The answer is it could be either. There are different types of subgraphs. The two that we will define below will meet most of our future needs in discussing the theory of graphs.   Subgraph  Subgraph  Induced Subgraph  Spanning Subgraph   Let be a graph of any kind: directed, directed multigraph, or undirected. is a subgraph of if and only if and the vertices of are in . You create a subgraph of by removing zero or more vertices and all edges that include the removed vertices and then you possibly remove some other edges.  If the only removed edges are those that include the removed vertices, then we say that is an induced subgraph . Finally, is a spanning subgraph of if , or, in other words, no vertices are removed from , only edges.     Some subgraphs  Consider the graph, , in the top row of . The other three graphs in that figure are all subgraphs of . The graph in the bottom left was created by first removing vertex 5 and all edges connecting it. In addition, we have removed the edge . That removed edge disqualifies the graph from being an induced subgraph. The graphs in the bottom center and right are both spanning subgraphs. The one on the bottom right is a tree, and is referred to as a spanning subtree. Spanning subtrees will be discussed in .   A graph and a few of its subgraphs   An image of a graph and three of its subgraphs      One set of subgraphs of any graph is the connected components of a graph. For simplicity, we will define them for undirected graphs. Given a graph , consider the relation is connected to on . We interprete this relation so that each vertex is connected to itself, and any two distinct vertices are related if there is a path along edges of the graph from one to the other. It shouldn't be too difficult to convince yourself that this is an equivalence relation on .   Connected Component  Connected Component   Given a graph , let be the relation is connected to on . Then the connected components of are the induced subgraphs of each with a vertex set that is an equivalence class with respect to .     If you ignore the duplicate names of vertices in the four graphs of , and consider the whole figure as one large graph, then there are four connected components in that graph. It's as simple as that! It's harder to describe precisely than to understand the concept.   From the examples we've seen so far, we can see that although a graph can be defined, in short, as a collection of vertices and edges, an integral part of most graphs is the labeling of the vertices and edges that allows us to interpret the graph as a model for some situation. We continue with a few more examples to illustrate this point.   A Graph as a Model for a Set of Strings  Suppose that you would like to mechanically describe the set of strings of 0's and 1's having no consecutive 1's. One way to visualize a string of this kind is with the graph in . Consider any path starting at vertex . If the label on each graph is considered to be the output to a printer, then the output will have no consecutive 1's. For example, the path that is described by the vertex list would result in an output of . Conversely, any string with no consecutive 1's determines a path starting at s.    A Tournament Graph  Suppose that four teams compete in a round-robin sporting event; that is, each team meets every other team once, and each game is played until a winner is determined. If the teams are named A, B, C, and D, we can define the relation on the set of teams by if beat . For one set of results, the graph of might look like .   Round-robin tournament graph with four vertices   Round-robin tournament graph with four vertices     There are many types of tournaments and they all can be modeled by different types of graphs.   Tournament Graph  Tournament Graph      A tournament graph is a directed graph with the property that no edge connects a vertex to itself, and between any two vertices there is at most one edge.    A complete (or round-robin) tournament graph is a tournament graph with the property that between any two distinct vertices there is exactly one edge.    A single-elimination tournament graph is a tournament graph with the properties that: (i) one vertex (the champion) has no edge terminating at it and at least one edge initiating from it; (ii) every other vertex is the terminal vertex of exactly one edge; and (iii) there is a path from the champion vertex to every other vertex.        Graph of a Single Elimination Tournament  The major league baseball championship is decided with a single-elimination tournament, where each game is actually a series of games. From 1969 to 1994, the two divisional champions in the American League (East and West) competed in a series of games. The loser is eliminated and the winner competed against the winner of the National League series (which is decided as in the American League). The tournament graph of the 1983 championship is in   A single elimination tournament graph   A single elimination tournament graph       Graph Isomorphisms  Next, we establish the relation is isomorphic to, a form of equality on graphs. The graphs in obviously share some similarities, such as the number of vertices and the number of edges. It happens that they are even more similar than just that. If the letters , , , and in the left graph are replaced with the numbers 1,3,4, and 2, respectively, and the vertices are moved around so that they have the same position as the graph on the right, you get the graph on the right.   Isomorphic Graphs   Two graphs that are isomorphic to each other    Here is a more precise definition that reflects the fact that the actual positioning (or embedding) of vertices isn't an essential part of a graph.   Isomorphic Graphs  Isomorphic Graphs   Two graphs and are isomorphic if there exists a bijection such that if and only if . For multigraphs, we add that the number of edges connecting to must equal the number of edges from to .    The most significant local characteristic of a vertex within a graph is its degree. Collectively, the degrees can partially characterize a graph.   Degree of a vertex  Degree    degree, indegree and outdegree of vertex       Let be a vertex of an undirected graph. The degree of , denoted , is the number of edges that connect to the other vertices in the graph.    If is a vertex of a directed graph, then the outdegree of , denoted , is the number of edges of the graph that initiate at . The indegree of , denoted , is the number of edges that terminate at .        Degree Sequence of a Graph  Degree Sequence of a Graph   The degree sequence of an undirected graph is the non-increasing sequence of its vertex degrees.     Some degrees   An undirected graph   An undirected graph with five vertices       The degrees of vertices 1 through 5 in are 2, 3, 4, 1, and 2, respectively. The degree sequence of the graph is .    In a tournament graph, is the number of wins for and is the number of losses. In a complete (round-robin) tournament graph with vertices, for each vertex.       Graphic Sequence  Graphic Sequence   A finite nonincreasing sequence of integers is a graphic if there exists an undirected graph with vertices having the sequence as its degree sequence.    For example, is graphic because the degrees of the graph in match these numbers. There is no connection between the vertex number and its degree in this graph.   A graph that shows that is a graphic sequence.   A graph with graphic sequence .    See for more details on what are also referred to as graphical degree sequences , including an algorithm for determining whether or not a sequence is graphic.    Next Steps   A Prospectus for the Rest of the Chapter   The question Once you have a graph, what do you do with it? might come to mind. The following list of common questions and comments about graphs is a partial list that will give you an overview of the remainder of the chapter.     How can a graph be represented as a data structure for use on a computer? We will discuss some common data structures that are used to represent graphs in .    Given two vertices in a graph, does there exist a path between them? The existence of a path between any or all pairs of vertices in a graph will be discussed in . A related question is: How many paths of a certain type or length are there between two vertices?    Is there a path (or circuit) that passes through every vertex (or uses every edge) exactly once? Paths of this kind are called traversals. We will discuss traversals in .    Suppose that a cost is associated with the use of each vertex and\/or edge in a path. What is the cheapest path, circuit, or traversal of a given kind? Problems of this kind will be discussed in .    Given the specifications of a graph, or the graph itself, what is the best way to draw the graph? The desire for neatness alone makes this a reasonable question, but there are other motivations. Another goal might be to avoid having edges of the graph cross one another. This is discussed in .       Exercises   What is the significance of the fact that there is a path connecting vertex with every other vertex in , as it applies to various situations that it models?   In , computer can communicate with all other computers. In , there are direct roads to and from city to all other cities.    Using as a starting point, draw a graph that represents the set of strings of 0's and 1's containing no more than two consecutive 1's in any part of the string.    Draw a directed graph that models the set of strings of 0's and 1's (zero or more of each) where all of the 1's must appear consecutively.    Solution to exercise 3 of Section 15.1   A labeled, directed graph that models binary strings      In the NCAA final-four basketball tournament, the East champion plays the West champion, and the champions from the Mideast and Midwest play. The winners of the two games play for the national championship. Draw the eight different single-elimination tournament graphs that could occur.    What is the maximum number of edges in an undirected graph with eight vertices?   The maximum number of edges would be .    Which of the graphs in are isomorphic? What is the correspondence between their vertices?   Which graphs are isomorphic to one another?   An image of nine graphs, labeled a - i         How many edges does a complete tournament graph with vertices have?    How many edges does a single-elimination tournament graph with vertices have?              , each vertex except the champion vertex has an indegree of 1 and the champion vertex has an indegree of zero.       Draw complete undirected graphs with 1, 2, 3, 4, and 5 vertices. How many edges does a , a complete undirected graph with vertices, have?    Determine whether the following sequences are graphic. Explain your logic.                                        Not graphic - if the degree of a graph with seven vertices is 6, it is connected to all other vertices and so there cannot be a vertex with degree zero.    Graphic. One graph with this degree sequence is a cycle of length 6.    Not Graphic. The number of vertices with odd degree is odd, which is impossible.    Graphic. A \"wheel graph\" with one vertex connected to all other and the others connected to one another in a cycle has this degree sequence.    Graphic. Pairs of vertices connected only to one another.    Not Graphic. With two vertices having maximal degree, 5, every vertex would need to have a degree of 2 or more, so the 1 in this sequence makes it non-graphic.          Based on observations you might have made in exercise 9, describe as many characteristics as you can about graphic sequences of length .    Consider the two graphs in . Notice that they have the same degree sequences, . Explain why the two graphs are not isomorphic.      Two graphs with the same degree sequences   Two different graphs with the same degree sequence      Draw a plan for the rooms of a house so that models connectedness of the rooms. That is, is an edge if and only if a door connects rooms and .    How many subgraphs are there of a , . How many of them are spanning graphs?    "
},
{
  "id": "def-simple-directed-graph",
  "level": "2",
  "url": "s-graphs-introduction.html#def-simple-directed-graph",
  "type": "Definition",
  "number": "15.1.1",
  "title": "Simple Directed Graph.",
  "body": " Simple Directed Graph   Graph  Simple Directed   Directed Graph   A simple directed graph consists of a nonempty set of vertices , , and a set of edges , , that is a subset of the set .   "
},
{
  "id": "s-graphs-introduction-2-4",
  "level": "2",
  "url": "s-graphs-introduction.html#s-graphs-introduction-2-4",
  "type": "Note",
  "number": "15.1.2",
  "title": "Some Terminology and Comments.",
  "body": " Some Terminology and Comments  Each edge is an ordered pair of elements from the vertex set. The first entry is the initial vertex of the edge and the second entry is the terminal vertex . Despite the set terminology in this definition, we often think of a graph as a picture, an aid in visualizing a situation. In Chapter 6, we introduced this concept to help understand relations on sets. Although those relations were principally of a mathematical nature, it remains true that when we see a graph, it tells us how the elements of a set are related to one another. We have chosen not to allow a graph with an empty vertex set, the so-called empty graph. There are both advantages and disadvantages to allowing the empty graph, so you may encounter it in other references.  "
},
{
  "id": "ex-15-1",
  "level": "2",
  "url": "s-graphs-introduction.html#ex-15-1",
  "type": "Example",
  "number": "15.1.3",
  "title": "A Simple Directed Graph.",
  "body": " A Simple Directed Graph  is an example of a simple directed graph. In set terms, this graph is , where and . Note how each edge is labeled either 0 or 1. There are often reasons for labeling even simple graphs. Some labels are to help make a graph easier to discuss; others are more significant. We will discuss the significance of the labels on this graph later.   A directed graph   A directed graph     "
},
{
  "id": "def-multigraph",
  "level": "2",
  "url": "s-graphs-introduction.html#def-multigraph",
  "type": "Definition",
  "number": "15.1.5",
  "title": "Multigraph.",
  "body": " Multigraph  Multigraph   Graph  Multigraph    A multigraph is a set of vertices with a set of edges that can contain more than one edge between the vertices.   "
},
{
  "id": "ex-multigraph-15-1",
  "level": "2",
  "url": "s-graphs-introduction.html#ex-multigraph-15-1",
  "type": "Example",
  "number": "15.1.6",
  "title": "A Multigraph.",
  "body": " A Multigraph  A common occurrence of a multigraph is a road map. The cities and towns on the map can be thought of as vertices, while the roads are the edges. It is not uncommon to have more than one road connecting two cities. In order to give clear travel directions, we name or number roads so that there is no ambiguity. We use the same method to describe the edges of the multigraph in . There is no question what is; however, referring to the edge would be ambiguous.   A directed multigraph   A directed multigraph    "
},
{
  "id": "def-undirected-graph",
  "level": "2",
  "url": "s-graphs-introduction.html#def-undirected-graph",
  "type": "Definition",
  "number": "15.1.8",
  "title": "Undirected Graph.",
  "body": " Undirected Graph  Undirected Graph   Graph  Undirected    An undirected graph consists of a set , called a vertex set, and a set of two-element subsets of , called the edge set. The two-element subsets are drawn as lines connecting the vertices. It is customary to not allow self loops in undirected graphs.   "
},
{
  "id": "ex-undirected-1",
  "level": "2",
  "url": "s-graphs-introduction.html#ex-undirected-1",
  "type": "Example",
  "number": "15.1.9",
  "title": "An Undirected Graph.",
  "body": " An Undirected Graph  A network of computers can be described easily using a graph. describes a network of five computers, , , , , and . An edge between any two vertices indicates that direct two-way communication is possible between the two computers. Note that the edges of this graph are not directed. This is due to the fact that the relation that is being displayed is symmetric (i.e., if can communicate with , then can communicate with ). Although directed edges could be used here, it would simply clutter the graph.    Communications Map   Graph representation of a network     Island Road Map  Map of a small island with roads     This undirected graph, in set terms, is and  There are several other situations for which this graph can serve as a model. One of them is to interpret the vertices as cities and the edges as roads, an abstraction of a map such as the one in . Another interpretation is as an abstraction of the floor plan of a house. See . Vertex represents the outside of the house; all others represent rooms. Two vertices are connected if there is a door between them.  "
},
{
  "id": "def-complete-undirected-graph",
  "level": "2",
  "url": "s-graphs-introduction.html#def-complete-undirected-graph",
  "type": "Definition",
  "number": "15.1.12",
  "title": "Complete Undirected Graph.",
  "body": " Complete Undirected Graph  Complete Undirected Graph.    A complete undirected graph with vertices    A complete undirected graph on vertices is an undirected graph with the property that each pair of distinct vertices are connected to one another. Such a graph is usually denoted by .   "
},
{
  "id": "ex-labeled-graph-15-1",
  "level": "2",
  "url": "s-graphs-introduction.html#ex-labeled-graph-15-1",
  "type": "Example",
  "number": "15.1.13",
  "title": "A Labeled Graph.",
  "body": " A Labeled Graph  A flowchart is a common example of a simple graph that requires labels for its vertices and some of its edges. is one such example that illustrates how many problems are solved.   A flow chart - an example of a labeled graph   A labeled graph    At the start of the problem-solving process, we are at the vertex labeled Start and at the end (if we are lucky enough to have solved the problem) we will be at the vertex labeled End. The sequence of vertices that we pass through as we move from Start to End is called a path. The Start vertex is called the initial vertex of the path, while the End is called the final, or terminal, vertex. Suppose that the problem is solved after two attempts; then the path that was taken is . An alternate path description would be to list the edges that were used: . This second method of describing a path has the advantage of being applicable for multigraphs. On the graph in , the vertex list does not clearly describe a path between 1 and 3, but is unambiguous.  "
},
{
  "id": "s-graphs-introduction-2-15",
  "level": "2",
  "url": "s-graphs-introduction.html#s-graphs-introduction-2-15",
  "type": "Note",
  "number": "15.1.15",
  "title": "A Summary of Path Notation and Terminology.",
  "body": " A Summary of Path Notation and Terminology  If and are two vertices of a graph, then a path between and describes a motion from and along edges of the graph. Vertex is called the initial vertex of the path and is called the terminal vertex. A path between and can always be described by its edge list, the list of edges that were used: , where: (1) the initial vertex of is ; (2) the terminal vertex of is the initial vertex of , ; and (3) the terminal vertex of is . The number of edges in the edge list is the path length . A path on a simple graph can also be described by a vertex list. A path of length will have a list of vertices , , , where, for , is an edge on the graph. A circuit is a path that terminates at its initial vertex.  Suppose that a path between two vertices has an edge list . A subpath of this graph is any portion of the path described by one or more consecutive edges in the edge list. For example, is a subpath of . Any path is its own subpath; however, we call it an improper subpath of itself. All other nonempty subpaths are called proper subpaths.  A path or circuit is simple if it contains no proper subpath that is a circuit. This is the same as saying that a path or circuit is simple if it does not visit any vertex more than once except for the common initial and terminal vertex in the circuit. In the problem-solving method described in , the path that you take is simple only if you reach a solution on the first try.  "
},
{
  "id": "def-subgraph",
  "level": "2",
  "url": "s-graphs-introduction.html#def-subgraph",
  "type": "Definition",
  "number": "15.1.16",
  "title": "Subgraph.",
  "body": " Subgraph  Subgraph  Induced Subgraph  Spanning Subgraph   Let be a graph of any kind: directed, directed multigraph, or undirected. is a subgraph of if and only if and the vertices of are in . You create a subgraph of by removing zero or more vertices and all edges that include the removed vertices and then you possibly remove some other edges.  If the only removed edges are those that include the removed vertices, then we say that is an induced subgraph . Finally, is a spanning subgraph of if , or, in other words, no vertices are removed from , only edges.   "
},
{
  "id": "ex-subgraphs",
  "level": "2",
  "url": "s-graphs-introduction.html#ex-subgraphs",
  "type": "Example",
  "number": "15.1.17",
  "title": "Some subgraphs.",
  "body": " Some subgraphs  Consider the graph, , in the top row of . The other three graphs in that figure are all subgraphs of . The graph in the bottom left was created by first removing vertex 5 and all edges connecting it. In addition, we have removed the edge . That removed edge disqualifies the graph from being an induced subgraph. The graphs in the bottom center and right are both spanning subgraphs. The one on the bottom right is a tree, and is referred to as a spanning subtree. Spanning subtrees will be discussed in .   A graph and a few of its subgraphs   An image of a graph and three of its subgraphs     "
},
{
  "id": "def-connected-component",
  "level": "2",
  "url": "s-graphs-introduction.html#def-connected-component",
  "type": "Definition",
  "number": "15.1.19",
  "title": "Connected Component.",
  "body": " Connected Component  Connected Component   Given a graph , let be the relation is connected to on . Then the connected components of are the induced subgraphs of each with a vertex set that is an equivalence class with respect to .   "
},
{
  "id": "ex-connected-components",
  "level": "2",
  "url": "s-graphs-introduction.html#ex-connected-components",
  "type": "Example",
  "number": "15.1.20",
  "title": "",
  "body": " If you ignore the duplicate names of vertices in the four graphs of , and consider the whole figure as one large graph, then there are four connected components in that graph. It's as simple as that! It's harder to describe precisely than to understand the concept.  "
},
{
  "id": "ex-string-model-15-1",
  "level": "2",
  "url": "s-graphs-introduction.html#ex-string-model-15-1",
  "type": "Example",
  "number": "15.1.21",
  "title": "A Graph as a Model for a Set of Strings.",
  "body": " A Graph as a Model for a Set of Strings  Suppose that you would like to mechanically describe the set of strings of 0's and 1's having no consecutive 1's. One way to visualize a string of this kind is with the graph in . Consider any path starting at vertex . If the label on each graph is considered to be the output to a printer, then the output will have no consecutive 1's. For example, the path that is described by the vertex list would result in an output of . Conversely, any string with no consecutive 1's determines a path starting at s.  "
},
{
  "id": "ex-tournament-graph-15-1",
  "level": "2",
  "url": "s-graphs-introduction.html#ex-tournament-graph-15-1",
  "type": "Example",
  "number": "15.1.22",
  "title": "A Tournament Graph.",
  "body": " A Tournament Graph  Suppose that four teams compete in a round-robin sporting event; that is, each team meets every other team once, and each game is played until a winner is determined. If the teams are named A, B, C, and D, we can define the relation on the set of teams by if beat . For one set of results, the graph of might look like .   Round-robin tournament graph with four vertices   Round-robin tournament graph with four vertices    "
},
{
  "id": "def-tournament-graph",
  "level": "2",
  "url": "s-graphs-introduction.html#def-tournament-graph",
  "type": "Definition",
  "number": "15.1.24",
  "title": "Tournament Graph.",
  "body": " Tournament Graph  Tournament Graph      A tournament graph is a directed graph with the property that no edge connects a vertex to itself, and between any two vertices there is at most one edge.    A complete (or round-robin) tournament graph is a tournament graph with the property that between any two distinct vertices there is exactly one edge.    A single-elimination tournament graph is a tournament graph with the properties that: (i) one vertex (the champion) has no edge terminating at it and at least one edge initiating from it; (ii) every other vertex is the terminal vertex of exactly one edge; and (iii) there is a path from the champion vertex to every other vertex.      "
},
{
  "id": "ex-single-elimination-15-1",
  "level": "2",
  "url": "s-graphs-introduction.html#ex-single-elimination-15-1",
  "type": "Example",
  "number": "15.1.25",
  "title": "Graph of a Single Elimination Tournament.",
  "body": " Graph of a Single Elimination Tournament  The major league baseball championship is decided with a single-elimination tournament, where each game is actually a series of games. From 1969 to 1994, the two divisional champions in the American League (East and West) competed in a series of games. The loser is eliminated and the winner competed against the winner of the National League series (which is decided as in the American League). The tournament graph of the 1983 championship is in   A single elimination tournament graph   A single elimination tournament graph    "
},
{
  "id": "fig-isomorphic-graphs-15-1",
  "level": "2",
  "url": "s-graphs-introduction.html#fig-isomorphic-graphs-15-1",
  "type": "Figure",
  "number": "15.1.27",
  "title": "",
  "body": " Isomorphic Graphs   Two graphs that are isomorphic to each other   "
},
{
  "id": "def-isomorphic-graphs",
  "level": "2",
  "url": "s-graphs-introduction.html#def-isomorphic-graphs",
  "type": "Definition",
  "number": "15.1.28",
  "title": "Isomorphic Graphs.",
  "body": " Isomorphic Graphs  Isomorphic Graphs   Two graphs and are isomorphic if there exists a bijection such that if and only if . For multigraphs, we add that the number of edges connecting to must equal the number of edges from to .   "
},
{
  "id": "def-degree-of-a-vertex",
  "level": "2",
  "url": "s-graphs-introduction.html#def-degree-of-a-vertex",
  "type": "Definition",
  "number": "15.1.29",
  "title": "Degree of a vertex.",
  "body": " Degree of a vertex  Degree    degree, indegree and outdegree of vertex       Let be a vertex of an undirected graph. The degree of , denoted , is the number of edges that connect to the other vertices in the graph.    If is a vertex of a directed graph, then the outdegree of , denoted , is the number of edges of the graph that initiate at . The indegree of , denoted , is the number of edges that terminate at .      "
},
{
  "id": "def-degree-sequence",
  "level": "2",
  "url": "s-graphs-introduction.html#def-degree-sequence",
  "type": "Definition",
  "number": "15.1.30",
  "title": "Degree Sequence of a Graph.",
  "body": " Degree Sequence of a Graph  Degree Sequence of a Graph   The degree sequence of an undirected graph is the non-increasing sequence of its vertex degrees.   "
},
{
  "id": "ex-degrees-15-1",
  "level": "2",
  "url": "s-graphs-introduction.html#ex-degrees-15-1",
  "type": "Example",
  "number": "15.1.31",
  "title": "Some degrees.",
  "body": " Some degrees   An undirected graph   An undirected graph with five vertices       The degrees of vertices 1 through 5 in are 2, 3, 4, 1, and 2, respectively. The degree sequence of the graph is .    In a tournament graph, is the number of wins for and is the number of losses. In a complete (round-robin) tournament graph with vertices, for each vertex.     "
},
{
  "id": "def-graphic-sequence",
  "level": "2",
  "url": "s-graphs-introduction.html#def-graphic-sequence",
  "type": "Definition",
  "number": "15.1.33",
  "title": "Graphic Sequence.",
  "body": " Graphic Sequence  Graphic Sequence   A finite nonincreasing sequence of integers is a graphic if there exists an undirected graph with vertices having the sequence as its degree sequence.   "
},
{
  "id": "fig-degree-sequence-example",
  "level": "2",
  "url": "s-graphs-introduction.html#fig-degree-sequence-example",
  "type": "Figure",
  "number": "15.1.34",
  "title": "",
  "body": " A graph that shows that is a graphic sequence.   A graph with graphic sequence .   "
},
{
  "id": "s-graphs-introduction-4-13",
  "level": "2",
  "url": "s-graphs-introduction.html#s-graphs-introduction-4-13",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "graphical degree sequences "
},
{
  "id": "list-graph-prospectus",
  "level": "2",
  "url": "s-graphs-introduction.html#list-graph-prospectus",
  "type": "List",
  "number": "15.1.35",
  "title": "A Prospectus for the Rest of the Chapter",
  "body": " A Prospectus for the Rest of the Chapter   The question Once you have a graph, what do you do with it? might come to mind. The following list of common questions and comments about graphs is a partial list that will give you an overview of the remainder of the chapter.     How can a graph be represented as a data structure for use on a computer? We will discuss some common data structures that are used to represent graphs in .    Given two vertices in a graph, does there exist a path between them? The existence of a path between any or all pairs of vertices in a graph will be discussed in . A related question is: How many paths of a certain type or length are there between two vertices?    Is there a path (or circuit) that passes through every vertex (or uses every edge) exactly once? Paths of this kind are called traversals. We will discuss traversals in .    Suppose that a cost is associated with the use of each vertex and\/or edge in a path. What is the cheapest path, circuit, or traversal of a given kind? Problems of this kind will be discussed in .    Given the specifications of a graph, or the graph itself, what is the best way to draw the graph? The desire for neatness alone makes this a reasonable question, but there are other motivations. Another goal might be to avoid having edges of the graph cross one another. This is discussed in .    "
},
{
  "id": "exercises-15-1-2",
  "level": "2",
  "url": "s-graphs-introduction.html#exercises-15-1-2",
  "type": "Exercise",
  "number": "15.1.5.1",
  "title": "",
  "body": " What is the significance of the fact that there is a path connecting vertex with every other vertex in , as it applies to various situations that it models?   In , computer can communicate with all other computers. In , there are direct roads to and from city to all other cities.  "
},
{
  "id": "exercises-15-1-3",
  "level": "2",
  "url": "s-graphs-introduction.html#exercises-15-1-3",
  "type": "Exercise",
  "number": "15.1.5.2",
  "title": "",
  "body": " Using as a starting point, draw a graph that represents the set of strings of 0's and 1's containing no more than two consecutive 1's in any part of the string.  "
},
{
  "id": "exercises-15-1-4",
  "level": "2",
  "url": "s-graphs-introduction.html#exercises-15-1-4",
  "type": "Exercise",
  "number": "15.1.5.3",
  "title": "",
  "body": " Draw a directed graph that models the set of strings of 0's and 1's (zero or more of each) where all of the 1's must appear consecutively.    Solution to exercise 3 of Section 15.1   A labeled, directed graph that models binary strings    "
},
{
  "id": "exercises-15-1-5",
  "level": "2",
  "url": "s-graphs-introduction.html#exercises-15-1-5",
  "type": "Exercise",
  "number": "15.1.5.4",
  "title": "",
  "body": " In the NCAA final-four basketball tournament, the East champion plays the West champion, and the champions from the Mideast and Midwest play. The winners of the two games play for the national championship. Draw the eight different single-elimination tournament graphs that could occur.  "
},
{
  "id": "exercises-15-1-6",
  "level": "2",
  "url": "s-graphs-introduction.html#exercises-15-1-6",
  "type": "Exercise",
  "number": "15.1.5.5",
  "title": "",
  "body": " What is the maximum number of edges in an undirected graph with eight vertices?   The maximum number of edges would be .  "
},
{
  "id": "exercises-15-1-7",
  "level": "2",
  "url": "s-graphs-introduction.html#exercises-15-1-7",
  "type": "Exercise",
  "number": "15.1.5.6",
  "title": "",
  "body": " Which of the graphs in are isomorphic? What is the correspondence between their vertices?   Which graphs are isomorphic to one another?   An image of nine graphs, labeled a - i    "
},
{
  "id": "exercises-15-1-8",
  "level": "2",
  "url": "s-graphs-introduction.html#exercises-15-1-8",
  "type": "Exercise",
  "number": "15.1.5.7",
  "title": "",
  "body": "    How many edges does a complete tournament graph with vertices have?    How many edges does a single-elimination tournament graph with vertices have?              , each vertex except the champion vertex has an indegree of 1 and the champion vertex has an indegree of zero.     "
},
{
  "id": "exercises-15-1-9",
  "level": "2",
  "url": "s-graphs-introduction.html#exercises-15-1-9",
  "type": "Exercise",
  "number": "15.1.5.8",
  "title": "",
  "body": " Draw complete undirected graphs with 1, 2, 3, 4, and 5 vertices. How many edges does a , a complete undirected graph with vertices, have?  "
},
{
  "id": "exercises-15-1-10",
  "level": "2",
  "url": "s-graphs-introduction.html#exercises-15-1-10",
  "type": "Exercise",
  "number": "15.1.5.9",
  "title": "",
  "body": " Determine whether the following sequences are graphic. Explain your logic.                                        Not graphic - if the degree of a graph with seven vertices is 6, it is connected to all other vertices and so there cannot be a vertex with degree zero.    Graphic. One graph with this degree sequence is a cycle of length 6.    Not Graphic. The number of vertices with odd degree is odd, which is impossible.    Graphic. A \"wheel graph\" with one vertex connected to all other and the others connected to one another in a cycle has this degree sequence.    Graphic. Pairs of vertices connected only to one another.    Not Graphic. With two vertices having maximal degree, 5, every vertex would need to have a degree of 2 or more, so the 1 in this sequence makes it non-graphic.     "
},
{
  "id": "exercises-15-1-11",
  "level": "2",
  "url": "s-graphs-introduction.html#exercises-15-1-11",
  "type": "Exercise",
  "number": "15.1.5.10",
  "title": "",
  "body": "    Based on observations you might have made in exercise 9, describe as many characteristics as you can about graphic sequences of length .    Consider the two graphs in . Notice that they have the same degree sequences, . Explain why the two graphs are not isomorphic.      Two graphs with the same degree sequences   Two different graphs with the same degree sequence    "
},
{
  "id": "exercise-house-15-1",
  "level": "2",
  "url": "s-graphs-introduction.html#exercise-house-15-1",
  "type": "Exercise",
  "number": "15.1.5.11",
  "title": "",
  "body": " Draw a plan for the rooms of a house so that models connectedness of the rooms. That is, is an edge if and only if a door connects rooms and .  "
},
{
  "id": "exercise-subgraphs",
  "level": "2",
  "url": "s-graphs-introduction.html#exercise-subgraphs",
  "type": "Exercise",
  "number": "15.1.5.12",
  "title": "",
  "body": " How many subgraphs are there of a , . How many of them are spanning graphs?  "
},
{
  "id": "s-data-structures-for-graphs",
  "level": "1",
  "url": "s-data-structures-for-graphs.html",
  "type": "Section",
  "number": "15.2",
  "title": "Data Structures for Graphs",
  "body": " Data Structures for Graphs   Graph  Data Structures    In this section, we will describe data structures that are commonly used to represent graphs. In addition we will introduce the basic syntax for graphs in Sage.    Basic Data Structures   Data Structures for Graphs   Assume that we have a graph with vertices that can be indexed by the integers . Here are three different data structures that can be employed to represent graphs.     Adjacency Matrix: As we saw in Chapter 6, the information about edges in a graph can be summarized with an adjacency matrix, , where if and only if vertex is connected to vertex in the graph. Note that this is the same as the adjacency matrix for a relation.    Edge Dictionary: For each vertex in our graph, we maintain a list of edges that initiate at that vertex. If represents the graph's edge information, then we denote by the list of vertices that are terminal vertices of edges initiating at vertex . The exact syntax that would be used can vary. We will use Sage\/Python syntax in our examples.    Edge List: Note that in creating either of the first two data structures, we would presume that a list of edges for the graph exists. A simple way to represent the edges is to maintain this list of ordered pairs, or two element sets, depending on whether the graph is intended to be directed or undirected. We will not work with this data structure here, other than in the first example.      A Very Small Example  We consider the representation of the following graph:   Graph for a Very Small Example   A directed graph with four vertices    The adjacency matrix that represents the graph would be .  The same graph could be represented with the edge dictionary    {1:[2,4],2:[3,4],3:[3],4:[1]} .   Notice the general form of each item in the dictionary: vertex:[list of vertices] .  Finally, a list of edges [(1,2),(1,4),(2,3),(2,4),(3,3),(4,1)] also describes the same graph.   A natural question to ask is: Which data structure should be used in a given situation? For small graphs, it really doesn't make much difference. For larger matrices the edge count would be a consideration. If is large and the number of edges is relatively small, it might use less memory to maintain an edge dictionary or list of edges instead of building an matrix. Some software for working with graphs will make the decision for you.   NCAA Basketball  Consider the tournament graph representing a NCAA Division 1 men's (or women's) college basketball season in the United States. There are approximately 350 teams in Division 1. Suppose we constructed the graph with an edge from team A to team B if A beat B at least once in the season; and we label the edge with the number of wins. Since the average team plays around 30 games in a season, most of which will be against other Division I teams, we could expect around edges in the graph. This would be somewhat reduced by games with lower division teams and cases where two or more wins over the same team produces one edge. Since 5,250 is much smaller than entries in an adjacency matrix, an edge dictionary or edge list would be more compact than an adjacency matrix. Even if we were to use software to create an adjacency matrix, many programs will identify the fact that a matrix such as the one in this example would be sparse and would leave data in list form and use sparse array methods to work with it.     Sage Graphs   SageMath Note  Graphs   The most common way to define a graph in Sage is to use an edge dictionary. Here is how the graph in is generated and then displayed. Notice that we simply wrap the function DiGraph() around the same dictionary expression we identified earlier.   You can get the adjacency matrix of a graph with the adjacency_matrix method.   You can also define a graph based on its adjacency matrix.   The edge list of any directed graph can be easily retrieved. If you replace edges with edge_iterator , you can iterate through the edge list. The third coordinate of the items in the edge is the label of the edge, which is None in this case.   Replacing the wrapper DiGraph() with Graph() creates an undirected graph.   There are many special graphs and graph families that are available in Sage through the graphs module. They are referenced with the prefix graphs. followed by the name and zero or more paramenters inside parentheses. Here are a couple of them, first a complete graph with five vertices.   Here is a wheel graph, named for an obvious pattern of vertices and edges. We assign a name to it first and then show the graph without labeling the vertices.   There are dozens of graph methods, one of which determines the degree sequence of a graph. In this case, it's the wheel graph above.   The degree sequence method is defined within the graphs module, but the prefix graphs. is not needed because the value of w inherits the graphs methods.    Exercises   Estimate the number of vertices and edges in each of the following graphs. Would the graph be considered sparse, so that an adjacency matrix would be inefficient?     Vertices: Cities of the world that are served by at least one airline. Edges: Pairs of cities that are connected by a regular direct flight.    Vertices: ASCII characters. Edges: connect characters that differ in their binary code by exactly two bits.    Vertices: All English words. Edges: An edge connects word to word if is a prefix of .         A rough estimate of the number of vertices in the world airline graph would be the number of cities with population greater than or equal to 100,000. This is estimated to be around 4,100. There are many smaller cities that have airports, but some of the metropolitan areas with clusters of large cities are served by only a few airports. 4,000-5,000 is probably a good guess. As for edges, that's a bit more difficult to estimate. It's certainly not a complete graph. Looking at some medium sized airports such as Manchester, NH, the average number of cities that you can go to directly is in the 50-100 range. So a very rough estimate would be . This is far less than , so an edge list or dictionary of some kind would be more efficient.    The number of ASCII characters is 128. Each character would be connected to others and so there are edges. Comparing this to the , an array is probably the best choice.    The Oxford English Dictionary as approximately a half-million words, although many are obsolete. The number of edges is probably of the same order of magnitude as the number of words, so an edge list or dictionary is probably the best choice.       Each edge of a graph is colored with one of the four colors red, blue, yellow, or green. How could you represent the edges in this graph using a variation of the adjacency matrix structure?    Directed graphs , each with vertex set are represented by the matrices below. Which graphs are isomorphic to one another?               Each graph is isomorphic to itself. In addition, are isomorphic; and are isomorphic to one another.    The following Sage command verifies that the wheel graph with four vertices is isomorphic to the complete graph with four vertices.   A list of all graphs in this the graphs database is available via tab completion. Type \"graphs.\" and then hit the tab key to see which graphs are available. This can be done using the Sage application or SageMathCloud, but not sage cells. Find some other pairs of isomorphic graphs in the database.    "
},
{
  "id": "ss-graph-data-structures-2",
  "level": "2",
  "url": "s-data-structures-for-graphs.html#ss-graph-data-structures-2",
  "type": "List",
  "number": "15.2.1",
  "title": "Data Structures for Graphs",
  "body": " Data Structures for Graphs   Assume that we have a graph with vertices that can be indexed by the integers . Here are three different data structures that can be employed to represent graphs.     Adjacency Matrix: As we saw in Chapter 6, the information about edges in a graph can be summarized with an adjacency matrix, , where if and only if vertex is connected to vertex in the graph. Note that this is the same as the adjacency matrix for a relation.    Edge Dictionary: For each vertex in our graph, we maintain a list of edges that initiate at that vertex. If represents the graph's edge information, then we denote by the list of vertices that are terminal vertices of edges initiating at vertex . The exact syntax that would be used can vary. We will use Sage\/Python syntax in our examples.    Edge List: Note that in creating either of the first two data structures, we would presume that a list of edges for the graph exists. A simple way to represent the edges is to maintain this list of ordered pairs, or two element sets, depending on whether the graph is intended to be directed or undirected. We will not work with this data structure here, other than in the first example.    "
},
{
  "id": "ex-data-structure-sample",
  "level": "2",
  "url": "s-data-structures-for-graphs.html#ex-data-structure-sample",
  "type": "Example",
  "number": "15.2.2",
  "title": "A Very Small Example.",
  "body": " A Very Small Example  We consider the representation of the following graph:   Graph for a Very Small Example   A directed graph with four vertices    The adjacency matrix that represents the graph would be .  The same graph could be represented with the edge dictionary    {1:[2,4],2:[3,4],3:[3],4:[1]} .   Notice the general form of each item in the dictionary: vertex:[list of vertices] .  Finally, a list of edges [(1,2),(1,4),(2,3),(2,4),(3,3),(4,1)] also describes the same graph.  "
},
{
  "id": "ex-ncaa-bb",
  "level": "2",
  "url": "s-data-structures-for-graphs.html#ex-ncaa-bb",
  "type": "Example",
  "number": "15.2.4",
  "title": "NCAA Basketball.",
  "body": " NCAA Basketball  Consider the tournament graph representing a NCAA Division 1 men's (or women's) college basketball season in the United States. There are approximately 350 teams in Division 1. Suppose we constructed the graph with an edge from team A to team B if A beat B at least once in the season; and we label the edge with the number of wins. Since the average team plays around 30 games in a season, most of which will be against other Division I teams, we could expect around edges in the graph. This would be somewhat reduced by games with lower division teams and cases where two or more wins over the same team produces one edge. Since 5,250 is much smaller than entries in an adjacency matrix, an edge dictionary or edge list would be more compact than an adjacency matrix. Even if we were to use software to create an adjacency matrix, many programs will identify the fact that a matrix such as the one in this example would be sparse and would leave data in list form and use sparse array methods to work with it.  "
},
{
  "id": "exercises-15-2-2",
  "level": "2",
  "url": "s-data-structures-for-graphs.html#exercises-15-2-2",
  "type": "Exercise",
  "number": "15.2.3.1",
  "title": "",
  "body": " Estimate the number of vertices and edges in each of the following graphs. Would the graph be considered sparse, so that an adjacency matrix would be inefficient?     Vertices: Cities of the world that are served by at least one airline. Edges: Pairs of cities that are connected by a regular direct flight.    Vertices: ASCII characters. Edges: connect characters that differ in their binary code by exactly two bits.    Vertices: All English words. Edges: An edge connects word to word if is a prefix of .         A rough estimate of the number of vertices in the world airline graph would be the number of cities with population greater than or equal to 100,000. This is estimated to be around 4,100. There are many smaller cities that have airports, but some of the metropolitan areas with clusters of large cities are served by only a few airports. 4,000-5,000 is probably a good guess. As for edges, that's a bit more difficult to estimate. It's certainly not a complete graph. Looking at some medium sized airports such as Manchester, NH, the average number of cities that you can go to directly is in the 50-100 range. So a very rough estimate would be . This is far less than , so an edge list or dictionary of some kind would be more efficient.    The number of ASCII characters is 128. Each character would be connected to others and so there are edges. Comparing this to the , an array is probably the best choice.    The Oxford English Dictionary as approximately a half-million words, although many are obsolete. The number of edges is probably of the same order of magnitude as the number of words, so an edge list or dictionary is probably the best choice.     "
},
{
  "id": "exercises-15-2-3",
  "level": "2",
  "url": "s-data-structures-for-graphs.html#exercises-15-2-3",
  "type": "Exercise",
  "number": "15.2.3.2",
  "title": "",
  "body": " Each edge of a graph is colored with one of the four colors red, blue, yellow, or green. How could you represent the edges in this graph using a variation of the adjacency matrix structure?  "
},
{
  "id": "exercises-15-2-4",
  "level": "2",
  "url": "s-data-structures-for-graphs.html#exercises-15-2-4",
  "type": "Exercise",
  "number": "15.2.3.3",
  "title": "",
  "body": " Directed graphs , each with vertex set are represented by the matrices below. Which graphs are isomorphic to one another?               Each graph is isomorphic to itself. In addition, are isomorphic; and are isomorphic to one another.  "
},
{
  "id": "exercises-15-2-5",
  "level": "2",
  "url": "s-data-structures-for-graphs.html#exercises-15-2-5",
  "type": "Exercise",
  "number": "15.2.3.4",
  "title": "",
  "body": " The following Sage command verifies that the wheel graph with four vertices is isomorphic to the complete graph with four vertices.   A list of all graphs in this the graphs database is available via tab completion. Type \"graphs.\" and then hit the tab key to see which graphs are available. This can be done using the Sage application or SageMathCloud, but not sage cells. Find some other pairs of isomorphic graphs in the database.  "
},
{
  "id": "s-Connectivity",
  "level": "1",
  "url": "s-Connectivity.html",
  "type": "Section",
  "number": "15.3",
  "title": "Connectivity",
  "body": " Connectivity  Connectivity in Graphs    This section is devoted to a question that, when posed in relation to the graphs that we have examined, seems trivial. That question is: Given two vertices, and , of a graph, is there a path from to ? If , this question is interpreted as asking whether there is a circuit of positive length starting at . Of course, for the graphs we have seen up to now, this question can be answered after a brief examination.    Preliminaries  There are two situations under which a question of this kind is nontrivial. One is where the graph is very large and an examination of the graph could take a considerable amount of time. Anyone who has tried to solve a maze may have run into a similar problem. The second interesting situation is when we want to pose the question to a machine. If only the information on the edges between the vertices is part of the data structure for the graph, how can you put that information together to determine whether two vertices can be connected by a path?   Connectivity Terminology  Let and be vertices of a directed graph. Vertex is connected to vertex if there is a path from to . Two vertices are strongly connected if they are connected in both directions to one another. A graph is connected if, for each pair of distinct vertices, and , is connected to or is connected to . A graph is strongly connected if every pair of its vertices is strongly connected. For an undirected graph, in which edges can be used in either direction, the notions of strongly connected and connected are the same.    Maximal Path Theorem   If a graph has vertices and vertex is connected to vertex , then there exists a path from to of length no more than .    (Indirect): Suppose is connected to , but the shortest path from to has length , where . A vertex list for a path of length will have vertices. This path can be represented as , where and . Note that since there are only vertices in the graph and vertices are listed in the path after , we can apply the pigeonhole principle and be assured that there must be some duplication in the last vertices of the vertex list, which represents a circuit in the path. This means that our path of minimum length can be reduced, which is a contradiction.      Adjacency Matrix Method  Adjacency Matrix Method   Adjacency Matrix Method   Suppose that the information about edges in a graph is stored in an adjacency matrix, . The relation, , that defines is if there is an edge connecting to . Recall that the composition of with itself, , is defined by if there exists a vertex such that and ; that is, is connected to by a path of length 2. We could prove by induction that the relation , , is defined by if and only if there is a path of length from to . Since the transitive closure, , is the union of ,  , we can answer our connectivity question by determining the transitive closure of , which can be done most easily by keeping our relation in matrix form. is significant in our calculations because it tells us that we need only go as far as to determine the matrix of the transitive closure.    The main advantage of the adjacency matrix method is that the transitive closure matrix can answer all questions about the existence of paths between any vertices. If is the matrix of the transitive closure, is connected to if and only if . A directed graph is connected if or for each . A directed graph is strongly connected if its transitive closure matrix has no zeros.  A disadvantage of the adjacency matrix method is that the transitive closure matrix tells us whether a path exists, but not what the path is. The next algorithm will solve this problem.    Breadth-First Search  Breadth-First Search  We will describe the Breadth-First Search Algorithm first with an example.  The football team at Mediocre State University (MSU) has had a bad year, 2 wins and 9 losses. Thirty days after the end of the football season, the university trustees are meeting to decide whether to rehire the head coach; things look bad for him. However, on the day of the meeting, the coach issues the following press release with results from the past year:   Press Release: MSU complete successful season   The Mediocre State University football team compared favorably with national champion Enormous State University this season.     Mediocre State defeated Local A and M.    Local A and M defeated City College.    City College defeated Corn State U.    ... (25 results later)    Tough Tech defeated Enormous State University (ESU).     ...and ESU went on to win the national championship!    The trustees were so impressed that they rehired the coach with a raise! How did the coach come up with such a list?  In reality, such lists exist occasionally and have appeared in newspapers from time to time. Of course they really don't prove anything since each team that defeated MSU in our example above can produce a similar, shorter chain of results. Since college football records are readily available, the coach could have found this list by trial and error. All that he needed to start with was that his team won at least one game. Since ESU lost one game, there was some hope of producing the chain.  The problem of finding this list is equivalent to finding a path in the tournament graph for last year's football season that initiates at MSU and ends at ESU. Such a graph is far from complete and is likely to be represented using edge lists. To make the coach's problem interesting, let's imagine that only the winner of any game remembers the result of the game. The coach's problem has now taken on the flavor of a maze. To reach ESU, he must communicate with the various teams along the path. One way that the coach could have discovered his list in time is by sending the following messages to the coaches of the two teams that MSU defeated during the season:   When this example was first written, we commented that ties should be ignored. Most recent NCAA rules call for a tiebreaker in college football and so ties are no longer an issue. Email was also not common and we described the process in terms of letter, not email messages. Another change is that the coach could also have asked the MSU math department to use Mathematica or Sage to find the path!    The Coach's Letter   Dear Football Coach:  Please follow these directions exactly.     If you are the coach at ESU, contact the coach at MSU now and tell him who sent you this message.    If you are not the coach at ESU and this is the first message of this type that you have received, then:     Remember from whom you received this message.    Forward a copy of this message, signed by you, to each of the coaches whose teams you defeated during the past year.    Ignore this message if you have received one like it already.        Signed,  Coach of MSU     Observations   From the conditions of this message, it should be clear that if everyone cooperates and if coaches participate within a day of receiving the message:     If a path of length exists from MSU to ESU, then the coach will know about it in days.    By making a series of phone calls, the coach can construct a path that he wants by first calling the coach who defeated ESU (the person who sent ESU's coach that message). This coach will know who sent him a letter, and so on. Therefore, the vertex list of the desired path is constructed in reverse order.    If a total of football games were played, no more than messages will be sent out.    If a day passes without any message being sent out, no path from MSU to ESU exists.    This method could be extended to construct a list of all teams that a given team can be connected to. Simply imagine a series of letters like the one above sent by each football coach and targeted at every other coach.     The general problem of finding a path between two vertices in a graph, if one exists, can be solved exactly as we solved the problem above. The following algorithm, commonly called a breadth-first search, uses a stack.   Stacks  A stack is a fundamental data structure in computer science. A common analogy used to describe stacks is of a stack of plates. If you put a plate on the top of a stack and then want to use a plate, it's natural to use that top plate. So the last plate in is the first plate out. Last in, first out is the short description of the rule for stacks. This is contrast with a queue which uses a First in, first out rule.    Breadth-first Search  Breadth-first Search   A broadcasting algorithm for finding a path between vertex and vertex of a graph having vertices. Each item of a list , consists of a Boolean field and an integer field . The sets , , called depth sets, have the property that if , then the shortest path from vertex to vertex is of length . In Step 5, a stack is used to put the vertex list for the path from the vertex to vertex in the proper order. That stack is the output of the algorithm.     Set the value equal to False,              while ) and          for each k in :  for each edge (k,t):  If == False:                        if :               while :  Push onto        Push onto    Push onto           Notes on Breadth-first Search    This algorithm will produce one path from vertex to vertex , if one exists, and that path will be as short as possible. If more than one path of this length exists, then the one that is produced depends on the order in which the edges are examined and the order in which the elements of are examined in Step 4.    The condition is analogous to the condition that no mail is sent in a given stage of the process, in which case MSU cannot be connected to ESU.    This algorithm can be easily revised to find paths to all vertices that can be reached from vertex . Step 5 would be put off until a specific path to a vertex is needed since the information in contains an efficient list of all paths. The algorithm can also be extended further to find paths between any two vertices.      A simple example  Consider the graph below. The existence of a path from vertex 2 to vertex 3 is not difficult to determine by examination. After a few seconds, you should be able to find two paths of length four. will produce one of them.   A simple example of breadth-first search   Example Graph for breadth-first search    Suppose that the edges from each vertex are sorted in ascending order by terminal vertex. For example, the edges from vertex 3 would be in the order . In addition, assume that in the body of Step 4 of the algorithm, the elements of are used in ascending order. Then at the end of Step 4, the value of will be Therefore, the path is produced by the algorithm. Note that if we wanted a path from 2 to 5, the information in produces the path (2, 1, 5) since and . A shortest circuit that initiates at vertex 2 is also available by noting that , , and ; thus the circuit is the output of the algorithm.     SageMath Note - Graph Searching   SageMath Note  Search in a Graph   The following sequence of Sage cells illustrates how searching can be done in graphs.  Generate a random undirected graph with 18 vertices. For each pair of vertices, an edge is included between them with probability 0.2. Since there are potential edges, we expect that there will be approximately edges. The random number generation is seeded first so that the result will always be the same in spite of the random graph function. Changing or removing that first line will let you experiment with different graphs.   Count the number of edges. In this case the number is a bit less than expected.   Find a shortest path from vertex 0 to vertex 8.   Generate a list of vertices that would be reached in a breadth-first search. The expression Gr.breadth_first_search(0) creates an iterator that is convenient for programming. Wrapping list( ) around the expression shows the order in which the vertices are visited with the depth set indicated in the second coordinates.   Generate a list of vertices that would be reached in a depth-first search. In this type of search you travel in one direction away from the starting point until no further new vertices can be reached. We will discuss this search later.     Exercises   Apply to find a path from 5 to 1 in . What would be the final value of ? Assume that the terminal vertices in edge lists and elements of the depth sets are put into ascending order, as we assumed in .         Apply to find a path from to in the road graph in using the edge list in that example. Assume that the elements of the depth sets are put into ascending order.    In a simple undirected graph with no self-loops, what is the maximum number of edges you can have, keeping the graph unconnected? What is the minimum number of edges that will assure that the graph is connected?   If the number of vertices is , there can be vertices with one vertex not connected to any of the others. One more edge and connectivity is assured.    Use the Breadth-First Search algorithm to determine the shortest path from vertex to vertex in the graphs shown in the below. List the depth sets and the stack that is created.   Shortest paths from to ?   Two graphs for exercise 4      Prove (by induction on ) that if the relation on vertices of a graph is defined by if there is an edge connecting to , then , , is defined by if there is a path of length from to .   Basis: Is the relation , defined by if there is a path of length 1 from ? Yes, since if and only if an edge, which is a path of length , connects to .  Induction: Assume that if and only if there is a path of length from to . We must show that if and only if there is a path of length from to .  By the induction hypothesis, there is a path of length from . And by the basis, there is a path of length one from to . If we combine these two paths, we obtain a path of length from to . Of course, if we start with a path of length from to , we have a path of length from to some vertex and a path of length 1 from to . Therefore, .    "
},
{
  "id": "ss-connectivity-prelim-3",
  "level": "2",
  "url": "s-Connectivity.html#ss-connectivity-prelim-3",
  "type": "Note",
  "number": "15.3.1",
  "title": "Connectivity Terminology.",
  "body": " Connectivity Terminology  Let and be vertices of a directed graph. Vertex is connected to vertex if there is a path from to . Two vertices are strongly connected if they are connected in both directions to one another. A graph is connected if, for each pair of distinct vertices, and , is connected to or is connected to . A graph is strongly connected if every pair of its vertices is strongly connected. For an undirected graph, in which edges can be used in either direction, the notions of strongly connected and connected are the same.  "
},
{
  "id": "theorem-15-3-1",
  "level": "2",
  "url": "s-Connectivity.html#theorem-15-3-1",
  "type": "Theorem",
  "number": "15.3.2",
  "title": "Maximal Path Theorem.",
  "body": " Maximal Path Theorem   If a graph has vertices and vertex is connected to vertex , then there exists a path from to of length no more than .    (Indirect): Suppose is connected to , but the shortest path from to has length , where . A vertex list for a path of length will have vertices. This path can be represented as , where and . Note that since there are only vertices in the graph and vertices are listed in the path after , we can apply the pigeonhole principle and be assured that there must be some duplication in the last vertices of the vertex list, which represents a circuit in the path. This means that our path of minimum length can be reduced, which is a contradiction.   "
},
{
  "id": "ss-adjacency-matrix-method-3",
  "level": "2",
  "url": "s-Connectivity.html#ss-adjacency-matrix-method-3",
  "type": "Algorithm",
  "number": "15.3.3",
  "title": "Adjacency Matrix Method.",
  "body": " Adjacency Matrix Method   Suppose that the information about edges in a graph is stored in an adjacency matrix, . The relation, , that defines is if there is an edge connecting to . Recall that the composition of with itself, , is defined by if there exists a vertex such that and ; that is, is connected to by a path of length 2. We could prove by induction that the relation , , is defined by if and only if there is a path of length from to . Since the transitive closure, , is the union of ,  , we can answer our connectivity question by determining the transitive closure of , which can be done most easily by keeping our relation in matrix form. is significant in our calculations because it tells us that we need only go as far as to determine the matrix of the transitive closure.   "
},
{
  "id": "ss-breadth-first-search-5",
  "level": "2",
  "url": "s-Connectivity.html#ss-breadth-first-search-5",
  "type": "List",
  "number": "15.3.4",
  "title": "Press Release: MSU complete successful season",
  "body": " Press Release: MSU complete successful season   The Mediocre State University football team compared favorably with national champion Enormous State University this season.     Mediocre State defeated Local A and M.    Local A and M defeated City College.    City College defeated Corn State U.    ... (25 results later)    Tough Tech defeated Enormous State University (ESU).     ...and ESU went on to win the national championship!   "
},
{
  "id": "ss-breadth-first-search-9",
  "level": "2",
  "url": "s-Connectivity.html#ss-breadth-first-search-9",
  "type": "Note",
  "number": "15.3.5",
  "title": "",
  "body": " When this example was first written, we commented that ties should be ignored. Most recent NCAA rules call for a tiebreaker in college football and so ties are no longer an issue. Email was also not common and we described the process in terms of letter, not email messages. Another change is that the coach could also have asked the MSU math department to use Mathematica or Sage to find the path!  "
},
{
  "id": "ss-breadth-first-search-10",
  "level": "2",
  "url": "s-Connectivity.html#ss-breadth-first-search-10",
  "type": "List",
  "number": "15.3.6",
  "title": "The Coach’s Letter",
  "body": " The Coach's Letter   Dear Football Coach:  Please follow these directions exactly.     If you are the coach at ESU, contact the coach at MSU now and tell him who sent you this message.    If you are not the coach at ESU and this is the first message of this type that you have received, then:     Remember from whom you received this message.    Forward a copy of this message, signed by you, to each of the coaches whose teams you defeated during the past year.    Ignore this message if you have received one like it already.        Signed,  Coach of MSU   "
},
{
  "id": "ss-breadth-first-search-11",
  "level": "2",
  "url": "s-Connectivity.html#ss-breadth-first-search-11",
  "type": "List",
  "number": "15.3.7",
  "title": "Observations",
  "body": " Observations   From the conditions of this message, it should be clear that if everyone cooperates and if coaches participate within a day of receiving the message:     If a path of length exists from MSU to ESU, then the coach will know about it in days.    By making a series of phone calls, the coach can construct a path that he wants by first calling the coach who defeated ESU (the person who sent ESU's coach that message). This coach will know who sent him a letter, and so on. Therefore, the vertex list of the desired path is constructed in reverse order.    If a total of football games were played, no more than messages will be sent out.    If a day passes without any message being sent out, no path from MSU to ESU exists.    This method could be extended to construct a list of all teams that a given team can be connected to. Simply imagine a series of letters like the one above sent by each football coach and targeted at every other coach.    "
},
{
  "id": "alg-breadth-first",
  "level": "2",
  "url": "s-Connectivity.html#alg-breadth-first",
  "type": "Algorithm",
  "number": "15.3.8",
  "title": "Breadth-first Search.",
  "body": " Breadth-first Search  Breadth-first Search   A broadcasting algorithm for finding a path between vertex and vertex of a graph having vertices. Each item of a list , consists of a Boolean field and an integer field . The sets , , called depth sets, have the property that if , then the shortest path from vertex to vertex is of length . In Step 5, a stack is used to put the vertex list for the path from the vertex to vertex in the proper order. That stack is the output of the algorithm.     Set the value equal to False,              while ) and          for each k in :  for each edge (k,t):  If == False:                        if :               while :  Push onto        Push onto    Push onto         "
},
{
  "id": "ss-breadth-first-search-15",
  "level": "2",
  "url": "s-Connectivity.html#ss-breadth-first-search-15",
  "type": "List",
  "number": "15.3.9",
  "title": "Notes on Breadth-first Search",
  "body": " Notes on Breadth-first Search    This algorithm will produce one path from vertex to vertex , if one exists, and that path will be as short as possible. If more than one path of this length exists, then the one that is produced depends on the order in which the edges are examined and the order in which the elements of are examined in Step 4.    The condition is analogous to the condition that no mail is sent in a given stage of the process, in which case MSU cannot be connected to ESU.    This algorithm can be easily revised to find paths to all vertices that can be reached from vertex . Step 5 would be put off until a specific path to a vertex is needed since the information in contains an efficient list of all paths. The algorithm can also be extended further to find paths between any two vertices.    "
},
{
  "id": "ex-search-example",
  "level": "2",
  "url": "s-Connectivity.html#ex-search-example",
  "type": "Example",
  "number": "15.3.10",
  "title": "A simple example.",
  "body": " A simple example  Consider the graph below. The existence of a path from vertex 2 to vertex 3 is not difficult to determine by examination. After a few seconds, you should be able to find two paths of length four. will produce one of them.   A simple example of breadth-first search   Example Graph for breadth-first search    Suppose that the edges from each vertex are sorted in ascending order by terminal vertex. For example, the edges from vertex 3 would be in the order . In addition, assume that in the body of Step 4 of the algorithm, the elements of are used in ascending order. Then at the end of Step 4, the value of will be Therefore, the path is produced by the algorithm. Note that if we wanted a path from 2 to 5, the information in produces the path (2, 1, 5) since and . A shortest circuit that initiates at vertex 2 is also available by noting that , , and ; thus the circuit is the output of the algorithm.  "
},
{
  "id": "exercises-15-3-2",
  "level": "2",
  "url": "s-Connectivity.html#exercises-15-3-2",
  "type": "Exercise",
  "number": "15.3.5.1",
  "title": "",
  "body": " Apply to find a path from 5 to 1 in . What would be the final value of ? Assume that the terminal vertices in edge lists and elements of the depth sets are put into ascending order, as we assumed in .       "
},
{
  "id": "exercises-15-3-3",
  "level": "2",
  "url": "s-Connectivity.html#exercises-15-3-3",
  "type": "Exercise",
  "number": "15.3.5.2",
  "title": "",
  "body": " Apply to find a path from to in the road graph in using the edge list in that example. Assume that the elements of the depth sets are put into ascending order.  "
},
{
  "id": "exercises-15-3-4",
  "level": "2",
  "url": "s-Connectivity.html#exercises-15-3-4",
  "type": "Exercise",
  "number": "15.3.5.3",
  "title": "",
  "body": " In a simple undirected graph with no self-loops, what is the maximum number of edges you can have, keeping the graph unconnected? What is the minimum number of edges that will assure that the graph is connected?   If the number of vertices is , there can be vertices with one vertex not connected to any of the others. One more edge and connectivity is assured.  "
},
{
  "id": "exercises-15-3-5",
  "level": "2",
  "url": "s-Connectivity.html#exercises-15-3-5",
  "type": "Exercise",
  "number": "15.3.5.4",
  "title": "",
  "body": " Use the Breadth-First Search algorithm to determine the shortest path from vertex to vertex in the graphs shown in the below. List the depth sets and the stack that is created.   Shortest paths from to ?   Two graphs for exercise 4    "
},
{
  "id": "exercises-15-3-6",
  "level": "2",
  "url": "s-Connectivity.html#exercises-15-3-6",
  "type": "Exercise",
  "number": "15.3.5.5",
  "title": "",
  "body": " Prove (by induction on ) that if the relation on vertices of a graph is defined by if there is an edge connecting to , then , , is defined by if there is a path of length from to .   Basis: Is the relation , defined by if there is a path of length 1 from ? Yes, since if and only if an edge, which is a path of length , connects to .  Induction: Assume that if and only if there is a path of length from to . We must show that if and only if there is a path of length from to .  By the induction hypothesis, there is a path of length from . And by the basis, there is a path of length one from to . If we combine these two paths, we obtain a path of length from to . Of course, if we start with a path of length from to , we have a path of length from to some vertex and a path of length 1 from to . Therefore, .  "
},
{
  "id": "s-traversals",
  "level": "1",
  "url": "s-traversals.html",
  "type": "Section",
  "number": "15.4",
  "title": "Traversals: Eulerian and Hamiltonian Graphs",
  "body": " Traversals: Eulerian and Hamiltonian Graphs  Traversals of Graphs   The subject of graph traversals has a long history. In fact, the solution by Leonhard Euler (Switzerland, 1707-83) of the Koenigsberg Bridge Problem is considered by many to represent the birth of graph theory.    Eulerian Graphs    A map of Koenigsberg, circa 1735   Image of an old map of Koenigsberg     A multigraph for the bridges of Koenigsberg  Multigraph representation of Koenigsberg map     A map of the Prussian city of Koenigsberg (circa 1735) in shows that there were seven bridges connecting the four land masses that made up the city. The legend of this problem states that the citizens of Koenigsberg searched in vain for a walking tour that passed over each bridge exactly once. No one could design such a tour and the search was abruptly abandoned with the publication of Euler's Theorem.   Euler's Theorem: Koenigsberg Case   Euler's Theorem  Koenigsberg Case    No walking tour of Koenigsberg can be designed so that each bridge is used exactly once.    The map of Koenigsberg can be represented as an undirected multigraph, as in . The four land masses are the vertices and each edge represents a bridge.  The desired tour is then a path that uses each edge once and only once. Since the path can start and end at two different vertices, there are two remaining vertices that must be intermediate vertices in the path. If is an intermediate vertex, then every time that you visit , you must use two of its incident edges, one to enter and one to exit. Therefore, there must be an even number of edges connecting to the other vertices. Since every vertex in the Koenigsberg graph has an odd number of edges, no tour of the type that is desired is possible.    As is typical of most mathematicians, Euler wasn't satisfied with solving only the Koenigsberg problem. His original theorem, which is paraphrased below, concerned the existence of paths and circuits like those sought in Koenigsberg. These paths and circuits have become associated with Euler's name.   Eulerian Paths, Circuits, Graphs  Eulerian Paths, Circuits, Graphs   An Eulerian path through a graph is a path whose edge list contains each edge of the graph exactly once. If the path is a circuit, then it is called an Eulerian circuit. An Eulerian graph is a graph that possesses a Eulerian circuit.     An Eulerian Graph  Without tracing any paths, we can be sure that the graph below has an Eulerian circuit because all vertices have an even degree. This follows from the following theorem.   An Eulerian graph   An Eulerian graph      Euler's Theorem: General Case  Euler's Theorem   An undirected graph has an Eulerian path if and only if it is connected and has either zero or two vertices with an odd degree. If no vertex has an odd degree, then the graph is Eulerian.    It can be proven by induction that the number of vertices in an undirected graph that have an odd degree must be even. We will leave the proof of this fact to the reader as an exercise. The necessity of having either zero or two vertices of odd degree is clear from the proof of the Koenigsberg case of this theorem. Therefore, we will concentrate on proving that this condition is sufficient to ensure that a graph has an Eulerian path. Let be the number of vertices with odd degree.  Phase 1. If , start at any vertex, , and travel along any path, not using any edge twice. Since each vertex has an even degree, this path can always be continued past each vertex that you reach except . The result is a circuit that includes . If , let be either one of the vertices of odd degree. Trace any path starting at using up edges until you can go no further, as in the case. This time, the path that you obtain must end at the other vertex of odd degree that we will call . At the end of Phase 1, we have an initial path that may or may not be Eulerian. If it is not Eulerian, Phase 2 can be repeated until all of the edges have been used. Since the number of unused edges is decreased in any use of Phase 2, an Eulerian path must be obtained in a finite number of steps.  Phase 2. As we enter this phase, we have constructed a path that uses a proper subset of the edges in our graph. We will refer to this path as the current path. Let be the vertices of our graph, the edges, and the edges that have been used in the current path. Consider the graph . Note that every vertex in has an even degree. Select any edge, , from Let and be the vertices that connects. Trace a new path starting at whose first edge is . We can be sure that at least one vertex of the new path is also in the current path since is connected. Starting at , there exists a path in to any vertex in the current path. At some point along this path, which we can consider the start of the new path, we will have intersected the current path. Since the degree of each vertex in is even, any path that we start at can be continued until it is a circuit. Now, we simply augment the current path with this circuit. As we travel along the current path, the first time that we intersect the new path, we travel along it (see ). Once we complete the circuit that is the new path, we resume the traversal of the current path.   Path augmentation   Drawing of path augmentation    If the result of this phase is an Eulerian path, then we are finished; otherwise, repeat this phase.     Complete Eulerian Graphs  The complete undirected graphs , . .., are Eulerian. If , then is not Eulerian.     Hamiltonian Graphs  To search for a path that uses every vertex of a graph exactly once seems to be a natural next problem after you have considered Eulerian graphs.The Irish mathematician Sir William Rowan Hamilton (1805-65) is given credit for first defining such paths. He is also credited with discovering the quaternions, for which he was honored by the Irish government with a postage stamp in 2005.   Irish stamp honoring Sir William Rowan Hamilton   Irish stamp honoring Sir William Rowan Hamilton     Hamiltonian Path, Circuit, and Graphs  Hamiltonian Paths, Circuits, and Graphs   A Hamiltonian path through a graph is a path whose vertex list contains each vertex of the graph exactly once, except if the path is a circuit, in which case the initial vertex appears a second time as the terminal vertex. If the path is a circuit, then it is called a Hamiltonian circuit. A Hamiltonian graph is a graph that possesses a Hamiltonian circuit.     The Original Hamiltonian Graph  shows a graph that is Hamiltonian. In fact, it is the graph that Hamilton used as an example to pose the question of existence of Hamiltonian paths in 1859. In its original form, the puzzle that was posed to readers was called Around the World. The vertices were labeled with names of major cities of the world and the object was to complete a tour of these cities. The graph is also referred to as the dodecahedron graph, where vertices correspond with the corners of a dodecahedron and the edges are the edges of the solid that connect the corners.    A Dodecahedron   A three dimensional dodecahedron     The Dodecahedron Graph   A graph representing a dodecahedron       Unfortunately, a simple condition doesn't exist that characterizes a Hamiltonian graph. An obvious necessary condition is that the graph be connected; however, there is a connected undirected graph with four vertices that is not Hamiltonian. Can you draw such a graph?    What Is Possible and What Is Impossible?  The search for a Hamiltonian path in a graph is typical of many simple-sounding problems in graph theory that have proven to be very difficult to solve. Although there are simple algorithms for conducting the search, they are impractical for large problems because they take such a long time to complete as graph size increases. Currently, every algorithm to search for a Hamiltonian path in a graph takes a time that grows at a rate that is greater than any polynomial as a function of the number of vertices. Rates of this type are called super-polynomial . That is, if is the time it takes to search a graph of vertices, and is any polynomial, then for all but possibly a finite number of positive values for .  It is an unproven but widely held belief that no faster algorithm exists to search for Hamiltonian paths in general graphs. To sum up, the problem of determining whether a graph is Hamiltonian is theoretically possible; however, for large graphs we consider it a practical impossibility. Many of the problems we will discuss in the next section, particularly the Traveling Salesman Problem, are thought to be impossible in the same sense.    The -cube  N-cube    the -cube    Let , and let be the set of strings of 0's and 1's with length . The -cube is the undirected graph with a vertex for each string in and an edge connecting each pair of strings that differ in exactly one position. The -cube is normally denoted .    The -cube is among the graphs that are defined within the graphs package of SageMath and is created with the expression graphs.CubeGraph(n) .    Analog-to-digital Conversion and the Gray Code  Analog-to-digital Conversion  A common problem encountered in engineering is that of analog-to-digital (a-d) conversion, where the reading on a dial, for example, must be converted to a numerical value. In order for this conversion to be done reliably and quickly, one must solve an interesting problem in graph theory. Before this problem is posed, we will make the connection between a-d conversion and the graph problem using a simple example. Suppose a dial can be turned in any direction, and that the positions will be converted to one of the numbers zero through seven as depicted in . The angles from 0 to 360 are divided into eight equal parts, and each part is assigned a number starting with 0 and increasing clockwise. If the dial points in any of these sectors the conversion is to the number of that sector. If the dial is on the boundary, then we will be satisfied with the conversion to either of the numbers in the bordering sectors. This conversion can be thought of as giving an approximate angle of the dial, for if the dial is in sector , then the angle that the dial makes with east is approximately .   Analog-Digital Dial   Image of an analog-digital dial    Now that the desired conversion has been identified, we will describe a solution that has one major error in it, and then identify how this problem can be rectified. All digital computers represent numbers in binary form, as a sequence of 0's and 1's called bits, short for binary digits. The binary representations of numbers 0 through 7 are:   The way that we could send those bits to a computer is by coating parts of the back of the dial with a metallic substance, as in . For each of the three concentric circles on the dial there is a small magnet. If a magnet lies under a part of the dial that has been coated with metal, then it will turn a switch ON, whereas the switch stays OFF when no metal is detected above a magnet. Notice how every ON\/OFF combination of the three switches is possible given the way the back of the dial is coated.  If the dial is placed so that the magnets are in the middle of a sector, we expect this method to work well. There is a problem on certain boundaries, however. If the dial is turned so that the magnets are between sectors three and four, for example, then it is unclear what the result will be. This is due to the fact that each magnet will have only a fraction of the required metal above it to turn its switch ON. Due to expected irregularities in the coating of the dial, we can be safe in saying that for each switch either ON or OFF could be the result, and so if the dial is between sectors three and four, any number could be indicated. This problem does not occur between every sector. For example, between sectors 0 and 1, there is only one switch that cannot be predicted. No matter what the outcome is for the units switch in this case, the indicated sector must be either 0 or 1. This consistent with the original objective that a positioning of the dial on a boundary of two sectors should produce the number of either sector.   Coating scheme for the Analog-Digital Dial   Image of described coating scheme for the analog-digital dial    Is there a way to coat the sectors on the back of the dial so that each of the eight patterns corresponding to the numbers 0 to 7 appears once, and so that between any two adjacent sectors there is only one switch that will have a questionable setting? What we are describing here is a Hamiltonian circuit of the ( ). If one can draw a path along the edges in the 3-cube that starts at any vertex, passes through every other vertex once, and returns to the start, then that sequence of bit patterns can be used to coat the back of the dial so that between every sector there is only one questionable switch. Such a path is not difficult to find, as we will see below.   The 3-cube   A 3-cube graph    Many A-D conversion problems require many more sectors and switches than this example, and the same kinds of problems can occur. The solution would be to find a path within a much larger yet similar graph. For example, there might be 1,024 sectors with 10 switches, resulting in a graph with 1,024 vertices. Fortunately, our solution will apply to the -cube for any positive value of .  A Hamiltonian circuit of the -cube can be described recursively. The circuit itself, called the Gray Code, is not the only Hamiltonian circuit of the -cube, but it is the easiest to describe. The standard way to write the Gray Code is as a column of strings, where the last string is followed by the first string to complete the circuit.  Basis for the Gray Code ( ): The Gray Code for the 1-cube is . Note that the edge between 0 and 1 is used twice in this circuit. That doesn't violate any rules for Hamiltonian circuits, but can only happen if a graph has two vertices.  Recursive definition of the Gray Code: Given the Gray Code for the -cube, , then is obtained by (1) listing with each string prefixed with 0, and then (2) reversing the list of strings in with each string prefixed with 1. Symbolically, the recursion can be expressed as follows, where is the reverse of list .   The Gray Codes for the 2-cube and 3-cube are   One question might come to mind at this point. If the coatings of the dial no longer in the sequence from 0 to 7, how would you interpret the patterns that are on the back of the dial as numbers from 0 to 7? In Chapter 14 we will see that if the Gray Code is used, this decoding is quite easy.    Applications of the Gray Code  One application of the Gray code was discussed in the Introduction to this book. Another application is in statistics. In a statistical analysis, there is often a variable that depends on several factors, but exactly which factors are significant may not be obvious. For each subset of factors, there would be certain quantities to be calculated. One such quantity is the multiple correlation coefficient for a subset. If the correlation coefficient for a given subset, , is known, then the value for any subset that is obtained by either deleting or adding an element to can be obtained quickly. To calculate the correlation coefficient for each set, we simply travel along , where is the number of factors being studied. The first vertex will always be the string of 0's, which represents the empty set. For each vertex that you visit, the set that it corresponds to contains the factor if the character is a 1.   The 3-cube and its generalization, the -cube, play a role in the design of a multiprocessor called a hypercube. A multiprocessor is a computer that consists of several independent processors that can operate simultaneously and are connected to one another by a network of connections. In a hypercube with processors, the processors are numbered 0 to . Two processors are connected if their binary representations differ in exactly one bit. The hypercube has proven to be the best possible network for certain problems requiring the use of a supercomputer.    Exercises   Locate a map of New York City and draw a graph that represents its land masses, bridges and tunnels. Is there an Eulerian path through New York? You can do the same with any other city that has at least two land masses.   Using a recent road map, it appears that an Eulerian circuit exists in New York City, not including the small islands that belong to the city. Lowell, Massachusetts, is located at the confluence of the Merrimack and Concord rivers and has several canals flowing through it. No Eulerian path exists for Lowell.    Which of these drawings can be drawn without removing your pencil from the paper and without drawing any line twice? (Hint: think about the Bridges of Koenigsberg)     Three line drawings for exercise 2      Write out the Gray Code for the 4-cube.   Gray Code for the 4-cube:     Find a Hamiltonian circuit for the dodecahedron graph in .    The Euler Construction Company has been contracted to construct an extra bridge in Koenigsberg so that an Eulerian path through the town exists. Can this be done, and if so, where should the bridge be built?   Any bridge between two land masses will be sufficient. To get an Eulerian circuit, you must add a second bridge that connects the two land masses that were not connected by the first bridge.    Consider the graphs in . Determine which of the graphs have an Eulerian path, and find an Eulerian path for the graphs that have one.   Graphs for exercise 6   Image of 4 graphs for exercise 6      Formulate Euler's theorem for directed graphs.   Let be a directed graph. has an Eulerian circuit if and only if is connected and for all . There exists an Eulerian path from if and only if is connected, , , and for all other vertices in the indegree and outdegree are equal.    Prove that the number of vertices in an undirected graph with odd degree must be even.   Prove by induction on the number of edges.       Under what conditions will a round-robin tournament graph be Eulerian?    Prove that every round-robin tournament graph is Hamiltonian.      A round-robin tournament graph is rarely Eulerian. It will be Eulerian if it has an odd number of vertices and each vertex (team) wins exactly as many times as it loses. Every round-robin tournament graph has a Hamiltonian path. This can be proven by induction on the number of vertices.    For what values of is the -cube Eulerian?    A particular set of dominoes has 21 tiles: . Is it possible to lay all 21 tiles in a line so that each adjacent pair of tile ends matches (that is, each 1 abuts a 1, and so on)?   No, such a line does not exist. The dominoes with two different numbers correspond with edges in a . See corresponding dominos and edges in . Dominos with two equal numbers could be held back and inserted into the line created with the other dominoes if such a line exists. For example, if were part of the line, could be inserted between those two dominoes. The line we want exists if and only if there exists an Eulerian path in a . Since all six vertices of a have odd degree no such path exists.   Correspondence between a line of dominos and a path in a    Four dominos lay end-to-end with numbers on abutting ends matching. They correspond with four connecting edges in a .      "
},
{
  "id": "fig-konigsberg-map",
  "level": "2",
  "url": "s-traversals.html#fig-konigsberg-map",
  "type": "Figure",
  "number": "15.4.1",
  "title": "",
  "body": " A map of Koenigsberg, circa 1735   Image of an old map of Koenigsberg   "
},
{
  "id": "fig-konigsberg-multigraph",
  "level": "2",
  "url": "s-traversals.html#fig-konigsberg-multigraph",
  "type": "Figure",
  "number": "15.4.2",
  "title": "",
  "body": " A multigraph for the bridges of Koenigsberg  Multigraph representation of Koenigsberg map   "
},
{
  "id": "th-euler-theorem-koenigsberg-case",
  "level": "2",
  "url": "s-traversals.html#th-euler-theorem-koenigsberg-case",
  "type": "Theorem",
  "number": "15.4.3",
  "title": "Euler’s Theorem: Koenigsberg Case.",
  "body": " Euler's Theorem: Koenigsberg Case   Euler's Theorem  Koenigsberg Case    No walking tour of Koenigsberg can be designed so that each bridge is used exactly once.    The map of Koenigsberg can be represented as an undirected multigraph, as in . The four land masses are the vertices and each edge represents a bridge.  The desired tour is then a path that uses each edge once and only once. Since the path can start and end at two different vertices, there are two remaining vertices that must be intermediate vertices in the path. If is an intermediate vertex, then every time that you visit , you must use two of its incident edges, one to enter and one to exit. Therefore, there must be an even number of edges connecting to the other vertices. Since every vertex in the Koenigsberg graph has an odd number of edges, no tour of the type that is desired is possible.   "
},
{
  "id": "def-eulerian-paths-circuits-graphs",
  "level": "2",
  "url": "s-traversals.html#def-eulerian-paths-circuits-graphs",
  "type": "Definition",
  "number": "15.4.4",
  "title": "Eulerian Paths, Circuits, Graphs.",
  "body": " Eulerian Paths, Circuits, Graphs  Eulerian Paths, Circuits, Graphs   An Eulerian path through a graph is a path whose edge list contains each edge of the graph exactly once. If the path is a circuit, then it is called an Eulerian circuit. An Eulerian graph is a graph that possesses a Eulerian circuit.   "
},
{
  "id": "ex-an-eulerian-graph",
  "level": "2",
  "url": "s-traversals.html#ex-an-eulerian-graph",
  "type": "Example",
  "number": "15.4.5",
  "title": "An Eulerian Graph.",
  "body": " An Eulerian Graph  Without tracing any paths, we can be sure that the graph below has an Eulerian circuit because all vertices have an even degree. This follows from the following theorem.   An Eulerian graph   An Eulerian graph    "
},
{
  "id": "theorem-euler-theorem-general",
  "level": "2",
  "url": "s-traversals.html#theorem-euler-theorem-general",
  "type": "Theorem",
  "number": "15.4.7",
  "title": "Euler’s Theorem: General Case.",
  "body": " Euler's Theorem: General Case  Euler's Theorem   An undirected graph has an Eulerian path if and only if it is connected and has either zero or two vertices with an odd degree. If no vertex has an odd degree, then the graph is Eulerian.    It can be proven by induction that the number of vertices in an undirected graph that have an odd degree must be even. We will leave the proof of this fact to the reader as an exercise. The necessity of having either zero or two vertices of odd degree is clear from the proof of the Koenigsberg case of this theorem. Therefore, we will concentrate on proving that this condition is sufficient to ensure that a graph has an Eulerian path. Let be the number of vertices with odd degree.  Phase 1. If , start at any vertex, , and travel along any path, not using any edge twice. Since each vertex has an even degree, this path can always be continued past each vertex that you reach except . The result is a circuit that includes . If , let be either one of the vertices of odd degree. Trace any path starting at using up edges until you can go no further, as in the case. This time, the path that you obtain must end at the other vertex of odd degree that we will call . At the end of Phase 1, we have an initial path that may or may not be Eulerian. If it is not Eulerian, Phase 2 can be repeated until all of the edges have been used. Since the number of unused edges is decreased in any use of Phase 2, an Eulerian path must be obtained in a finite number of steps.  Phase 2. As we enter this phase, we have constructed a path that uses a proper subset of the edges in our graph. We will refer to this path as the current path. Let be the vertices of our graph, the edges, and the edges that have been used in the current path. Consider the graph . Note that every vertex in has an even degree. Select any edge, , from Let and be the vertices that connects. Trace a new path starting at whose first edge is . We can be sure that at least one vertex of the new path is also in the current path since is connected. Starting at , there exists a path in to any vertex in the current path. At some point along this path, which we can consider the start of the new path, we will have intersected the current path. Since the degree of each vertex in is even, any path that we start at can be continued until it is a circuit. Now, we simply augment the current path with this circuit. As we travel along the current path, the first time that we intersect the new path, we travel along it (see ). Once we complete the circuit that is the new path, we resume the traversal of the current path.   Path augmentation   Drawing of path augmentation    If the result of this phase is an Eulerian path, then we are finished; otherwise, repeat this phase.   "
},
{
  "id": "ex-complete-eulerian",
  "level": "2",
  "url": "s-traversals.html#ex-complete-eulerian",
  "type": "Example",
  "number": "15.4.9",
  "title": "Complete Eulerian Graphs.",
  "body": " Complete Eulerian Graphs  The complete undirected graphs , . .., are Eulerian. If , then is not Eulerian.  "
},
{
  "id": "fig-hamilton-stamp",
  "level": "2",
  "url": "s-traversals.html#fig-hamilton-stamp",
  "type": "Figure",
  "number": "15.4.10",
  "title": "",
  "body": " Irish stamp honoring Sir William Rowan Hamilton   Irish stamp honoring Sir William Rowan Hamilton   "
},
{
  "id": "def-hamiltonian-path-circuit-graph",
  "level": "2",
  "url": "s-traversals.html#def-hamiltonian-path-circuit-graph",
  "type": "Definition",
  "number": "15.4.11",
  "title": "Hamiltonian Path, Circuit, and Graphs.",
  "body": " Hamiltonian Path, Circuit, and Graphs  Hamiltonian Paths, Circuits, and Graphs   A Hamiltonian path through a graph is a path whose vertex list contains each vertex of the graph exactly once, except if the path is a circuit, in which case the initial vertex appears a second time as the terminal vertex. If the path is a circuit, then it is called a Hamiltonian circuit. A Hamiltonian graph is a graph that possesses a Hamiltonian circuit.   "
},
{
  "id": "ex-dodec-graph",
  "level": "2",
  "url": "s-traversals.html#ex-dodec-graph",
  "type": "Example",
  "number": "15.4.12",
  "title": "The Original Hamiltonian Graph.",
  "body": " The Original Hamiltonian Graph  shows a graph that is Hamiltonian. In fact, it is the graph that Hamilton used as an example to pose the question of existence of Hamiltonian paths in 1859. In its original form, the puzzle that was posed to readers was called Around the World. The vertices were labeled with names of major cities of the world and the object was to complete a tour of these cities. The graph is also referred to as the dodecahedron graph, where vertices correspond with the corners of a dodecahedron and the edges are the edges of the solid that connect the corners.    A Dodecahedron   A three dimensional dodecahedron     The Dodecahedron Graph   A graph representing a dodecahedron     "
},
{
  "id": "ss-hamiltonian-graphs-6",
  "level": "2",
  "url": "s-traversals.html#ss-hamiltonian-graphs-6",
  "type": "Problem",
  "number": "15.4.15",
  "title": "",
  "body": " Unfortunately, a simple condition doesn't exist that characterizes a Hamiltonian graph. An obvious necessary condition is that the graph be connected; however, there is a connected undirected graph with four vertices that is not Hamiltonian. Can you draw such a graph?  "
},
{
  "id": "ss-hamiltonian-graphs-7",
  "level": "2",
  "url": "s-traversals.html#ss-hamiltonian-graphs-7",
  "type": "Note",
  "number": "15.4.16",
  "title": "What Is Possible and What Is Impossible?",
  "body": " What Is Possible and What Is Impossible?  The search for a Hamiltonian path in a graph is typical of many simple-sounding problems in graph theory that have proven to be very difficult to solve. Although there are simple algorithms for conducting the search, they are impractical for large problems because they take such a long time to complete as graph size increases. Currently, every algorithm to search for a Hamiltonian path in a graph takes a time that grows at a rate that is greater than any polynomial as a function of the number of vertices. Rates of this type are called super-polynomial . That is, if is the time it takes to search a graph of vertices, and is any polynomial, then for all but possibly a finite number of positive values for .  It is an unproven but widely held belief that no faster algorithm exists to search for Hamiltonian paths in general graphs. To sum up, the problem of determining whether a graph is Hamiltonian is theoretically possible; however, for large graphs we consider it a practical impossibility. Many of the problems we will discuss in the next section, particularly the Traveling Salesman Problem, are thought to be impossible in the same sense.  "
},
{
  "id": "def-n-cube",
  "level": "2",
  "url": "s-traversals.html#def-n-cube",
  "type": "Definition",
  "number": "15.4.17",
  "title": "The <span class=\"process-math\">\\(n\\)<\/span>-cube.",
  "body": " The -cube  N-cube    the -cube    Let , and let be the set of strings of 0's and 1's with length . The -cube is the undirected graph with a vertex for each string in and an edge connecting each pair of strings that differ in exactly one position. The -cube is normally denoted .   "
},
{
  "id": "ex-intro-a-to-d",
  "level": "2",
  "url": "s-traversals.html#ex-intro-a-to-d",
  "type": "Example",
  "number": "15.4.18",
  "title": "Analog-to-digital Conversion and the Gray Code.",
  "body": " Analog-to-digital Conversion and the Gray Code  Analog-to-digital Conversion  A common problem encountered in engineering is that of analog-to-digital (a-d) conversion, where the reading on a dial, for example, must be converted to a numerical value. In order for this conversion to be done reliably and quickly, one must solve an interesting problem in graph theory. Before this problem is posed, we will make the connection between a-d conversion and the graph problem using a simple example. Suppose a dial can be turned in any direction, and that the positions will be converted to one of the numbers zero through seven as depicted in . The angles from 0 to 360 are divided into eight equal parts, and each part is assigned a number starting with 0 and increasing clockwise. If the dial points in any of these sectors the conversion is to the number of that sector. If the dial is on the boundary, then we will be satisfied with the conversion to either of the numbers in the bordering sectors. This conversion can be thought of as giving an approximate angle of the dial, for if the dial is in sector , then the angle that the dial makes with east is approximately .   Analog-Digital Dial   Image of an analog-digital dial    Now that the desired conversion has been identified, we will describe a solution that has one major error in it, and then identify how this problem can be rectified. All digital computers represent numbers in binary form, as a sequence of 0's and 1's called bits, short for binary digits. The binary representations of numbers 0 through 7 are:   The way that we could send those bits to a computer is by coating parts of the back of the dial with a metallic substance, as in . For each of the three concentric circles on the dial there is a small magnet. If a magnet lies under a part of the dial that has been coated with metal, then it will turn a switch ON, whereas the switch stays OFF when no metal is detected above a magnet. Notice how every ON\/OFF combination of the three switches is possible given the way the back of the dial is coated.  If the dial is placed so that the magnets are in the middle of a sector, we expect this method to work well. There is a problem on certain boundaries, however. If the dial is turned so that the magnets are between sectors three and four, for example, then it is unclear what the result will be. This is due to the fact that each magnet will have only a fraction of the required metal above it to turn its switch ON. Due to expected irregularities in the coating of the dial, we can be safe in saying that for each switch either ON or OFF could be the result, and so if the dial is between sectors three and four, any number could be indicated. This problem does not occur between every sector. For example, between sectors 0 and 1, there is only one switch that cannot be predicted. No matter what the outcome is for the units switch in this case, the indicated sector must be either 0 or 1. This consistent with the original objective that a positioning of the dial on a boundary of two sectors should produce the number of either sector.   Coating scheme for the Analog-Digital Dial   Image of described coating scheme for the analog-digital dial    Is there a way to coat the sectors on the back of the dial so that each of the eight patterns corresponding to the numbers 0 to 7 appears once, and so that between any two adjacent sectors there is only one switch that will have a questionable setting? What we are describing here is a Hamiltonian circuit of the ( ). If one can draw a path along the edges in the 3-cube that starts at any vertex, passes through every other vertex once, and returns to the start, then that sequence of bit patterns can be used to coat the back of the dial so that between every sector there is only one questionable switch. Such a path is not difficult to find, as we will see below.   The 3-cube   A 3-cube graph    Many A-D conversion problems require many more sectors and switches than this example, and the same kinds of problems can occur. The solution would be to find a path within a much larger yet similar graph. For example, there might be 1,024 sectors with 10 switches, resulting in a graph with 1,024 vertices. Fortunately, our solution will apply to the -cube for any positive value of .  A Hamiltonian circuit of the -cube can be described recursively. The circuit itself, called the Gray Code, is not the only Hamiltonian circuit of the -cube, but it is the easiest to describe. The standard way to write the Gray Code is as a column of strings, where the last string is followed by the first string to complete the circuit.  Basis for the Gray Code ( ): The Gray Code for the 1-cube is . Note that the edge between 0 and 1 is used twice in this circuit. That doesn't violate any rules for Hamiltonian circuits, but can only happen if a graph has two vertices.  Recursive definition of the Gray Code: Given the Gray Code for the -cube, , then is obtained by (1) listing with each string prefixed with 0, and then (2) reversing the list of strings in with each string prefixed with 1. Symbolically, the recursion can be expressed as follows, where is the reverse of list .   The Gray Codes for the 2-cube and 3-cube are   One question might come to mind at this point. If the coatings of the dial no longer in the sequence from 0 to 7, how would you interpret the patterns that are on the back of the dial as numbers from 0 to 7? In Chapter 14 we will see that if the Gray Code is used, this decoding is quite easy.  "
},
{
  "id": "ss-hamiltonian-graphs-12",
  "level": "2",
  "url": "s-traversals.html#ss-hamiltonian-graphs-12",
  "type": "Example",
  "number": "15.4.22",
  "title": "Applications of the Gray Code.",
  "body": " Applications of the Gray Code  One application of the Gray code was discussed in the Introduction to this book. Another application is in statistics. In a statistical analysis, there is often a variable that depends on several factors, but exactly which factors are significant may not be obvious. For each subset of factors, there would be certain quantities to be calculated. One such quantity is the multiple correlation coefficient for a subset. If the correlation coefficient for a given subset, , is known, then the value for any subset that is obtained by either deleting or adding an element to can be obtained quickly. To calculate the correlation coefficient for each set, we simply travel along , where is the number of factors being studied. The first vertex will always be the string of 0's, which represents the empty set. For each vertex that you visit, the set that it corresponds to contains the factor if the character is a 1.  "
},
{
  "id": "exercises-15-4-2",
  "level": "2",
  "url": "s-traversals.html#exercises-15-4-2",
  "type": "Exercise",
  "number": "15.4.3.1",
  "title": "",
  "body": " Locate a map of New York City and draw a graph that represents its land masses, bridges and tunnels. Is there an Eulerian path through New York? You can do the same with any other city that has at least two land masses.   Using a recent road map, it appears that an Eulerian circuit exists in New York City, not including the small islands that belong to the city. Lowell, Massachusetts, is located at the confluence of the Merrimack and Concord rivers and has several canals flowing through it. No Eulerian path exists for Lowell.  "
},
{
  "id": "exercises-15-4-3",
  "level": "2",
  "url": "s-traversals.html#exercises-15-4-3",
  "type": "Exercise",
  "number": "15.4.3.2",
  "title": "",
  "body": " Which of these drawings can be drawn without removing your pencil from the paper and without drawing any line twice? (Hint: think about the Bridges of Koenigsberg)     Three line drawings for exercise 2    "
},
{
  "id": "exercises-15-4-4",
  "level": "2",
  "url": "s-traversals.html#exercises-15-4-4",
  "type": "Exercise",
  "number": "15.4.3.3",
  "title": "",
  "body": " Write out the Gray Code for the 4-cube.   Gray Code for the 4-cube:   "
},
{
  "id": "exercises-15-4-5",
  "level": "2",
  "url": "s-traversals.html#exercises-15-4-5",
  "type": "Exercise",
  "number": "15.4.3.4",
  "title": "",
  "body": " Find a Hamiltonian circuit for the dodecahedron graph in .  "
},
{
  "id": "exercises-15-4-6",
  "level": "2",
  "url": "s-traversals.html#exercises-15-4-6",
  "type": "Exercise",
  "number": "15.4.3.5",
  "title": "",
  "body": " The Euler Construction Company has been contracted to construct an extra bridge in Koenigsberg so that an Eulerian path through the town exists. Can this be done, and if so, where should the bridge be built?   Any bridge between two land masses will be sufficient. To get an Eulerian circuit, you must add a second bridge that connects the two land masses that were not connected by the first bridge.  "
},
{
  "id": "exercises-15-4-7",
  "level": "2",
  "url": "s-traversals.html#exercises-15-4-7",
  "type": "Exercise",
  "number": "15.4.3.6",
  "title": "",
  "body": " Consider the graphs in . Determine which of the graphs have an Eulerian path, and find an Eulerian path for the graphs that have one.   Graphs for exercise 6   Image of 4 graphs for exercise 6    "
},
{
  "id": "exercises-15-4-8",
  "level": "2",
  "url": "s-traversals.html#exercises-15-4-8",
  "type": "Exercise",
  "number": "15.4.3.7",
  "title": "",
  "body": " Formulate Euler's theorem for directed graphs.   Let be a directed graph. has an Eulerian circuit if and only if is connected and for all . There exists an Eulerian path from if and only if is connected, , , and for all other vertices in the indegree and outdegree are equal.  "
},
{
  "id": "exercises-15-4-9",
  "level": "2",
  "url": "s-traversals.html#exercises-15-4-9",
  "type": "Exercise",
  "number": "15.4.3.8",
  "title": "",
  "body": " Prove that the number of vertices in an undirected graph with odd degree must be even.   Prove by induction on the number of edges.  "
},
{
  "id": "exercises-15-4-10",
  "level": "2",
  "url": "s-traversals.html#exercises-15-4-10",
  "type": "Exercise",
  "number": "15.4.3.9",
  "title": "",
  "body": "    Under what conditions will a round-robin tournament graph be Eulerian?    Prove that every round-robin tournament graph is Hamiltonian.      A round-robin tournament graph is rarely Eulerian. It will be Eulerian if it has an odd number of vertices and each vertex (team) wins exactly as many times as it loses. Every round-robin tournament graph has a Hamiltonian path. This can be proven by induction on the number of vertices.  "
},
{
  "id": "exercises-15-4-11",
  "level": "2",
  "url": "s-traversals.html#exercises-15-4-11",
  "type": "Exercise",
  "number": "15.4.3.10",
  "title": "",
  "body": " For what values of is the -cube Eulerian?  "
},
{
  "id": "exercises-15-4-12",
  "level": "2",
  "url": "s-traversals.html#exercises-15-4-12",
  "type": "Exercise",
  "number": "15.4.3.11",
  "title": "",
  "body": " A particular set of dominoes has 21 tiles: . Is it possible to lay all 21 tiles in a line so that each adjacent pair of tile ends matches (that is, each 1 abuts a 1, and so on)?   No, such a line does not exist. The dominoes with two different numbers correspond with edges in a . See corresponding dominos and edges in . Dominos with two equal numbers could be held back and inserted into the line created with the other dominoes if such a line exists. For example, if were part of the line, could be inserted between those two dominoes. The line we want exists if and only if there exists an Eulerian path in a . Since all six vertices of a have odd degree no such path exists.   Correspondence between a line of dominos and a path in a    Four dominos lay end-to-end with numbers on abutting ends matching. They correspond with four connecting edges in a .    "
},
{
  "id": "s-graph-optimization",
  "level": "1",
  "url": "s-graph-optimization.html",
  "type": "Section",
  "number": "15.5",
  "title": "Graph Optimization",
  "body": " Graph Optimization  Graph Optimization   The common thread that connects all of the problems in this section is the desire to optimize (maximize or minimize) a quantity that is associated with a graph. We will concentrate most of our attention on two of these problems, the Traveling Salesman Problem and the Maximum Flow Problem. At the close of this section, we will discuss some other common optimization problems.    Weighted Graphs   Weighted Graph  Weighted Graph   A weighted graph, , is a graph together with a weight function . If , is the weight on edge .    As you will see in our examples, is often a cost associated with the edge ; therefore, most weights will be positive.   A Distance Graph  Let be the set of six capital cities in New England: Boston, Augusta, Hartford, Providence, Concord, and Montpelier. Let be ; that is, is a complete unordered graph. An example of a weight function on this graph is .  Many road maps define distance functions as in the following table.   Distances between capital cities in New England    --  Augusta  Boston  Concord  Hartford  Montpelier  Providence    Augusta, ME  --  165  148  266  190  208    Boston, MA  165  --  75  103  192  43    Concord, NH  148  75  --  142  117  109    Hartford, CT  266  103  142  --  204  70    Montpelier, VT  190  192  117  204  --  223    Providence, RI  208  43  109  70  223  --        The Traveling Salesman Problem  Traveling Salesman Problem, The  The Traveling Salesman Problem is, given a weighted graph, to find a circuit that visits every vertex at least once and minimizes the sum of the weights, . Any such circuit is called an optimal path.  Some statements of the Traveling Salesman Problem require that the circuit be Hamiltonian. In many applications, the graph in question will be complete and this restriction presents no problem. If the weight on each edge is constant, for example, , then an optimal path would be any Hamiltonian circuit.   The problem of a Boston salesman  The Traveling Salesman Problem gets its name from the situation of a salesman who wants to minimize the number of miles that he travels in visiting his customers. For example, if a salesman from Boston must visit the other capital cities of New England, then the problem is to find a circuit in the weighted graph of . Note that distance and cost are clearly related in this case. In addition, tolls and traffic congestion might also be taken into account.   The search for an efficient algorithm that solves the Traveling Salesman has occupied researchers for years. If the graph in question is complete, there are different circuits. As gets large, it is impossible to check every possible circuit. The most efficient algorithms for solving the Traveling Salesman Problem take an amount of time that is proportional to . Since this quantity grows so quickly, we can't expect to have the time to solve the Traveling Salesman Problem for large values of . Most of the useful algorithms that have been developed have to be heuristic; that is, they find a circuit that should be close to the optimal one. One such algorithm is the closest neighbor algorithm, one of the earliest attempts at solving the Traveling Salesman Problem. The general idea behind this algorithm is, starting at any vertex, to visit the closest neighbor to the starting point. At each vertex, the next vertex that is visited is the closest one that has not been reached. This shortsighted approach typifies heuristic algorithms called greedy algorithms, which attempt to solve a minimization (maximization) problem by minimizing (maximizing) the quantity associated with only the first step.   The Closest Neighbor Algorithm  Closest Neighbor Algorithm   Let be a complete weighted graph with . The closest neighbor circuit through G starting at is , defined by the steps:      .    For       : In case of a tie for closest, may be chosen arbitrarily.                  The cost of the closest neighbor circuit is     A small example  The closest neighbor circuit starting at A in is , with a cost of 29. The optimal path is , with a cost of 27.   A small example   A small weighted graph     Although the closest neighbor circuit is often not optimal, we may be satisfied if it is close to optimal. If and are the costs of optimal and closest neighbor circuits in a graph, then it is always the case that or . We can assess how good the closest neighbor algorithm is by determining how small the quantity gets. If it is always near 1, then the algorithm is good. However, if there are graphs for which it is large, then the algorithm may be discarded. Note that in , . A 7 percent increase in cost may or may not be considered significant, depending on the situation.   The One-way Street  A salesman must make stops at vertices A, B, and C, which are all on the same one-way street. The graph in is weighted by the function equal to the time it takes to drive from vertex to vertex .   Traveling a one-way street   A small directed weighted graph    Note that if is down the one-way street from , then . The values of , and are 20 and 32, respectively. Verify that is 32 by using the closest neighbor algorithm. The value of is significant in this case since our salesman would spend 60 percent more time on the road if he used the closest neighbor algorithm.   A more general result relating to the closest neighbor algorithm presumes that the graph in question is complete and that the weight function satisfies the conditions      for all , in the vertex set, and     for all , , in the vertex set.     The first condition is called the symmetry condition and the second is the triangle inequality.    If is a complete weighted graph that satisfies the symmetry and triangle inequality conditions, then     If , then this theorem says that can be no larger than twice the size of ; however, it doesn't say that the closest neighbor circuit will necessarily be that far from an optimal circuit. The quantity is called an upper bound for the ratio . It tells us only that things can't be any worse than the upper bound. Certainly, there are many graphs with eight vertices such that the optimal and closest neighbor circuits are the same. What is left unstated in this theorem is whether there are graphs for which the quantities are equal. If there are such graphs, we say that the upper bound is sharp.  The value of in Example is 1.6, which is greater than ; however, the weight function in this example does not satisfy the conditions of the theorem.    The Unit Square Problem  Suppose a robot is programmed to weld joints on square metal plates. Each plate must be welded at prescribed points on the square. To minimize the time it takes to complete the job, the total distance that a robot's arm moves should be minimized. Let be the distance between and . Assume that before each plate can be welded, the arm must be positioned at a certain point . Given a list of points, we want to put them in order so that is as small as possible.   The type of problem that is outlined in the example above is of such importance that it is one of the most studied version of the Traveling Salesman Problem. What follows is the usual statement of the problem. Let , and let , the unit square. Given pairs of real numbers in that represent the vertices of a , find a circuit of the graph that minimizes the sum of the distances traveled in traversing the circuit.  Since the problem calls for a circuit, it doesn't matter which vertex we start at; assume that we will start at . Once the problem is solved, we can always change our starting position. A function can most efficiently describe a circuit in this problem. Every bijection with describes a circuit There are such bijections. Since a circuit and its reversal have the same associated cost, there are cases to consider. An examination of all possible cases is not feasible for large values of .  One popular heuristic algorithm is the strip algorithm:   The Strip Algorithm   Given points in the unit square:  Phase 1:   Divide the square into vertical strips, as in . Let d be the width of each strip. If a point lies on a boundary between two strips, consider it part of the left-hand strip.    Starting from the left, find the first strip that contains one of the points. Locate the starting point by selecting the first point that is encountered in that strip as you travel from bottom to top. We will assume that the first point is    Alternate traveling up and down the strips that contain vertices until all of the vertices have been reached.    Return to the starting point.    Phase 2:   Shift all strips units to the right (creating a small strip on the left).    Repeat Steps 1.2 through 1.4 of Phase 1 with the new strips.    When the two phases are complete, choose the shorter of the two circuits obtained.     The Strip Algorithm   Illustrations of the two phases of the strip algorithm    Step may need a bit more explanation. How do you travel up or down a strip? In most cases, the vertices in a strip will be vertically distributed so that the order in which they are visited is obvious. In some cases, however, the order might not be clear, as in the third strip in Phase I of . Within a strip, the order in which you visit the points (if you are going up the strip) is determined thusly: precedes if or if and . In traveling down a strip, replace with .  The selection of strips was made in a 1959 paper by Beardwood, Halton, and Hammersley. It balances the problems that arise if the number of strips is too small or too large. If the square is divided into too few strips, some strips may be packed with vertices so that visiting them would require excessive horizontal motion. If too many strips are used, excessive vertical motion tends to be the result. An update on what is known about this algorithm is contained in .  Since the construction of a circuit in the square consists of sorting the given points, it should come as no surprise that the strip algorithm requires a time that is roughly a multiple of time units when points are to be visited.  The worst case that has been encountered with this algorithm is one in which the circuit obtained has a total distance of approximately (see Sopowit et al.).    Networks and the Maximum Flow Problem  Networks   Network  Network   A network is a simple weighted directed graph that contains two distinguished vertices called the source and the sink with the properties that the indegree of the source and outdegree of the sink are both zero, and source is connected to sink. The weight function on a network is the capacity function, which has positive weights.    An example of a real situation that can be represented by a network is a city's water system. A reservoir would be the source, while a distribution point in the city to all of the users would be the sink. The system of pumps and pipes that carries the water from source to sink makes up the remaining network. We can assume that the water that passes through a pipe in one minute is controlled by a pump and the maximum rate is determined by the size of the pipe and the strength of the pump. This maximum rate of flow through a pipe is called its capacity and is the information that the weight function of a network contains.   A City Water System  Consider the system that is illustrated in . The numbers that appear next to each pipe indicate the capacity of that pipe in thousands of gallons per minute. This map can be drawn in the form of a network, as in .   City Water System   A diagram of a simplified city water system with 5 pipes     Flow Diagram for a City's Water Network   A flow diagram of the city water system    Although the material passing through this network is water, networks can also represent the flow of other materials, such as automobiles, electricity, bits, telephone calls, or patients in a health system.    The Maximum Flow Problem   The Maximum Flow Problem is derived from the objective of moving the maximum amount of water or other material from the source to the sink. To measure this amount, we define a flow as a function such that (1) the flow of material through any edge is nonnegative and no larger than its capacity: , for all ; and (2) for each vertex other than the source and sink, the total amount of material that is directed into a vertex is equal to the total amount that is directed out: The summation on the left of represents the sum of the flows through each edge in that has as a terminal vertex. The right-hand side indicates that you should add all of the flows through edges that initiate at .     Flow out of Source equals Flow in Sink   If is a flow, then     Subtract the right-hand side of from the left-hand side. The result is: Now sum up these differences for each vertex in . The result is   Now observe that if an edge connects two vertices in , its flow appears as both a positive and a negative term in . This means that the only positive terms that are not cancelled out are the flows into the sink. In addition, the only negative terms that remain are the flows out of the source. Therefore,     The Value of a Flow  Value of a Flow    The value of flow    The two values flow into the sink and flow out of the source were proved to be equal in and this common value is called the value of the flow . It is denoted by . The value of a flow represents the amount of material that passes through the network with that flow.    Since the Maximum Flow Problem consists of maximizing the amount of material that passes through a given network, it is equivalent to finding a flow with the largest possible value. Any such flow is called a maximal flow Maximal flow .  For the network in , one flow is , defined by , , , , and . The value of , , is 45. Since the total flow into the sink can be no larger than 50 ( ), we can tell that is not very far from the solution. Can you improve on at all? The sum of the capacities into the sink can't always be obtained by a flow. The same is true for the sum of the capacities out of the source. In this case, the sum of the capacities out of the source is 60, which obviously can't be reached in this network.  A solution of the Maximum Flow Problem for this network is the maximal flow , where , , , , and , with . This solution is not unique. In fact, there is an infinite number of maximal flows for this problem.  There have been several algorithms developed to solve the Maximal Flow Problem. One of these is the Ford and Fulkerson Algorithm (FFA). The FFA consists of repeatedly finding paths in a network called flow augmenting paths until no improvement can be made in the flow that has been obtained.   Flow Augmenting Path  Flow Augmenting Path   Given a flow in a network , a flow augmenting path with respect to is a simple path from the source to the sink using edges both in their forward and their reverse directions such that for each edge in the path, if is used in its forward direction and if is used in the reverse direction.     Augmenting City Water Flow  For in , a flow augmenting path would be since , , and .  These positive differences represent unused capacities, and the smallest value represents the amount of flow that can be added to each edge in the path. Note that by adding 5 to each edge in our path, we obtain , which is maximal. If an edge with a positive flow is used in its reverse direction, it is contributing a movement of material that is counterproductive to the objective of maximizing flow. This is why the algorithm directs us to decrease the flow through that edge.    The Ford and Fulkerson Algorithm      Define the flow function by for each edge .    i = 0.    Repeat:     If possible, find a flow augmenting path with respect to .    If a flow augmenting path exists, then:     Determine    Define by             until no flow augmenting path exists.    Terminate with a maximal flow        Notes on the Ford and Fulkerson Algorithm    It should be clear that every flow augmenting path leads to a flow of increased value and that none of the capacities of the network can be violated.    The depth-first search should be used to find flow augmenting paths since it is far more efficient than the breadth-first search in this situation. The depth-first search differs from the breadth-first algorithm in that you sequentially visit vertices until you reach a dead end and then backtrack.    There have been networks discovered for which the FFA does not terminate in a finite number of steps. These examples all have irrational capacities. It has been proven that if all capacities are positive integers, the FFA terminates in a finite number of steps. See Ford and Fulkerson, Even, or Berge for details.    When you use the FFA to solve the Maximum Flow Problem by hand it is convenient to label each edge of the network with the fraction .      Depth-First Search for a Flow Augmenting Path   This is a depth-first search for the Sink Initiating at the Source. Let be the set of directed edges that can be used in producing a flow augmenting path. Add to the network a vertex called start and the edge     vertex set of the network.    source Move along the edge     while is not equal to start or sink:     if an edge in exists that takes you from to another vertex in :  .                  A flow augmenting path going against the flow  Consider the network in , where the current flow, , is indicated by a labeling of the edges.   Current Flow   Graph representation of a flow network    The path is a flow augmenting path that allows us to increase the flow by one unit. Note that is used in the reverse direction, which is allowed because . The value of the new flow that we obtain is 8. This flow must be maximal since the capacities out of the source add up to 8. This maximal flow is defined by .   Updated Flow   Graph representation of updated flow network       Other Graph Optimization Problems     The Minimum Spanning Tree Problem: Given a weighted graph, , find a subset of with the properties that is connected and the sum of the weights of edges in is as small as possible. We will discuss this problem in Chapter 10.    The Minimum Matching Problem: Given an undirected weighted graph, , with an even number of vertices, pair up the vertices so that each pair is connected by an edge and the sum of these edges is as small as possible. A unit square version of this problem has been studied extensively. See for details on what is known about this version of the problem.     Center of a Graph  The Graph Center Problem: Given a connected, undirected, weighted graph, find a vertex (called a center) in the graph with the property that the distance from the center to every other vertex is as small as possible. As small as possible is normally interpreted as minimizing the maximum distance from the center to a vertex.       Exercises   Find the closest neighbor circuit through the six capitals of New England starting at Boston. If you start at a different city, will you get a different circuit?   The circuit would be Boston, Providence, Hartford, Concord, Montpelier, Augusta, Boston. It does matter where you start. If you start in Concord, for example, your mileage will be higher.    Is the estimate in sharp for ? For ?    Given the following sets of points in the unit square, find the shortest circuit that visits all the points and find the circuit that is obtained with the strip algorithm.                              Optimal cost . Phase 1 cost . Phase 2 cost .    Optimal cost Phase 1 cost . Phase 2 cost .       There are 4 points; so we will divide the unit square into two strips.   Optimal Path:    Phase I Path:     Phase II Path: \\quad \\quad          There are 5 points; so we will divide the unit square into three strips.   Optimal Path:    Phase I Path:    Phase II Path:          For , locate points in the unit square for which the strip algorithm works poorly.    Consider the network whose maximum capacities are shown on the following graph.     Flow network graph for Exercise 5       A function is partially defined on the edges of this network by: , , , and . Define on the rest of the other edges so that is a flow. What is the value of ?    Find a flow augmenting path with respect to for this network. What is the value of the augmented flow?    Is the augmented flow a maximum flow? Explain.          , , , , and .    There are three possible flow-augmenting paths. with flow increase of 1. with flow increase of 1, and with flow increase of 2.    The new flow is never maximal, since another flow-augmenting path will always exist. For example, if is used above, the new flow can be augmented by 2 units with .       Given the following network with capacity function and flow function , find a maximal flow function. The labels on the edges of the network are of the form , where is the capacity of edge and is the used capacity for flow .     Flow network graph for Exercise 6      Find maximal flows for the following networks.     Flow network graph for Exercise7a       Flow network graph for Exercise7b       Flow network graph for Exercise7c        Value of maximal flow .    Value of maximal flow .    Value of maximal flow . See table for one way to get this flow.     Step  Flow-augmenting path  Flow added    1     2    2     3    3     4    4     1    5     2    6     2              Find two maximal flows for the network in other than the one found in the text.    Describe the set of all maximal flows for the same network.    Prove that if a network has two maximal flows, then it has an infinite number of maximal flows.       Discuss reasons that the closest neighbor algorithm is not used in the unit square version of the Traveling Salesman Problem.   Count the number of comparisons of distances that must be done.   To locate the closest neighbor among the list of other points on the unit square requires a time proportional to . Therefore the time required for the closest-neighbor algorithm with points is proportional to , which is proportional to . Since the strip algorithm takes a time proportional to , it is much faster for large values of .    Explore the possibility of solving the Traveling Salesman Problem in the unit box : .    Devise a closest neighbor algorithm for matching points in the unit square.    "
},
{
  "id": "def-weighted-graph",
  "level": "2",
  "url": "s-graph-optimization.html#def-weighted-graph",
  "type": "Definition",
  "number": "15.5.1",
  "title": "Weighted Graph.",
  "body": " Weighted Graph  Weighted Graph   A weighted graph, , is a graph together with a weight function . If , is the weight on edge .   "
},
{
  "id": "ex-distance-graph",
  "level": "2",
  "url": "s-graph-optimization.html#ex-distance-graph",
  "type": "Example",
  "number": "15.5.2",
  "title": "A Distance Graph.",
  "body": " A Distance Graph  Let be the set of six capital cities in New England: Boston, Augusta, Hartford, Providence, Concord, and Montpelier. Let be ; that is, is a complete unordered graph. An example of a weight function on this graph is .  Many road maps define distance functions as in the following table.   Distances between capital cities in New England    --  Augusta  Boston  Concord  Hartford  Montpelier  Providence    Augusta, ME  --  165  148  266  190  208    Boston, MA  165  --  75  103  192  43    Concord, NH  148  75  --  142  117  109    Hartford, CT  266  103  142  --  204  70    Montpelier, VT  190  192  117  204  --  223    Providence, RI  208  43  109  70  223  --     "
},
{
  "id": "ex-boston-salesman",
  "level": "2",
  "url": "s-graph-optimization.html#ex-boston-salesman",
  "type": "Example",
  "number": "15.5.4",
  "title": "The problem of a Boston salesman.",
  "body": " The problem of a Boston salesman  The Traveling Salesman Problem gets its name from the situation of a salesman who wants to minimize the number of miles that he travels in visiting his customers. For example, if a salesman from Boston must visit the other capital cities of New England, then the problem is to find a circuit in the weighted graph of . Note that distance and cost are clearly related in this case. In addition, tolls and traffic congestion might also be taken into account.  "
},
{
  "id": "alg-closest-neighbor",
  "level": "2",
  "url": "s-graph-optimization.html#alg-closest-neighbor",
  "type": "Algorithm",
  "number": "15.5.5",
  "title": "The Closest Neighbor Algorithm.",
  "body": " The Closest Neighbor Algorithm  Closest Neighbor Algorithm   Let be a complete weighted graph with . The closest neighbor circuit through G starting at is , defined by the steps:      .    For       : In case of a tie for closest, may be chosen arbitrarily.                  The cost of the closest neighbor circuit is   "
},
{
  "id": "ex-tsp-small-example",
  "level": "2",
  "url": "s-graph-optimization.html#ex-tsp-small-example",
  "type": "Example",
  "number": "15.5.6",
  "title": "A small example.",
  "body": " A small example  The closest neighbor circuit starting at A in is , with a cost of 29. The optimal path is , with a cost of 27.   A small example   A small weighted graph    "
},
{
  "id": "ex-one-way-street",
  "level": "2",
  "url": "s-graph-optimization.html#ex-one-way-street",
  "type": "Example",
  "number": "15.5.8",
  "title": "The One-way Street.",
  "body": " The One-way Street  A salesman must make stops at vertices A, B, and C, which are all on the same one-way street. The graph in is weighted by the function equal to the time it takes to drive from vertex to vertex .   Traveling a one-way street   A small directed weighted graph    Note that if is down the one-way street from , then . The values of , and are 20 and 32, respectively. Verify that is 32 by using the closest neighbor algorithm. The value of is significant in this case since our salesman would spend 60 percent more time on the road if he used the closest neighbor algorithm.  "
},
{
  "id": "th-cn-theorem-15-5",
  "level": "2",
  "url": "s-graph-optimization.html#th-cn-theorem-15-5",
  "type": "Theorem",
  "number": "15.5.10",
  "title": "",
  "body": "  If is a complete weighted graph that satisfies the symmetry and triangle inequality conditions, then   "
},
{
  "id": "ss-traveling-salesman-problem-15",
  "level": "2",
  "url": "s-graph-optimization.html#ss-traveling-salesman-problem-15",
  "type": "Observation",
  "number": "15.5.11",
  "title": "",
  "body": " If , then this theorem says that can be no larger than twice the size of ; however, it doesn't say that the closest neighbor circuit will necessarily be that far from an optimal circuit. The quantity is called an upper bound for the ratio . It tells us only that things can't be any worse than the upper bound. Certainly, there are many graphs with eight vertices such that the optimal and closest neighbor circuits are the same. What is left unstated in this theorem is whether there are graphs for which the quantities are equal. If there are such graphs, we say that the upper bound is sharp.  The value of in Example is 1.6, which is greater than ; however, the weight function in this example does not satisfy the conditions of the theorem.  "
},
{
  "id": "ex-unit-square",
  "level": "2",
  "url": "s-graph-optimization.html#ex-unit-square",
  "type": "Example",
  "number": "15.5.12",
  "title": "The Unit Square Problem.",
  "body": " The Unit Square Problem  Suppose a robot is programmed to weld joints on square metal plates. Each plate must be welded at prescribed points on the square. To minimize the time it takes to complete the job, the total distance that a robot's arm moves should be minimized. Let be the distance between and . Assume that before each plate can be welded, the arm must be positioned at a certain point . Given a list of points, we want to put them in order so that is as small as possible.  "
},
{
  "id": "alg-strip-algorithm",
  "level": "2",
  "url": "s-graph-optimization.html#alg-strip-algorithm",
  "type": "Heuristic",
  "number": "15.5.13",
  "title": "The Strip Algorithm.",
  "body": " The Strip Algorithm   Given points in the unit square:  Phase 1:   Divide the square into vertical strips, as in . Let d be the width of each strip. If a point lies on a boundary between two strips, consider it part of the left-hand strip.    Starting from the left, find the first strip that contains one of the points. Locate the starting point by selecting the first point that is encountered in that strip as you travel from bottom to top. We will assume that the first point is    Alternate traveling up and down the strips that contain vertices until all of the vertices have been reached.    Return to the starting point.    Phase 2:   Shift all strips units to the right (creating a small strip on the left).    Repeat Steps 1.2 through 1.4 of Phase 1 with the new strips.    When the two phases are complete, choose the shorter of the two circuits obtained.   "
},
{
  "id": "fig-strip-alg-tsp",
  "level": "2",
  "url": "s-graph-optimization.html#fig-strip-alg-tsp",
  "type": "Figure",
  "number": "15.5.14",
  "title": "",
  "body": " The Strip Algorithm   Illustrations of the two phases of the strip algorithm   "
},
{
  "id": "def-network",
  "level": "2",
  "url": "s-graph-optimization.html#def-network",
  "type": "Definition",
  "number": "15.5.15",
  "title": "Network.",
  "body": " Network  Network   A network is a simple weighted directed graph that contains two distinguished vertices called the source and the sink with the properties that the indegree of the source and outdegree of the sink are both zero, and source is connected to sink. The weight function on a network is the capacity function, which has positive weights.   "
},
{
  "id": "ex-city-water",
  "level": "2",
  "url": "s-graph-optimization.html#ex-city-water",
  "type": "Example",
  "number": "15.5.16",
  "title": "A City Water System.",
  "body": " A City Water System  Consider the system that is illustrated in . The numbers that appear next to each pipe indicate the capacity of that pipe in thousands of gallons per minute. This map can be drawn in the form of a network, as in .   City Water System   A diagram of a simplified city water system with 5 pipes     Flow Diagram for a City's Water Network   A flow diagram of the city water system    Although the material passing through this network is water, networks can also represent the flow of other materials, such as automobiles, electricity, bits, telephone calls, or patients in a health system.  "
},
{
  "id": "problem-maximal-flow",
  "level": "2",
  "url": "s-graph-optimization.html#problem-maximal-flow",
  "type": "Problem",
  "number": "15.5.19",
  "title": "The Maximum Flow Problem.",
  "body": " The Maximum Flow Problem   The Maximum Flow Problem is derived from the objective of moving the maximum amount of water or other material from the source to the sink. To measure this amount, we define a flow as a function such that (1) the flow of material through any edge is nonnegative and no larger than its capacity: , for all ; and (2) for each vertex other than the source and sink, the total amount of material that is directed into a vertex is equal to the total amount that is directed out: The summation on the left of represents the sum of the flows through each edge in that has as a terminal vertex. The right-hand side indicates that you should add all of the flows through edges that initiate at .   "
},
{
  "id": "theorem-flow-inout",
  "level": "2",
  "url": "s-graph-optimization.html#theorem-flow-inout",
  "type": "Theorem",
  "number": "15.5.20",
  "title": "Flow out of Source equals Flow in Sink.",
  "body": " Flow out of Source equals Flow in Sink   If is a flow, then     Subtract the right-hand side of from the left-hand side. The result is: Now sum up these differences for each vertex in . The result is   Now observe that if an edge connects two vertices in , its flow appears as both a positive and a negative term in . This means that the only positive terms that are not cancelled out are the flows into the sink. In addition, the only negative terms that remain are the flows out of the source. Therefore,   "
},
{
  "id": "def-value-of-flow",
  "level": "2",
  "url": "s-graph-optimization.html#def-value-of-flow",
  "type": "Definition",
  "number": "15.5.21",
  "title": "The Value of a Flow.",
  "body": " The Value of a Flow  Value of a Flow    The value of flow    The two values flow into the sink and flow out of the source were proved to be equal in and this common value is called the value of the flow . It is denoted by . The value of a flow represents the amount of material that passes through the network with that flow.   "
},
{
  "id": "ss-networks-and-flows-9",
  "level": "2",
  "url": "s-graph-optimization.html#ss-networks-and-flows-9",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "maximal flow "
},
{
  "id": "def-flow-augmenting-path",
  "level": "2",
  "url": "s-graph-optimization.html#def-flow-augmenting-path",
  "type": "Definition",
  "number": "15.5.22",
  "title": "Flow Augmenting Path.",
  "body": " Flow Augmenting Path  Flow Augmenting Path   Given a flow in a network , a flow augmenting path with respect to is a simple path from the source to the sink using edges both in their forward and their reverse directions such that for each edge in the path, if is used in its forward direction and if is used in the reverse direction.   "
},
{
  "id": "example-water-augmenting",
  "level": "2",
  "url": "s-graph-optimization.html#example-water-augmenting",
  "type": "Example",
  "number": "15.5.23",
  "title": "Augmenting City Water Flow.",
  "body": " Augmenting City Water Flow  For in , a flow augmenting path would be since , , and .  These positive differences represent unused capacities, and the smallest value represents the amount of flow that can be added to each edge in the path. Note that by adding 5 to each edge in our path, we obtain , which is maximal. If an edge with a positive flow is used in its reverse direction, it is contributing a movement of material that is counterproductive to the objective of maximizing flow. This is why the algorithm directs us to decrease the flow through that edge.  "
},
{
  "id": "alg-ford-fulkerson",
  "level": "2",
  "url": "s-graph-optimization.html#alg-ford-fulkerson",
  "type": "Algorithm",
  "number": "15.5.24",
  "title": "The Ford and Fulkerson Algorithm.",
  "body": " The Ford and Fulkerson Algorithm      Define the flow function by for each edge .    i = 0.    Repeat:     If possible, find a flow augmenting path with respect to .    If a flow augmenting path exists, then:     Determine    Define by             until no flow augmenting path exists.    Terminate with a maximal flow      "
},
{
  "id": "ss-networks-and-flows-16",
  "level": "2",
  "url": "s-graph-optimization.html#ss-networks-and-flows-16",
  "type": "List",
  "number": "15.5.25",
  "title": "Notes on the Ford and Fulkerson Algorithm",
  "body": " Notes on the Ford and Fulkerson Algorithm    It should be clear that every flow augmenting path leads to a flow of increased value and that none of the capacities of the network can be violated.    The depth-first search should be used to find flow augmenting paths since it is far more efficient than the breadth-first search in this situation. The depth-first search differs from the breadth-first algorithm in that you sequentially visit vertices until you reach a dead end and then backtrack.    There have been networks discovered for which the FFA does not terminate in a finite number of steps. These examples all have irrational capacities. It has been proven that if all capacities are positive integers, the FFA terminates in a finite number of steps. See Ford and Fulkerson, Even, or Berge for details.    When you use the FFA to solve the Maximum Flow Problem by hand it is convenient to label each edge of the network with the fraction .    "
},
{
  "id": "alg-depth-first-search",
  "level": "2",
  "url": "s-graph-optimization.html#alg-depth-first-search",
  "type": "Algorithm",
  "number": "15.5.26",
  "title": "Depth-First Search for a Flow Augmenting Path.",
  "body": " Depth-First Search for a Flow Augmenting Path   This is a depth-first search for the Sink Initiating at the Source. Let be the set of directed edges that can be used in producing a flow augmenting path. Add to the network a vertex called start and the edge     vertex set of the network.    source Move along the edge     while is not equal to start or sink:     if an edge in exists that takes you from to another vertex in :  .                "
},
{
  "id": "ex-fap-1",
  "level": "2",
  "url": "s-graph-optimization.html#ex-fap-1",
  "type": "Example",
  "number": "15.5.27",
  "title": "A flow augmenting path going against the flow.",
  "body": " A flow augmenting path going against the flow  Consider the network in , where the current flow, , is indicated by a labeling of the edges.   Current Flow   Graph representation of a flow network    The path is a flow augmenting path that allows us to increase the flow by one unit. Note that is used in the reverse direction, which is allowed because . The value of the new flow that we obtain is 8. This flow must be maximal since the capacities out of the source add up to 8. This maximal flow is defined by .   Updated Flow   Graph representation of updated flow network    "
},
{
  "id": "exercises-15-5-2",
  "level": "2",
  "url": "s-graph-optimization.html#exercises-15-5-2",
  "type": "Exercise",
  "number": "15.5.5.1",
  "title": "",
  "body": " Find the closest neighbor circuit through the six capitals of New England starting at Boston. If you start at a different city, will you get a different circuit?   The circuit would be Boston, Providence, Hartford, Concord, Montpelier, Augusta, Boston. It does matter where you start. If you start in Concord, for example, your mileage will be higher.  "
},
{
  "id": "exercises-15-5-3",
  "level": "2",
  "url": "s-graph-optimization.html#exercises-15-5-3",
  "type": "Exercise",
  "number": "15.5.5.2",
  "title": "",
  "body": " Is the estimate in sharp for ? For ?  "
},
{
  "id": "exercises-15-5-4",
  "level": "2",
  "url": "s-graph-optimization.html#exercises-15-5-4",
  "type": "Exercise",
  "number": "15.5.5.3",
  "title": "",
  "body": " Given the following sets of points in the unit square, find the shortest circuit that visits all the points and find the circuit that is obtained with the strip algorithm.                              Optimal cost . Phase 1 cost . Phase 2 cost .    Optimal cost Phase 1 cost . Phase 2 cost .       There are 4 points; so we will divide the unit square into two strips.   Optimal Path:    Phase I Path:     Phase II Path: \\quad \\quad          There are 5 points; so we will divide the unit square into three strips.   Optimal Path:    Phase I Path:    Phase II Path:        "
},
{
  "id": "exercises-15-5-5",
  "level": "2",
  "url": "s-graph-optimization.html#exercises-15-5-5",
  "type": "Exercise",
  "number": "15.5.5.4",
  "title": "",
  "body": " For , locate points in the unit square for which the strip algorithm works poorly.  "
},
{
  "id": "exercises-15-5-6",
  "level": "2",
  "url": "s-graph-optimization.html#exercises-15-5-6",
  "type": "Exercise",
  "number": "15.5.5.5",
  "title": "",
  "body": " Consider the network whose maximum capacities are shown on the following graph.     Flow network graph for Exercise 5       A function is partially defined on the edges of this network by: , , , and . Define on the rest of the other edges so that is a flow. What is the value of ?    Find a flow augmenting path with respect to for this network. What is the value of the augmented flow?    Is the augmented flow a maximum flow? Explain.          , , , , and .    There are three possible flow-augmenting paths. with flow increase of 1. with flow increase of 1, and with flow increase of 2.    The new flow is never maximal, since another flow-augmenting path will always exist. For example, if is used above, the new flow can be augmented by 2 units with .     "
},
{
  "id": "exercises-15-5-7",
  "level": "2",
  "url": "s-graph-optimization.html#exercises-15-5-7",
  "type": "Exercise",
  "number": "15.5.5.6",
  "title": "",
  "body": " Given the following network with capacity function and flow function , find a maximal flow function. The labels on the edges of the network are of the form , where is the capacity of edge and is the used capacity for flow .     Flow network graph for Exercise 6    "
},
{
  "id": "exercises-15-5-8",
  "level": "2",
  "url": "s-graph-optimization.html#exercises-15-5-8",
  "type": "Exercise",
  "number": "15.5.5.7",
  "title": "",
  "body": " Find maximal flows for the following networks.     Flow network graph for Exercise7a       Flow network graph for Exercise7b       Flow network graph for Exercise7c        Value of maximal flow .    Value of maximal flow .    Value of maximal flow . See table for one way to get this flow.     Step  Flow-augmenting path  Flow added    1     2    2     3    3     4    4     1    5     2    6     2         "
},
{
  "id": "exercises-15-5-9",
  "level": "2",
  "url": "s-graph-optimization.html#exercises-15-5-9",
  "type": "Exercise",
  "number": "15.5.5.8",
  "title": "",
  "body": "    Find two maximal flows for the network in other than the one found in the text.    Describe the set of all maximal flows for the same network.    Prove that if a network has two maximal flows, then it has an infinite number of maximal flows.     "
},
{
  "id": "exercises-15-5-10",
  "level": "2",
  "url": "s-graph-optimization.html#exercises-15-5-10",
  "type": "Exercise",
  "number": "15.5.5.9",
  "title": "",
  "body": " Discuss reasons that the closest neighbor algorithm is not used in the unit square version of the Traveling Salesman Problem.   Count the number of comparisons of distances that must be done.   To locate the closest neighbor among the list of other points on the unit square requires a time proportional to . Therefore the time required for the closest-neighbor algorithm with points is proportional to , which is proportional to . Since the strip algorithm takes a time proportional to , it is much faster for large values of .  "
},
{
  "id": "exercises-15-5-11",
  "level": "2",
  "url": "s-graph-optimization.html#exercises-15-5-11",
  "type": "Exercise",
  "number": "15.5.5.10",
  "title": "",
  "body": " Explore the possibility of solving the Traveling Salesman Problem in the unit box : .  "
},
{
  "id": "exercises-15-5-12",
  "level": "2",
  "url": "s-graph-optimization.html#exercises-15-5-12",
  "type": "Exercise",
  "number": "15.5.5.11",
  "title": "",
  "body": " Devise a closest neighbor algorithm for matching points in the unit square.  "
},
{
  "id": "s-planarity-and-colorings",
  "level": "1",
  "url": "s-planarity-and-colorings.html",
  "type": "Section",
  "number": "15.6",
  "title": "Planarity and Colorings",
  "body": " Planarity and Colorings   The topics in this section are related to how graphs are drawn.  Planarity: Can a given graph be drawn in a plane so that no edges intersect? Certainly, it is natural to avoid intersections, but up to now we haven't gone out of our way to do so.  Colorings: Suppose that each vertex in an undirected graph is to be colored so that no two vertices that are connected by an edge have the same color. How many colors are needed? This question is motivated by the problem of drawing a map so that no two bordering countries are colored the same. A similar question can be asked for coloring edges.    Planar Graphs   Planar Graph\/Plane Graph  Planar Graph  Plane Graph   A graph is planar if it can be drawn in a plane so that no edges cross. If a graph is drawn so that no edges intersect, it is a plane graph, and such a drawing is a planar embedding of the graph.     A Planar Graph  The graph in (a) is planar but not a plane graph. The same graph is drawn as a plane graph in (b).   A Planar Graph   Two versions of the same planar graph.        In discussing planarity, we need only consider simple undirected graphs with no self-loops. All other graphs can be treated as such since all of the edges that relate any two vertices can be considered as one package that clearly can be drawn in a plane.    Can you think of a graph that is not planar? How would you prove that it isn't planar? Proving the nonexistence of something is usually more difficult than proving its existence. This case is no exception. Intuitively, we would expect that sparse graphs would be planar and dense graphs would be nonplanar. will verify that dense graphs are indeed nonplanar.    The topic of planarity is a result of trying to restrict a graph to two dimensions. Is there an analogous topic for three dimensions? What graphs can be drawn in one dimension?      Path Graph  Path Graph    a path graph of length    A path graph of length , denoted , is an undirected graph with vertices having edges , .     Graphs in other dimensions  If a graph has only a finite number of vertices, it can always be drawn in three dimensions with no edge crossings. Is this also true for all graphs with an infinite number of vertices? The only one-dimensional graphs are graphs consisting of a single vertex, and path graphs, as shown in .    One dimensional graphs   Three one-dimensional graphs    Three Utilities Puzzle A discussion of planarity is not complete without mentioning the famous Three Utilities Puzzle. The object of the puzzle is to supply three houses, A, B, and C, with the three utilities, gas, electric, and water. The constraint that makes this puzzle impossible to solve is that no utility lines may intersect. There is no planar embedding of the graph in , which is commonly denoted . This graph is one of two fundamental nonplanar graphs. The Kuratowski Reduction Theorem states that if a graph is nonplanar then it contains either a or a . Containment is in the sense that if you start with a nonplanar graph you can always perform a sequence of edge deletions and contractions (shrinking an edge so that the two vertices connecting it coincide) to produce one of the two graphs.   The Three Utilities Puzzle   Graph representation of the three utilities puzzle    A planar graph divides the plane into one or more regions. Two points on the plane lie in the same region if you can draw a curve connecting the two points that does not pass through an edge. One of these regions will be of infinite area. Each point on the plane is either a vertex, a point on an edge, or a point in a region. A remarkable fact about the geography of planar graphs is the following theorem that is attributed to Euler.   Experiment: Jot down a graph right now and count the number of vertices, regions, and edges that you have. If is not 2, then your graph is either nonplanar or not connected.    Euler's Formula  Euler's Formula   If is a connected planar graph with regions, vertices, and edges, then    We prove Euler's Formula by Induction on , for .  Basis: If , then must be a graph with one vertex, ; and there is one infinite region, . Therefore, , and the basis is true.  Induction: Suppose that has edges, , and that all connected planar graphs with less than edges satisfy . Select any edge that is part of the boundary of the infinite region and call it . Let be the graph obtained from by deleting . illustrates the two different possibilities we need to consider: either is connected or it has two connected components, and .   Two cases in the proof of Euler's Formula   Image of the two cases in the proof of Euler's Formula    If is connected, the induction hypothesis can be applied to it. If has vertices, edges and edges, then and in terms of the corresponding numbers for ,  For the case where is connected, If is not connected, it must consist of two connected components, and , since we started with a connected graph, . We can apply the induction hypothesis to each of the two components to complete the proof. We leave it to the students to do this, with the reminder that in counting regions, and will share the same infinite region.     A Bound on Edges of a Planar Graph   If is a connected planar graph with vertices, , and edges, then     (Outline of a Proof)     Let be the number of regions in . For each region, count the number of edges that comprise its border. The sum of these counts must be at least . Recall that we are working with simple graphs here, so a region made by two edges connecting the same two vertices is not possible.    Based on (a), infer that the number of edges in must be at least .         Substitute for in Euler's Formula to obtain an inequality that is equivalent to        One implication of is that the number of edges in a connected planar graph will never be larger than three times its number of vertices (as long as it has at least three vertices). Since the maximum number of edges in a graph with vertices is a quadratic function of , as increases, planar graphs are more and more sparse.   The following theorem will be useful as we turn to graph coloring.   A Vertex of Degree Five   If is a connected planar graph, then it has a vertex with degree 5 or less.    (by contradiction): We can assume that has at least seven vertices, for otherwise the degree of any vertex is at most 5. Suppose that is a connected planar graph and each vertex has a degree of 6 or more. Then, since each edge contributes to the degree of two vertices, . However, states that the , which is a contradiction.      Graph Coloring   A 3-coloring of Euler Island   Image showing a 3-coloring of Euler Island    The map of Euler Island in shows that there are seven towns on the island. Suppose that a cartographer must produce a colored map in which no two towns that share a boundary have the same color. To keep costs down, she wants to minimize the number of different colors that appear on the map. How many colors are sufficient? For Euler Island, the answer is three. Although it might not be obvious, this is a graph problem. We can represent the map with a graph, where the vertices are countries and an edge between two vertices indicates that the two corresponding countries share a boundary of positive length. This problem motivates a more general problem.   Graph Coloring  Graph Coloring  Chromatic Number    the chromatic number of    Given an undirected graph , find a coloring function  from into a set of colors such that and has the smallest possible cardinality. The cardinality of is called the chromatic number of , .       A coloring function onto an -element set is called an -coloring.    In terms of this general problem, the chromatic number of the graph of Euler Island is three. To see that no more than three colors are needed, we need only display a 3-coloring: , , and . This coloring is not unique. The next smallest set of colors would be of two colors, and you should be able to convince yourself that no 2-coloring exists for this graph.     In the mid-nineteenth century, it became clear that the typical planar graph had a chromatic number of no more than 4. At that point, mathematicians attacked the Four-Color Conjecture, which is that if is any planar graph, then its chromatic number is no more than 4. Although the conjecture is quite easy to state, it took over 100 years, until 1976, to prove the conjecture in the affirmative.   The Four-Color Theorem  Four-Color Theorem   If is a planar graph, then .    A proof of the Four-Color Theorem is beyond the scope of this text, but we can prove a theorem that is only 25 percent inferior.   The Five-Color Theorem  Five-Color Theorem   If is a planar graph, then .    The number 5 is not a sharp upper bound for because of the Four-Color Theorem.  This is a proof by Induction on the Number of Vertices in the Graph.  Basis: Clearly, a graph with one vertex has a chromatic number of 1.  Induction: Assume that all planar graphs with vertices have a chromatic number of 5 or less. Let be a planar graph. By , there exists a vertex with . Let be the planar graph obtained by deleting and all edges that connect to other vertices in . By the induction hypothesis, has a 5-coloring. Assume that the colors used are red, white, blue, green, and yellow.  If , then we can produce a 5-coloring of by selecting a color that is not used in coloring the vertices that are connected to with an edge in .  If , then we can use the same approach if the five vertices that are adjacent to are not all colored differently. We are now left with the possibility that , , , , and are all connected to by an edge and they are all colored differently. Assume that they are colored red, white blue, yellow, and green, respectively, as in .     Graph showing vertex of degree 5 with adjacent vertices all colored differently    Starting at in , suppose we try to construct a path to that passes through only red and blue vertices. This can either be accomplished or it can't be accomplished. If it can't be done, consider all paths that start at , and go through only red and blue vertices. If we exchange the colors of the vertices in these paths, including we still have a 5-coloring of . Since is now blue, we can color the central vertex, , red.  Finally, suppose that is connected to using only red and blue vertices. Then a path from to by using red and blue vertices followed by the edges and completes a circuit that either encloses or encloses and . Therefore, no path from to exists using only white and yellow vertices. We can then repeat the same process as in the previous paragraph with and , which will allow us to color v white.     Bipartite Graph  Bipartite Graph.   A bipartite graph is a graph that has a 2-coloring. Equivalently, a graph is bipartite if its vertices can be partitioned into two nonempty subsets so that no edge connects vertices from the same subset.     A Few Examples     The graph of the Three Utilities Puzzle is bipartite. The vertices are partitioned into the utilities and the homes. Of course a 2-coloring of the graph is to color the utilities red and the homes blue.    For , the -cube is bipartite. A coloring would be to color all strings with an even number of 1's red and the strings with an odd number of 1's blue. By the definition of the -cube, two strings that have the same color couldn't be connected since they would need to differ in at least two positions.    Let be a set of 64 vertices, one for each square on a chess board. We can index the elements of by = the square on the row , column . Connect vertices in according to whether or not you can move a knight from one square to another. Using our indexing of ,  is a bipartite graph. The usual coloring of a chessboard is valid 2-coloring.      How can you recognize whether a graph is bipartite? Unlike planarity, there is a nice equivalent condition for a graph to be bipartite.   No Odd Circuits in a Bipartite Graph   An undirected graph is bipartite if and only if it has no circuit of odd length.    ( ) Let be a bipartite graph that is partitioned into two sets, R(ed) and B(lue) that define a 2-coloring. Consider any circuit in . If we specify a direction in the circuit and define on the vertices of the circuit by Note that is a bijection. Hence the number of red vertices in the circuit equals the number of blue vertices, and so the length of the circuit must be even.  ( ) Assume that has no circuit of odd length. For each component of , select any vertex and color it red. Then for every other vertex in the component, find the path of shortest distance from to . If the length of the path is odd, color blue, and if it is even, color red. We claim that this method defines a 2-coloring of . Suppose that it does not define a 2-coloring. Then let and be two vertices with identical colors that are connected with an edge. By the way that we colored , neither nor could equal . We can now construct a circuit with an odd length in . First, we start at and follow the shortest path to . Then follow the edge , and finally, follow the reverse of a shortest path from to . Since and have the same color, the first and third segments of this circuit have lengths that are both odd or even, and the sum of their lengths must be even. The addition of the single edge shows us that this circuit has an odd length. This contradicts our premise.      Exercises   Apply to prove that once gets to a certain size, a is nonplanar. What is the largest complete planar graph?   can be applied to infer that if , then is nonplanar. A is the largest complete planar graph.    Can you apply to prove that the Three Utilities Puzzle can't be solved?    What are the chromatic numbers of the following graphs?   What are the chromatic numbers?   Image of 6 graphs for exercise 3        4    3    3    3    2    4       Prove that if an undirected graph has a subgraph that is a it then its chromatic number is at least 3.    What is , ?   The chromatic number is since every vertex is connected to every other vertex.    What is the chromatic number of the United States?    Complete the proof of .   Suppose that is not connected. Then is made up of 2 components that are planar graphs with less than edges, and . For let be the number of vertices, regions and edges in . By the induction hypothesis, for .  One of the regions, the infinite one, is common to both graphs. Therefore, when we add edge back to the graph, we have , , and .     Use the outline of a proof of to write a complete proof. Be sure to point out where the premise is essential.    Let with , and let be the set of all undirected edges between distinct vertices in . Prove that either or is nonplanar.   Since , either has at least elements. Assume that it is that is larger. Since is greater than , would be nonplanar. Of course, if is larger, then would be nonplanar by the same reasoning. Can you find a graph with ten vertices such that it is planar and its complement is also planar?    Design an algorithm to determine whether a graph is bipartite.    Prove that a bipartite graph with an odd number of vertices greater than or equal to 3 has no Hamiltonian circuit.   Suppose that is bipartite (with colors red and blue), is odd, and is a Hamiltonian circuit. If is red, then would also be red. But then would not be in , a contradiction.    Prove that any graph with a finite number of vertices can be drawn in three dimensions so that no edges intersect.    Suppose you had to color the edges of an undirected graph so that for each vertex, the edges that it is connected to have different colors. How can this problem be transformed into a vertex coloring problem?   Draw a graph with one vertex for each edge, If two edges in the original graph meet at the same vertex, then draw an edge connecting the corresponding vertices in the new graph.       Suppose the edges of a are colored either red or blue. Prove that there will be either a red (a subset of the vertex set with three vertices connected by red edges) or a blue or both.    Suppose six people are selected at random. Prove that either there exists a subset of three of them with the property that any two people in the subset can communicate in a common language, or there exist three people, no two of whom can communicate in a common language.        Mesh Graph  Let be a positive integer, and let be positive integers greater than or equal to two. The mesh graph  has vertices of the form where . Two vertices and are adjacent if and only if . In other words, two adjacent vertices must differ in only one coordinate and by a difference of 1.     What is the chromatic number of ?    For what pairs does have a Hamiltonian circuit?    For what triples does have a Hamiltonian circuit?        Further Reading     "
},
{
  "id": "def-planar-graph",
  "level": "2",
  "url": "s-planarity-and-colorings.html#def-planar-graph",
  "type": "Definition",
  "number": "15.6.1",
  "title": "Planar Graph\/Plane Graph.",
  "body": " Planar Graph\/Plane Graph  Planar Graph  Plane Graph   A graph is planar if it can be drawn in a plane so that no edges cross. If a graph is drawn so that no edges intersect, it is a plane graph, and such a drawing is a planar embedding of the graph.   "
},
{
  "id": "ex-planar-graph",
  "level": "2",
  "url": "s-planarity-and-colorings.html#ex-planar-graph",
  "type": "Example",
  "number": "15.6.2",
  "title": "A Planar Graph.",
  "body": " A Planar Graph  The graph in (a) is planar but not a plane graph. The same graph is drawn as a plane graph in (b).   A Planar Graph   Two versions of the same planar graph.    "
},
{
  "id": "def-def-path-graph",
  "level": "2",
  "url": "s-planarity-and-colorings.html#def-def-path-graph",
  "type": "Definition",
  "number": "15.6.4",
  "title": "Path Graph.",
  "body": " Path Graph  Path Graph    a path graph of length    A path graph of length , denoted , is an undirected graph with vertices having edges , .   "
},
{
  "id": "ss-planarity-6",
  "level": "2",
  "url": "s-planarity-and-colorings.html#ss-planarity-6",
  "type": "Observation",
  "number": "15.6.5",
  "title": "Graphs in other dimensions.",
  "body": " Graphs in other dimensions  If a graph has only a finite number of vertices, it can always be drawn in three dimensions with no edge crossings. Is this also true for all graphs with an infinite number of vertices? The only one-dimensional graphs are graphs consisting of a single vertex, and path graphs, as shown in .  "
},
{
  "id": "fig-path-graphs",
  "level": "2",
  "url": "s-planarity-and-colorings.html#fig-path-graphs",
  "type": "Figure",
  "number": "15.6.6",
  "title": "",
  "body": " One dimensional graphs   Three one-dimensional graphs   "
},
{
  "id": "fig-utilities-puzzle",
  "level": "2",
  "url": "s-planarity-and-colorings.html#fig-utilities-puzzle",
  "type": "Figure",
  "number": "15.6.7",
  "title": "",
  "body": " The Three Utilities Puzzle   Graph representation of the three utilities puzzle   "
},
{
  "id": "ss-planarity-11",
  "level": "2",
  "url": "s-planarity-and-colorings.html#ss-planarity-11",
  "type": "Activity",
  "number": "15.6.1",
  "title": "",
  "body": " Experiment: Jot down a graph right now and count the number of vertices, regions, and edges that you have. If is not 2, then your graph is either nonplanar or not connected.  "
},
{
  "id": "theorem-euler-formula",
  "level": "2",
  "url": "s-planarity-and-colorings.html#theorem-euler-formula",
  "type": "Theorem",
  "number": "15.6.8",
  "title": "Euler’s Formula.",
  "body": " Euler's Formula  Euler's Formula   If is a connected planar graph with regions, vertices, and edges, then    We prove Euler's Formula by Induction on , for .  Basis: If , then must be a graph with one vertex, ; and there is one infinite region, . Therefore, , and the basis is true.  Induction: Suppose that has edges, , and that all connected planar graphs with less than edges satisfy . Select any edge that is part of the boundary of the infinite region and call it . Let be the graph obtained from by deleting . illustrates the two different possibilities we need to consider: either is connected or it has two connected components, and .   Two cases in the proof of Euler's Formula   Image of the two cases in the proof of Euler's Formula    If is connected, the induction hypothesis can be applied to it. If has vertices, edges and edges, then and in terms of the corresponding numbers for ,  For the case where is connected, If is not connected, it must consist of two connected components, and , since we started with a connected graph, . We can apply the induction hypothesis to each of the two components to complete the proof. We leave it to the students to do this, with the reminder that in counting regions, and will share the same infinite region.   "
},
{
  "id": "theorem-edge-bound",
  "level": "2",
  "url": "s-planarity-and-colorings.html#theorem-edge-bound",
  "type": "Theorem",
  "number": "15.6.10",
  "title": "A Bound on Edges of a Planar Graph.",
  "body": " A Bound on Edges of a Planar Graph   If is a connected planar graph with vertices, , and edges, then     (Outline of a Proof)     Let be the number of regions in . For each region, count the number of edges that comprise its border. The sum of these counts must be at least . Recall that we are working with simple graphs here, so a region made by two edges connecting the same two vertices is not possible.    Based on (a), infer that the number of edges in must be at least .         Substitute for in Euler's Formula to obtain an inequality that is equivalent to      "
},
{
  "id": "ss-planarity-14",
  "level": "2",
  "url": "s-planarity-and-colorings.html#ss-planarity-14",
  "type": "Remark",
  "number": "15.6.11",
  "title": "",
  "body": " One implication of is that the number of edges in a connected planar graph will never be larger than three times its number of vertices (as long as it has at least three vertices). Since the maximum number of edges in a graph with vertices is a quadratic function of , as increases, planar graphs are more and more sparse.  "
},
{
  "id": "theorem-degree-5",
  "level": "2",
  "url": "s-planarity-and-colorings.html#theorem-degree-5",
  "type": "Theorem",
  "number": "15.6.12",
  "title": "A Vertex of Degree Five.",
  "body": " A Vertex of Degree Five   If is a connected planar graph, then it has a vertex with degree 5 or less.    (by contradiction): We can assume that has at least seven vertices, for otherwise the degree of any vertex is at most 5. Suppose that is a connected planar graph and each vertex has a degree of 6 or more. Then, since each edge contributes to the degree of two vertices, . However, states that the , which is a contradiction.   "
},
{
  "id": "fig-euler-island",
  "level": "2",
  "url": "s-planarity-and-colorings.html#fig-euler-island",
  "type": "Figure",
  "number": "15.6.13",
  "title": "",
  "body": " A 3-coloring of Euler Island   Image showing a 3-coloring of Euler Island   "
},
{
  "id": "def-graph-coloring",
  "level": "2",
  "url": "s-planarity-and-colorings.html#def-graph-coloring",
  "type": "Definition",
  "number": "15.6.14",
  "title": "Graph Coloring.",
  "body": " Graph Coloring  Graph Coloring  Chromatic Number    the chromatic number of    Given an undirected graph , find a coloring function  from into a set of colors such that and has the smallest possible cardinality. The cardinality of is called the chromatic number of , .   "
},
{
  "id": "theorem-four-color-theorem",
  "level": "2",
  "url": "s-planarity-and-colorings.html#theorem-four-color-theorem",
  "type": "Theorem",
  "number": "15.6.15",
  "title": "The Four-Color Theorem.",
  "body": " The Four-Color Theorem  Four-Color Theorem   If is a planar graph, then .   "
},
{
  "id": "theorem-five-color-theorem",
  "level": "2",
  "url": "s-planarity-and-colorings.html#theorem-five-color-theorem",
  "type": "Theorem",
  "number": "15.6.16",
  "title": "The Five-Color Theorem.",
  "body": " The Five-Color Theorem  Five-Color Theorem   If is a planar graph, then .    The number 5 is not a sharp upper bound for because of the Four-Color Theorem.  This is a proof by Induction on the Number of Vertices in the Graph.  Basis: Clearly, a graph with one vertex has a chromatic number of 1.  Induction: Assume that all planar graphs with vertices have a chromatic number of 5 or less. Let be a planar graph. By , there exists a vertex with . Let be the planar graph obtained by deleting and all edges that connect to other vertices in . By the induction hypothesis, has a 5-coloring. Assume that the colors used are red, white, blue, green, and yellow.  If , then we can produce a 5-coloring of by selecting a color that is not used in coloring the vertices that are connected to with an edge in .  If , then we can use the same approach if the five vertices that are adjacent to are not all colored differently. We are now left with the possibility that , , , , and are all connected to by an edge and they are all colored differently. Assume that they are colored red, white blue, yellow, and green, respectively, as in .     Graph showing vertex of degree 5 with adjacent vertices all colored differently    Starting at in , suppose we try to construct a path to that passes through only red and blue vertices. This can either be accomplished or it can't be accomplished. If it can't be done, consider all paths that start at , and go through only red and blue vertices. If we exchange the colors of the vertices in these paths, including we still have a 5-coloring of . Since is now blue, we can color the central vertex, , red.  Finally, suppose that is connected to using only red and blue vertices. Then a path from to by using red and blue vertices followed by the edges and completes a circuit that either encloses or encloses and . Therefore, no path from to exists using only white and yellow vertices. We can then repeat the same process as in the previous paragraph with and , which will allow us to color v white.   "
},
{
  "id": "def-bipartite-graph",
  "level": "2",
  "url": "s-planarity-and-colorings.html#def-bipartite-graph",
  "type": "Definition",
  "number": "15.6.18",
  "title": "Bipartite Graph.",
  "body": " Bipartite Graph  Bipartite Graph.   A bipartite graph is a graph that has a 2-coloring. Equivalently, a graph is bipartite if its vertices can be partitioned into two nonempty subsets so that no edge connects vertices from the same subset.   "
},
{
  "id": "ex-bipartite",
  "level": "2",
  "url": "s-planarity-and-colorings.html#ex-bipartite",
  "type": "Example",
  "number": "15.6.19",
  "title": "A Few Examples.",
  "body": " A Few Examples     The graph of the Three Utilities Puzzle is bipartite. The vertices are partitioned into the utilities and the homes. Of course a 2-coloring of the graph is to color the utilities red and the homes blue.    For , the -cube is bipartite. A coloring would be to color all strings with an even number of 1's red and the strings with an odd number of 1's blue. By the definition of the -cube, two strings that have the same color couldn't be connected since they would need to differ in at least two positions.    Let be a set of 64 vertices, one for each square on a chess board. We can index the elements of by = the square on the row , column . Connect vertices in according to whether or not you can move a knight from one square to another. Using our indexing of ,  is a bipartite graph. The usual coloring of a chessboard is valid 2-coloring.     "
},
{
  "id": "theorem-no-odd",
  "level": "2",
  "url": "s-planarity-and-colorings.html#theorem-no-odd",
  "type": "Theorem",
  "number": "15.6.20",
  "title": "No Odd Circuits in a Bipartite Graph.",
  "body": " No Odd Circuits in a Bipartite Graph   An undirected graph is bipartite if and only if it has no circuit of odd length.    ( ) Let be a bipartite graph that is partitioned into two sets, R(ed) and B(lue) that define a 2-coloring. Consider any circuit in . If we specify a direction in the circuit and define on the vertices of the circuit by Note that is a bijection. Hence the number of red vertices in the circuit equals the number of blue vertices, and so the length of the circuit must be even.  ( ) Assume that has no circuit of odd length. For each component of , select any vertex and color it red. Then for every other vertex in the component, find the path of shortest distance from to . If the length of the path is odd, color blue, and if it is even, color red. We claim that this method defines a 2-coloring of . Suppose that it does not define a 2-coloring. Then let and be two vertices with identical colors that are connected with an edge. By the way that we colored , neither nor could equal . We can now construct a circuit with an odd length in . First, we start at and follow the shortest path to . Then follow the edge , and finally, follow the reverse of a shortest path from to . Since and have the same color, the first and third segments of this circuit have lengths that are both odd or even, and the sum of their lengths must be even. The addition of the single edge shows us that this circuit has an odd length. This contradicts our premise.   "
},
{
  "id": "exercises-15-6-2",
  "level": "2",
  "url": "s-planarity-and-colorings.html#exercises-15-6-2",
  "type": "Exercise",
  "number": "15.6.3.1",
  "title": "",
  "body": " Apply to prove that once gets to a certain size, a is nonplanar. What is the largest complete planar graph?   can be applied to infer that if , then is nonplanar. A is the largest complete planar graph.  "
},
{
  "id": "exercises-15-6-3",
  "level": "2",
  "url": "s-planarity-and-colorings.html#exercises-15-6-3",
  "type": "Exercise",
  "number": "15.6.3.2",
  "title": "",
  "body": " Can you apply to prove that the Three Utilities Puzzle can't be solved?  "
},
{
  "id": "exercises-15-6-4",
  "level": "2",
  "url": "s-planarity-and-colorings.html#exercises-15-6-4",
  "type": "Exercise",
  "number": "15.6.3.3",
  "title": "",
  "body": " What are the chromatic numbers of the following graphs?   What are the chromatic numbers?   Image of 6 graphs for exercise 3        4    3    3    3    2    4     "
},
{
  "id": "exercises-15-6-5",
  "level": "2",
  "url": "s-planarity-and-colorings.html#exercises-15-6-5",
  "type": "Exercise",
  "number": "15.6.3.4",
  "title": "",
  "body": " Prove that if an undirected graph has a subgraph that is a it then its chromatic number is at least 3.  "
},
{
  "id": "exercises-15-6-6",
  "level": "2",
  "url": "s-planarity-and-colorings.html#exercises-15-6-6",
  "type": "Exercise",
  "number": "15.6.3.5",
  "title": "",
  "body": " What is , ?   The chromatic number is since every vertex is connected to every other vertex.  "
},
{
  "id": "exercises-15-6-7",
  "level": "2",
  "url": "s-planarity-and-colorings.html#exercises-15-6-7",
  "type": "Exercise",
  "number": "15.6.3.6",
  "title": "",
  "body": " What is the chromatic number of the United States?  "
},
{
  "id": "exercises-15-6-8",
  "level": "2",
  "url": "s-planarity-and-colorings.html#exercises-15-6-8",
  "type": "Exercise",
  "number": "15.6.3.7",
  "title": "",
  "body": " Complete the proof of .   Suppose that is not connected. Then is made up of 2 components that are planar graphs with less than edges, and . For let be the number of vertices, regions and edges in . By the induction hypothesis, for .  One of the regions, the infinite one, is common to both graphs. Therefore, when we add edge back to the graph, we have , , and .   "
},
{
  "id": "exercises-15-6-9",
  "level": "2",
  "url": "s-planarity-and-colorings.html#exercises-15-6-9",
  "type": "Exercise",
  "number": "15.6.3.8",
  "title": "",
  "body": " Use the outline of a proof of to write a complete proof. Be sure to point out where the premise is essential.  "
},
{
  "id": "exercises-15-6-10",
  "level": "2",
  "url": "s-planarity-and-colorings.html#exercises-15-6-10",
  "type": "Exercise",
  "number": "15.6.3.9",
  "title": "",
  "body": " Let with , and let be the set of all undirected edges between distinct vertices in . Prove that either or is nonplanar.   Since , either has at least elements. Assume that it is that is larger. Since is greater than , would be nonplanar. Of course, if is larger, then would be nonplanar by the same reasoning. Can you find a graph with ten vertices such that it is planar and its complement is also planar?  "
},
{
  "id": "exercises-15-6-11",
  "level": "2",
  "url": "s-planarity-and-colorings.html#exercises-15-6-11",
  "type": "Exercise",
  "number": "15.6.3.10",
  "title": "",
  "body": " Design an algorithm to determine whether a graph is bipartite.  "
},
{
  "id": "exercises-15-6-12",
  "level": "2",
  "url": "s-planarity-and-colorings.html#exercises-15-6-12",
  "type": "Exercise",
  "number": "15.6.3.11",
  "title": "",
  "body": " Prove that a bipartite graph with an odd number of vertices greater than or equal to 3 has no Hamiltonian circuit.   Suppose that is bipartite (with colors red and blue), is odd, and is a Hamiltonian circuit. If is red, then would also be red. But then would not be in , a contradiction.  "
},
{
  "id": "exercises-15-6-13",
  "level": "2",
  "url": "s-planarity-and-colorings.html#exercises-15-6-13",
  "type": "Exercise",
  "number": "15.6.3.12",
  "title": "",
  "body": " Prove that any graph with a finite number of vertices can be drawn in three dimensions so that no edges intersect.  "
},
{
  "id": "exercises-15-6-14",
  "level": "2",
  "url": "s-planarity-and-colorings.html#exercises-15-6-14",
  "type": "Exercise",
  "number": "15.6.3.13",
  "title": "",
  "body": " Suppose you had to color the edges of an undirected graph so that for each vertex, the edges that it is connected to have different colors. How can this problem be transformed into a vertex coloring problem?   Draw a graph with one vertex for each edge, If two edges in the original graph meet at the same vertex, then draw an edge connecting the corresponding vertices in the new graph.  "
},
{
  "id": "exercises-15-6-15",
  "level": "2",
  "url": "s-planarity-and-colorings.html#exercises-15-6-15",
  "type": "Exercise",
  "number": "15.6.3.14",
  "title": "",
  "body": "    Suppose the edges of a are colored either red or blue. Prove that there will be either a red (a subset of the vertex set with three vertices connected by red edges) or a blue or both.    Suppose six people are selected at random. Prove that either there exists a subset of three of them with the property that any two people in the subset can communicate in a common language, or there exist three people, no two of whom can communicate in a common language.     "
},
{
  "id": "exercises-15-6-16",
  "level": "2",
  "url": "s-planarity-and-colorings.html#exercises-15-6-16",
  "type": "Exercise",
  "number": "15.6.3.15",
  "title": "",
  "body": "  Mesh Graph  Let be a positive integer, and let be positive integers greater than or equal to two. The mesh graph  has vertices of the form where . Two vertices and are adjacent if and only if . In other words, two adjacent vertices must differ in only one coordinate and by a difference of 1.     What is the chromatic number of ?    For what pairs does have a Hamiltonian circuit?    For what triples does have a Hamiltonian circuit?     "
},
{
  "id": "s-what-is-a-tree",
  "level": "1",
  "url": "s-what-is-a-tree.html",
  "type": "Section",
  "number": "16.1",
  "title": "What Is a Tree?",
  "body": " What Is a Tree?  What Is a Tree?   Definition  What distinguishes trees from other types of graphs is the absence of certain paths called cycles. Recall that a path is a sequence of consecutive edges in a graph, and a circuit is a path that begins and ends at the same vertex.   Cycle  Cycle    A cycle with edges.    A cycle is a circuit whose edge list contains no duplicates. It is customary to use to denote a cycle with edges.    The simplest example of a cycle in an undirected graph is a pair of vertices with two edges connecting them. Since trees are cycle-free, we can rule out all multigraphs having at least one pair of vertices connected with two or more edges from consideration as trees.  Trees can either be undirected or directed graphs. We will concentrate on the undirected variety in this chapter.   Tree  Tree   An undirected graph is a tree if it is connected and contains no cycles or self-loops.     Some trees and non-trees   Some trees and some non-trees   Image of 6 different graphs, labeled       Graphs i, ii and iii in are all trees, while graphs iv, v, and vi are not trees.    A is a tree. However, if , a is not a tree.    In a loose sense, a botanical tree is a mathematical tree. There are usually no cycles in the branch structure of a botanical tree.    The structures of some chemical compounds are modeled by a tree. For example, butane consists of four carbon atoms and ten hydrogen atoms, where an edge between two atoms represents a bond between them. A bond is a force that keeps two atoms together. The same set of atoms can be linked together in a different tree structure to give us the compound isobutane . There are some compounds whose graphs are not trees. One example is benzene .       Butane   Structure graph of Butane     Isobutane   Structure graph of Isobutane     Benzene   Structure graph of Benzene      One type of graph that is not a tree, but is closely related, is a forest.   Forest  Forest.   A forest is an undirected graph whose components are all trees.     A forest  The top half of can be viewed as a forest of three trees. Graph (vi) in this figure is also a forest.     Conditions for a graph to be a tree  We will now examine several conditions that are equivalent to the one that defines a tree. The following theorem will be used as a tool in proving that the conditions are equivalent.    Let be an undirected graph with no self-loops, and let . If two different simple paths exist between and , then there exists a cycle in .    Let and be two different simple paths from to . The first step we will take is to delete from and the initial edges that are identical. That is, if , , , and delete the first edges of both paths. Once this is done, both paths start at the same vertex, call it , and both still end at . Now we construct a cycle by starting at and following what is left of until we first meet what is left of . If this first meeting occurs at vertex , then the remainder of the cycle is completed by following the portion of the reverse of that starts at and ends at .     Equivalent Conditions for a Graph to be a Tree   Let be an undirected graph with no self-loops and . The following are all equivalent:      is a tree.    For each pair of distinct vertices in , there exists a unique simple path between them.     is connected, and if , then is disconnected.     contains no cycles, but by adding one edge, you create a cycle.     is connected and .       Proof Strategy. Most of this theorem can be proven by proving the following chain of implications: , , , and . Once these implications have been demonstrated, the transitive closure of on establishes the equivalence of the first four conditions. The proof that Statement 5 is equivalent to the first four can be done by induction, which we will leave to the reader.  (Indirect). Assume that is a tree and that there exists a pair of vertices between which there is either no path or there are at least two distinct paths. Both of these possibilities contradict the premise that is a tree. If no path exists, is disconnected, and if two paths exist, a cycle can be obtained by .  . We now use Statement 2 as a premise. Since each pair of vertices in are connected by exactly one path, is connected. Now if we select any edge in , it connects two vertices, and . By (2), there is no simple path connecting to other than . Therefore, no path at all can exist between and in . Hence is disconnected.  . Now we will assume that Statement 3 is true. We must show that has no cycles and that adding an edge to creates a cycle. We will use an indirect proof for this part. Since (4) is a conjunction, by DeMorgan's Law its negation is a disjunction and we must consider two cases. First, suppose that has a cycle. Then the deletion of any edge in the cycle keeps the graph connected, which contradicts (3). The second case is that the addition of an edge to does not create a cycle. Then there are two distinct paths between the vertices that the new edge connects. By , a cycle can then be created, which is a contradiction.  Assume that contains no cycles and that the addition of an edge creates a cycle. All that we need to prove to verify that is a tree is that is connected. If it is not connected, then select any two vertices that are not connected. If we add an edge to connect them, the fact that a cycle is created implies that a second path between the two vertices can be found which is in the original graph, which is a contradiction.    The usual definition of a directed tree is based on whether the associated undirected graph, which is created by erasing its directional arrows, is a tree. In Section 10.3 we will introduce the rooted tree, which is a special type of directed tree.    Exercises   Given the following vertex sets, draw all possible undirected trees that connect them.                .      The number of trees are: (a) 1, (b) 3, and (c) 16. The trees that connect are:     Image of all 16 trees that connect four vertices      Are all trees planar? If they are, can you explain why? If they are not, you should be able to find a nonplanar tree.    Prove that if is a simple undirected graph with no self-loops, then is a tree if and only if is connected and .   Use induction on .       Prove that if is a tree and , then is a forest of two trees.    Prove that if ) and are disjoint trees and is an edge that connects a vertex in to a vertex in , then is a tree.          Prove that any tree with at least two vertices has at least two vertices of degree 1.    Prove that if a tree has vertices, , and is not a path graph, , then it has at least three vertices of degree 1.         Assume that is a tree with , and all but possibly one vertex in has degree two or more.     The proof of this part is similar to part a in that we can infer , using the fact that a non-chain tree has at least one vertex of degree three or more.       "
},
{
  "id": "def-cycle",
  "level": "2",
  "url": "s-what-is-a-tree.html#def-cycle",
  "type": "Definition",
  "number": "16.1.1",
  "title": "Cycle.",
  "body": " Cycle  Cycle    A cycle with edges.    A cycle is a circuit whose edge list contains no duplicates. It is customary to use to denote a cycle with edges.   "
},
{
  "id": "def-tree",
  "level": "2",
  "url": "s-what-is-a-tree.html#def-tree",
  "type": "Definition",
  "number": "16.1.2",
  "title": "Tree.",
  "body": " Tree  Tree   An undirected graph is a tree if it is connected and contains no cycles or self-loops.   "
},
{
  "id": "ex-some-trees",
  "level": "2",
  "url": "s-what-is-a-tree.html#ex-some-trees",
  "type": "Example",
  "number": "16.1.3",
  "title": "Some trees and non-trees.",
  "body": " Some trees and non-trees   Some trees and some non-trees   Image of 6 different graphs, labeled       Graphs i, ii and iii in are all trees, while graphs iv, v, and vi are not trees.    A is a tree. However, if , a is not a tree.    In a loose sense, a botanical tree is a mathematical tree. There are usually no cycles in the branch structure of a botanical tree.    The structures of some chemical compounds are modeled by a tree. For example, butane consists of four carbon atoms and ten hydrogen atoms, where an edge between two atoms represents a bond between them. A bond is a force that keeps two atoms together. The same set of atoms can be linked together in a different tree structure to give us the compound isobutane . There are some compounds whose graphs are not trees. One example is benzene .       Butane   Structure graph of Butane     Isobutane   Structure graph of Isobutane     Benzene   Structure graph of Benzene     "
},
{
  "id": "def-forest",
  "level": "2",
  "url": "s-what-is-a-tree.html#def-forest",
  "type": "Definition",
  "number": "16.1.8",
  "title": "Forest.",
  "body": " Forest  Forest.   A forest is an undirected graph whose components are all trees.   "
},
{
  "id": "ex-a-forest",
  "level": "2",
  "url": "s-what-is-a-tree.html#ex-a-forest",
  "type": "Example",
  "number": "16.1.9",
  "title": "A forest.",
  "body": " A forest  The top half of can be viewed as a forest of three trees. Graph (vi) in this figure is also a forest.  "
},
{
  "id": "lemma-two-paths",
  "level": "2",
  "url": "s-what-is-a-tree.html#lemma-two-paths",
  "type": "Lemma",
  "number": "16.1.10",
  "title": "",
  "body": "  Let be an undirected graph with no self-loops, and let . If two different simple paths exist between and , then there exists a cycle in .    Let and be two different simple paths from to . The first step we will take is to delete from and the initial edges that are identical. That is, if , , , and delete the first edges of both paths. Once this is done, both paths start at the same vertex, call it , and both still end at . Now we construct a cycle by starting at and following what is left of until we first meet what is left of . If this first meeting occurs at vertex , then the remainder of the cycle is completed by following the portion of the reverse of that starts at and ends at .   "
},
{
  "id": "theorem-tree-conditions",
  "level": "2",
  "url": "s-what-is-a-tree.html#theorem-tree-conditions",
  "type": "Theorem",
  "number": "16.1.11",
  "title": "Equivalent Conditions for a Graph to be a Tree.",
  "body": " Equivalent Conditions for a Graph to be a Tree   Let be an undirected graph with no self-loops and . The following are all equivalent:      is a tree.    For each pair of distinct vertices in , there exists a unique simple path between them.     is connected, and if , then is disconnected.     contains no cycles, but by adding one edge, you create a cycle.     is connected and .       Proof Strategy. Most of this theorem can be proven by proving the following chain of implications: , , , and . Once these implications have been demonstrated, the transitive closure of on establishes the equivalence of the first four conditions. The proof that Statement 5 is equivalent to the first four can be done by induction, which we will leave to the reader.  (Indirect). Assume that is a tree and that there exists a pair of vertices between which there is either no path or there are at least two distinct paths. Both of these possibilities contradict the premise that is a tree. If no path exists, is disconnected, and if two paths exist, a cycle can be obtained by .  . We now use Statement 2 as a premise. Since each pair of vertices in are connected by exactly one path, is connected. Now if we select any edge in , it connects two vertices, and . By (2), there is no simple path connecting to other than . Therefore, no path at all can exist between and in . Hence is disconnected.  . Now we will assume that Statement 3 is true. We must show that has no cycles and that adding an edge to creates a cycle. We will use an indirect proof for this part. Since (4) is a conjunction, by DeMorgan's Law its negation is a disjunction and we must consider two cases. First, suppose that has a cycle. Then the deletion of any edge in the cycle keeps the graph connected, which contradicts (3). The second case is that the addition of an edge to does not create a cycle. Then there are two distinct paths between the vertices that the new edge connects. By , a cycle can then be created, which is a contradiction.  Assume that contains no cycles and that the addition of an edge creates a cycle. All that we need to prove to verify that is a tree is that is connected. If it is not connected, then select any two vertices that are not connected. If we add an edge to connect them, the fact that a cycle is created implies that a second path between the two vertices can be found which is in the original graph, which is a contradiction.   "
},
{
  "id": "exercise-trees",
  "level": "2",
  "url": "s-what-is-a-tree.html#exercise-trees",
  "type": "Exercise",
  "number": "16.1.3.1",
  "title": "",
  "body": " Given the following vertex sets, draw all possible undirected trees that connect them.                .      The number of trees are: (a) 1, (b) 3, and (c) 16. The trees that connect are:     Image of all 16 trees that connect four vertices    "
},
{
  "id": "exercises-16-1-3",
  "level": "2",
  "url": "s-what-is-a-tree.html#exercises-16-1-3",
  "type": "Exercise",
  "number": "16.1.3.2",
  "title": "",
  "body": " Are all trees planar? If they are, can you explain why? If they are not, you should be able to find a nonplanar tree.  "
},
{
  "id": "exercises-16-1-4",
  "level": "2",
  "url": "s-what-is-a-tree.html#exercises-16-1-4",
  "type": "Exercise",
  "number": "16.1.3.3",
  "title": "",
  "body": " Prove that if is a simple undirected graph with no self-loops, then is a tree if and only if is connected and .   Use induction on .  "
},
{
  "id": "exercises-16-1-5",
  "level": "2",
  "url": "s-what-is-a-tree.html#exercises-16-1-5",
  "type": "Exercise",
  "number": "16.1.3.4",
  "title": "",
  "body": "    Prove that if is a tree and , then is a forest of two trees.    Prove that if ) and are disjoint trees and is an edge that connects a vertex in to a vertex in , then is a tree.     "
},
{
  "id": "exercises-16-1-6",
  "level": "2",
  "url": "s-what-is-a-tree.html#exercises-16-1-6",
  "type": "Exercise",
  "number": "16.1.3.5",
  "title": "",
  "body": "    Prove that any tree with at least two vertices has at least two vertices of degree 1.    Prove that if a tree has vertices, , and is not a path graph, , then it has at least three vertices of degree 1.         Assume that is a tree with , and all but possibly one vertex in has degree two or more.     The proof of this part is similar to part a in that we can infer , using the fact that a non-chain tree has at least one vertex of degree three or more.     "
},
{
  "id": "s-spanning-trees",
  "level": "1",
  "url": "s-spanning-trees.html",
  "type": "Section",
  "number": "16.2",
  "title": "Spanning Trees",
  "body": " Spanning Trees  Spanning Trees   Motivation  The topic of spanning trees is motivated by a graph-optimization problem.  A graph of Atlantis University ( ) shows that there are four campuses in the system. A new secure communications system is being installed and the objective is to allow for communication between any two campuses; to achieve this objective, the university must buy direct lines between certain pairs of campuses. Let be the graph with a vertex for each campus and an edge for each direct line. Total communication is equivalent to being a connected graph. This is due to the fact that two campuses can communicate over any number of lines. To minimize costs, the university wants to buy a minimum number of lines.   Atlantis University Graph   Graph representing four university campuses    The solutions to this problem are all trees. Any graph that satisfies the requirements of the university must be connected, and if a cycle does exist, any line in the cycle can be deleted, reducing the cost. Each of the sixteen trees that can be drawn to connect the vertices North, South, East, and West (see ) solves the problem as it is stated. Note that in each case, three direct lines must be purchased. There are two considerations that can help reduce the number of solutions that would be considered.     Objective 1: Given that the cost of each line depends on certain factors, such as the distance between the campuses, select a tree whose cost is as low as possible.    Objective 2: Suppose that communication over multiple lines is noisier as the number of lines increases. Select a tree with the property that the maximum number of lines that any pair of campuses must use to communicate with is as small as possible.     Typically, these objectives are not compatible; that is, you cannot always simultaneously achieve these objectives. In the case of the Atlantis university system, the solution with respect to Objective 1 is indicated with solid lines in . There are four solutions to the problem with respect to Objective 2: any tree in which one campus is directly connected to the other three. One solution with respect to Objective 2 is indicated with dotted lines in . After satisfying the conditions of Objective 2, it would seem reasonable to select the cheapest of the four trees.    Definition   Spanning Tree  Spanning Tree   Let be a connected undirected graph. A spanning tree for is a spanning subgraph of that is a tree.        If is a spanning tree, .    The significance of a spanning tree is that it is a minimal spanning set. A smaller set would not span the graph, while a larger set would have a cycle, which has an edge that is superfluous.      For the remainder of this section, we will discuss two of the many topics that relate to spanning trees. The first is the problem of finding Minimal Spanning Trees, which addresses Objective 1 above. The second is the problem of finding Minimum Diameter Spanning Trees, which addresses Objective 2.   Minimal Spanning Tree  Minimal Spanning Tree   Given a weighted connected undirected graph , a minimal spanning tree is a spanning tree for which is as small as possible.      Prim's Algorithm  Unlike many of the graph-optimization problems that we've examined, a solution to this problem can be obtained efficiently. It is a situation in which a greedy algorithm works.   Bridge  Bridge   Let be an undirected graph and let be a partition of . A bridge between and is an edge in that connects a vertex in to a vertex in .      Let be a weighted connected undirected graph. Let be partitioned into two sets and . If is a bridge of least weight between and , then there exists a minimal spanning tree for that includes .    Suppose that no minimal spanning tree including exists. Let be a minimal spanning tree. If we add to , a cycle is created, and this cycle must contain another bridge, , between and . Since , we can delete and the new tree, which includes must also be a minimal spanning tree.     Some Bridges  The bridges between the vertex sets and in are the edges and . According to the theorem above, a minimal spanning tree that includes exists. By examination, you should be able to see that this is true. Is it true that only the bridges of minimal weight can be part of a minimal spanning tree?   Bridges between two sets   Graph image identifying bridge edges between two vertex sets     essentially tells us that a minimal spanning tree can be constructed recursively by continually adding minimally weighted bridges to a set of edges.   Prim's Algorithm  Prim's Algorithm   Let be a connected, weighted, undirected graph, and let be an arbitrary vertex in . The following steps lead to a minimal spanning tree for . and will be sets of vertices and is a set of edges.     (Initialize) ; ; .    (Build the tree) While :     Find , a bridge of minimum weight between and .     ; ;       Terminate with a minimal spanning tree .           If more than one minimal spanning tree exists, then the one that is obtained depends on and the means by which is selected in Step 2.    Warning: If two minimally weighted bridges exist between and , do not try to speed up the algorithm by adding both of them to '.    That yields a minimal spanning tree can be proven by induction with the use of .    If it is not known whether is connected, can be revised to handle this possibility. The key change (in Step 2.1) would be to determine whether any bridge at all exists between and . The condition of the while loop in Step 2 must also be changed somewhat.       A Small Example  Consider the graph in . If we apply starting at , we obtain the following edge list in the order given: . The total of the weights of these edges is 20. The method that we have used (in Step 2.1) to select a bridge when more than one minimally weighted bridge exists is to order all bridges alphabetically by the vertex in and then, if further ties exist, by the vertex in . The first vertex in that order is selected in Step 2.1 of the algorithm.   A small weighted graph   An undirected weighted graph with 7 vertices      Minimum Diameter Spanning Tree  Minimum Diameter Spanning Tree   Given a connected undirected graph , find a spanning tree of such that the longest path in is as short as possible.     The Case for Complete Graphs  The Minimum Diameter Spanning Tree Problem is trivial to solve in a . Select any vertex and construct the spanning tree whose edge set is the set of edges that connect to the other vertices in the . illustrates a solution for .   Minimum diameter spanning tree for    Depiction of a minimum diameter spanning tree on     For incomplete graphs, a two-stage algorithm is needed. In short, the first step is to locate a center of the graph. The maximum distance from a center to any other vertex is as small as possible. Once a center is located, a breadth-first search of the graph is used to construct the spanning tree.    Exercises   Suppose that after Atlantis University's phone system is in place, a fifth campus is established and that a transmission line can be bought to connect the new campus to any old campus. Is this larger system the most economical one possible with respect to Objective 1? Can you always satisfy Objective 2?   It might not be most economical with respect to Objective 1. You should be able to find an example to illustrate this claim. The new system can always be made most economical with respect to Objective 2 if the old system were designed with that objective in mind.    Construct a minimal spanning tree for the capital cities in New England (see ).    Show that the answer to the question posed in is no.   In the figure below, is not a minimal bridge between , but it is part of the minimal spanning tree for this graph.     Graph demonstrating solution to exercise 3      Find a minimal spanning tree for the following graphs.     Graph for exercise 4a       Graph for exercise 4b       Graph for exercise 4c      Find a minimum diameter spanning tree for the following graphs.     Graph for exercise 5a       Graph for exercise 5b        Edges in one solution are:    Vertices 8 and 9 are centers of the graph. Starting from vertex 8, a minimum diameter spanning tree is The diameter of the tree is 7.       In each of the following parts justify your answer with either a proof or a counterexample.     Suppose a weighted undirected graph had distinct edge weights. Is it possible that no minimal spanning tree includes the edge of minimal weight?    Suppose a weighted undirected graph had distinct edge weights. Is it possible that every minimal spanning tree includes the edge of maximal weight? If true, under what conditions would it happen?       "
},
{
  "id": "fig-atlantis-16",
  "level": "2",
  "url": "s-spanning-trees.html#fig-atlantis-16",
  "type": "Figure",
  "number": "16.2.1",
  "title": "",
  "body": " Atlantis University Graph   Graph representing four university campuses   "
},
{
  "id": "def-spanning-tree",
  "level": "2",
  "url": "s-spanning-trees.html#def-spanning-tree",
  "type": "Definition",
  "number": "16.2.2",
  "title": "Spanning Tree.",
  "body": " Spanning Tree  Spanning Tree   Let be a connected undirected graph. A spanning tree for is a spanning subgraph of that is a tree.   "
},
{
  "id": "s-spanning-trees-4-3",
  "level": "2",
  "url": "s-spanning-trees.html#s-spanning-trees-4-3",
  "type": "Note",
  "number": "16.2.3",
  "title": "",
  "body": "    If is a spanning tree, .    The significance of a spanning tree is that it is a minimal spanning set. A smaller set would not span the graph, while a larger set would have a cycle, which has an edge that is superfluous.     "
},
{
  "id": "def-min-spanning-tree",
  "level": "2",
  "url": "s-spanning-trees.html#def-min-spanning-tree",
  "type": "Definition",
  "number": "16.2.4",
  "title": "Minimal Spanning Tree.",
  "body": " Minimal Spanning Tree  Minimal Spanning Tree   Given a weighted connected undirected graph , a minimal spanning tree is a spanning tree for which is as small as possible.   "
},
{
  "id": "def-bridge",
  "level": "2",
  "url": "s-spanning-trees.html#def-bridge",
  "type": "Definition",
  "number": "16.2.5",
  "title": "Bridge.",
  "body": " Bridge  Bridge   Let be an undirected graph and let be a partition of . A bridge between and is an edge in that connects a vertex in to a vertex in .   "
},
{
  "id": "theorem-16-2-1",
  "level": "2",
  "url": "s-spanning-trees.html#theorem-16-2-1",
  "type": "Theorem",
  "number": "16.2.6",
  "title": "",
  "body": "  Let be a weighted connected undirected graph. Let be partitioned into two sets and . If is a bridge of least weight between and , then there exists a minimal spanning tree for that includes .    Suppose that no minimal spanning tree including exists. Let be a minimal spanning tree. If we add to , a cycle is created, and this cycle must contain another bridge, , between and . Since , we can delete and the new tree, which includes must also be a minimal spanning tree.   "
},
{
  "id": "ex-some-bridges",
  "level": "2",
  "url": "s-spanning-trees.html#ex-some-bridges",
  "type": "Example",
  "number": "16.2.7",
  "title": "Some Bridges.",
  "body": " Some Bridges  The bridges between the vertex sets and in are the edges and . According to the theorem above, a minimal spanning tree that includes exists. By examination, you should be able to see that this is true. Is it true that only the bridges of minimal weight can be part of a minimal spanning tree?   Bridges between two sets   Graph image identifying bridge edges between two vertex sets    "
},
{
  "id": "alg-prim",
  "level": "2",
  "url": "s-spanning-trees.html#alg-prim",
  "type": "Algorithm",
  "number": "16.2.9",
  "title": "Prim’s Algorithm.",
  "body": " Prim's Algorithm  Prim's Algorithm   Let be a connected, weighted, undirected graph, and let be an arbitrary vertex in . The following steps lead to a minimal spanning tree for . and will be sets of vertices and is a set of edges.     (Initialize) ; ; .    (Build the tree) While :     Find , a bridge of minimum weight between and .     ; ;       Terminate with a minimal spanning tree .      "
},
{
  "id": "s-spanning-trees-5-8",
  "level": "2",
  "url": "s-spanning-trees.html#s-spanning-trees-5-8",
  "type": "Note",
  "number": "16.2.10",
  "title": "",
  "body": "    If more than one minimal spanning tree exists, then the one that is obtained depends on and the means by which is selected in Step 2.    Warning: If two minimally weighted bridges exist between and , do not try to speed up the algorithm by adding both of them to '.    That yields a minimal spanning tree can be proven by induction with the use of .    If it is not known whether is connected, can be revised to handle this possibility. The key change (in Step 2.1) would be to determine whether any bridge at all exists between and . The condition of the while loop in Step 2 must also be changed somewhat.     "
},
{
  "id": "ex-an-example",
  "level": "2",
  "url": "s-spanning-trees.html#ex-an-example",
  "type": "Example",
  "number": "16.2.11",
  "title": "A Small Example.",
  "body": " A Small Example  Consider the graph in . If we apply starting at , we obtain the following edge list in the order given: . The total of the weights of these edges is 20. The method that we have used (in Step 2.1) to select a bridge when more than one minimally weighted bridge exists is to order all bridges alphabetically by the vertex in and then, if further ties exist, by the vertex in . The first vertex in that order is selected in Step 2.1 of the algorithm.   A small weighted graph   An undirected weighted graph with 7 vertices    "
},
{
  "id": "def-min-diameter-spanning-tree",
  "level": "2",
  "url": "s-spanning-trees.html#def-min-diameter-spanning-tree",
  "type": "Definition",
  "number": "16.2.13",
  "title": "Minimum Diameter Spanning Tree.",
  "body": " Minimum Diameter Spanning Tree  Minimum Diameter Spanning Tree   Given a connected undirected graph , find a spanning tree of such that the longest path in is as short as possible.   "
},
{
  "id": "ex-min-diameter-k5",
  "level": "2",
  "url": "s-spanning-trees.html#ex-min-diameter-k5",
  "type": "Example",
  "number": "16.2.14",
  "title": "The Case for Complete Graphs.",
  "body": " The Case for Complete Graphs  The Minimum Diameter Spanning Tree Problem is trivial to solve in a . Select any vertex and construct the spanning tree whose edge set is the set of edges that connect to the other vertices in the . illustrates a solution for .   Minimum diameter spanning tree for    Depiction of a minimum diameter spanning tree on    "
},
{
  "id": "exercises-16-2-2",
  "level": "2",
  "url": "s-spanning-trees.html#exercises-16-2-2",
  "type": "Exercise",
  "number": "16.2.4.1",
  "title": "",
  "body": " Suppose that after Atlantis University's phone system is in place, a fifth campus is established and that a transmission line can be bought to connect the new campus to any old campus. Is this larger system the most economical one possible with respect to Objective 1? Can you always satisfy Objective 2?   It might not be most economical with respect to Objective 1. You should be able to find an example to illustrate this claim. The new system can always be made most economical with respect to Objective 2 if the old system were designed with that objective in mind.  "
},
{
  "id": "exercises-16-2-3",
  "level": "2",
  "url": "s-spanning-trees.html#exercises-16-2-3",
  "type": "Exercise",
  "number": "16.2.4.2",
  "title": "",
  "body": " Construct a minimal spanning tree for the capital cities in New England (see ).  "
},
{
  "id": "exercises-16-2-4",
  "level": "2",
  "url": "s-spanning-trees.html#exercises-16-2-4",
  "type": "Exercise",
  "number": "16.2.4.3",
  "title": "",
  "body": " Show that the answer to the question posed in is no.   In the figure below, is not a minimal bridge between , but it is part of the minimal spanning tree for this graph.     Graph demonstrating solution to exercise 3    "
},
{
  "id": "exercises-16-2-5",
  "level": "2",
  "url": "s-spanning-trees.html#exercises-16-2-5",
  "type": "Exercise",
  "number": "16.2.4.4",
  "title": "",
  "body": " Find a minimal spanning tree for the following graphs.     Graph for exercise 4a       Graph for exercise 4b       Graph for exercise 4c    "
},
{
  "id": "exercises-16-2-6",
  "level": "2",
  "url": "s-spanning-trees.html#exercises-16-2-6",
  "type": "Exercise",
  "number": "16.2.4.5",
  "title": "",
  "body": " Find a minimum diameter spanning tree for the following graphs.     Graph for exercise 5a       Graph for exercise 5b        Edges in one solution are:    Vertices 8 and 9 are centers of the graph. Starting from vertex 8, a minimum diameter spanning tree is The diameter of the tree is 7.     "
},
{
  "id": "exercises-16-2-7",
  "level": "2",
  "url": "s-spanning-trees.html#exercises-16-2-7",
  "type": "Exercise",
  "number": "16.2.4.6",
  "title": "",
  "body": " In each of the following parts justify your answer with either a proof or a counterexample.     Suppose a weighted undirected graph had distinct edge weights. Is it possible that no minimal spanning tree includes the edge of minimal weight?    Suppose a weighted undirected graph had distinct edge weights. Is it possible that every minimal spanning tree includes the edge of maximal weight? If true, under what conditions would it happen?     "
},
{
  "id": "s-rooted-trees",
  "level": "1",
  "url": "s-rooted-trees.html",
  "type": "Section",
  "number": "16.3",
  "title": "Rooted Trees",
  "body": " Rooted Trees  Rooted Trees   In the next two sections, we will discuss rooted trees. Our primary foci will be on general rooted trees and on a special case, ordered binary trees.    Definition and Terminology   A Rooted Tree   A graph as a rooted tree     Informal Definition and Terminology   What differentiates rooted trees from undirected trees is that a rooted tree contains a distinguished vertex, called the root. Consider the tree in . Vertex has been designated the root of the tree. If we choose any other vertex in the tree, such as , we know that there is a unique path from to . The vertices on this path, , are described in genealogical terms:     is a child of (so is )    is 's parent.    , , and are 's ancestors.    , , and are descendants of .     These genealogical relationships are often easier to visualize if the tree is rewritten so that children are positioned below their parents, as in .  With this format, it is easy to see that each vertex in the tree can be thought of as the root of a tree that contains, in addition to itself, all of its descendants. For example, is the root of a tree that contains , , , and . Furthermore, is the root of a tree that contains , , and . Finally, and are roots of trees that contain only themselves. From this observation, we can give a formal definition of a rooted tree.     A Rooted Tree, redrawn   A graph as a rooted rree, redrawn so the root vertex is above all others     Rooted Tree  Rooted Tree      Basis: A tree with no vertices is a rooted tree (the empty tree).    A single vertex with no children is a rooted tree.    Recursion: Let , , be disjoint rooted trees with roots , , , respectively, and let be a vertex that does not belong to any of these trees. Then a rooted tree, rooted at , is obtained by making the parent of the vertices , , and . We call subtrees of the larger tree.       The level of a vertex Level of a vertex of a rooted tree is the number of edges that separate the vertex from the root. The level of the root is zero. The depth of a tree is the maximum level of the vertices in the tree. The depth of a tree in is three, which is the level of the vertices and . The vertices , , , , , , and have level two. , , and are at level one and has level zero.   A Decision Tree  is a rooted tree with Start as the root. It is an example of what is called a decision tree.    Tree Structure of Data  One of the keys to working with large amounts of information is to organize it in a consistent, logical way. A data structure is a scheme for organizing data. A simple example of a data structure might be the information a college admissions department might keep on their applicants. Items might look something like this: This structure is called a flat file .  A spreadsheet can be used to arrange data in this way. Although a flat file structure is often adequate, there are advantages to clustering some the information. For example the applicant information might be broken into four parts: name, contact information, high school, and application data: The first item in each ApplicantItem is a list , with each item in that list being a single field of the original flat file. The third item is simply the single high school item from the flat file. The application data is a list and one of its items, is itself a list with the recommendation data for each recommendation the applicant has.  The organization of this data can be visualized with a rooted tree such as the one in .   Applicant Data in a Rooted Tree   A data structure visualized as a Rooted Tree    In general, you can represent a data item, , as a rooted tree with as the root and a subtree for each field. Those fields that are more than just one item are roots of further subtrees, while individual items have no further children in the tree.     Kruskal's Algorithm  An alternate algorithm for constructing a minimal spanning tree uses a forest of rooted trees. First we will describe the algorithm in its simplest terms. Afterward, we will describe how rooted trees are used to implement the algorithm. Finally, we will demonstrate the SageMath implementation of the algorithm. In all versions of this algorithm, assume that is a weighted undirected graph with and .   Kruskal's Algorithm - Informal Version      Sort the edges of in ascending order according to weight. That is, .    Go down the list from Step 1 and add edges to a set (initially empty) of edges so that the set does not form a cycle. When an edge that would create a cycle is encountered, ignore it. Continue examining edges until either edges have been selected or you have come to the end of the edge list. If edges are selected, these edges make up a minimal spanning tree for . If fewer than edges are selected, is not connected.       Step 1 can be accomplished using one of any number of standard sorting routines. Using the most efficient sorting routine, the time required to perform this step is proportional to . The second step of the algorithm, also of time complexity, is the one that uses a forest of rooted trees to test for whether an edge should be added to the spanning set.   Kruskal's Algorithm  Kruskal's Algorithm      Sort the edges of in ascending order according to weight. That is, .       Initialize each vertex in V to be the root of its own rooted tree.    Go down the list of edges until either a spanning tree is completed or the edge list has been exhausted. For each edge , we can determine whether e can be added to the spanning set without forming a cycle by determining whether the root of tree is equal to the root of tree. If the two roots are equal, then ignore e. If the roots are different, then we can add e to the spanning set. In addition, we merge the trees that and belong to. This is accomplished by either making root the parent of root or vice versa.              Since we start the Kruskal's algorithm with trees and each addition of an edge decreases the number of trees by one, we end the algorithm with one rooted tree, provided a spanning tree exists.    The rooted tree that we develop in the algorithm is not the spanning tree itself.        SageMath Note - Implementation of Kruskal's Algorithm   SageMath Note  Kruskal's Algorithm   Kruskal's algorithm has been implemented in Sage. We illustrate how the spanning tree for a weighted graph in can be generated. First, we create such a graph  We will create a graph using a list of triples of the form . The method tells Sage to consider the labels as weights.    Weighed graph, Example SageMath output   SageMath generated weighted graph    Next, we load the kruskal function and use it to generate the list of edges in a spanning tree of .   To see the resulting tree with the same embedding as , we generate a graph from the spanning tree edges. Next, we set the positions of the vertices to be the same as in the graph. Finally, we plot the tree.    Spanning tree, SageMath output   SageMath generated spanning tree of weighted graph      Exercises   Suppose that an undirected tree has diameter and that you would like to select a vertex of the tree as a root so that the resulting rooted tree has the smallest depth possible. How would such a root be selected and what would be the depth of the tree (in terms of )?   Locate any simple path of length and locate the vertex in position on the path. The tree rooted at that vertex will have a depth of , which is minimal.    Use Kruskal's algorithm to find a minimal spanning tree for the following graphs. In addition to the spanning tree, find the final rooted tree in the algorithm. When you merge two trees in the algorithm, make the root of the tree with the lower vertex number the root of the new tree.   Graph 2(a)        Graph 2(b)        Suppose that information on buildings is arranged in records with five fields: the name of the building, its location, its owner, its height, and its floor space. The location and owner fields are records that include all of the information that you would expect, such as street, city, and state, together with the owner's name (first, middle, last) in the owner field. Draw a rooted tree to describe this type of record      Solution tree for exercise 3      Step through Kruskal's Algorthm by hand to verify that the example of a minimal spanning tree using Sage in is correct.    "
},
{
  "id": "fig-rooted-tree-16-3",
  "level": "2",
  "url": "s-rooted-trees.html#fig-rooted-tree-16-3",
  "type": "Figure",
  "number": "16.3.1",
  "title": "",
  "body": " A Rooted Tree   A graph as a rooted tree   "
},
{
  "id": "list-rooted-tree-terms",
  "level": "2",
  "url": "s-rooted-trees.html#list-rooted-tree-terms",
  "type": "List",
  "number": "16.3.2",
  "title": "Informal Definition and Terminology",
  "body": " Informal Definition and Terminology   What differentiates rooted trees from undirected trees is that a rooted tree contains a distinguished vertex, called the root. Consider the tree in . Vertex has been designated the root of the tree. If we choose any other vertex in the tree, such as , we know that there is a unique path from to . The vertices on this path, , are described in genealogical terms:     is a child of (so is )    is 's parent.    , , and are 's ancestors.    , , and are descendants of .     These genealogical relationships are often easier to visualize if the tree is rewritten so that children are positioned below their parents, as in .  With this format, it is easy to see that each vertex in the tree can be thought of as the root of a tree that contains, in addition to itself, all of its descendants. For example, is the root of a tree that contains , , , and . Furthermore, is the root of a tree that contains , , and . Finally, and are roots of trees that contain only themselves. From this observation, we can give a formal definition of a rooted tree.   "
},
{
  "id": "fig-rooted-tree-16-3-redrawn",
  "level": "2",
  "url": "s-rooted-trees.html#fig-rooted-tree-16-3-redrawn",
  "type": "Figure",
  "number": "16.3.3",
  "title": "",
  "body": " A Rooted Tree, redrawn   A graph as a rooted rree, redrawn so the root vertex is above all others   "
},
{
  "id": "def-rooted-tree",
  "level": "2",
  "url": "s-rooted-trees.html#def-rooted-tree",
  "type": "Definition",
  "number": "16.3.4",
  "title": "Rooted Tree.",
  "body": " Rooted Tree  Rooted Tree      Basis: A tree with no vertices is a rooted tree (the empty tree).    A single vertex with no children is a rooted tree.    Recursion: Let , , be disjoint rooted trees with roots , , , respectively, and let be a vertex that does not belong to any of these trees. Then a rooted tree, rooted at , is obtained by making the parent of the vertices , , and . We call subtrees of the larger tree.      "
},
{
  "id": "ss-rooted-trees-6",
  "level": "2",
  "url": "s-rooted-trees.html#ss-rooted-trees-6",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "level of a vertex "
},
{
  "id": "ex-decision-tree",
  "level": "2",
  "url": "s-rooted-trees.html#ex-decision-tree",
  "type": "Example",
  "number": "16.3.5",
  "title": "A Decision Tree.",
  "body": " A Decision Tree  is a rooted tree with Start as the root. It is an example of what is called a decision tree.  "
},
{
  "id": "ex-data-structures",
  "level": "2",
  "url": "s-rooted-trees.html#ex-data-structures",
  "type": "Example",
  "number": "16.3.6",
  "title": "Tree Structure of Data.",
  "body": " Tree Structure of Data  One of the keys to working with large amounts of information is to organize it in a consistent, logical way. A data structure is a scheme for organizing data. A simple example of a data structure might be the information a college admissions department might keep on their applicants. Items might look something like this: This structure is called a flat file .  A spreadsheet can be used to arrange data in this way. Although a flat file structure is often adequate, there are advantages to clustering some the information. For example the applicant information might be broken into four parts: name, contact information, high school, and application data: The first item in each ApplicantItem is a list , with each item in that list being a single field of the original flat file. The third item is simply the single high school item from the flat file. The application data is a list and one of its items, is itself a list with the recommendation data for each recommendation the applicant has.  The organization of this data can be visualized with a rooted tree such as the one in .   Applicant Data in a Rooted Tree   A data structure visualized as a Rooted Tree    In general, you can represent a data item, , as a rooted tree with as the root and a subtree for each field. Those fields that are more than just one item are roots of further subtrees, while individual items have no further children in the tree.  "
},
{
  "id": "ss-kruskal-algorithm-3",
  "level": "2",
  "url": "s-rooted-trees.html#ss-kruskal-algorithm-3",
  "type": "Algorithm",
  "number": "16.3.8",
  "title": "Kruskal’s Algorithm - Informal Version.",
  "body": " Kruskal's Algorithm - Informal Version      Sort the edges of in ascending order according to weight. That is, .    Go down the list from Step 1 and add edges to a set (initially empty) of edges so that the set does not form a cycle. When an edge that would create a cycle is encountered, ignore it. Continue examining edges until either edges have been selected or you have come to the end of the edge list. If edges are selected, these edges make up a minimal spanning tree for . If fewer than edges are selected, is not connected.      "
},
{
  "id": "ss-kruskal-algorithm-5",
  "level": "2",
  "url": "s-rooted-trees.html#ss-kruskal-algorithm-5",
  "type": "Algorithm",
  "number": "16.3.9",
  "title": "Kruskal’s Algorithm.",
  "body": " Kruskal's Algorithm  Kruskal's Algorithm      Sort the edges of in ascending order according to weight. That is, .       Initialize each vertex in V to be the root of its own rooted tree.    Go down the list of edges until either a spanning tree is completed or the edge list has been exhausted. For each edge , we can determine whether e can be added to the spanning set without forming a cycle by determining whether the root of tree is equal to the root of tree. If the two roots are equal, then ignore e. If the roots are different, then we can add e to the spanning set. In addition, we merge the trees that and belong to. This is accomplished by either making root the parent of root or vice versa.         "
},
{
  "id": "ss-kruskal-algorithm-6",
  "level": "2",
  "url": "s-rooted-trees.html#ss-kruskal-algorithm-6",
  "type": "Note",
  "number": "16.3.10",
  "title": "",
  "body": "    Since we start the Kruskal's algorithm with trees and each addition of an edge decreases the number of trees by one, we end the algorithm with one rooted tree, provided a spanning tree exists.    The rooted tree that we develop in the algorithm is not the spanning tree itself.     "
},
{
  "id": "sage_graph",
  "level": "2",
  "url": "s-rooted-trees.html#sage_graph",
  "type": "Figure",
  "number": "16.3.11",
  "title": "",
  "body": " Weighed graph, Example SageMath output   SageMath generated weighted graph   "
},
{
  "id": "sage_spanning_tree",
  "level": "2",
  "url": "s-rooted-trees.html#sage_spanning_tree",
  "type": "Figure",
  "number": "16.3.12",
  "title": "",
  "body": " Spanning tree, SageMath output   SageMath generated spanning tree of weighted graph   "
},
{
  "id": "exercises-16-3-2",
  "level": "2",
  "url": "s-rooted-trees.html#exercises-16-3-2",
  "type": "Exercise",
  "number": "16.3.4.1",
  "title": "",
  "body": " Suppose that an undirected tree has diameter and that you would like to select a vertex of the tree as a root so that the resulting rooted tree has the smallest depth possible. How would such a root be selected and what would be the depth of the tree (in terms of )?   Locate any simple path of length and locate the vertex in position on the path. The tree rooted at that vertex will have a depth of , which is minimal.  "
},
{
  "id": "exercises-16-3-3",
  "level": "2",
  "url": "s-rooted-trees.html#exercises-16-3-3",
  "type": "Exercise",
  "number": "16.3.4.2",
  "title": "",
  "body": " Use Kruskal's algorithm to find a minimal spanning tree for the following graphs. In addition to the spanning tree, find the final rooted tree in the algorithm. When you merge two trees in the algorithm, make the root of the tree with the lower vertex number the root of the new tree.   Graph 2(a)        Graph 2(b)      "
},
{
  "id": "exercises-16-3-4",
  "level": "2",
  "url": "s-rooted-trees.html#exercises-16-3-4",
  "type": "Exercise",
  "number": "16.3.4.3",
  "title": "",
  "body": " Suppose that information on buildings is arranged in records with five fields: the name of the building, its location, its owner, its height, and its floor space. The location and owner fields are records that include all of the information that you would expect, such as street, city, and state, together with the owner's name (first, middle, last) in the owner field. Draw a rooted tree to describe this type of record      Solution tree for exercise 3    "
},
{
  "id": "exercises-16-3-5",
  "level": "2",
  "url": "s-rooted-trees.html#exercises-16-3-5",
  "type": "Exercise",
  "number": "16.3.4.4",
  "title": "",
  "body": " Step through Kruskal's Algorthm by hand to verify that the example of a minimal spanning tree using Sage in is correct.  "
},
{
  "id": "s-binary-trees",
  "level": "1",
  "url": "s-binary-trees.html",
  "type": "Section",
  "number": "16.4",
  "title": "Binary Trees",
  "body": "  Binary Trees  Binary Trees   Definition of a binary tree  An ordered rooted tree is a rooted tree whose subtrees are put into a definite order and are, themselves, ordered rooted trees. An empty tree and a single vertex with no descendants (no subtrees) are ordered rooted trees.   Distinct Ordered Rooted Trees  The trees in are identical rooted trees, with root 1, but as ordered trees, they are different.   Two different ordered rooted trees   Two different ordered rooted trees     If a tree rooted at has subtrees, we would refer to them as the first, second,..., subtrees. There is a subtle difference between certain ordered trees and binary trees, which we define next.   Binary Tree  Binary Tree      A tree consisting of no vertices (the empty tree) is a binary tree    A vertex together with two subtrees that are both binary trees is a binary tree. The subtrees are called the left and right subtrees of the binary tree.       The difference between binary trees and ordered trees is that every vertex of a binary tree has exactly two subtrees (one or both of which may be empty), while a vertex of an ordered tree may have any number of subtrees. But there is another significant difference between the two types of structures. The two trees in would be considered identical as ordered trees. However, they are different binary trees. Tree (a) has an empty right subtree and Tree (b) has an empty left subtree.   Two different binary trees   Two different binary trees with two vertices each.     Terminology and General Facts about Binary Trees  Full binary tree     Leaf of a binary tree  A vertex of a binary tree with two empty subtrees is called a leaf Leaf, of a binary tree . All other vertices are called internal vertices .    The number of leaves in a binary tree can vary from one up to roughly half the number of vertices in the tree (see Exercise 4 of this section).    The maximum number of vertices at level of a binary tree is , (see Exercise 6 of this section).     Full binary tree  A full binary tree is a tree for which each vertex has either zero or two empty subtrees. In other words, each vertex has either two or zero children. See of this section for a general fact about full binary trees.       Traversals of Binary Trees  Traversals of Binary Trees  The traversal of a binary tree consists of visiting each vertex of the tree in some prescribed order. Unlike graph traversals, the consecutive vertices that are visited are not always connected with an edge. The most common binary tree traversals are differentiated by the order in which the root and its subtrees are visited. The three traversals are best described recursively and are:   Preorder Traversal:     Visit the root of the tree.    Preorder traverse the left subtree.    Preorder traverse the right subtree.       Inorder Traversal:     Inorder traverse the left subtree.    Visit the root of the tree.    Inorder traverse the right subtree.       Postorder Traversal:     Postorder traverse the left subtree.    Postorder traverse the right subtree.    Visit the root of the tree.       Any traversal of an empty tree consists of doing nothing.   Traversal Examples  For the tree in , the orders in which the vertices are visited are:   A-B-D-E-C-F-G, for the preorder traversal.    D-B-E-A-F-C-G, for the inorder traversal.    D-E-B-F-G-C-A, for the postorder traversal.     A Complete Binary Tree to Level 2   A complete binary tree with 7 vertices     Binary Tree Sort. Given a collection of integers (or other objects than can be ordered), one technique for sorting is a binary tree sort. If the integers are , , , , we first execute the following algorithm that creates a binary tree:   Binary Sort (or Search) Tree Creation      Insert into the root of the tree.    For k := 2 to n \/\/ insert into the tree     r =    inserted = false    while not(inserted):  if :  if has a left child:  r = left child of  else:  make the left child of   inserted = true  else:  if has a right child:  r = right child of  else:  make the right child of   inserted = true          If the integers to be sorted are 25, 17, 9, 20, 33, 13, and 30, then the tree that is created is the one in . The inorder traversal of this tree is 9, 13, 17, 20, 25, 30, 33, the integers in ascending order. In general, the inorder traversal of the tree that is constructed in the algorithm above will produce a sorted list. The preorder and postorder traversals of the tree have no meaning here.   A Binary Sort (or Search) Tree   A binary sort (or search) tree with 7 vertices      Expression Trees  Expression Tree  A convenient way to visualize an algebraic expression is by its expression tree. Consider the expression Since it is customary to put a precedence on multiplication\/divisions, is evaluated as . Consecutive multiplication\/divisions or addition\/subtractions are evaluated from left to right. We can analyze further by noting that it is the sum of two simpler expressions and . The first of these expressions can be broken down further into the difference of the expressions and . When we decompose any expression into , the expression tree of that expression is the binary tree whose root contains the operation and whose left and right subtrees are the trees of the left and right expressions, respectively. Additionally, a simple variable or a number has an expression tree that is a single vertex containing the variable or number. The evolution of the expression tree for expression appears in .   Building an Expression Tree   Diagram of process for building an expression tree     Some Expression Trees     If we intend to apply the addition and subtraction operations in first, we would parenthesize the expression to . Its expression tree appears in (a).    The expression trees for and for appear in (b) and (c).      Expression Tree Examples   Image of three expression trees     The three traversals of an operation tree are all significant. A binary operation applied to a pair of numbers can be written in three ways. One is the familiar infix form, such as for the sum of and . Another form is prefix, in which the same sum is written . The final form is postfix, in which the sum is written . Algebraic expressions involving the four standard arithmetic operations in prefix and postfix form are defined as follows:   Prefix and postfix forms of an algebraic expression    Prefix     A variable or number is a prefix expression    Any operation followed by a pair of prefix expressions is a prefix expression.       Postfix     A variable or number is a postfix expression    Any pair of postfix expressions followed by an operation is a postfix expression.        The connection between traversals of an expression tree and these forms is simple:     The preorder traversal of an expression tree will result in the prefix form of the expression.    The postorder traversal of an expression tree will result in the postfix form of the expression.    The inorder traversal of an operation tree will not, in general, yield the proper infix form of the expression. If an expression requires parentheses in infix form, an inorder traversal of its expression tree has the effect of removing the parentheses.      Traversing an Expression Tree  The preorder traversal of the tree in is , which is the prefix version of expression . The postorder traversal is . Note that since the original form of needed no parentheses, the inorder traversal, , is the correct infix version.     Counting Binary Trees  Counting Binary Trees  We close this section with a formula for the number of different binary trees with vertices. The formula is derived using generating functions. Although the complete details are beyond the scope of this text, we will supply an overview of the derivation in order to illustrate how generating functions are used in advanced combinatorics.  Let be the number of different binary trees of size ( vertices), . By our definition of a binary tree, . Now consider any positive integer , . A binary tree of size has two subtrees, the sizes of which add up to . The possibilities can be broken down into cases:   Case 0: Left subtree has size 0; right subtree has size .  Case 1: Left subtree has size 1; right subtree has size .      Case : Left subtree has size ; right subtree has size .      Case : Left subtree has size ; right subtree has size 0.   In the general Case , we can count the number of possibilities by multiplying the number of ways that the left subtree can be filled, , by the number of ways that the right subtree can be filled. . Since the sum of these products equals , we obtain the recurrence relation for :   Now take the generating function of both sides of this recurrence relation: or  Recall that If we abbreviate to , we get Using the quadratic equation we find two solutions:   The gap in our derivation occurs here since we don't presume a knowledge of calculus. If we expand as an extended power series, we find  The coefficients after the first one are all negative and there is a singularity at 0 because of the term. However if we do the same with we get  Further analysis leads to a closed form expression for , which is This sequence of numbers is often called the Catalan numbers . For more information on the Catalan numbers, see the entry A000108 in The On-Line Encyclopedia of Integer Sequences .    SageMath Note - Power Series   SageMath Note  Power Series   It may be of interest to note how the extended power series expansions of and are determined using Sage. In Sage, one has the capability of being very specific about how algebraic expressions should be interpreted by specifying the underlying ring. This can make working with various algebraic expressions a bit more confusing to the beginner. Here is how to get a Laurent expansion for above.   The first Sage expression above declares a structure called a ring that contains power series. We are not using that whole structure, just a specific element, G1 . So the important thing about this first input is that it establishes z as being a variable associated with power series over the integers. When the second expression defines the value of G1 in terms of z , it is automatically converted to a power series.  The expansion of uses identical code, and its coefficients are the values of .      Exercises   Draw the expression trees for the following expressions:                                   Expresssion tree solutions for exercises 1a - 1d.       Expression tree solution for exercise 1e      Draw the expression trees for                  Write out the preorder, inorder, and postorder traversals of the trees in Exercise 1 above.        Verify the formula for , by drawing all binary trees with three or fewer vertices.       Draw a binary tree with seven vertices and only one leaf.    Draw a binary tree with seven vertices and as many leaves as possible.         Solution trees for exercises 5a and 5b      Prove that the maximum number of vertices at level of a binary tree is and that a tree with that many vertices at level must have vertices.    Prove that if is a full binary tree, then the number of leaves of is one more than the number of internal vertices (non-leaves).   Solution 1:  Basis: A binary tree consisting of a single vertex, which is a leaf, satisfies the equation  Induction:Assume that for some , all full binary trees with or fewer vertices have one more leaf than internal vertices. Now consider any full binary tree with vertices. Let and be the left and right subtrees of the tree which, by the definition of a full binary tree, must both be full. If and are the numbers of internal vertices in and , and and are the numbers of leaves, then and . Therefore, in the whole tree,   Solution 2:  Imagine building a full binary tree starting with a single vertex. By continuing to add leaves in pairs so that the tree stays full, we can build any full binary tree. Our starting tree satisfies the condition that the number of leaves is one more than the number of internal vertices . By adding a pair of leaves to a full binary tree, an old leaf becomes an internal vertex, increasing the number of internal vertices by one. Although we lose a leaf, the two added leaves create a net increase of one leaf. Therefore, the desired equality is maintained.    "
},
{
  "id": "s-binary-trees-3-2",
  "level": "2",
  "url": "s-binary-trees.html#s-binary-trees-3-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "ordered rooted tree "
},
{
  "id": "ex-ordered-rooted",
  "level": "2",
  "url": "s-binary-trees.html#ex-ordered-rooted",
  "type": "Example",
  "number": "16.4.1",
  "title": "Distinct Ordered Rooted Trees.",
  "body": " Distinct Ordered Rooted Trees  The trees in are identical rooted trees, with root 1, but as ordered trees, they are different.   Two different ordered rooted trees   Two different ordered rooted trees    "
},
{
  "id": "def-binary-tree",
  "level": "2",
  "url": "s-binary-trees.html#def-binary-tree",
  "type": "Definition",
  "number": "16.4.3",
  "title": "Binary Tree.",
  "body": " Binary Tree  Binary Tree      A tree consisting of no vertices (the empty tree) is a binary tree    A vertex together with two subtrees that are both binary trees is a binary tree. The subtrees are called the left and right subtrees of the binary tree.      "
},
{
  "id": "fig-diff-binary-trees",
  "level": "2",
  "url": "s-binary-trees.html#fig-diff-binary-trees",
  "type": "Figure",
  "number": "16.4.4",
  "title": "",
  "body": " Two different binary trees   Two different binary trees with two vertices each.   "
},
{
  "id": "s-binary-trees-3-8",
  "level": "2",
  "url": "s-binary-trees.html#s-binary-trees-3-8",
  "type": "List",
  "number": "16.4.5",
  "title": "Terminology and General Facts about Binary Trees",
  "body": " Terminology and General Facts about Binary Trees  Full binary tree     Leaf of a binary tree  A vertex of a binary tree with two empty subtrees is called a leaf Leaf, of a binary tree . All other vertices are called internal vertices .    The number of leaves in a binary tree can vary from one up to roughly half the number of vertices in the tree (see Exercise 4 of this section).    The maximum number of vertices at level of a binary tree is , (see Exercise 6 of this section).     Full binary tree  A full binary tree is a tree for which each vertex has either zero or two empty subtrees. In other words, each vertex has either two or zero children. See of this section for a general fact about full binary trees.    "
},
{
  "id": "ex-traversals-example",
  "level": "2",
  "url": "s-binary-trees.html#ex-traversals-example",
  "type": "Example",
  "number": "16.4.6",
  "title": "Traversal Examples.",
  "body": " Traversal Examples  For the tree in , the orders in which the vertices are visited are:   A-B-D-E-C-F-G, for the preorder traversal.    D-B-E-A-F-C-G, for the inorder traversal.    D-E-B-F-G-C-A, for the postorder traversal.     A Complete Binary Tree to Level 2   A complete binary tree with 7 vertices    "
},
{
  "id": "alg-bin-sort-maketree",
  "level": "2",
  "url": "s-binary-trees.html#alg-bin-sort-maketree",
  "type": "Algorithm",
  "number": "16.4.8",
  "title": "Binary Sort (or Search) Tree Creation.",
  "body": " Binary Sort (or Search) Tree Creation      Insert into the root of the tree.    For k := 2 to n \/\/ insert into the tree     r =    inserted = false    while not(inserted):  if :  if has a left child:  r = left child of  else:  make the left child of   inserted = true  else:  if has a right child:  r = right child of  else:  make the right child of   inserted = true         "
},
{
  "id": "fig-sort-tree",
  "level": "2",
  "url": "s-binary-trees.html#fig-sort-tree",
  "type": "Figure",
  "number": "16.4.9",
  "title": "",
  "body": " A Binary Sort (or Search) Tree   A binary sort (or search) tree with 7 vertices   "
},
{
  "id": "fig-expression-tree-build",
  "level": "2",
  "url": "s-binary-trees.html#fig-expression-tree-build",
  "type": "Figure",
  "number": "16.4.10",
  "title": "",
  "body": " Building an Expression Tree   Diagram of process for building an expression tree   "
},
{
  "id": "ex-expression-tree-examples",
  "level": "2",
  "url": "s-binary-trees.html#ex-expression-tree-examples",
  "type": "Example",
  "number": "16.4.11",
  "title": "Some Expression Trees.",
  "body": " Some Expression Trees     If we intend to apply the addition and subtraction operations in first, we would parenthesize the expression to . Its expression tree appears in (a).    The expression trees for and for appear in (b) and (c).      Expression Tree Examples   Image of three expression trees    "
},
{
  "id": "ss-expression-trees-7",
  "level": "2",
  "url": "s-binary-trees.html#ss-expression-trees-7",
  "type": "List",
  "number": "16.4.13",
  "title": "Prefix and postfix forms of an algebraic expression",
  "body": " Prefix and postfix forms of an algebraic expression    Prefix     A variable or number is a prefix expression    Any operation followed by a pair of prefix expressions is a prefix expression.       Postfix     A variable or number is a postfix expression    Any pair of postfix expressions followed by an operation is a postfix expression.       "
},
{
  "id": "ex-expression-tree-traversal-example",
  "level": "2",
  "url": "s-binary-trees.html#ex-expression-tree-traversal-example",
  "type": "Example",
  "number": "16.4.14",
  "title": "Traversing an Expression Tree.",
  "body": " Traversing an Expression Tree  The preorder traversal of the tree in is , which is the prefix version of expression . The postorder traversal is . Note that since the original form of needed no parentheses, the inorder traversal, , is the correct infix version.  "
},
{
  "id": "ss-counting-binary-trees-11",
  "level": "2",
  "url": "s-binary-trees.html#ss-counting-binary-trees-11",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Catalan numbers "
},
{
  "id": "ss-sage-note-powerseries-5",
  "level": "2",
  "url": "s-binary-trees.html#ss-sage-note-powerseries-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "ring "
},
{
  "id": "exercises-16-4-2",
  "level": "2",
  "url": "s-binary-trees.html#exercises-16-4-2",
  "type": "Exercise",
  "number": "16.4.6.1",
  "title": "",
  "body": " Draw the expression trees for the following expressions:                                   Expresssion tree solutions for exercises 1a - 1d.       Expression tree solution for exercise 1e    "
},
{
  "id": "exercises-16-4-3",
  "level": "2",
  "url": "s-binary-trees.html#exercises-16-4-3",
  "type": "Exercise",
  "number": "16.4.6.2",
  "title": "",
  "body": " Draw the expression trees for                "
},
{
  "id": "exercises-16-4-4",
  "level": "2",
  "url": "s-binary-trees.html#exercises-16-4-4",
  "type": "Exercise",
  "number": "16.4.6.3",
  "title": "",
  "body": " Write out the preorder, inorder, and postorder traversals of the trees in Exercise 1 above.      "
},
{
  "id": "exercises-16-4-5",
  "level": "2",
  "url": "s-binary-trees.html#exercises-16-4-5",
  "type": "Exercise",
  "number": "16.4.6.4",
  "title": "",
  "body": " Verify the formula for , by drawing all binary trees with three or fewer vertices.  "
},
{
  "id": "exercises-16-4-6",
  "level": "2",
  "url": "s-binary-trees.html#exercises-16-4-6",
  "type": "Exercise",
  "number": "16.4.6.5",
  "title": "",
  "body": "    Draw a binary tree with seven vertices and only one leaf.    Draw a binary tree with seven vertices and as many leaves as possible.         Solution trees for exercises 5a and 5b    "
},
{
  "id": "exercises-16-4-7",
  "level": "2",
  "url": "s-binary-trees.html#exercises-16-4-7",
  "type": "Exercise",
  "number": "16.4.6.6",
  "title": "",
  "body": " Prove that the maximum number of vertices at level of a binary tree is and that a tree with that many vertices at level must have vertices.  "
},
{
  "id": "exercise-full-tree",
  "level": "2",
  "url": "s-binary-trees.html#exercise-full-tree",
  "type": "Exercise",
  "number": "16.4.6.7",
  "title": "",
  "body": " Prove that if is a full binary tree, then the number of leaves of is one more than the number of internal vertices (non-leaves).   Solution 1:  Basis: A binary tree consisting of a single vertex, which is a leaf, satisfies the equation  Induction:Assume that for some , all full binary trees with or fewer vertices have one more leaf than internal vertices. Now consider any full binary tree with vertices. Let and be the left and right subtrees of the tree which, by the definition of a full binary tree, must both be full. If and are the numbers of internal vertices in and , and and are the numbers of leaves, then and . Therefore, in the whole tree,   Solution 2:  Imagine building a full binary tree starting with a single vertex. By continuing to add leaves in pairs so that the tree stays full, we can build any full binary tree. Our starting tree satisfies the condition that the number of leaves is one more than the number of internal vertices . By adding a pair of leaves to a full binary tree, an old leaf becomes an internal vertex, increasing the number of internal vertices by one. Although we lose a leaf, the two added leaves create a net increase of one leaf. Therefore, the desired equality is maintained.  "
},
{
  "id": "s-Languages",
  "level": "1",
  "url": "s-Languages.html",
  "type": "Section",
  "number": "17.1",
  "title": "Formal Language Theory",
  "body": "  Formal Language Theory  Languages   Formal Languages    Languages  In formal language theory, an alphabet is a finite, non-empty set. The elements of the set are called symbols. A finite sequence of symbols from an alphabet is called a string over that alphabet.   Alphabet  Alphabet      An alphabet with two elements, 0 and 1.    An alphabet is a finite, non-empty set. It is customary to use to denote an alphabet.     Symbol   Symbol    The elements of an alphabet are called symbols.     String   String       A string with symbols    A finite sequence of symbols from an alphabet is called a string over that alphabet.     is an alphabet, and , , and are all strings over .  Note that strings really are sequences of symbols, which implies that order matters. Thus , , and are all different strings, though they are made up of the same symbols. The strings and are equal only if (i.e.the strings contain the same number of symbols) and for all .  Just as there are operations defined on numbers, truth values, sets, and other mathematical entities, there are operations defined on strings. Some important operations are:   Length      The length of string    The length of a string is the number of symbols in it. The notation for the length of is . Note that this is consistent with other uses of , all of which involve some notion of size: measures how big a number is (in terms of its distance from 0); measures the size of a set (in terms of the number of elements).  We will occasionally refer to a length-n string . This is a slightly awkward, but concise, shorthand for ``a string whose length is \".     Concatenation      The concatenation of string and string .    The concatenation of two strings and is the sequence of symbols .  Sometimes is used to denote concatenation, but it is far more usual to see the concatenation of and denoted by than by . You can easily convince yourself that concatenation is associative (i.e. for all strings and .) Concatenation is not commutative (i.e. it is not always true that : for example, if and then while and, as discussed above, these strings are not equal.)     Reversal      The reverse of string .    The reverse of a string is the string .     String Operations  Let , , , and .  Then , , and .  Also, , , , and .  Finally, , , and .   By the way, the previous example illustrates a naming convention standard throughout language theory texts: if a letter is intended to represent a single symbol in an alphabet, the convention is to use a letter from the beginning of the English alphabet ; if a letter is intended to represent a string, the convention is to use a letter from the end of the English alphabet .  In set theory, we have a special symbol to designate the set that contains no elements. Similarly, language theory has a special symbol which is used to represent the empty string , the string with no symbols in it. (Some texts use the symbol instead.) It is worth noting that , that , and that for all strings . (This last fact may appear a bit confusing. Remember that is not a symbol in a string with length 1, but rather the name given to the string made up of 0 symbols. Pasting those 0 symbols onto the front or back of a string still produces .)  The set of all strings over an alphabet is denoted . (In language theory, the symbol is typically used to denote ``zero or more'', so is the set of strings made up of zero or more symbols from .) Note that while an alphabet is by definition a finite set of symbols, and strings are by definition finite sequences of those symbols, the set is always infinite . Why is this? Suppose contains elements. Then there is one string over with 0 symbols, strings with 1 symbol, strings with 2 symbols (since there are choices for the first symbol and choices for the second), strings with 3 symbols, etc.   Set of all Strings over an Alphabet  If , then .  If , then .   Note that is countably infinite: if we list the strings as in the preceding example (length-0 strings, length-1 strings in ``alphabetical\" order, length-2 strings similarly ordered, etc) then any string over will eventually appear. (In fact, if and has length , then will appear on the list within the first entries.)  We now come to the definition of a language in the formal language theoretical sense.   Languages over an Alphabet   A language over an alphabet is a subset of . Thus, a language over is an element of , the power set of .    In other words, any set of strings (over alphabet ) constitutes a language (over alphabet ).   Languages over a set  Let . Then the following are all languages over :    Note that languages can be either finite or infinite. Because is infinite, it clearly has an infinite number of subsets, and so there are an infinite number of languages over . But are there countably or uncountably many such languages?    For any alphabet , the number of languages over is uncountable.    This fact is an immediate consequence of the result, proved in a previous chapter, that the power set of a countably infinite set is uncountable. Since the elements of are exactly the languages over , there are uncountably many such languages.  Languages are sets and therefore, as for any sets, it makes sense to talk about the union, intersection, and complement of languages. (When taking the complement of a language over an alphabet , we always consider the univeral set to be , the set of all strings over .) Because languages are sets of strings, there are additional operations that can be defined on languages, operations that would be meaningless on more general sets. For example, the idea of concatenation can be extended from strings to languages.  For two sets of strings and , we define the concatenation of and (denoted or just ) to be the set . For example, if and , then . Note in particular that , because , , and . Because concatenation of sets is defined in terms of the concatenation of the strings that the sets contain, concatenation of sets is associative and not commutative. (This can easily be verified.)  When a set is concatenated with itself, the notation is usually scrapped in favour of ; if is concatenated with , we write for the resulting set, etc. So is the set of all strings formed by concatenating two (possibly different, possibly identical) strings from , is the set of strings formed by concatenating three strings from , etc. Extending this notation, we take to be the set of strings formed from one string in (i.e is itself), and to be the set of strings formed from zero strings in (i.e. ). If we take the union , then the resulting set is the set of all strings formed by concatenating zero or more strings from , and is denoted . The set is called the Kleene closure of , and the operator is called the Kleene star operator.   Kleene Closure of a set  Let . Then    Note that this is the second time we have seen the notation . We have previously seen that for an alphabet , is defined to be the set of all strings over . If you think of as being a set of length-1 strings, and take its Kleene closure, the result is once again the set of all strings over , and so the two notions of coincide.   > Let . Then     Let and . Find the following:                                                             The reverse of a language is defined to be . Find and for the and in the preceding problem.    Give an example of a language such that .         "
},
{
  "id": "def-alphabet",
  "level": "2",
  "url": "s-Languages.html#def-alphabet",
  "type": "Definition",
  "number": "17.1.1",
  "title": "Alphabet.",
  "body": " Alphabet  Alphabet      An alphabet with two elements, 0 and 1.    An alphabet is a finite, non-empty set. It is customary to use to denote an alphabet.   "
},
{
  "id": "def-symbol",
  "level": "2",
  "url": "s-Languages.html#def-symbol",
  "type": "Definition",
  "number": "17.1.2",
  "title": "Symbol.",
  "body": " Symbol   Symbol    The elements of an alphabet are called symbols.   "
},
{
  "id": "def-string",
  "level": "2",
  "url": "s-Languages.html#def-string",
  "type": "Definition",
  "number": "17.1.3",
  "title": "String.",
  "body": " String   String       A string with symbols    A finite sequence of symbols from an alphabet is called a string over that alphabet.   "
},
{
  "id": "subsec-Languages-6",
  "level": "2",
  "url": "s-Languages.html#subsec-Languages-6",
  "type": "Example",
  "number": "17.1.4",
  "title": "",
  "body": " is an alphabet, and , , and are all strings over . "
},
{
  "id": "def-string-length",
  "level": "2",
  "url": "s-Languages.html#def-string-length",
  "type": "Definition",
  "number": "17.1.5",
  "title": "Length.",
  "body": " Length      The length of string    The length of a string is the number of symbols in it. The notation for the length of is . Note that this is consistent with other uses of , all of which involve some notion of size: measures how big a number is (in terms of its distance from 0); measures the size of a set (in terms of the number of elements).  We will occasionally refer to a length-n string . This is a slightly awkward, but concise, shorthand for ``a string whose length is \".   "
},
{
  "id": "def-string-concatenation",
  "level": "2",
  "url": "s-Languages.html#def-string-concatenation",
  "type": "Definition",
  "number": "17.1.6",
  "title": "Concatenation.",
  "body": " Concatenation      The concatenation of string and string .    The concatenation of two strings and is the sequence of symbols .  Sometimes is used to denote concatenation, but it is far more usual to see the concatenation of and denoted by than by . You can easily convince yourself that concatenation is associative (i.e. for all strings and .) Concatenation is not commutative (i.e. it is not always true that : for example, if and then while and, as discussed above, these strings are not equal.)   "
},
{
  "id": "def-string-reversal",
  "level": "2",
  "url": "s-Languages.html#def-string-reversal",
  "type": "Definition",
  "number": "17.1.7",
  "title": "Reversal.",
  "body": " Reversal      The reverse of string .    The reverse of a string is the string .   "
},
{
  "id": "ex-string-ops",
  "level": "2",
  "url": "s-Languages.html#ex-string-ops",
  "type": "Example",
  "number": "17.1.8",
  "title": "String Operations.",
  "body": " String Operations  Let , , , and .  Then , , and .  Also, , , , and .  Finally, , , and .  "
},
{
  "id": "ex-strings-over-alphabet",
  "level": "2",
  "url": "s-Languages.html#ex-strings-over-alphabet",
  "type": "Example",
  "number": "17.1.9",
  "title": "Set of all Strings over an Alphabet.",
  "body": " Set of all Strings over an Alphabet  If , then .  If , then .  "
},
{
  "id": "def-language",
  "level": "2",
  "url": "s-Languages.html#def-language",
  "type": "Definition",
  "number": "17.1.10",
  "title": "Languages over an Alphabet.",
  "body": " Languages over an Alphabet   A language over an alphabet is a subset of . Thus, a language over is an element of , the power set of .   "
},
{
  "id": "ex-languages-over-set",
  "level": "2",
  "url": "s-Languages.html#ex-languages-over-set",
  "type": "Example",
  "number": "17.1.11",
  "title": "Languages over a set.",
  "body": " Languages over a set  Let . Then the following are all languages over :   "
},
{
  "id": "thm-number-of-languages",
  "level": "2",
  "url": "s-Languages.html#thm-number-of-languages",
  "type": "Theorem",
  "number": "17.1.12",
  "title": "",
  "body": "  For any alphabet , the number of languages over is uncountable.   "
},
{
  "id": "ex-kleene-closure",
  "level": "2",
  "url": "s-Languages.html#ex-kleene-closure",
  "type": "Example",
  "number": "17.1.13",
  "title": "Kleene Closure of a set.",
  "body": " Kleene Closure of a set  Let . Then   "
},
{
  "id": "ex-sigma-star",
  "level": "2",
  "url": "s-Languages.html#ex-sigma-star",
  "type": "Example",
  "number": "17.1.14",
  "title": "<span class=\"process-math\">\\(\\Sigma^*\\)<\/span>.",
  "body": " > Let . Then  "
},
{
  "id": "exerc-17_1-1",
  "level": "2",
  "url": "s-Languages.html#exerc-17_1-1",
  "type": "Exercise",
  "number": "17.1.1.1",
  "title": "",
  "body": " Let and . Find the following:                                                           "
},
{
  "id": "exerc-17_1-2",
  "level": "2",
  "url": "s-Languages.html#exerc-17_1-2",
  "type": "Exercise",
  "number": "17.1.1.2",
  "title": "",
  "body": " The reverse of a language is defined to be . Find and for the and in the preceding problem.  "
},
{
  "id": "exerc-17_1-3",
  "level": "2",
  "url": "s-Languages.html#exerc-17_1-3",
  "type": "Exercise",
  "number": "17.1.1.3",
  "title": "",
  "body": " Give an example of a language such that .      "
},
{
  "id": "s-regular-expressions-and-apps",
  "level": "1",
  "url": "s-regular-expressions-and-apps.html",
  "type": "Section",
  "number": "17.2",
  "title": "Regular Expressions and Their Applications",
  "body": " Regular Expressions and Their Applications   Regular Expressions  Regular Expressions  Though we have used the term string throughout to refer to a sequence of symbols from an alphabet, an alternative term that is frequently used is word . The analogy seems fairly obvious: strings are made up of ``letters\" from an alphabet, just as words are in human languages like English. In English, however, there are no particular rules specifying which sequences of letters can be used to form legal English words---even unlikely combinations like ghth and ckstr have their place. While some formal languages may simply be random collections of arbitrary strings, more interesting languages are those where the strings in the language all share some common structure: In all of these languages, there are structural rules which determine which sequences of symbols are in the language and which aren't. So despite the terminology of ``alphabet\" and ``word\" in formal language theory, the concepts don't necessarily match ``alphabet\" and ``word\" for human languages. A better parallel is to think of the alphabet in a formal language as corresponding to the words in a human language; the words in a formal language correspond to the sentences in a human language, as there are rules ( grammar rules ) which determine how they can legally be constructed.  One way of describing the grammatical structure of the strings in a language is to use a mathematical formalism called a regular expression . A regular expression is a pattern that ``matches\" strings that have a particular form. For example, consider the language (over alphabet ) . What is the symbol-by-symbol structure of strings in this language? Well, they start with an , followed by zero or more 's or 's or both, followed by an . The regular expression is a pattern that captures this structure and matches any string in ( and have their usual meanings, and designates or .)  Or Notation  Various symbols have been used to represent the ``or'' operation in regular expressions. Both and have been used for this purpose. In this chapter, we use the symbol because it is commonly used in computer implementations of regular expressions.  Conversely, consider the regular expression . This is a pattern that matches any string that either has the form `` followed by zero or more 's or 's or both\" (i.e. any string that starts with an ) or has the form ``zero or more 's or 's or both followed by an \" (i.e. any string that ends with an ). Thus the regular expression generates the language of all strings that start or end (or both) in an : this is the set of strings that match the regular expression.  Here are the formal definitions of a regular expression and the language generated by a regular expression:   Regular Expression  Regular Expression      A regular expression.    Let be an alphabet. Then the following patterns are regular expressions over :    and are regular expressions;     is a regular expression, for each ;    if and are regular expressions, then so are , , and (and of course, and ). As in concatenation of strings, the is often left out of the second expression. (Note: the order of precedence of operators, from lowest to highest, is , , .)     No other patterns are regular expressions.     Language Generated by a Regular Expression  Language Generated by a Regular Expression      A language generated by regular expression .    The language generated by a regular expression  , denoted , is defined as follows:    i.e. no strings match ;     , i.e. matches only the empty string;     , i.e. matches only the string ;     , i.e. matches strings that match or or both;     , i.e. matches strings of the form ``something that matches followed by something that matches \";     , i.e. matches sequences of 0 or more strings each of which matches .     , i.e. matches exactly those strings matched by .       Let , and consider the regular expression . What is ? Well, so , and is the set of all strings of zero or more 's, so . Similarly, . Since , we have , which is the set of all strings of the form ``zero or more 's followed by zero or more 's\".  Let , and consider the regular expression . Since , . Similarly, and . Now and (the last equality is from clause 7 of ), and . So is the set of strings formed by concatenating or or with zero or more pairs of 's.   Regular Language  Regular Language  A language is regular if it is generated by a regular expression.   Clearly the union of two regular languages is regular; likewise, the concatenation of regular languages is regular; and the Kleene closure of a regular language is regular. It is less clear whether the intersection of regular languages is always regular; nor is it clear whether the complement of a regular language is guaranteed to be regular. These are questions that will be taken up in .  Regular languages, then, are languages whose strings' structure can be described in a very formal, mathematical way. The fact that a language can be ``mechanically\" described or generated means that we are likely to be able to get a computer to recognize strings in that language. We will pursue the question of mechanical language recognition in , and subsequently will see that our first attempt to model mechanical language recognition does in fact produce a family of ``machines\" that recognize exactly the regular languages. But first, in the next section, we will look at some practical applications of regular expressions.    Application: Using Regular Expressions  A common operation when editing text is to search for a given string of characters, sometimes with the purpose of replacing it with another string. Many ``search and replace'' search and replace facilities have the option of using regular expressions instead of simple strings of characters. A regular expression describes a language, that is, a set of strings. We can think of a regular expression as a pattern that matches certain strings, namely all the strings in the language described by the regular expression. When a regular expression is used in a search operation, the goal is to find a string that matches the expression. This type of pattern matching  pattern matching is very useful.  The ability to do pattern matching with regular expressions is provided in many text editors. Programming languages often come with libraries for working with regular expressions. Java (as of version 1.4) provides regular expression handling though a package named java.util.regexp . C++ typically provides a header file named regexp.h for the same purpose. In all these applications, many new notations are added to the syntax to make it more convenient to use. The syntax can vary from one implementation to another, but most implementations include the capabilities discussed in this section.  In applications of regular expressions, the alphabet usually includes all the characters on the keyboard. This leads to a problem, because regular expressions actually use two types of symbols: symbols that are members of the alphabet and special symbols such a `` * '' and `` ) '' that are used to construct expressions. These special symbols, which are not part of the language being described but are used in the description, are called meta-characters . The problem is, when the alphabet includes all the available characters, what do we do about meta-characters? If the language that we are describing uses the `` * '' character, for example, how can we represent the Kleene star operation?  The solution is to use a so-called ``escape character,'' which is usually the backslash, \\ . We agree, for example, that the notation \\* refers to the symbol * that is a member of the alphabet, while * by itself is the meta-character that represents the Kleene star operation. Similarly, ( and ) are the meta-characters that are used for grouping, while the corresponding characters in the language are written as \\( and \\) . For example, a regular expression that matches the string a*b repeated any number of times would be written: (a\\*b)* . The backslash is also used to represent certain non-printing characters. For example, a tab is represented as \\t and a new line character is \\n .  We introduce two new common operations on regular expressions and two new meta-characters to represent them. The first operation is represented by the meta-character + : If r is a regular expression, then r+ represents the occurrence of r one or more times. The second operation is represented by ? : The notation r? represents an occurrence of r zero or one times. That is to say, r? represents an optional occurrence of r . Note that these operations are introduced for convenience only and do not represent any real increase in the power. In fact, r+ is exactly equivalent to rr* , and r? is equivalent to (r| ) (except that in applications there is generally no equivalent to ).  To make it easier to deal with the large number of characters in the alphabet, character classes are introduced. A character class consists of a list of characters enclosed between brackets, [ and ] . (The brackets are meta-characters.) A character class matches a single character, which can be any of the characters in the list. For example, [0123456789] matches any one of the digits 0 through 9. The same thing could be expressed as (0|1|2|3|4|5|6|7|8|9) , so once again we have added only convenience, not new representational power. For even more convenience, a hyphen can be included in a character class to indicate a range of characters. This means that [0123456789] could also be written as [0-9] and that the regular expression [a-z] will match any single lowercase letter. A character class can include multiple ranges, so that [a-zA-Z] will match any letter, lower- or uppercase. The period ( . ) is a meta-character that will match any single character, except (in most implementations) for an end-of-line. These notations can, of course, be used in more complex regular expressions. For example, [A-Z][a-zA-Z]* will match any capitalized word, and \\(.*\\) matches any string of characters enclosed in parentheses.  In most implementations, the meta-character ^ can be used in a regular expression to match the beginning of a line of text, so that the expression ^[a-zA-Z]+ will only match a word that occurs at the start of a line. Similarly, $ is used as a meta-character to match the end of a line. Some implementations also have a way of matching beginnings and ends of words. Typically, \\b will match such ``word boundaries.'' Using this notation, the pattern \\band\\b will match the string ``and'' when it occurs as a word, but will not match the a-n-d in the word ``random.'' We are going a bit beyond basic regular expressions here: Previously, we only thought of a regular expression as something that either will match or will not match a given string in its entirety. When we use a regular expression for a search operation, however, we want to find a substring of a given string that matches the expression. The notations ^ , \\$ and \\ b put a restrictions on where the matching substring can be located in the string.  When regular expressions are used in search-and-replace operations, a regular expression is used for the search pattern. A search is made in a (typically long) string for a substring that matches the pattern, and then the substring is replaced by a specified replacement pattern. The replacement pattern is not used for matching and is not a regular expression. However, it can be more than just a simple string. It's possible to include parts of the substring that is being replaced in the replacement string. The notations \\0,\\1, ..., \\9 are used for this purpose. The first of these, \\0 , stands for the entire substring that is being replaced. The others are only available when parentheses are used in the search pattern. The notation \\1 stands for ``the part of the substring that matched the part of the search pattern beginning with the first ( in the pattern and ending with the matching ) .'' Similarly, \\2 represents whatever matched the part of the search pattern between the second pair of parentheses, and so on.  Suppose, for example, that you would like to search for a name in the form last-name, first-name and replace it with the same name in the form first-name last-name . For example, ``Reeves, Keanu'' should be converted to ``Keanu Reeves''. Assuming that names contain only letters, this could be done using the search pattern ([A-Za-z]+), ([A-Za-z]+) and the replacement pattern \\2 \\1 . When the match is made, the first ([A-Za-z]+) will match ``Reeves,'' so that in the replacement pattern, \\1 represents the substring ``Reeves''. Similarly, \\2 will represent ``Keanu''. Note that the parentheses are included in the search pattern only to specify what parts of the string are represented by \\1 and \\2 . In practice, you might use ^([A-Za-z]+), ([A-Za-z])\\$ as the search pattern to constrain it so that it will only match a complete line of text. By using a ``global'' search-and-replace, you could convert an entire file of names from one format to the other in a single operation.  Regular expressions are a powerful and useful technique that should be part of any computer scientist's toolbox. This section has given you a taste of what they can do, but you should check out the specific capabilities of the regular expression implementation in the tools and programming languages that you use.     Give English-language descriptions of the languages generated by the following regular expressions.                          Give regular expressions over that generate the following languages.                                    Prove that all finite languages are regular.   The backslash is itself a meta-character. Suppose that you want to match a string that contains a backslash character. How do you suppose you would represent the backslash in the regular expression?   Using the notation introduced in this section, write a regular expression that could be used to match each of the following:   Any sequence of letters (upper- or lowercase) that includes the letter Z (in uppercase).    Any eleven-digit telephone number written in the form (xxx)xxx-xxxx .    Any eleven-digit telephone number either in the form (xxx)xxx-xxxx or xxx-xxx-xxxx .    A non-negative real number with an optional decimal part. The expression should match numbers such as 17, 183.9999, 182., 0, 0.001, and 21333.2.    A complete line of text that contains only letters.    A C++ style one-line comment consisting of \/\/ and all the following characters up to the end-of-line.       Give a search pattern and a replace pattern that could be used to perform the following conversions:   Convert a string that is enclosed in a pair of double quotes to the same string with the double quotes replaced by single quotes.    Convert seven-digit telephone numbers in the format xxx-xxx-xxxx to the format (xxx)xxx-xxxx .    Convert C++ one-line comments, consisting of characters between \/\/ and end-of-line, to C style comments enclosed between \/* and *\/ .    Convert any number of consecutive spaces and tabs to a single space.       In some implementations of ``regular expressions,'' the notations \\1 , \\2 , and so on can occur in a search pattern. For example, consider the search pattern ^([a-zA-Z]).*\\1$ . Here, \\1 represents a recurrence of the same substring that matched [a-zA-Z] , the part of the pattern between the first pair of parentheses. The entire pattern, therefore, will match a line of text that begins and ends with the same letter. Using this notation, write a pattern that matches all strings in the language . (Later in this chapter, we will see that is not a regular language, so allowing the use of \\1 in a ``regular expression'' means that it's not really a regular expression at all! This notation can add a real increase in expressive power to the patterns that contain it.)    "
},
{
  "id": "subsec-regular-expressions-4",
  "level": "2",
  "url": "s-regular-expressions-and-apps.html#subsec-regular-expressions-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "regular expression "
},
{
  "id": "def-regex",
  "level": "2",
  "url": "s-regular-expressions-and-apps.html#def-regex",
  "type": "Definition",
  "number": "17.2.1",
  "title": "Regular Expression.",
  "body": " Regular Expression  Regular Expression      A regular expression.    Let be an alphabet. Then the following patterns are regular expressions over :    and are regular expressions;     is a regular expression, for each ;    if and are regular expressions, then so are , , and (and of course, and ). As in concatenation of strings, the is often left out of the second expression. (Note: the order of precedence of operators, from lowest to highest, is , , .)     No other patterns are regular expressions.   "
},
{
  "id": "def-language-gen-by-regex",
  "level": "2",
  "url": "s-regular-expressions-and-apps.html#def-language-gen-by-regex",
  "type": "Definition",
  "number": "17.2.2",
  "title": "Language Generated by a Regular Expression.",
  "body": " Language Generated by a Regular Expression  Language Generated by a Regular Expression      A language generated by regular expression .    The language generated by a regular expression  , denoted , is defined as follows:    i.e. no strings match ;     , i.e. matches only the empty string;     , i.e. matches only the string ;     , i.e. matches strings that match or or both;     , i.e. matches strings of the form ``something that matches followed by something that matches \";     , i.e. matches sequences of 0 or more strings each of which matches .     , i.e. matches exactly those strings matched by .      "
},
{
  "id": "subsec-regular-expressions-8",
  "level": "2",
  "url": "s-regular-expressions-and-apps.html#subsec-regular-expressions-8",
  "type": "Example",
  "number": "17.2.3",
  "title": "",
  "body": "Let , and consider the regular expression . What is ? Well, so , and is the set of all strings of zero or more 's, so . Similarly, . Since , we have , which is the set of all strings of the form ``zero or more 's followed by zero or more 's\". "
},
{
  "id": "subsec-regular-expressions-9",
  "level": "2",
  "url": "s-regular-expressions-and-apps.html#subsec-regular-expressions-9",
  "type": "Example",
  "number": "17.2.4",
  "title": "",
  "body": "Let , and consider the regular expression . Since , . Similarly, and . Now and (the last equality is from clause 7 of ), and . So is the set of strings formed by concatenating or or with zero or more pairs of 's. "
},
{
  "id": "def-regular-language",
  "level": "2",
  "url": "s-regular-expressions-and-apps.html#def-regular-language",
  "type": "Definition",
  "number": "17.2.5",
  "title": "Regular Language.",
  "body": " Regular Language  Regular Language  A language is regular if it is generated by a regular expression.  "
},
{
  "id": "subsec-regex-applications-2",
  "level": "2",
  "url": "s-regular-expressions-and-apps.html#subsec-regex-applications-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "pattern pattern matching "
},
{
  "id": "subsec-regex-applications-4",
  "level": "2",
  "url": "s-regular-expressions-and-apps.html#subsec-regex-applications-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "meta-characters "
},
{
  "id": "subsec-regex-applications-7",
  "level": "2",
  "url": "s-regular-expressions-and-apps.html#subsec-regex-applications-7",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "character classes "
},
{
  "id": "exerc-17_2-1",
  "level": "2",
  "url": "s-regular-expressions-and-apps.html#exerc-17_2-1",
  "type": "Exercise",
  "number": "17.2.3.1",
  "title": "",
  "body": " Give English-language descriptions of the languages generated by the following regular expressions.                        "
},
{
  "id": "exerc-17_2-2",
  "level": "2",
  "url": "s-regular-expressions-and-apps.html#exerc-17_2-2",
  "type": "Exercise",
  "number": "17.2.3.2",
  "title": "",
  "body": " Give regular expressions over that generate the following languages.                                  "
},
{
  "id": "exerc-17_2-3",
  "level": "2",
  "url": "s-regular-expressions-and-apps.html#exerc-17_2-3",
  "type": "Exercise",
  "number": "17.2.3.3",
  "title": "",
  "body": " Prove that all finite languages are regular.  "
},
{
  "id": "exerc-17_2-4",
  "level": "2",
  "url": "s-regular-expressions-and-apps.html#exerc-17_2-4",
  "type": "Exercise",
  "number": "17.2.3.4",
  "title": "",
  "body": "The backslash is itself a meta-character. Suppose that you want to match a string that contains a backslash character. How do you suppose you would represent the backslash in the regular expression? "
},
{
  "id": "exerc-17_2-5",
  "level": "2",
  "url": "s-regular-expressions-and-apps.html#exerc-17_2-5",
  "type": "Exercise",
  "number": "17.2.3.5",
  "title": "",
  "body": " Using the notation introduced in this section, write a regular expression that could be used to match each of the following:   Any sequence of letters (upper- or lowercase) that includes the letter Z (in uppercase).    Any eleven-digit telephone number written in the form (xxx)xxx-xxxx .    Any eleven-digit telephone number either in the form (xxx)xxx-xxxx or xxx-xxx-xxxx .    A non-negative real number with an optional decimal part. The expression should match numbers such as 17, 183.9999, 182., 0, 0.001, and 21333.2.    A complete line of text that contains only letters.    A C++ style one-line comment consisting of \/\/ and all the following characters up to the end-of-line.     "
},
{
  "id": "exerc-17_2-6",
  "level": "2",
  "url": "s-regular-expressions-and-apps.html#exerc-17_2-6",
  "type": "Exercise",
  "number": "17.2.3.6",
  "title": "",
  "body": " Give a search pattern and a replace pattern that could be used to perform the following conversions:   Convert a string that is enclosed in a pair of double quotes to the same string with the double quotes replaced by single quotes.    Convert seven-digit telephone numbers in the format xxx-xxx-xxxx to the format (xxx)xxx-xxxx .    Convert C++ one-line comments, consisting of characters between \/\/ and end-of-line, to C style comments enclosed between \/* and *\/ .    Convert any number of consecutive spaces and tabs to a single space.     "
},
{
  "id": "exerc-17_2-7",
  "level": "2",
  "url": "s-regular-expressions-and-apps.html#exerc-17_2-7",
  "type": "Exercise",
  "number": "17.2.3.7",
  "title": "",
  "body": " In some implementations of ``regular expressions,'' the notations \\1 , \\2 , and so on can occur in a search pattern. For example, consider the search pattern ^([a-zA-Z]).*\\1$ . Here, \\1 represents a recurrence of the same substring that matched [a-zA-Z] , the part of the pattern between the first pair of parentheses. The entire pattern, therefore, will match a line of text that begins and ends with the same letter. Using this notation, write a pattern that matches all strings in the language . (Later in this chapter, we will see that is not a regular language, so allowing the use of \\1 in a ``regular expression'' means that it's not really a regular expression at all! This notation can add a real increase in expressive power to the patterns that contain it.)  "
},
{
  "id": "s-finite-state-automata",
  "level": "1",
  "url": "s-finite-state-automata.html",
  "type": "Section",
  "number": "17.3",
  "title": "Finite-State Automata",
  "body": " Finite-State Automata  Finite-State Automata  Finite-State Machines   We have seen how regular expressions can be used to generate languages mechanically. How might languages be recognized mechanically? The question is of interest because if we can mechanically recognize languages like all legal C++ programs that will not go into infinite loops on any input , then it would be possible to write uber-compilers that can do semantic error-checking like testing for infinite loops, in addition to the syntactic error-checking they currently do.  What formalism might we use to model what it means to recognize a language ``mechanically''? We look for inspiration to a language-recognizer with which we are all familiar, and which we've already in fact mentioned: a compiler. Consider how a C++ compiler might handle recognizing a legal if statement. Having seen the word if , the compiler will be in a state or phase of its execution where it expects to see a ( ; in this state, any other character will put the compiler in a ``failure\" state. If the compiler does in fact see a ( next, it will then be in an ``expecting a boolean condition\" state; if it sees a sequence of symbols that make up a legal boolean condition, it will then be in an ``expecting a ) \" state; and then ``expecting a { ' or a legal statement\"; and so on. Thus one can think of the compiler as being in a series of states; on seeing a new input symbol, it moves on to a new state; and this sequence of transitions eventually leads to either a ``failure\" state (if the if statement is not syntactically correct) or a ``success\" state (if the if statement is legal). We isolate these three concepts---states, input-inspired transitions from state to state, and ``accepting\" vs ``non-accepting\" states---as the key features of a mechanical language-recognizer, and capture them in a model called a finite-state automaton . (Whether this is a successful distillation of the essence of mechanical language recognition remains to be seen; the question will be taken up later in this chapter.)  Automata  The term automata is the plural form of automaton . In some texts, machine is used in place of automaton.    A finite-state automaton (FSA)  finite-state automaton  , then, is a machine which takes, as input, a finite string of symbols from some alphabet . There is a finite set of states in which the machine can find itself. The state it is in before consuming any input is called the start state . Some of the states are accepting or final . If the machine ends in such a state after completely consuming an input string, the string is said to be accepted by the machine. The actual functioning of the machine is described by something called a transition function , which specifies what happens if the machine is in a particular state and looking at a particular input symbol. (``What happens\" means ``in which state does the machine end up\".)   A transition function   Below is a table that describes the transition function of a finite-state automaton with states , , and , on inputs and .                                              The table indicates, for example, that if the FSA were in state and consumed a , it would move to state .      Deterministic Finite-State Automata   Deterministic Finite-State Automata    DFA   FSAs actually come in two flavors depending on what properties you require of the transition function. We will look first at a class of FSAs called deterministic finite-state automata (DFAs). In these machines, the current state of the machine and the current input symbol together determine exactly which state the machine ends up in: for every current state, current input symbol pair, there is exactly one possible next state for the machine.   Deterministic Finite-State Automaton   Deterministic Finite-State Automata    Formally, a deterministic finite-state automaton  is specified by 5 components: where      is a finite set of states;     is an alphabet called the input alphabet ;     is a state which is designated as the start state ;     is a subset of ; the states in are states designated as final or accepting states;     is a transition function that takes state, input symbol pairs and maps each one to a state: .   To say means that if the machine is in state and the input symbol is consumed, then the machine will move into state .    The function must be a total function, meaning that must be defined for every state and every input symbol .    Recall also that, according to the definition of a function, there can be only one output for any particular input. This means that for any given and , can have only one value. This is what makes the finite-state automaton deterministic : given the current state and input symbol, there is only one possible move the machine can make.           The transition function described by the table in the preceding example is that of a DFA. If we take to be the start state and to be a final state, then the formal description of the resulting machine is , where is given by                                       The transition function describes only individual steps of the machine as individual input symbols are consumed. However, we will often want to refer to``the state the automaton will be in if it starts in state and consumes input string \", where is a string of input symbols rather than a single symbol. Following the usual practice of using to designate ``0 or more\", we define   as a convenient shorthand for ``the state that the automaton will be in if it starts in state and consumes the input string \". For any string, it is easy to see, based on , what steps the machine will make as those symbols are consumed, and what will be for any and . Note that if no input is consumed, a DFA makes no move, and so for any state . can be defined formally by saying that \\delta^*(q,\\varepsilon)=q for every state , and for any state , a\\in\\Sigma and . Note that this is a recursive definition.   Let be the automaton in the preceding example. Then, for example:   We have divided the states of a DFA into accepting and non-accepting states, with the idea that some strings will be recognized as ``legal\" by the automaton, and some not. Formally:   Language Accepted by FSA   Let . A string is accepted by iff . (Don't get confused by the notation. Remember, it's just a shorter and neater way of saying `` is accepted by if and only if the state that M will end up in if it starts in and consumes is one of the states in .\")  The language accepted by , denoted , is the set of all strings that are accepted by : .    Note that we sometimes use a slightly different phrasing and say that a language is accepted by some machine . We don't mean by this that  and maybe some other strings are accepted by ; we mean , i.e. is exactly the set of strings accepted by .  It may not be easy, looking at a formal specification of a DFA, to determine what language that automaton accepts. Fortunately, the mathematical description of the automaton can be neatly and helpfully captured in a picture called a transition diagram . Consider again the DFA of the two preceding examples. It can be represented pictorially as:   Transition diagram for above DFA,   The arrow on the left indicates that is the start state; double circles indicate that a state is accepting. Looking at this picture, it should be fairly easy to see that the language accepted by the DFA is .    Find the language accepted by the DFA shown below (and describe it using a regular expression!)   Transition diagram representing a formal language   The start state of is accepting, which means . If is in state , a sequence of two 's or three 's will move back to and hence be accepted. So .    The state in the preceding example is often called a garbage or trap state: it is a non-accepting state which, once reached by the machine, cannot be escaped. It is fairly common to omit such states from transition diagrams. For example, one is likely to see the diagram:   Transition diagram omitting a trap state     Note that this cannot be a complete DFA, because a DFA is required to have a transition defined for every state-input pair. The diagram is ``short for\" the full diagram:   Transition diagram with trap state     As well as recognizing what language is accepted by a given DFA, we often want to do the reverse and come up with a DFA that accepts a given language. Building DFAs for specified languages is an art, not a science. There is no algorithm that you can apply to produce a DFA from an English-language description of the set of strings the DFA should accept. On the other hand, it is not generally successful, either, to simply write down a half-dozen strings that are in the language and design a DFA to accept those strings---invariably there are strings that are in the language that aren't accepted, and other strings that aren't in the language that are accepted. So how do you go about building DFAs that accept all and only the strings they're supposed to accept? The best advice I can give is to think about relevant characteristics that determine whether a string is in the language or not, and to think about what the possible values or ``states\" of those characteristics are; then build a machine that has a state corresponding to each possible combination of values of relevant characteristics, and determine how the consumption of inputs affects those values. I'll illustrate what I mean with a couple of examples.   Find a DFA with input alphabet that accepts the language .  The characteristics that determine whether or not a string is in are the parity of and . There are four possible combinations of ``values\" for these characteristics: both numbers could be even, both could be odd, the first could be odd and the second even, or the first could be even and the second odd. So we build a machine with four states corresponding to the four cases. We want to set up \\delta so that the machine will be in state exactly when it has consumed a string with an even number of 's and an even number of 's, in state exactly when it has consumed a string with an odd number of 's and an odd number of 's, and so on.  To do this, we first make the state into our start state, because the DFA will be in the start state after consuming the empty string , and has an even number (zero) of both 's and 's. Now we add transitions by reasoning about how the parity of 's and 's is changed by additional input. For instance, if the machine is in (meaning an even number of 's and an even number of 's have been seen) and a further is consumed, then we want the machine to move to state , since the machine has now consumed an odd number of 's and still an even number of 's. So we add the transition to the machine. Similarly, if the machine is in (meaning an odd number of 's and an odd number of 's have been seen) and a further is consumed, then we want the machine to move to state again, since the machine has still consumed an odd number of 's, and now an even number of 's. So we add the transition to the machine. Similar reasoning produces a total of eight transitions, one for each state-input pair. Finally, we have to decide which states should be final states. The only state that corresponds to the desired criteria for the language is , so we make a final state. The complete machine is shown below.   Transition diagram for finite state machine described in example      Find a DFA with input alphabet that accepts the language . The relevant characteristic here is of course whether or not the number of 's in a string is divisible by 3, perhaps suggesting a two-state machine. But in fact, there is more than one way for a number to not be divisible by 3: dividing the number by 3 could produce a remainder of either 1 or 2 (a remainder of 0 corresponds to the number in fact being divisible by 3). So we build a machine with three states , , , and add transitions so that the machine will be in state exactly when the number of 's it has consumed is evenly divisible by 3, in state exactly when the number of 's it has consumed is equivalent to , and similarly for . State will be the start state, as has 0 's and 0 is divisible by 3. The completed machine is shown below. Notice that because the consumption of a does not affect the only relevant characteristic, 's do not cause changes of state.   Transition diagram that accepts the language      Find a DFA with input alphabet that accepts the language .  Again, it is not quite so simple as making a two-state machine where the states correspond to ``have seen \" and ``have not seen \". Think dynamically: as you move through the input string, how do you arrive at the goal of having seen three consecutive 's? You might have seen two consecutive 's and still need a third, or you might just have seen one and be looking for two more to come immediately, or you might just have seen a and be right back at the beginning as far as seeing 3 consecutive 's goes. So once again there will be three states, with the ``last symbol was not an '' state being the start state. The complete automaton is shown below.   Transition diagram that accepts a language where the number of a characters is divisible by 3.        Nondeterministic Finite-State Automata   Noneterministic Finite-State Automata    NDFSA    NFA   As mentioned briefly above, there is an alternative school of though as to what properties should be required of a finite-state automaton's transition function. Recall our motivating example of a C++ compiler and a legal if statement. In our description, we had the compiler in an ``expecting a ) \" state; on seeing a ) , the compiler moved into an ``expecting a } or a legal statement\" state. An alternative way to view this would be to say that the compiler, on seeing a ) , could move into one of two different states: it could move to an ``expecting a { \" state or move to an ``expecting a legal statement\" state. Thus, from a single state, on input ) , the compiler has multiple moves. This alternative interpretation is not allowed by the DFA model. A second point on which one might question the DFA model is the fact that input must be consumed for the machine to change state. Think of the syntax for C++ function declarations. The return type of a function need not be specified (the default is taken to be int ). The start state of the compiler when parsing a function declaration might be ``expecting a return type\"; then with no input consumed, the compiler can move to the state ``expecting a legal function name\". To model this, it might seem reasonable to allow transitions that do not require the consumption of input (such transitions are called -transitions ). Again, this is not supported by the DFA abstraction. There is, therefore, a second class of finite-state automata that people study, the class of nondeterministic finite-state automata.  A nondeterministic finite-state automaton (NFA) is the same as a deterministic finite-state automaton except that the transition function is no longer a function that maps a state-input pair to a state; rather, it maps a state-input pair or a state- pair to a set of states. No longer do we have , meaning that the machine must change to state if it is in state and consumes an . Rather, we have , meaning that if the machine is in state and consumes an , it might move directly to any one of the states . Note that the set of next states is defined for every state and every input symbol , but for some 's and 's it could be empty, or contain just one state (there don't have to be multiple next states). The function must also specify whether it is possible for the machine to make any moves without input being consumed, i.e. must be specified for every state . Again, it is quite possible that may be empty for some states : there need not be -transitions out of .    Nondeterministic Finite-State Automata    Formally, a nondeterministic finite-state automaton  is specified by 5 components: where      and are as in the definition of DFAs;     is a transition function that takes state, input symbol pairs and maps each one to a set of states. To say means that if the machine is in state and the input symbol is consumed, then the machine may move directly into any one of states . The function must also be defined for every state, pair. To say means that there are direct -transitions from state to each of .  The formal description of the function is .         The function describes how the machine functions on zero or one input symbol. As with DFAs, we will often want to refer to the behavior of the machine on a string of inputs, and so we use the notation as shorthand for ``the set of states in which the machine might be if it starts in state and consumes input string \". As with DFAs, is determined by the specification of . Note that for every state , contains at least , and may contain additional states if there are (sequences of) -transitions out of .  We do have to think a bit carefully about what it means for an NFA to accept a string . Suppose contains both accepting and non-accepting states, i.e. the machine could end in an accepting state after consuming , but it might also end in a non-accepting state. Should we consider the machine to accept , or should we require every state in to be accepting before we admit to the ranks of the accepted? Think of the C++ compiler again: provided that an if statement fits one of the legal syntax specifications, the compiler will accept it. So we take as the definition of acceptance by an NFA: A string is accepted by an NFA provided that at least one of the states in is an accepting state. That is, if there is some sequence of steps of the machine that consumes and leaves the machine in an accepting state, then the machine accepts . Formally:   Language Accepted by NFA   Let be a nondeterministic finite-state automaton. The string is accepted by iff contains at least one state .  The language accepted by , denoted , is the set of all strings that are accepted by : .     The NFA shown below accepts all strings of 's and 's in which the second-to-last symbol is .   Diagram of a non-deterministic finite state automata described in example.      It should be fairly clear that every language that is accepted by a DFA is also accepted by an NFA. Pictorially, a DFA looks exactly like an NFA (an NFA that doesn't happen to have any -transitions or multiple same-label transitions from any state), though there is slightly more going on behind the scenes. Formally, given the DFA , you can build an NFA where 4 of the 5 components are the same and where every transition has been replaced by .  But is the reverse true? Can any NFA-recognized language be recognized by a DFA? Look, for example, at the language in . Can you come up with a DFA that accepts this language? Try it. It's pretty difficult to do. But does that mean that there really is no DFA that accepts the language, or only that we haven't been clever enough to find one?  It turns out that the limitation is in fact in our cleverness, and not in the power of DFAs.    Every language that is accepted by an NFA is accepted by a DFA.    Suppose we are given an NFA , and we want to build a DFA that accepts the same language. The idea is to make the states in correspond to subsets of 's states, and then to set up 's transition function so that for any string , corresponds to ; i.e. the single state that gets you to in corresponds to the set of states that could get you to in . If any of those states is accepting in , would be accepted by , and so the corresponding state in would be made accepting as well.  So how do we make this work? The first thing to do is to deal with a start state for . If we're going to make this state correspond to a subset of 's states, what subset should it be? Well, remember (1) that in any DFA, ; and (2) we want to make correspond to for every . Putting these two limitations together tells us that we should make correspond to . So corresponds to the subset of all of 's states that can be reached with no input.  Now we progressively set up 's transition function by repeatedly doing the following:   find a state that has been added to but whose out-transitions have not yet been added. (Note that initially fits this description.) Remember that the state corresponds to some subset of 's states.    for each input symbol , look at all 's states that can be reached from any one of by consuming (perhaps making some -transitions as well). That is, look at . If there is not already a DFA state that corresponds to this subset of 's states, then add one, and add the transition to 's transitions.     The above process must halt eventually, as there are only a finite number of states in the NFA, and therefore there can be at most states in the DFA, as that is the number of subsets of the NFA's states. The final states of the new DFA are those where at least one of the associated NFA states is an accepting state of the NFA.  Can we now argue that ? We can, if we can argue that corresponds to for all : if this latter property holds, then iff is accepting, which we made be so iff contains an accepting state of , which happens iff accepts i.e. iff .  So can we argue that does in fact correspond to for all ? We can, using induction on the length of .  First, a preliminary observation. Suppose , i.e. is the string followed by the single symbol . How are and related? Well, recall that is the set of all states that can reach when it starts in and consumes : for some states . Now, is just with an additional , so where might end up if it starts in and consumes ? We know that gets to or or , so gets to any state that can be reached from with an (and maybe some -transitions), and to any state that can be reached from with an (and maybe some -transitions), etc. Thus, our relationship between and is that if , then . With this observation in hand, let's proceed to our proof by induction.  We want to prove that corresponds to for all . We use induction on the length of .   Base case: Suppose has length 0. The only string with length 0 is , so we want to show that corresponds to . Well, , since in a DFA, for any state . We explicitly made correspond to , and so the property holds for with length 0.    Inductive case: Assume that the desired property holds for some number , i.e. that corresponds to for all with length . Look at an arbitrary string with length . We want to show that corresponds to . Well, the string must look like for some string (whose length is ) and some symbol . By our inductive hypothesis, we know corresponds to . We know is a set of 's states, say .  At this point, our subsequent reasoning might be a bit clearer if we give explicit names to (the state reaches on input ) and (the state reaches on input ). Call  , and call  . We know, because , there must be an -transition from to . Look at how we added transitions to : the fact that there is an -transition from to means that corresponds to the set of 's states. By our preliminary observation, is just . So (or ) corresponds to , which is what we wanted to prove. Since was an arbitrary string of length , we have shown that the property holds for .     Altogether, we have shown by induction that corresponds to for all . As indicated at the very beginning of this proof, that is enough to prove that . So for any NFA , we can find a DFA that accepts the same language.     Consider the NFA shown below.   Diagram of an NFA.     We start by looking at , and then add transitions and states as described above.    so .     will be , which is , so .     will be , which is , so we need to add a new state to the DFA; and add to the DFA's transition function.     will be unioned with since . Since , we need to add a new state to the DFA, and a transition .     will be unioned with , which gives , which again gives us a new state to add to the DFA, together with the transition .     At this point, our partially-constructed DFA looks as shown below:   Diagram of an NFA partially converted to a DFA.     The construction continues as long as there are new states being added, and new transitions from those states that have to be computed. The final DFA is shown below.   Diagram of completely converted DFA.         Give DFAs that accept the following languages over .                                    What languages do the following DFAs accept?   Transition diagram for exercise 2(a).      Transition diagram for exercise 3(b).       Let . Give a DFA that accepts the language     What language does the NFA in accept?    Give a DFA that accepts the language accepted by the following NFA.   NFA diagram for exercise 5.       Give a DFA that accepts the language accepted by the following NFA. (Be sure to note that, for example, it is possible to reach both and from on consumption of an , because of the -transition.)   NFA diagram for exercise 6.        "
},
{
  "id": "s-finite-state-automata-4-2",
  "level": "2",
  "url": "s-finite-state-automata.html#s-finite-state-automata-4-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "finite-state automaton automata automaton machine "
},
{
  "id": "s-finite-state-automata-4-3",
  "level": "2",
  "url": "s-finite-state-automata.html#s-finite-state-automata-4-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "finite-state automaton (FSA) states start state accepting final accepted transition function "
},
{
  "id": "ex-transition-funct",
  "level": "2",
  "url": "s-finite-state-automata.html#ex-transition-funct",
  "type": "Example",
  "number": "17.3.1",
  "title": "A transition function.",
  "body": " A transition function   Below is a table that describes the transition function of a finite-state automaton with states , , and , on inputs and .                                              The table indicates, for example, that if the FSA were in state and consumed a , it would move to state .   "
},
{
  "id": "def-deterministic-fsa",
  "level": "2",
  "url": "s-finite-state-automata.html#def-deterministic-fsa",
  "type": "Definition",
  "number": "17.3.3",
  "title": "Deterministic Finite-State Automaton.",
  "body": " Deterministic Finite-State Automaton   Deterministic Finite-State Automata    Formally, a deterministic finite-state automaton  is specified by 5 components: where      is a finite set of states;     is an alphabet called the input alphabet ;     is a state which is designated as the start state ;     is a subset of ; the states in are states designated as final or accepting states;     is a transition function that takes state, input symbol pairs and maps each one to a state: .   To say means that if the machine is in state and the input symbol is consumed, then the machine will move into state .    The function must be a total function, meaning that must be defined for every state and every input symbol .    Recall also that, according to the definition of a function, there can be only one output for any particular input. This means that for any given and , can have only one value. This is what makes the finite-state automaton deterministic : given the current state and input symbol, there is only one possible move the machine can make.         "
},
{
  "id": "subsec-deterministic-fsa-6",
  "level": "2",
  "url": "s-finite-state-automata.html#subsec-deterministic-fsa-6",
  "type": "Example",
  "number": "17.3.4",
  "title": "",
  "body": " The transition function described by the table in the preceding example is that of a DFA. If we take to be the start state and to be a final state, then the formal description of the resulting machine is , where is given by                                      "
},
{
  "id": "subsec-deterministic-fsa-7",
  "level": "2",
  "url": "s-finite-state-automata.html#subsec-deterministic-fsa-7",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "  "
},
{
  "id": "subsec-deterministic-fsa-8",
  "level": "2",
  "url": "s-finite-state-automata.html#subsec-deterministic-fsa-8",
  "type": "Example",
  "number": "17.3.5",
  "title": "",
  "body": "Let be the automaton in the preceding example. Then, for example:  "
},
{
  "id": "def-language-accepted-by-fsa",
  "level": "2",
  "url": "s-finite-state-automata.html#def-language-accepted-by-fsa",
  "type": "Definition",
  "number": "17.3.6",
  "title": "Language Accepted by FSA.",
  "body": " Language Accepted by FSA   Let . A string is accepted by iff . (Don't get confused by the notation. Remember, it's just a shorter and neater way of saying `` is accepted by if and only if the state that M will end up in if it starts in and consumes is one of the states in .\")  The language accepted by , denoted , is the set of all strings that are accepted by : .   "
},
{
  "id": "subsec-deterministic-fsa-12",
  "level": "2",
  "url": "s-finite-state-automata.html#subsec-deterministic-fsa-12",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "transition diagram "
},
{
  "id": "find-lang-from-DFA",
  "level": "2",
  "url": "s-finite-state-automata.html#find-lang-from-DFA",
  "type": "Example",
  "number": "17.3.8",
  "title": "",
  "body": "  Find the language accepted by the DFA shown below (and describe it using a regular expression!)   Transition diagram representing a formal language   The start state of is accepting, which means . If is in state , a sequence of two 's or three 's will move back to and hence be accepted. So .   "
},
{
  "id": "fig-fsa3",
  "level": "2",
  "url": "s-finite-state-automata.html#fig-fsa3",
  "type": "Figure",
  "number": "17.3.10",
  "title": "",
  "body": "  Transition diagram omitting a trap state   "
},
{
  "id": "fig-fsa4",
  "level": "2",
  "url": "s-finite-state-automata.html#fig-fsa4",
  "type": "Figure",
  "number": "17.3.11",
  "title": "",
  "body": "  Transition diagram with trap state   "
},
{
  "id": "subsec-deterministic-fsa-17",
  "level": "2",
  "url": "s-finite-state-automata.html#subsec-deterministic-fsa-17",
  "type": "Example",
  "number": "17.3.12",
  "title": "",
  "body": " Find a DFA with input alphabet that accepts the language .  The characteristics that determine whether or not a string is in are the parity of and . There are four possible combinations of ``values\" for these characteristics: both numbers could be even, both could be odd, the first could be odd and the second even, or the first could be even and the second odd. So we build a machine with four states corresponding to the four cases. We want to set up \\delta so that the machine will be in state exactly when it has consumed a string with an even number of 's and an even number of 's, in state exactly when it has consumed a string with an odd number of 's and an odd number of 's, and so on.  To do this, we first make the state into our start state, because the DFA will be in the start state after consuming the empty string , and has an even number (zero) of both 's and 's. Now we add transitions by reasoning about how the parity of 's and 's is changed by additional input. For instance, if the machine is in (meaning an even number of 's and an even number of 's have been seen) and a further is consumed, then we want the machine to move to state , since the machine has now consumed an odd number of 's and still an even number of 's. So we add the transition to the machine. Similarly, if the machine is in (meaning an odd number of 's and an odd number of 's have been seen) and a further is consumed, then we want the machine to move to state again, since the machine has still consumed an odd number of 's, and now an even number of 's. So we add the transition to the machine. Similar reasoning produces a total of eight transitions, one for each state-input pair. Finally, we have to decide which states should be final states. The only state that corresponds to the desired criteria for the language is , so we make a final state. The complete machine is shown below.   Transition diagram for finite state machine described in example     "
},
{
  "id": "subsec-deterministic-fsa-18",
  "level": "2",
  "url": "s-finite-state-automata.html#subsec-deterministic-fsa-18",
  "type": "Example",
  "number": "17.3.14",
  "title": "",
  "body": "Find a DFA with input alphabet that accepts the language . The relevant characteristic here is of course whether or not the number of 's in a string is divisible by 3, perhaps suggesting a two-state machine. But in fact, there is more than one way for a number to not be divisible by 3: dividing the number by 3 could produce a remainder of either 1 or 2 (a remainder of 0 corresponds to the number in fact being divisible by 3). So we build a machine with three states , , , and add transitions so that the machine will be in state exactly when the number of 's it has consumed is evenly divisible by 3, in state exactly when the number of 's it has consumed is equivalent to , and similarly for . State will be the start state, as has 0 's and 0 is divisible by 3. The completed machine is shown below. Notice that because the consumption of a does not affect the only relevant characteristic, 's do not cause changes of state.   Transition diagram that accepts the language    "
},
{
  "id": "subsec-deterministic-fsa-19",
  "level": "2",
  "url": "s-finite-state-automata.html#subsec-deterministic-fsa-19",
  "type": "Example",
  "number": "17.3.16",
  "title": "",
  "body": " Find a DFA with input alphabet that accepts the language .  Again, it is not quite so simple as making a two-state machine where the states correspond to ``have seen \" and ``have not seen \". Think dynamically: as you move through the input string, how do you arrive at the goal of having seen three consecutive 's? You might have seen two consecutive 's and still need a third, or you might just have seen one and be looking for two more to come immediately, or you might just have seen a and be right back at the beginning as far as seeing 3 consecutive 's goes. So once again there will be three states, with the ``last symbol was not an '' state being the start state. The complete automaton is shown below.   Transition diagram that accepts a language where the number of a characters is divisible by 3.     "
},
{
  "id": "subsec-non-deterministic-fsa-5",
  "level": "2",
  "url": "s-finite-state-automata.html#subsec-non-deterministic-fsa-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "-transitions "
},
{
  "id": "subsec-non-deterministic-fsa-6",
  "level": "2",
  "url": "s-finite-state-automata.html#subsec-non-deterministic-fsa-6",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "nondeterministic finite-state automaton (NFA) "
},
{
  "id": "def-non-deterministic-fsa",
  "level": "2",
  "url": "s-finite-state-automata.html#def-non-deterministic-fsa",
  "type": "Definition",
  "number": "17.3.18",
  "title": "",
  "body": "  Nondeterministic Finite-State Automata    Formally, a nondeterministic finite-state automaton  is specified by 5 components: where      and are as in the definition of DFAs;     is a transition function that takes state, input symbol pairs and maps each one to a set of states. To say means that if the machine is in state and the input symbol is consumed, then the machine may move directly into any one of states . The function must also be defined for every state, pair. To say means that there are direct -transitions from state to each of .  The formal description of the function is .        "
},
{
  "id": "def-language-accepted-by-nfa",
  "level": "2",
  "url": "s-finite-state-automata.html#def-language-accepted-by-nfa",
  "type": "Definition",
  "number": "17.3.19",
  "title": "Language Accepted by NFA.",
  "body": " Language Accepted by NFA   Let be a nondeterministic finite-state automaton. The string is accepted by iff contains at least one state .  The language accepted by , denoted , is the set of all strings that are accepted by : .   "
},
{
  "id": "ex-nfa-2nd_last-a",
  "level": "2",
  "url": "s-finite-state-automata.html#ex-nfa-2nd_last-a",
  "type": "Example",
  "number": "17.3.20",
  "title": "",
  "body": " The NFA shown below accepts all strings of 's and 's in which the second-to-last symbol is .   Diagram of a non-deterministic finite state automata described in example.     "
},
{
  "id": "thm-nfa-accepted-by-dfa",
  "level": "2",
  "url": "s-finite-state-automata.html#thm-nfa-accepted-by-dfa",
  "type": "Theorem",
  "number": "17.3.22",
  "title": "",
  "body": "  Every language that is accepted by an NFA is accepted by a DFA.    Suppose we are given an NFA , and we want to build a DFA that accepts the same language. The idea is to make the states in correspond to subsets of 's states, and then to set up 's transition function so that for any string , corresponds to ; i.e. the single state that gets you to in corresponds to the set of states that could get you to in . If any of those states is accepting in , would be accepted by , and so the corresponding state in would be made accepting as well.  So how do we make this work? The first thing to do is to deal with a start state for . If we're going to make this state correspond to a subset of 's states, what subset should it be? Well, remember (1) that in any DFA, ; and (2) we want to make correspond to for every . Putting these two limitations together tells us that we should make correspond to . So corresponds to the subset of all of 's states that can be reached with no input.  Now we progressively set up 's transition function by repeatedly doing the following:   find a state that has been added to but whose out-transitions have not yet been added. (Note that initially fits this description.) Remember that the state corresponds to some subset of 's states.    for each input symbol , look at all 's states that can be reached from any one of by consuming (perhaps making some -transitions as well). That is, look at . If there is not already a DFA state that corresponds to this subset of 's states, then add one, and add the transition to 's transitions.     The above process must halt eventually, as there are only a finite number of states in the NFA, and therefore there can be at most states in the DFA, as that is the number of subsets of the NFA's states. The final states of the new DFA are those where at least one of the associated NFA states is an accepting state of the NFA.  Can we now argue that ? We can, if we can argue that corresponds to for all : if this latter property holds, then iff is accepting, which we made be so iff contains an accepting state of , which happens iff accepts i.e. iff .  So can we argue that does in fact correspond to for all ? We can, using induction on the length of .  First, a preliminary observation. Suppose , i.e. is the string followed by the single symbol . How are and related? Well, recall that is the set of all states that can reach when it starts in and consumes : for some states . Now, is just with an additional , so where might end up if it starts in and consumes ? We know that gets to or or , so gets to any state that can be reached from with an (and maybe some -transitions), and to any state that can be reached from with an (and maybe some -transitions), etc. Thus, our relationship between and is that if , then . With this observation in hand, let's proceed to our proof by induction.  We want to prove that corresponds to for all . We use induction on the length of .   Base case: Suppose has length 0. The only string with length 0 is , so we want to show that corresponds to . Well, , since in a DFA, for any state . We explicitly made correspond to , and so the property holds for with length 0.    Inductive case: Assume that the desired property holds for some number , i.e. that corresponds to for all with length . Look at an arbitrary string with length . We want to show that corresponds to . Well, the string must look like for some string (whose length is ) and some symbol . By our inductive hypothesis, we know corresponds to . We know is a set of 's states, say .  At this point, our subsequent reasoning might be a bit clearer if we give explicit names to (the state reaches on input ) and (the state reaches on input ). Call  , and call  . We know, because , there must be an -transition from to . Look at how we added transitions to : the fact that there is an -transition from to means that corresponds to the set of 's states. By our preliminary observation, is just . So (or ) corresponds to , which is what we wanted to prove. Since was an arbitrary string of length , we have shown that the property holds for .     Altogether, we have shown by induction that corresponds to for all . As indicated at the very beginning of this proof, that is enough to prove that . So for any NFA , we can find a DFA that accepts the same language.   "
},
{
  "id": "ex-nfa-to-dfa",
  "level": "2",
  "url": "s-finite-state-automata.html#ex-nfa-to-dfa",
  "type": "Example",
  "number": "17.3.23",
  "title": "",
  "body": " Consider the NFA shown below.   Diagram of an NFA.     We start by looking at , and then add transitions and states as described above.    so .     will be , which is , so .     will be , which is , so we need to add a new state to the DFA; and add to the DFA's transition function.     will be unioned with since . Since , we need to add a new state to the DFA, and a transition .     will be unioned with , which gives , which again gives us a new state to add to the DFA, together with the transition .     At this point, our partially-constructed DFA looks as shown below:   Diagram of an NFA partially converted to a DFA.     The construction continues as long as there are new states being added, and new transitions from those states that have to be computed. The final DFA is shown below.   Diagram of completely converted DFA.     "
},
{
  "id": "exerc-17_3-1",
  "level": "2",
  "url": "s-finite-state-automata.html#exerc-17_3-1",
  "type": "Exercise",
  "number": "17.3.3.1",
  "title": "",
  "body": " Give DFAs that accept the following languages over .                                  "
},
{
  "id": "exerc-17_3-2",
  "level": "2",
  "url": "s-finite-state-automata.html#exerc-17_3-2",
  "type": "Exercise",
  "number": "17.3.3.2",
  "title": "",
  "body": " What languages do the following DFAs accept?   Transition diagram for exercise 2(a).      Transition diagram for exercise 3(b).     "
},
{
  "id": "exerc-17_3-3",
  "level": "2",
  "url": "s-finite-state-automata.html#exerc-17_3-3",
  "type": "Exercise",
  "number": "17.3.3.3",
  "title": "",
  "body": " Let . Give a DFA that accepts the language   "
},
{
  "id": "exerc-17_3-4",
  "level": "2",
  "url": "s-finite-state-automata.html#exerc-17_3-4",
  "type": "Exercise",
  "number": "17.3.3.4",
  "title": "",
  "body": " What language does the NFA in accept?  "
},
{
  "id": "exerc-17_3-5",
  "level": "2",
  "url": "s-finite-state-automata.html#exerc-17_3-5",
  "type": "Exercise",
  "number": "17.3.3.5",
  "title": "",
  "body": " Give a DFA that accepts the language accepted by the following NFA.   NFA diagram for exercise 5.     "
},
{
  "id": "exerc-17_3-6",
  "level": "2",
  "url": "s-finite-state-automata.html#exerc-17_3-6",
  "type": "Exercise",
  "number": "17.3.3.6",
  "title": "",
  "body": " Give a DFA that accepts the language accepted by the following NFA. (Be sure to note that, for example, it is possible to reach both and from on consumption of an , because of the -transition.)   NFA diagram for exercise 6.     "
},
{
  "id": "sec-FSA-and-Regular-Languages",
  "level": "1",
  "url": "sec-FSA-and-Regular-Languages.html",
  "type": "Section",
  "number": "17.4",
  "title": "Finite-State Automata and Regular Languages",
  "body": " Finite-State Automata and Regular Languages   We know now that our two models for mechanical language recognition actually recognize the same class of languages. The question still remains: do they recognize the same class of languages as the class generated mechanically by regular expressions? The answer turns out to be ``yes\". There are two parts to proving this: first that every language generated can be recognized, and second that every language recognized can be generated.    All Regular Languages are Recognized by NFAs   Regular Language     Every language generated by a regular expression can be recognized by an NFA.    The proof of this theorem is a nice example of a proof by induction on the structure of regular expressions. The definition of regular expression is inductive: , , and are the simplest regular expressions, and then more complicated regular expressions can be built from these. We will show that there are NFAs that accept the languages generated by the simplest regular expressions, and then show how those machines can be put together to form machines that accept languages generated by more complicated regular expressions. Consider the regular expression . . Here is a machine that accepts :   Diagram of an NFA that accepts .     Consider the regular expression . . Here is a machine that accepts :   Diagram of an NFA that accepts .     Consider the regular expression . . Here is a machine that accepts :   Diagram of an NFA that accepts .     Now suppose that you have NFAs that accept the languages generated by the regular expressions and . Building a machine that accepts is fairly straightforward: take an NFA that accepts and an NFA that accepts . Introduce a new state , connect it to the start states of and via -transitions, and designate it as the start state of the new machine. No other transitions are added. The final states of together with the final states of are designated as the final states of the new machine. It should be fairly clear that this new machine accepts exactly those strings accepted by together with those strings accepted by : any string that was accepted by will be accepted by the new NFA by starting with an -transition to the old start state of and then following the accepting path through ; similarly, any string accepted by will be accepted by the new machine; these are the only strings that will be accepted by the new machine, as on any input all the new machine can do is make an -move to 's (or 's) start state, and from there will only be accepted by the new machine if it is accepted by (or ). Thus, the new machine accepts , which is , which is exactly the definition of .   Diagram of an NFA that accepts .      A pause before we continue:  Note that for the simplest regular expressions, the machines that we created to accept the languages generated by the regular expressions were in fact DFAs. In our last case above, however, we needed -transitions to build the new machine, and so if we were trying to prove that every regular language could be accepted by a DFA, our proof would be in trouble. THIS DOES NOT MEAN that the statement ``every regular language can be accepted by a DFA\" is false, just that we can't prove it using this kind of argument, and would have to find an alternative proof.   Suppose you have machines and that accept and respectively. To build a machine that accepts proceed as follows. Make the start state of be the start state of the new machine. Make the final states of be the final states of the new machine. Add -transitions from the final states of to the start state of .   Diagram of an NFA that accepts .     It should be fairly clear that this new machine accepts exactly those strings of the form where and : first of all, any string of this form will be accepted because implies there is a path that consumes from to a final state of ; a -transition moves to ; then implies there is a path that consumes from to a final state of ; and the final states of are the final states of the new machine, so will be accepted. Conversely, suppose is accepted by the new machine. Since the only final states of the new machine are in the old , and the only way to get into is to take a -transition from a final state of , this means that where takes the machine from its start state to a final state of , a -transition occurs, and then takes the machine from to a final state of . Clearly, and .  We leave the construction of an NFA that accepts from an NFA that accepts as an exercise.      Every Language Recognized by an NFA is Regular   Regular Language     Every language that is accepted by a DFA or an NFA is generated by a regular expression.   Proving this result is actually fairly involved and not very illuminating. Below we will give an illustrative example of how one might actually go about extracting a regular expression from an NFA or a DFA. You can go on to read the proof if you are interested.   We prove that the language accepted by a DFA is regular. The proof for NFAs follows from the equivalence between DFAs and NFAs.  Suppose that is a DFA, where . Let be the number of states in , and write . We want to consider computations in which starts in some state , reads a string , and ends in state . In such a computation, might go through a series of intermediates states between and : We are interested in computations in which all of the intermediate states--- ---are in the set , for some number . We define to be the set of all strings in that are consumed by such a computation. That is, if and only if when starts in state and reads , it ends in state , and all the intermediate states between and are in the set . is a language over . We show that for .  Consider the language . For , the set of allowable intermediate states is empty. Since there can be no intermediate states, it follows that there can be at most one step in the computation that starts in state , reads , and ends in state . So, can be at most one. This means that is finite, and hence is regular. (In fact, , for , and . Note that in many cases, will be the empty set.)  We now proceed by induction on to show that is regular for all and . We have proved the base case, . Suppose that we already know that is regular for all and all . We need to show that is regular for all and . In fact, which is regular because is regular for all and , and because the union, concatenation, and Kleene star of regular languages are regular.  To see that the above equation holds, consider a string . Now, if and only if when starts in state and reads , it ends in state , with all intermediate states in the computation in the set . Consider such a computation. There are two cases: Either occurs as an intermediate state in the computation, or it does not. If it does not occur, then all the intermediate states are in the set , which means that in fact . If  does occur as an intermediate state in the computation, then we can break the computation into phases, by dividing it at each point where occurs as an intermediate state. This breaks into a concatenation . The string is consumed in the first phase of the computation, during which goes from state to the first occurrence of ; since the intermediate states in this computation are in the set . The string is consumed by the last phase of the computation, in which goes from the final occurrence of to , so that . And each string is consumed in a phase of the computation in which goes from one occurrence of to the next occurrence of , so that . This means that .  We now know, in particular, that is a regular language for all . But consists of all strings such that when starts in state and reads , it ends in state (with \\textbf{no} restriction on the intermediate states in the computation, since every state of is in the set \\{q_0,q_1,\\dots,q_{n-1}\\}). To finish the proof that is regular, it is only necessary to note that which is regular since it is a union of regular languages. This equation is true since a string is in if and only if when starts in state and reads , in ends in some accepting state . This is the same as saying for some with .      Consider the DFA shown below:   Diagram of a DFA to extract regular expression from.     Note that there is a loop from state back to state : any number of 's will keep the machine in state , and so we label the transition with the regular expression . We do the same thing to the transition labeled from . (Note that the result is no longer a DFA, but that doesn't concern us, we're just interested in developing a regular expression.)   Altered diagram from above.     Next we note that there is in fact a loop from to via . A regular expression that matches the strings that would move around the loop is . So we add a transition labeled from to , and remove the now-irrelevant -transition from to . (It is irrelevant because it is not part of any other loop from to .)   Altered diagram from above.     Next we note that there is also a loop from to via . A regular expression that matches the strings that would move around the loop is . Since the transitions in the loop are the only transitions to or from , we simply remove and replace it with a transition from to .   Altered diagram from above.     It is now clear from the diagram that strings of the form get you to state , and any number of repetitions of strings that match or will keep you there. So the machine accepts .    We have already seen that if two languages and are regular, then so are , , and (and of course ). We have not yet seen, however, how the common set operations intersection and complementation affect regularity. Is the complement of a regular language regular? How about the intersection of two regular languages?  Both of these questions can be answered by thinking of regular languages in terms of their acceptance by DFAs. Let's consider first the question of complementation. Suppose we have an arbitrary regular language . We know there is a DFA that accepts . Pause a moment and try to think of a modification that you could make to that would produce a new machine that accepts .... Okay, the obvious thing to try is to make be a copy of with all final states of becoming non-final states of and vice versa. This is in fact exactly right: does in fact accept . To verify this, consider an arbitrary string . The transition functions for the two machines and are identical, so is the same state in both and ; if that state is accepting in then it is non-accepting in , so if is accepted by it is not accepted by ; if the state is non-accepting in then it is accepting in , so if is not accepted by then it is accepted by . Thus accepts exactly those strings that does not, and hence accepts .  It is worth pausing for a moment and looking at the above argument a bit longer. Would the argument have worked if we had looked at an arbitrary language and an arbitrary NFA that accepted ? That is, if we had built a new machine in which the final and non-final states had been switched, would the new NFA accept the complement of the language accepted by ? The answer is ``not necessarily\". Remember that acceptance in an NFA is determined based on whether or not at least one of the states reached by a string is accepting. So any string with the property that contains both accepting and non-accepting states of would be accepted both by and by .  Now let's turn to the question of intersection. Given two regular languages and , is regular? Again, it is useful to think in terms of DFAs: given machines and that accept and , can you use them to build a new machine that accepts ? The answer is yes, and the idea behind the construction bears some resemblance to that behind the NFA-to-DFA construction. We want a new machine where transitions reflect the transitions of both and simultaneously, and we want to accept a string only if that those sequences of transitions lead to final states in both and . So we associate the states of our new machine with pairs of states from and . For each state in the new machine and input symbol , define to be the state . The start state of is , where is the start state of . The final states of are the the states of the form where is an accepting state of and is an accepting state of . You should convince yourself that accepts a string iff is accepted by both and .  The results of the previous section and the preceding discussion are summarized by the following theorem:   Set Operations on Regular Languages      The intersection of two regular languages is a regular language.    The union of two regular languages is a regular language.    The concatenation of two regular languages is a regular language.    The complement of a regular language is a regular language.    The Kleene closure of a regular language is a regular language.         Non-regular Languages  The fact that our models for mechanical language-recognition accept exactly the same languages as those generated by our mechanical language-generation system would seem to be a very positive indication that in ``regular\" we have in fact managed to isolate whatever characteristic it is that makes a language ``mechanical\". Unfortunately, there are languages that we intuitively think of as being mechanically-recognizable (and which we could write C++ programs to recognize) that are not in fact regular.  How does one prove that a language is not regular? We could try proving that there is no DFA or NFA that accepts it, or no regular expression that generates it, but this kind of argument is generally rather difficult to make. It is hard to rule out all possible automata and all possible regular expressions. Instead, we will look at a property that all regular languages have; proving that a given language does not have this property then becomes a way of proving that that language is not regular.  Consider the language . Below is a DFA that accepts this language, with states numbered 1 through 9.   Diagram of DFA that accepts .     Consider the sequence of states that the machine passes through while processing the string . Note that there is a repeated state (state 2). We say that ``goes through the state 2 twice\", meaning that in the course of the string being processed, the machine is in state 2 twice (at least). Call the section of the string that takes you around the loop , the preceding section , and the rest . Then is accepted, is accepted, is accepted, etc. Note that the string cannot be divided this way, because it does not go through the same state twice. Which strings can be divided this way? Any string that goes through the same state twice. This may include some relatively short strings and must include any string with length greater than or equal to 9, because there are only 9 states in the machine, and so repetition must occur after 9 input symbols at the latest.  More generally, consider an arbitrary DFA , and let the number of states in be . Then any string that is accepted by and has or more symbols must go through the same state twice, and can therefore be broken up into three pieces (where contains at least one symbol) so that and    is accepted by      is accepted by (after all, we started with in )     is accepted by     etc.     Note that you can actually say even more: within the first characters of you must already get a repeated state, so you can always find an as described above where, in addition, the portion of (the portion of that takes you to and back to a repeated state) contains at most symbols.  So altogether, if is an -state DFA that accepts , and is a string in whose length is at least , then can be broken down into three pieces , , and , , such that    and together contain no more than symbols;    contains at least one symbol;       is accepted by      is accepted by      is accepted by     etc.        The usually-stated form of this result is the Pumping Lemma:   Pumping Lemma   Pumping Lemma    If is a regular language and is a DFA that accepts , then there is some number such that any string in whose length is greater than or equal to can be broken down into three pieces , , and , , such that    and together contain no more than symbols;     contains at least one symbol;        is accepted by      is accepted by      is accepted by     etc.          Though the Pumping Lemma says something about regular languages, it is not used to prove that languages are regular. It says `` if a language is regular, then certain things happen\", not ``if certain things happen, then you can conclude that the language is regular.\" However, the Pumping Lemma is useful for proving that languages are not regular, since the contrapositive of ``if a language is regular then certain things happen\" is ``if certain things don't happen then you can conclude that the language is not regular.\" So what are the ``certain things\"? Basically, the P.L. says that if a language is regular, there is some ``threshold\" length for strings, and every string that goes over that threshold can be broken down in a certain way. Therefore, if we can show that ``there is some threshold length for strings such that every string that goes over that threshold can be broken down in a certain way\" is a false assertion about a language, we can conclude that the language is not regular. How do you show that there is no threshold length? Saying a number is a threshold length for a language means that every string in the language that is at least that long can be broken down in the ways described. So to show that a number is not a threshold value, we have to show that there is some string in the language that is at least that long that cannot be broken down in the appropriate way.     is not regular.    We do this by showing that there is no threshold value for the language. Let be an arbitrary candidate for threshold value. We want to show that it is not in fact a threshold value, so we want to find a string in the language whose length is at least and which can't be broken down in the way described by the Pumping Lemma. What string should we try to prove unbreakable? We can't pick strings like because we're working with an arbitrary i.e. making no assumptions about 's value; picking is implicitly assuming that is no bigger than 200 --- for larger values of , would not be ``a string whose length is at least \". Whatever string we pick, we have to be sure that its length is at least , no matter what number is. So we pick, for instance, . This string is in the language, and its length is at least , no matter what number is. If we can show that this string can't be broken down as described by the Pumping Lemma, then we'll have shown that doesn't work as a threshold value, and since was an arbitrary number, we will have shown that there is no threshold value for and hence is not regular. So let's show that can't be broken down appropriately.  We need to show that you can't write as where and together contain at most symbols, isn't empty, and all the strings , , , etc.\\ are still in , i.e. of the form for some number . The best way to do this is to show that any choice for (with being whatever precedes it and being whatever follows) that satisfies the first two requirements fails to satisfy the third. So what are our possible choices for ? Well, since and together can contain at most symbols, and starts with  's, both and must be made up entirely of 's; since can't be empty, it must contain at least one and (from (i)) no more than  's. So the possible choices for are for some . We want to show now that none of these choices will satisfy the third requirement by showing that for any value of , at least one of the strings , , , etc will not be in . No matter what value we try for , we don't have to look far for our rogue string: the string , which is with  's deleted from it, looks like , which is clearly not of the form . So the only 's that satisfy (i) and (ii) don't satisfy (iii); so can't be broken down as required; so is not a threshold value for ; and since was an arbitrary number, there is no threshold value for ; so is not regular.    The fact that languages like and are not regular is a severe blow to any idea that regular expressions or finite-state automata capture the language-generation or language-recognition capabilities of a computer: They are both languages that we could easily write programs to recognize. It is not clear how the expressive power of regular expressions could be increased, nor how one might modify the FSA model to obtain a more powerful one. However, in the next chapter you will be introduced to the concept of a grammar as a tool for generating languages. The simplest grammars still only produce regular languages, but you will see that more complicated grammars have the power to generate languages far beyond the realm of the regular.    Exercises  Give a DFA that accepts the intersection of the languages accepted by the machines shown below. (Suggestion: use the construction discussed in the chapter just before .)   Diagram of two DFAs to combine.     Complete the proof of by showing how to modify a machine that accepts into a machine that accepts .  Using the construction described in , build an NFA that accepts .  Prove that the reverse of a regular language is regular.  Show that for any DFA or NFA, there is an NFA with exactly one final state that accepts the same language.  Suppose we change the model of NFAs to allow NFAs to have multiple start states. Show that for any ``NFA\" with multiple start states, there is an NFA with exactly one start state that accepts the same language.  Suppose that and are DFAs over the alphabet . It is possible to construct a DFA that accepts the langauge in a single step. Define the DFA where is the function from to that is defined by: . Convince yourself that this definition makes sense. (For example, note that states in are pairs of states, where and , and note that the start state in is in fact a state in .) Prove that , and explain why this shows that the intersection of any two regular languages is regular. This proof---if you can get past the notation---is more direct than the one outlined above.  Use the Pumping Lemma to show that the following languages over are not regular.                 "
},
{
  "id": "thm-reg-lang-recog-by-nfa",
  "level": "2",
  "url": "sec-FSA-and-Regular-Languages.html#thm-reg-lang-recog-by-nfa",
  "type": "Theorem",
  "number": "17.4.1",
  "title": "",
  "body": "  Every language generated by a regular expression can be recognized by an NFA.    The proof of this theorem is a nice example of a proof by induction on the structure of regular expressions. The definition of regular expression is inductive: , , and are the simplest regular expressions, and then more complicated regular expressions can be built from these. We will show that there are NFAs that accept the languages generated by the simplest regular expressions, and then show how those machines can be put together to form machines that accept languages generated by more complicated regular expressions. Consider the regular expression . . Here is a machine that accepts :   Diagram of an NFA that accepts .     Consider the regular expression . . Here is a machine that accepts :   Diagram of an NFA that accepts .     Consider the regular expression . . Here is a machine that accepts :   Diagram of an NFA that accepts .     Now suppose that you have NFAs that accept the languages generated by the regular expressions and . Building a machine that accepts is fairly straightforward: take an NFA that accepts and an NFA that accepts . Introduce a new state , connect it to the start states of and via -transitions, and designate it as the start state of the new machine. No other transitions are added. The final states of together with the final states of are designated as the final states of the new machine. It should be fairly clear that this new machine accepts exactly those strings accepted by together with those strings accepted by : any string that was accepted by will be accepted by the new NFA by starting with an -transition to the old start state of and then following the accepting path through ; similarly, any string accepted by will be accepted by the new machine; these are the only strings that will be accepted by the new machine, as on any input all the new machine can do is make an -move to 's (or 's) start state, and from there will only be accepted by the new machine if it is accepted by (or ). Thus, the new machine accepts , which is , which is exactly the definition of .   Diagram of an NFA that accepts .      A pause before we continue:  Note that for the simplest regular expressions, the machines that we created to accept the languages generated by the regular expressions were in fact DFAs. In our last case above, however, we needed -transitions to build the new machine, and so if we were trying to prove that every regular language could be accepted by a DFA, our proof would be in trouble. THIS DOES NOT MEAN that the statement ``every regular language can be accepted by a DFA\" is false, just that we can't prove it using this kind of argument, and would have to find an alternative proof.   Suppose you have machines and that accept and respectively. To build a machine that accepts proceed as follows. Make the start state of be the start state of the new machine. Make the final states of be the final states of the new machine. Add -transitions from the final states of to the start state of .   Diagram of an NFA that accepts .     It should be fairly clear that this new machine accepts exactly those strings of the form where and : first of all, any string of this form will be accepted because implies there is a path that consumes from to a final state of ; a -transition moves to ; then implies there is a path that consumes from to a final state of ; and the final states of are the final states of the new machine, so will be accepted. Conversely, suppose is accepted by the new machine. Since the only final states of the new machine are in the old , and the only way to get into is to take a -transition from a final state of , this means that where takes the machine from its start state to a final state of , a -transition occurs, and then takes the machine from to a final state of . Clearly, and .  We leave the construction of an NFA that accepts from an NFA that accepts as an exercise.   "
},
{
  "id": "thm-nfa-recog-reg-langs",
  "level": "2",
  "url": "sec-FSA-and-Regular-Languages.html#thm-nfa-recog-reg-langs",
  "type": "Theorem",
  "number": "17.4.8",
  "title": "",
  "body": "  Every language that is accepted by a DFA or an NFA is generated by a regular expression.   Proving this result is actually fairly involved and not very illuminating. Below we will give an illustrative example of how one might actually go about extracting a regular expression from an NFA or a DFA. You can go on to read the proof if you are interested.   We prove that the language accepted by a DFA is regular. The proof for NFAs follows from the equivalence between DFAs and NFAs.  Suppose that is a DFA, where . Let be the number of states in , and write . We want to consider computations in which starts in some state , reads a string , and ends in state . In such a computation, might go through a series of intermediates states between and : We are interested in computations in which all of the intermediate states--- ---are in the set , for some number . We define to be the set of all strings in that are consumed by such a computation. That is, if and only if when starts in state and reads , it ends in state , and all the intermediate states between and are in the set . is a language over . We show that for .  Consider the language . For , the set of allowable intermediate states is empty. Since there can be no intermediate states, it follows that there can be at most one step in the computation that starts in state , reads , and ends in state . So, can be at most one. This means that is finite, and hence is regular. (In fact, , for , and . Note that in many cases, will be the empty set.)  We now proceed by induction on to show that is regular for all and . We have proved the base case, . Suppose that we already know that is regular for all and all . We need to show that is regular for all and . In fact, which is regular because is regular for all and , and because the union, concatenation, and Kleene star of regular languages are regular.  To see that the above equation holds, consider a string . Now, if and only if when starts in state and reads , it ends in state , with all intermediate states in the computation in the set . Consider such a computation. There are two cases: Either occurs as an intermediate state in the computation, or it does not. If it does not occur, then all the intermediate states are in the set , which means that in fact . If  does occur as an intermediate state in the computation, then we can break the computation into phases, by dividing it at each point where occurs as an intermediate state. This breaks into a concatenation . The string is consumed in the first phase of the computation, during which goes from state to the first occurrence of ; since the intermediate states in this computation are in the set . The string is consumed by the last phase of the computation, in which goes from the final occurrence of to , so that . And each string is consumed in a phase of the computation in which goes from one occurrence of to the next occurrence of , so that . This means that .  We now know, in particular, that is a regular language for all . But consists of all strings such that when starts in state and reads , it ends in state (with \\textbf{no} restriction on the intermediate states in the computation, since every state of is in the set \\{q_0,q_1,\\dots,q_{n-1}\\}). To finish the proof that is regular, it is only necessary to note that which is regular since it is a union of regular languages. This equation is true since a string is in if and only if when starts in state and reads , in ends in some accepting state . This is the same as saying for some with .   "
},
{
  "id": "ex-extracting-regex-from-fsa",
  "level": "2",
  "url": "sec-FSA-and-Regular-Languages.html#ex-extracting-regex-from-fsa",
  "type": "Example",
  "number": "17.4.9",
  "title": "",
  "body": "  Consider the DFA shown below:   Diagram of a DFA to extract regular expression from.     Note that there is a loop from state back to state : any number of 's will keep the machine in state , and so we label the transition with the regular expression . We do the same thing to the transition labeled from . (Note that the result is no longer a DFA, but that doesn't concern us, we're just interested in developing a regular expression.)   Altered diagram from above.     Next we note that there is in fact a loop from to via . A regular expression that matches the strings that would move around the loop is . So we add a transition labeled from to , and remove the now-irrelevant -transition from to . (It is irrelevant because it is not part of any other loop from to .)   Altered diagram from above.     Next we note that there is also a loop from to via . A regular expression that matches the strings that would move around the loop is . Since the transitions in the loop are the only transitions to or from , we simply remove and replace it with a transition from to .   Altered diagram from above.     It is now clear from the diagram that strings of the form get you to state , and any number of repetitions of strings that match or will keep you there. So the machine accepts .   "
},
{
  "id": "thm-set-ops-on-reg-lang",
  "level": "2",
  "url": "sec-FSA-and-Regular-Languages.html#thm-set-ops-on-reg-lang",
  "type": "Theorem",
  "number": "17.4.14",
  "title": "Set Operations on Regular Languages.",
  "body": " Set Operations on Regular Languages      The intersection of two regular languages is a regular language.    The union of two regular languages is a regular language.    The concatenation of two regular languages is a regular language.    The complement of a regular language is a regular language.    The Kleene closure of a regular language is a regular language.      "
},
{
  "id": "fig-fsa21",
  "level": "2",
  "url": "sec-FSA-and-Regular-Languages.html#fig-fsa21",
  "type": "Figure",
  "number": "17.4.15",
  "title": "",
  "body": "  Diagram of DFA that accepts .   "
},
{
  "id": "thm-pumping-lemma",
  "level": "2",
  "url": "sec-FSA-and-Regular-Languages.html#thm-pumping-lemma",
  "type": "Theorem",
  "number": "17.4.16",
  "title": "Pumping Lemma.",
  "body": " Pumping Lemma   Pumping Lemma    If is a regular language and is a DFA that accepts , then there is some number such that any string in whose length is greater than or equal to can be broken down into three pieces , , and , , such that    and together contain no more than symbols;     contains at least one symbol;        is accepted by      is accepted by      is accepted by     etc.         "
},
{
  "id": "thm-not-regular",
  "level": "2",
  "url": "sec-FSA-and-Regular-Languages.html#thm-not-regular",
  "type": "Theorem",
  "number": "17.4.17",
  "title": "",
  "body": "   is not regular.    We do this by showing that there is no threshold value for the language. Let be an arbitrary candidate for threshold value. We want to show that it is not in fact a threshold value, so we want to find a string in the language whose length is at least and which can't be broken down in the way described by the Pumping Lemma. What string should we try to prove unbreakable? We can't pick strings like because we're working with an arbitrary i.e. making no assumptions about 's value; picking is implicitly assuming that is no bigger than 200 --- for larger values of , would not be ``a string whose length is at least \". Whatever string we pick, we have to be sure that its length is at least , no matter what number is. So we pick, for instance, . This string is in the language, and its length is at least , no matter what number is. If we can show that this string can't be broken down as described by the Pumping Lemma, then we'll have shown that doesn't work as a threshold value, and since was an arbitrary number, we will have shown that there is no threshold value for and hence is not regular. So let's show that can't be broken down appropriately.  We need to show that you can't write as where and together contain at most symbols, isn't empty, and all the strings , , , etc.\\ are still in , i.e. of the form for some number . The best way to do this is to show that any choice for (with being whatever precedes it and being whatever follows) that satisfies the first two requirements fails to satisfy the third. So what are our possible choices for ? Well, since and together can contain at most symbols, and starts with  's, both and must be made up entirely of 's; since can't be empty, it must contain at least one and (from (i)) no more than  's. So the possible choices for are for some . We want to show now that none of these choices will satisfy the third requirement by showing that for any value of , at least one of the strings , , , etc will not be in . No matter what value we try for , we don't have to look far for our rogue string: the string , which is with  's deleted from it, looks like , which is clearly not of the form . So the only 's that satisfy (i) and (ii) don't satisfy (iii); so can't be broken down as required; so is not a threshold value for ; and since was an arbitrary number, there is no threshold value for ; so is not regular.   "
},
{
  "id": "exercises-17-4-2",
  "level": "2",
  "url": "sec-FSA-and-Regular-Languages.html#exercises-17-4-2",
  "type": "Exercise",
  "number": "17.4.4.1",
  "title": "",
  "body": "Give a DFA that accepts the intersection of the languages accepted by the machines shown below. (Suggestion: use the construction discussed in the chapter just before .)   Diagram of two DFAs to combine.    "
},
{
  "id": "exercises-17-4-3",
  "level": "2",
  "url": "sec-FSA-and-Regular-Languages.html#exercises-17-4-3",
  "type": "Exercise",
  "number": "17.4.4.2",
  "title": "",
  "body": "Complete the proof of by showing how to modify a machine that accepts into a machine that accepts . "
},
{
  "id": "exercises-17-4-4",
  "level": "2",
  "url": "sec-FSA-and-Regular-Languages.html#exercises-17-4-4",
  "type": "Exercise",
  "number": "17.4.4.3",
  "title": "",
  "body": "Using the construction described in , build an NFA that accepts . "
},
{
  "id": "exercises-17-4-5",
  "level": "2",
  "url": "sec-FSA-and-Regular-Languages.html#exercises-17-4-5",
  "type": "Exercise",
  "number": "17.4.4.4",
  "title": "",
  "body": "Prove that the reverse of a regular language is regular. "
},
{
  "id": "exercises-17-4-6",
  "level": "2",
  "url": "sec-FSA-and-Regular-Languages.html#exercises-17-4-6",
  "type": "Exercise",
  "number": "17.4.4.5",
  "title": "",
  "body": "Show that for any DFA or NFA, there is an NFA with exactly one final state that accepts the same language. "
},
{
  "id": "exercises-17-4-7",
  "level": "2",
  "url": "sec-FSA-and-Regular-Languages.html#exercises-17-4-7",
  "type": "Exercise",
  "number": "17.4.4.6",
  "title": "",
  "body": "Suppose we change the model of NFAs to allow NFAs to have multiple start states. Show that for any ``NFA\" with multiple start states, there is an NFA with exactly one start state that accepts the same language. "
},
{
  "id": "exercises-17-4-8",
  "level": "2",
  "url": "sec-FSA-and-Regular-Languages.html#exercises-17-4-8",
  "type": "Exercise",
  "number": "17.4.4.7",
  "title": "",
  "body": "Suppose that and are DFAs over the alphabet . It is possible to construct a DFA that accepts the langauge in a single step. Define the DFA where is the function from to that is defined by: . Convince yourself that this definition makes sense. (For example, note that states in are pairs of states, where and , and note that the start state in is in fact a state in .) Prove that , and explain why this shows that the intersection of any two regular languages is regular. This proof---if you can get past the notation---is more direct than the one outlined above. "
},
{
  "id": "exercises-17-4-9",
  "level": "2",
  "url": "sec-FSA-and-Regular-Languages.html#exercises-17-4-9",
  "type": "Exercise",
  "number": "17.4.4.8",
  "title": "",
  "body": "Use the Pumping Lemma to show that the following languages over are not regular.               "
},
{
  "id": "sec-grammars",
  "level": "1",
  "url": "sec-grammars.html",
  "type": "Section",
  "number": "17.5",
  "title": "Grammars",
  "body": " Grammars   Grammars    Both natural languages, such as English and the artificial languages used for programming have a structure known as grammar or syntax. In order to form legal sentences or programs, the parts of the language must be fit together according to certain rules. For natural languages, the rules are somewhat informal (although high-school English teachers might have us believe differently). For programming languages, the rules are absolute, and programs that violate the rules will be rejected by a compiler.  In this section, we will study formal grammars and languages defined by them. The languages we look at will, for the most part, be toy languages, compared to natural languages or even to programming languages, but the ideas and techniques are basic to any study of language. In fact, many of the ideas arose almost simultaneously in the 1950s in the work of linguists who were studying natural language and programmers who were looking for ways to specify the syntax of programming languages.  The grammars in this section are generative grammars  Generative Grammars  . A generative grammar is a set of rules that can be used to generate all the legal strings in a language. We will also consider the closely related idea of parsing . To parse a string means to determine how that string can be generated according to the rules.  This section is a continuation of the preceding section. Like a regular expression, a grammar is a way to specify a possibly infinite language with a finite amount of information. In fact, we will see that every regular language can be specified by a certain simple type of grammar. We will also see that some languages that can be specified by grammars are not regular.    Context-free Grammars   Context-free Grammar   In its most general form, a grammar is a set of rewriting rules   Rewriting Rule  . A rewriting rule specifies that a certain string of symbols can be substituted for all or part of another string. If and are strings, then is a rewriting rule that specifies that the string can be replaced by the string . The symbol   is read can be rewritten as. Rewriting rules are also called production rules  Production Rule or productions , and      Produces, as in  can also be read as produces. For example, if we consider strings over the alphabet , then the production rule can be applied to the string to give the string . The substring in the string has been replaced with .  In a context-free grammar , every rewriting rule has the form , where is single symbol and is a string of zero or more symbols. The symbols that occur on the left-hand sides of production rules in a context-free grammar are called non-terminal symbols  non-terminal symbol  .  The grammar is context-free in the sense that can be substituted for wherever occurs in a string, regardless of the surrounding context in which occurs.  By convention, the non-terminal symbols are usually uppercase letters. The strings on the right-hand sides of the production rules can include non-terminal symbols as well as other symbols, which are called terminal symbol  terminal symbols . By convention, the terminal symbols are usually lowercase letters. Here are some typical production rules that might occur in context-free grammars: In the last rule in this list, represents the empty string, as usual. For example, this rule could be applied to the string to produce the string . The first occurrence of the symbol in has been replaced by the empty string---which is just another way of saying that the symbol has been dropped from the string.  In every context-free grammar, one of the non-terminal symbols is designated as the start symbol of the grammar. The start symbol is often, though not always, denoted by . When the grammar is used to generate strings in a language, the idea is to start with a string consisting of nothing but the start symbol. Then a sequence of production rules is applied. Each application of a production rule to the string transforms the string to a new string. If and when this process produces a string that consists purely of terminal symbols, the process ends. That string of terminal symbols is one of the strings in the language generated by the grammar. In fact, the language consists precisely of all strings of terminal symbols that can be produced in this way.  As a simple example, consider a grammar that has three production rules: In this example, is the only non-terminal symbol, and the terminal symbols are and . Starting from the string , we can apply any of the three rules of the grammar to produce either , , or . Since the string contains no non-terminals, we see that is one of the strings in the language generated by this grammar. The strings and are not in that language, since they contain the non-terminal symbol , but we can continue to apply production rules to these strings. From , for example, we can obtain , , or . From , we go on to obtain , , or . The strings and are in the language generated by the grammar. It's not hard to see that any string of and that ends with a can be generated by this grammar, and that these are the only strings that can be generated. That is, the language generated by this grammar is the regular language specified by the regular expression .  It's time to give some formal definitions of the concepts which we have been discussing.   Context-free Grammar   A context-free grammar is a 4-tuple , where:    is a finite set of symbols. The elements of are the non-terminal symbols of the grammar.     is a finite set of symbols such that . The elements of are the terminal symbols of the grammar.     is a set of production rules. Each rule is of the form where is one of the symbols in and is a string in the language .     . is the start symbol of the grammar.       Even though this is the formal definition, grammars are often specified informally simply by listing the set of production rules. When this is done it is assumed, unless otherwise specified, that the non-terminal symbols are just the symbols that occur on the left-hand sides of production rules of the grammar. The terminal symbols are all the other symbols that occur on the right-hand sides of production rules. The start symbol is the symbol that occurs on the left-hand side of the first production rule in the list. Thus, the list of production rules specifies a grammar where is , is , and is the start symbol. , of course, is a set containing the six production rules in the list.  Let be a context-free grammar. Suppose that and are strings in the language . The notation    Yields, as in String can be obtained from a string by applying one production rule in  is used to express the fact that can be obtained from by applying one of the production rules in . To be more exact, we say that if and only if there is a production rule in the grammar and two strings and in the language such that and . The fact that is just a way of saying that occurs somewhere in . When the production rule is applied to substitute for in , the result is , which is . Note that either or or both can be the empty string.  If a string can be obtained from a string by applying a sequence of zero or more production rules, we write    Yields in zero or more steps.  . In most cases, the   in the notations and will be omitted, assuming that the grammar in question is understood. Note that is a relation on the set . The relation is the reflexive, transitive closure of that relation. (This explains the use of   , which is usually used to denote the transitive, but not necessarily reflexive, closure of a relation. In this case, is reflexive as well as transitive since is true for any string .) For example, using the grammar that is defined by the above list of production rules, we have From this, it follows that . The relation is read yields or produces while can be read yields in zero or more steps or produces in zero or more steps. The following theorem states some simple facts about the relations and :    Let be the context-free grammar . Then:   If and are strings in such that , then .    If , , and are strings in such that and , then .    If and are strings in such that , and if and are any strings in , then .    If and are strings in such that , and if and are any strings in , then .       Parts 1 and 2 follow from the fact that is the transitive closure of . Part 4 follows easily from Part 3. (I leave this as an exercise.) To prove Part 3, suppose that , , , and are strings such that . By definition, this means that there exist strings and and a production rule such that and . But then we also have and . These two equations, along with the existence of the production rule show, by definition, that .    We can use to give a formal definition of the language generated by a context-free grammar:   Context-free Language   Suppose that is a context-free grammar. Then the language generated by is the language over the alphabet defined by That is, contains any string of terminal symbols that can be obtained by starting with the string consisting of the start symbol, , and applying a sequence of production rules.  A language is said to be a context-free language if there is a context-free grammar such that is . Note that there might be many different context-free grammars that generate the same context-free language. Two context-free grammars that generate the same language are said to be equivalent grammars  equivalent .    Suppose is a context-free grammar with start symbol and suppose . By definition, this means that there is a sequence of one or more applications of production rules which produces the string from . This sequence has the form . Such a sequence is called a derivation of (in the grammar ). Note that might have more than one derivation. That is, it might be possible to produce in several different ways.  Consider the language . We already know that is not a regular language. However, it is a context-free language. That is, there is a context-free grammar such that is the language generated by . This gives us our first theorem about grammars:    Let be the language . Let be the context-free grammar where , and consists of the productions Then , so that is a context-free language. In particular, there exist context-free languages which are not regular.    To show that , we must show both that and that . To show that , let be an arbitrary element of . By definition of , for some . We show that by induction on . In the case where , we have . Now, since can be produced from the start symbol by an application of the rule , so our claim is true for . Now, suppose that and that we already know that . We must show that . Since , we also have, by , that . That is, . Combining this with the production rule , we see that . This means that , as we wanted to show. This completes the proof that .  To show that , suppose that . That is, . We must show that for some . Since , there is a derivation , where . We first prove by induction on that in any derivation , we must have either or . Consider the case . Suppose . Then, we must have that is a rule in the grammar, so must be either or . Since and , is of the required form. Next, consider the inductive case. Suppose that and we already know that in any derivation , we must have or . Suppose that . We know by induction that or , but since and contains no non-terminal symbols, we must have . Since is obtained by applying one of the production rules or to , is either or . That is, is either or , as we wanted to show. This completes the induction. Turning back to , we see that must be of the form or of the form . But since , it can contain no non-terminal symbols, so must be of the form , as we wanted to show. This completes the proof that .    I have given a very formal and detailed proof of this theorem, to show how it can be done and to show how induction plays a role in many proofs about grammars. However, a more informal proof of the theorem would probably be acceptable and might even be more convincing. To show that , we could just note that the derivation demonstrates that . On the other hand, it is clear that every derivation for this grammar must be of this form, so every string in is of the form .    For another example, consider the language . Let's try to design a grammar that generates this language. This is similar to the previous example, but now we want to include strings that contain more than . The production rule always produces the same number of and . Can we modify this idea to produce more than ?  One approach would be to produce a string containing just as many as , and then to add some extra . A rule that can generate any number of is . After applying the rule for a while, we want to move to a new state in which we apply the rule . We can get to the new state by applying a rule that changes the into an . We still need a way to finish the process, which means getting rid of all non-terminal symbols in the string. For this, we can use the rule . Putting these rules together, we get the grammar This grammar does indeed generate the language . With slight variations on this grammar, we can produce other related languages. For example, if we replace the rule with , we get the language .  There are other ways to generate the language . For example, the extra non-terminal symbol, , is not really necessary, if we allow to sometimes produce a single without a . This leads to the grammar (But note that the rule would not work in place of , since it would allow the production of strings in which an can follow a , and there are no such strings in the language .) And here are two more grammars that generate this language:      Consider another variation on the language , in which the and can occur in any order, but the number of is still equal to the number of . This language can be defined as . This language includes strings such as , , and .  Let's start with the grammar containing the rules and . We can try adding the rule . Every string that can be generated using these three rules is in the language . However, not every string in can be generated. A derivation that starts with can only produce strings that begin with and end with . A derivation that starts with can only generate strings that begin with and end with . There is no way to generate the strings or , which are in the language . But we shall see that any string in that begins and ends with the same letter can be written in the form where and are shorter strings in . To produce strings of this form, we need one more rule, . The complete set of production rules for the language is    It's easy to see that every string that can be generated using these rules is in , since each rule introduces the same number of as . But we also need to check that every string in can be generated by these rules. This can be done by induction on the length of , using the second form of the principle of mathematical induction. In the base case, and . In this case, since in one step. Suppose , where , and suppose that we already know that for any with , . To finish the induction we must show, based on this induction hypothesis, that .  Suppose that the first and last characters of are different. Then is either of the form or of the form , for some string . Let's assume that is of the form . (The case where is of the form is handled in a similar way.) Since has the same number of and and since has one fewer than and one fewer than , must also have the same number of as . That is . But , so by the induction hypothesis, . So we have . By , we get then . Combining this with the fact that , we get that , that is, . This proves that .  Finally, suppose that the first and last characters of are the same. Let's say that begins and ends with . (The case where begins and ends with is handled in a similar way.) I claim that can be written in the form where and and neither nor is the empty string. This will finish the induction, since we will then have by the induction hypothesis that and , and we can derive from by first applying the rule and then using the first on the right-hand side to derive and the second to derive .  It only remains to figure out how to divide into two strings and which are both in . The technique that is used is one that is more generally useful. Suppose that , where each is either or . Consider the sequence of integers , , , where for each , is the number of in minus the number of in . Since , . Since , . And since , we must have . Furthermore the difference between and is either or , for .  Since and and the value of goes up or down by 1 when increases by 1, must be zero for some between 1 and . That is, cannot get from 1 to unless it passes through zero. Let be a number between 1 and such that . Let and let . Note that . The fact that means that the string has the same number of and , so . It follows automatically that also. Since is strictly between 1 and , neither nor is the empty string. This is all that we needed to show to finish the proof that .  The basic idea of this proof is that if contains the same number of as , then an at the beginning of must have a matching  somewhere in . This matches the in the sense that the corresponding is zero, and the marks the end of a string which contains the same number of as . For example, in the string , the at the beginning of the string is matched by the third , since is the shortest prefix of that has an equal number of and .     Balanced Parentheses  Closely related to this idea of matching and is the idea of balanced parentheses . Consider a string made up of parentheses, such as (()(()))(()) . The parentheses in this sample string are balanced because each left parenthesis has a matching right parenthesis, and the matching pairs are properly nested. A careful definition uses the sort of integer sequence introduced in the above proof. Let be a string of parentheses. Write , where each is either ( or ) . Define a sequence of integers , , , , where is the number of left parentheses in minus the number of right parentheses. We say that the parentheses in are balanced if and for all . The fact that says that contains the same number of left parentheses as right parentheses. The fact the means that the nesting of pairs of parentheses is correct: You can't have a right parenthesis unless it is balanced by a left parenthesis in the preceding part of the string. The language that consists of all balanced strings of parentheses is context-free. It is generated by the grammar The proof is similar to the preceding proof about strings of and . (It might seem that I've made an awfully big fuss about matching and balancing. The reason is that this is one of the few things that we can do with context-free languages that we can't do with regular languages.)   Before leaving this section, we should look at a few more general results. Since we know that most operations on regular languages produce languages that are also regular, we can ask whether a similar result holds for context-free languages. We will see later that the intersection of two context-free languages is not necessarily context-free. Also, the complement of a context-free language is not necessarily context-free. However, some other operations on context-free languages do produce context-free languages.    Suppose that and are context-free languages. Then the languages , , and are also context-free.    I will prove only the first claim of the theorem, that is context-free. In the exercises for this section, you are asked to construct grammars for and (without giving formal proofs that your answers are correct).  Let and be context-free grammars such that and . We can assume that , since otherwise we could simply rename the non-terminal symbols in . The idea of the proof is that to generate a string in , we first decide whether we want a string in or a string in . Once that decision is made, to make a string in , we use production rules from , while to make a string in , we use rules from . We have to design a grammar, , to represent this process.  Let be a symbol that is not in any of the alphabets , , , or . will be the start symbol of . The production rules for consist of all the production rules from and together with two new rules: Formally, is defined to be the grammar Suppose that . That is , so there is a derivation . Since every rule from is also a rule in , if follows that . Combining this with the fact that , we have that , and . This shows that . In an exactly similar way, we can show that . Thus, .  It remains to show that . Suppose . Then there is a derivation . This derivation must begin with an application of one of the rules or , since these are the only rules in which appears. If the first rule applied in the derivation is , then the remainder of the derivation shows that . Starting from , the only rules that can be applied are rules from , so in fact we have . This shows that . Similarly, if the first rule applied in the derivation is , then . In any case, . This proves that .    Finally, we should clarify the relationship between context-free languages and regular languages. We have already seen that there are context-free languages which are not regular. On the other hand, it turns out that every regular language is context-free. That is, given any regular language, there is a context-free grammar that generates that language. This means that any syntax that can be expressed by a regular expression, by a DFA, or by an NFA could also be expressed by a context-free grammar. In fact, we only need a certain restricted type of context-free grammar to duplicate the power of regular expressions.   Right-Regular Grammar   A right-regular grammar regular grammar is a context-free grammar in which the right-hand side of every production rule has one of the following forms: the empty string; a string consisting of a single non-terminal symbol; or a string consisting of a single terminal symbol followed by a single non-terminal symbol.    Examples of the types of production rule that are allowed in a right-regular grammar are , , and . The idea of the proof is that given a right-regular grammar, we can build a corresponding and vice-versa . The states of the correspond to the non-terminal symbols of the grammar. The start symbol of the grammar corresponds to the starting state of the NFA. A production rule of the form corresponds to a transition in the NFA from state to state while reading the symbol . A production rule of the form corresponds to an -transition from state to state in the NFA. And a production rule of the form exists in the grammar if and only if is a final state in the NFA. With this correspondence, a derivation of a string in the grammar corresponds to an execution path through the NFA as it accepts the string . I won't give a complete proof here. You are welcome to work through the details if you want. But the important fact is:    A language is regular if and only if there is a right-regular grammar such that . In particular, every regular language is context-free.       Backus-Naur Form   Backus-Naur Form   Context-free grammars are used to describe some aspects of the syntax of programming languages. However, the notation that is used for grammars in the context of programming languages is somewhat different from the notation introduced in the preceding section. The notation that is used is called Backus-Naur Form or BNF. It is named after computer scientists John Backus and Peter Naur, who developed the notation. Actually, several variations of BNF exist. I will discuss one of them here. BNF can be used to describe the syntax of natural languages, as well as programming languages, and some of the examples in this section will deal with the syntax of English.  Like context-free grammars, BNF grammars make use of production rules, non-terminals, and terminals. The non-terminals are usually given meaningful, multi-character names. Here, I will follow a common practice of enclosing non-terminals in angle brackets, so that they can be easily distinguished. For example, and could be non-terminals in a BNF grammar for English, while and might be used in a BNF grammar for a programming language. Note that a BNF non-terminal usually represents a meaningful syntactic category , that is, a certain type of building block in the syntax of the language that is being described, such as an adverb, a prepositional phrase, or a variable declaration statement. The terminals of a BNF grammar are the things that actually appear in the language that is being described. In the case of natural language, the terminals are individual words.  In BNF production rules, I will use the symbol in place of the that is used in context-free grammars. BNF production rules are more powerful than the production rules in context-free grammars. That is, one BNF rule might be equivalent to several context-free grammar rules. As for context-free grammars, the left-hand side of a BNF production rule is a single non-terminal symbol. The right hand side can include terminals and non-terminals, and can also use the following notations, which should remind you of notations used in regular expressions:   A vertical bar, , indicates a choice of alternatives. For example, indicates that the non-terminal can be replaced by any one of the terminal symbols .    Items enclosed in brackets are optional. For example, says that can be replaced either by  ; or by  = ; . (The symbols = and ; are terminal symbols in this rule.)    Items enclosed between [ and ] can be repeated zero or more times. (This has the same effect as a in a regular expression.) For example, says that an consists of a followed optionally by any number of additional 's. That is, the non-terminal can be replaced by or by or by , and so on.    Parentheses can be used as usual, for grouping.     All these notations can be expressed in a context-free grammar by introducing additional production rules. For example, the BNF rule is equivalent to the two rules, and . A rule that contains an optional item can also be replaced by two rules. For example, can be replaced by the two rules In context-free grammars, repetition can be expressed by using a recursive rule such as , in which the same non-terminal symbol appears both on the left-hand side and on the right-hand side of the rule. BNF-style notation using [ and ] can be eliminated by replacing it with a new non-terminal symbol and adding a recursive rule to allow that symbol to repeat zero or more times. For example, the production rule can be replaced by three rules using a new non-terminal symbol to represent a string of zero or more 's:    As an example of a complete BNF grammar, let's look at a BNF grammar for a very small subset of English. The start symbol for the grammar is , and the terminal symbols are English words. All the sentences that can be produced from this grammar are syntactically correct English sentences, although you wouldn't encounter many of them in conversation. Here is the grammar: This grammar can generate sentences such as A dog chases the cat and the cat hides and The man loves a woman who runs. The second sentence, for example, is generated by the derivation    BNF is most often used to specify the syntax of programming languages. Most programming languages are not, in fact, context-free languages, and BNF is not capable of expressing all aspects of their syntax. For example, BNF cannot express the fact that a variable must be declared before it is used or the fact that the number of actual parameters in a subroutine call statement must match the number of formal parameters in the declaration of the subroutine. So BNF is used to express the context-free aspects of the syntax of a programming language, and other restrictions on the syntax---such as the rule about declaring a variable before it is used---are expressed using informal English descriptions.  When BNF is applied to programming languages, the terminal symbols are generally tokens, which are the minimal meaningful units in a program. For example, the pair of symbols constitute a single token, as does a string such as \"Hello World\" . Every number is represented by a single token. (The actual value of the number is stored as a so-called attribute of the token, but the value plays no role in the context-free syntax of the language.) I will use the symbol to represent a numerical token. Similarly, every variable name, subroutine name, or other identifier in the program is represented by the same token, which I will denote as . One final complication: Some symbols used in programs, such as ] and ( , are also used with a special meaning in BNF grammars. When such a symbol occurs as a terminal symbol, I will enclose it in double quotes. For example, in the BNF production rule the and are terminal symbols in the language that is being described, rather than the BNF notation for an optional item. With this notation, here is part of a BNF grammar that describes statements in the Java programming language: The non-terminals , , and would, of course, have to be defined by other production rules in the grammar. Here is a set of rules that define simple expressions, made up of numbers, identifiers, parentheses and the arithmetic operators and : The first rule says that an is a sequence of one or more 's, separated by plus or minus signs. The second rule defines a to be a sequence of one or more , separated by multiplication or division operators. The last rule says that a can be either an identifier or a number or an enclosed in parentheses. This small BNF grammar can generate expressions such as and . The latter expression is made up of three terms: , , and . The first of these terms is made up of two factors, and . The factor consists of the expression inside a pair of parentheses.  The nice thing about this grammar is that the precedence rules for the operators are implicit in the grammar. For example, according to the grammar, the expression is seen as + where the first term is and the second term is . The occurs as a group, which must be evaluated before the result is added to . Parentheses can change the order of evaluation. For example, is generated by the grammar as a single of the form . The first is . When is evaluated, the value of is computed first and then multiplied by . This is an example of how a grammar that describes the syntax of a language can also reflect its meaning.  Although this section has not introduced any really new ideas or theoretical results, I hope it has demonstrated how context-free grammars can be applied in practice.     Parsing and Parse Trees  Suppose that is a grammar for the language . That is, . The grammar can be used to generate strings in the language . In practice, though, we often start with a string which might or might not be in , and the problem is to determine whether the string is in the language and, if so, how it can be generated by . The goal is to find a derivation of the string, using the production rules of the grammar, or to show that no such derivation exists. This is known as parsing the string. When the string is a computer program or a sentence in a natural language, parsing the string is an essential step in determining its meaning.  As an example that we will use throughout this section, consider the language that consists of arithmetic expressions containing parentheses, the binary operators and , and the variables , , and . Strings in this language include , , and . Here is a context-free grammar that generates this language: Call the grammar described by these production rules . The grammar says that , , and are expressions, and that you can make new expressions by adding two expressions, by multiplying two expressions, and by enclosing an expression in parentheses. (Later, we'll look at other grammars for the same language---ones that turn out to have certain advantages over .)  Consider the string . To show that this string is in the language , we can exhibit a derivation of the string from the start symbol . For example: This derivation shows that the string is in fact in . Now, this string has many other derivations. At each step in the derivation, there can be a lot of freedom about which rule in the grammar to apply next. Some of this freedom is clearly not very meaningful. When faced with the string in the above example, the order in which we replace the with the variables , , and doesn't much matter. To cut out some of this meaningless freedom, we could agree that in each step of a derivation, the non-terminal symbol that is replaced is the leftmost non-terminal symbol in the string. A derivation in which this is true is called a left derivation . The following left derivation of the string uses the same production rules as the previous derivation, but it applies them in a different order: It shouldn't be too hard to convince yourself that any string that has a derivation has a left derivation (which can be obtained by changing the order in which production rules are applied).  We have seen that the same string might have several different derivations. We might ask whether it can have several different left derivations. The answer is that it depends on the grammar. A context-free grammar is said to be ambiguous  grammar, ambiguous if there is a string such that has more than one left derivation according to the grammar .  Our example grammar is ambiguous. In fact, in addition to the left derivation given above, the string has the alternative left derivation In this left derivation of the string , the first production rule that is applied is . The first on the right-hand side eventually yields while the second yields . In the previous left derivation, the first production rule that was applied was , with the first on the right yielding and the second yielding . If we think in terms of arithmetic expressions, the two left derivations lead to two different interpretations of the expression . In one interpretation, the is a unit that is multiplied by . In the second interpretation, the is a unit that is added to . The second interpretation is the one that is correct according to the usual rules of arithmetic. However, the grammar allows either interpretation. The ambiguity of the grammar allows the string to be parsed in two essentially different ways, and only one of the parsings is consistent with the meaning of the string. Of course, the grammar for English is also ambiguous. In a famous example, it's impossible to tell whether a pretty girls' camp is meant to describe a pretty camp for girls or a camp for pretty girls.  When dealing with artificial languages such as programming languages, it's better to avoid ambiguity. The grammar is perfectly correct in that it generates the correct set of strings, but in a practical situation where we are interested in the meaning of the strings, is not the right grammar for the job. There are other grammars that generate the same language as . Some of them are unambiguous grammars that better reflect the meaning of the strings in the language. For example, the language is also generated by the BNF grammar This grammar can be translated into a standard context-free grammar, which I will call : The language generated by consists of all legal arithmetic expressions made up of parentheses, the operators and , and the variables , , and . That is, . However, is an unambiguous grammar. Consider, for example, the string . Using the grammar , the only left derivation for this string is: There is no choice about the first step in this derivation, since the only production rule with on the left-hand side is . Similarly, the second step is forced by the fact that there is only one rule for rewriting a . In the third step, we must replace an . There are four ways to rewrite , but only one way to produce the that begins the string , so we apply the rule . Now, we have to decide what to do with the in . There two rules for rewriting , and . However, the first of these rules introduces a non-terminal, , which does not match the string we are trying to parse. So, the only choice is to apply the production rule . In the next step of the derivation, we must apply the rule in order to account for the in the string . Similarly, each of the remaining steps in the left derivation is forced.  The fact that is an unambiguous grammar means that at each step in a left derivation for a string , there is only one production rule that can be applied which will lead ultimately to a correct derivation of . However, actually satisfies a much stronger property: at each step in the left derivation of , we can tell which production rule has to be applied by looking ahead at the next symbol in . We say that is an LL(1) grammar . (This notation means that we can read a string from L eft to right and construct a L eft derivation of the string by looking ahead at most 1 character in the string.) Given an LL(1) grammar for a language, it is fairly straightforward to write a computer program that can parse strings in that language. If the language is a programming language, then parsing is one of the essential steps in translating a computer program into machine language. LL(1) grammars and parsing programs that use them are often studied in courses in programming languages and the theory of compilers.  Not every unambiguous context-free grammar is an LL(1) grammar. Consider, for example, the following grammar, which I will call : This grammar generates the same language as and , and it is unambiguous. However, it is not possible to construct a left derivation for a string according to the grammar by looking ahead one character in the string at each step. The first step in any left derivation must be either or . But how can we decide which of these is the correct first step? Consider the strings and , which are both in the language . For the string , the first step in a left derivation must be , while the first step in a left derivation of must be . However, the first seven characters of the strings are identical, so clearly looking even seven characters ahead is not enough to tell us which production rule to apply. In fact, similar examples show that looking ahead any given finite number of characters is not enough.  However, there is an alternative parsing procedure that will work for . This alternative method of parsing a string produces a right derivation of the string, that is, a derivation in which at each step, the non-terminal symbol that is replaced is the rightmost non-terminal symbol in the string. Here, for example, is a right derivation of the string according to the grammar : The parsing method that produces this right derivation produces it from bottom to top. That is, it begins with the string and works backward to the start symbol , generating the steps of the right derivation in reverse order. The method works because is what is called an LR(1) grammar . That is, roughly, it is possible to read a string from L eft to right and produce a R ight derivation of the string, by looking ahead at most 1 symbol at each step. Although LL(1) grammars are easier for people to work with, LR(1) grammars turn out to be very suitable for machine processing, and they are used as the basis for the parsing process in many compilers.  LR(1) parsing uses a shift\/reduce algorithm. Imagine a cursor or current position that moves through the string that is being parsed. We can visualize the cursor as a vertical bar, so for the string , we start with the configuration . A shift operation simply moves the cursor one symbol to the right. For example, a shift operation would convert to , and a second shift operation would convert that to . In a reduce operation, one or more symbols immediately to the left of the cursor are recognized as the right-hand side of one of the production rules in the grammar. These symbols are removed and replaced by the left-hand side of the production rule. For example, in the configuration , the to the left of the cursor is the right-hand side of the production rule , so we can apply a reduce operation and replace the with , giving . This first reduce operation corresponds to the last step in the right derivation of the string, . Now the can be recognized as the right-hand side of the production rule , so we can replace the with , giving . This corresponds to the next-to-last step in the right derivation, .  At this point, we have the configuration . The could be the right-hand side of the production rule . However, it could also conceivably come from the rule . How do we know whether to reduce the to at this point or to wait for a to come along so that we can reduce ? We can decide by looking ahead at the next character after the cursor. Since this character is a rather than a , we should choose the reduce operation that replaces with , giving . What makes an LR(1) grammar is the fact that we can always decide what operation to apply by looking ahead at most one symbol past the cursor.  After a few more shift and reduce operations, the configuration becomes , which we can reduce to by applying the production rules and . Now, faced with , we must once again decide between a shift operation and a reduce operation that applies the rule . In this case, since the next character is a rather than a , we apply the shift operation, giving . From there we get, in succession, , , , and finally . At this point, we have reduced the entire string to the start symbol of the grammar. The very last step, the reduction of to corresponds to the first step of the right derivation, .  In summary, LR(1) parsing transforms a string into the start symbol of the grammar by a sequence of shift and reduce operations. Each reduce operation corresponds to a step in a right derivation of the string, and these steps are generated in reverse order. Because the steps in the derivation are generated from bottom to top, LR(1) parsing is a type of bottom-up parsing . LL(1) parsing, on the other hand, generates the steps in a left derivation from top to bottom and so is a type of top-down parsing .  Although the language generated by a context-free grammar is defined in terms of derivations, there is another way of presenting the generation of a string that is often more useful. A parse tree displays the generation of a string from the start symbol of a grammar as a two dimensional diagram. Here are two parse trees that show two derivations of the string according to the grammar , which was given at the beginning of this section:   Figure showing two different parse tree derivations of the string .   A parse tree is made up of terminal and non-terminal symbols, connected by lines. The start symbol is at the top, or root, of the tree. Terminal symbols are at the lowest level, or leaves, of the tree. (For some reason, computer scientists traditionally draw trees with leaves at the bottom and root at the top.) A production rule is represented in a parse tree by the symbol lying above all the symbols in , with a line joining to each of the symbols in . For example, in the left parse tree above, the root, , is connected to the symbols , , and , and this corresponds to an application of the production rule .  It is customary to draw a parse tree with the string of non-terminals in a row across the bottom, and with the rest of the tree built on top of that base. Thus, the two parse trees shown above might be drawn as:   Figure showing the same two parse trees as above but with the non-terminals aligned at the bottom.     Given any derivation of a string, it is possible to construct a parse tree that shows each of the steps in that derivation. However, two different derivations can give rise to the same parse tree, since the parse tree does not show the order in which production rules are applied. For example, the parse tree on the left, above, does not show whether the production rule is applied before or after the production rule . However, if we restrict our attention to left derivations, then we find that each parse tree corresponds to a unique left derivation and vice versa . I will state this fact as a theorem, without proof. A similar result holds for right derivations.    Let be a context-free grammar. There is a one-to-one correspondence between parse trees and left derivations based on the grammar .    Based on this theorem, we can say that a context-free grammar is ambiguous if and only if there is a string which has two parse trees.    Exercises  One of the examples in this section was a grammar for a subset of English. Give five more examples of sentences that can be generated from that grammar. Your examples should, collectively, use all the rules of the grammar.  Rewrite the example BNF grammar for a subset of English as a context-free grammar.  Write a single BNF production rule that is equivalent to the following context-free grammar:   Write a BNF production rule that specifies the syntax of real numbers, as they appear in programming languages such as Java and C. Real numbers can include a sign, a decimal point and an exponential part. Some examples are: 17.3, .73, 23.1e67, 1.34E 12, +0.2, 100E+100  Variable references in the Java programming language can be rather complicated. Some examples include:      . Write a BNF production rule for Java variables. You can use the token ident and the non-terminal in your rule.  Use BNF to express the syntax of the try catch statement in the Java programming language.  Give a BNF grammar for compound propositions made up of propositional variables, parentheses, and the logical operators , , and . Use the non-terminal symbol to represent a propositional variable. You do not have to give a definition of .   Show that each of the following grammars is ambiguous by finding a string that has two left derivations according to the grammar:               There are many answers to these.                   Consider the string . Find a left derivation of this string according to each of the grammars , , and , as given in this section.  Draw a parse tree for the string according to each of the grammars , , and , as given in this section.  Draw three different parse trees for the string based on the grammar given in part a) of exercise 1.  Suppose that the string has the following parse tree, according to some grammar :  parse tree for string     List five production rules that must be rules in the grammar , given that this is a valid parse tree.   Give a left derivation for the string according to the grammar .   Give a right derivation for the string according to the grammar .     Show the full sequence of shift and reduce operations that are used in the LR(1) parsing of the string according to the grammar , and give the corresponding right derivation of the string.  This section showed how to use LL(1) and LR(1) parsing to find a derivation of a string in the language generated by some grammar . How is it possible to use LL(1) or LR(1) parsing to determine for an arbitrary string whether ? Give an example.   "
},
{
  "id": "sec-grammars-3-3",
  "level": "2",
  "url": "sec-grammars.html#sec-grammars-3-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "generative grammars parsing "
},
{
  "id": "subsec-context-free-grammars-3",
  "level": "2",
  "url": "sec-grammars.html#subsec-context-free-grammars-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "rewriting rules production rules productions "
},
{
  "id": "subsec-context-free-grammars-4",
  "level": "2",
  "url": "sec-grammars.html#subsec-context-free-grammars-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "context-free grammar non-terminal symbols terminal symbols "
},
{
  "id": "subsec-context-free-grammars-5",
  "level": "2",
  "url": "sec-grammars.html#subsec-context-free-grammars-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "start symbol "
},
{
  "id": "def-context-free-grammar",
  "level": "2",
  "url": "sec-grammars.html#def-context-free-grammar",
  "type": "Definition",
  "number": "17.5.1",
  "title": "Context-free Grammar.",
  "body": " Context-free Grammar   A context-free grammar is a 4-tuple , where:    is a finite set of symbols. The elements of are the non-terminal symbols of the grammar.     is a finite set of symbols such that . The elements of are the terminal symbols of the grammar.     is a set of production rules. Each rule is of the form where is one of the symbols in and is a string in the language .     . is the start symbol of the grammar.      "
},
{
  "id": "thm-context-free-grammar",
  "level": "2",
  "url": "sec-grammars.html#thm-context-free-grammar",
  "type": "Theorem",
  "number": "17.5.2",
  "title": "",
  "body": "  Let be the context-free grammar . Then:   If and are strings in such that , then .    If , , and are strings in such that and , then .    If and are strings in such that , and if and are any strings in , then .    If and are strings in such that , and if and are any strings in , then .       Parts 1 and 2 follow from the fact that is the transitive closure of . Part 4 follows easily from Part 3. (I leave this as an exercise.) To prove Part 3, suppose that , , , and are strings such that . By definition, this means that there exist strings and and a production rule such that and . But then we also have and . These two equations, along with the existence of the production rule show, by definition, that .   "
},
{
  "id": "def-context-free-language",
  "level": "2",
  "url": "sec-grammars.html#def-context-free-language",
  "type": "Definition",
  "number": "17.5.3",
  "title": "Context-free Language.",
  "body": " Context-free Language   Suppose that is a context-free grammar. Then the language generated by is the language over the alphabet defined by That is, contains any string of terminal symbols that can be obtained by starting with the string consisting of the start symbol, , and applying a sequence of production rules.  A language is said to be a context-free language if there is a context-free grammar such that is . Note that there might be many different context-free grammars that generate the same context-free language. Two context-free grammars that generate the same language are said to be equivalent grammars  equivalent .   "
},
{
  "id": "subsec-context-free-grammars-15",
  "level": "2",
  "url": "sec-grammars.html#subsec-context-free-grammars-15",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "derivation "
},
{
  "id": "thm-non-regular-context-free",
  "level": "2",
  "url": "sec-grammars.html#thm-non-regular-context-free",
  "type": "Theorem",
  "number": "17.5.4",
  "title": "",
  "body": "  Let be the language . Let be the context-free grammar where , and consists of the productions Then , so that is a context-free language. In particular, there exist context-free languages which are not regular.    To show that , we must show both that and that . To show that , let be an arbitrary element of . By definition of , for some . We show that by induction on . In the case where , we have . Now, since can be produced from the start symbol by an application of the rule , so our claim is true for . Now, suppose that and that we already know that . We must show that . Since , we also have, by , that . That is, . Combining this with the production rule , we see that . This means that , as we wanted to show. This completes the proof that .  To show that , suppose that . That is, . We must show that for some . Since , there is a derivation , where . We first prove by induction on that in any derivation , we must have either or . Consider the case . Suppose . Then, we must have that is a rule in the grammar, so must be either or . Since and , is of the required form. Next, consider the inductive case. Suppose that and we already know that in any derivation , we must have or . Suppose that . We know by induction that or , but since and contains no non-terminal symbols, we must have . Since is obtained by applying one of the production rules or to , is either or . That is, is either or , as we wanted to show. This completes the induction. Turning back to , we see that must be of the form or of the form . But since , it can contain no non-terminal symbols, so must be of the form , as we wanted to show. This completes the proof that .   "
},
{
  "id": "subsec-context-free-grammars-19",
  "level": "2",
  "url": "sec-grammars.html#subsec-context-free-grammars-19",
  "type": "Example",
  "number": "17.5.5",
  "title": "",
  "body": "  For another example, consider the language . Let's try to design a grammar that generates this language. This is similar to the previous example, but now we want to include strings that contain more than . The production rule always produces the same number of and . Can we modify this idea to produce more than ?  One approach would be to produce a string containing just as many as , and then to add some extra . A rule that can generate any number of is . After applying the rule for a while, we want to move to a new state in which we apply the rule . We can get to the new state by applying a rule that changes the into an . We still need a way to finish the process, which means getting rid of all non-terminal symbols in the string. For this, we can use the rule . Putting these rules together, we get the grammar This grammar does indeed generate the language . With slight variations on this grammar, we can produce other related languages. For example, if we replace the rule with , we get the language .  There are other ways to generate the language . For example, the extra non-terminal symbol, , is not really necessary, if we allow to sometimes produce a single without a . This leads to the grammar (But note that the rule would not work in place of , since it would allow the production of strings in which an can follow a , and there are no such strings in the language .) And here are two more grammars that generate this language:   "
},
{
  "id": "subsec-context-free-grammars-20",
  "level": "2",
  "url": "sec-grammars.html#subsec-context-free-grammars-20",
  "type": "Example",
  "number": "17.5.6",
  "title": "",
  "body": "  Consider another variation on the language , in which the and can occur in any order, but the number of is still equal to the number of . This language can be defined as . This language includes strings such as , , and .  Let's start with the grammar containing the rules and . We can try adding the rule . Every string that can be generated using these three rules is in the language . However, not every string in can be generated. A derivation that starts with can only produce strings that begin with and end with . A derivation that starts with can only generate strings that begin with and end with . There is no way to generate the strings or , which are in the language . But we shall see that any string in that begins and ends with the same letter can be written in the form where and are shorter strings in . To produce strings of this form, we need one more rule, . The complete set of production rules for the language is    It's easy to see that every string that can be generated using these rules is in , since each rule introduces the same number of as . But we also need to check that every string in can be generated by these rules. This can be done by induction on the length of , using the second form of the principle of mathematical induction. In the base case, and . In this case, since in one step. Suppose , where , and suppose that we already know that for any with , . To finish the induction we must show, based on this induction hypothesis, that .  Suppose that the first and last characters of are different. Then is either of the form or of the form , for some string . Let's assume that is of the form . (The case where is of the form is handled in a similar way.) Since has the same number of and and since has one fewer than and one fewer than , must also have the same number of as . That is . But , so by the induction hypothesis, . So we have . By , we get then . Combining this with the fact that , we get that , that is, . This proves that .  Finally, suppose that the first and last characters of are the same. Let's say that begins and ends with . (The case where begins and ends with is handled in a similar way.) I claim that can be written in the form where and and neither nor is the empty string. This will finish the induction, since we will then have by the induction hypothesis that and , and we can derive from by first applying the rule and then using the first on the right-hand side to derive and the second to derive .  It only remains to figure out how to divide into two strings and which are both in . The technique that is used is one that is more generally useful. Suppose that , where each is either or . Consider the sequence of integers , , , where for each , is the number of in minus the number of in . Since , . Since , . And since , we must have . Furthermore the difference between and is either or , for .  Since and and the value of goes up or down by 1 when increases by 1, must be zero for some between 1 and . That is, cannot get from 1 to unless it passes through zero. Let be a number between 1 and such that . Let and let . Note that . The fact that means that the string has the same number of and , so . It follows automatically that also. Since is strictly between 1 and , neither nor is the empty string. This is all that we needed to show to finish the proof that .  The basic idea of this proof is that if contains the same number of as , then an at the beginning of must have a matching  somewhere in . This matches the in the sense that the corresponding is zero, and the marks the end of a string which contains the same number of as . For example, in the string , the at the beginning of the string is matched by the third , since is the shortest prefix of that has an equal number of and .   "
},
{
  "id": "subsec-context-free-grammars-21",
  "level": "2",
  "url": "sec-grammars.html#subsec-context-free-grammars-21",
  "type": "Example",
  "number": "17.5.7",
  "title": "Balanced Parentheses.",
  "body": " Balanced Parentheses  Closely related to this idea of matching and is the idea of balanced parentheses . Consider a string made up of parentheses, such as (()(()))(()) . The parentheses in this sample string are balanced because each left parenthesis has a matching right parenthesis, and the matching pairs are properly nested. A careful definition uses the sort of integer sequence introduced in the above proof. Let be a string of parentheses. Write , where each is either ( or ) . Define a sequence of integers , , , , where is the number of left parentheses in minus the number of right parentheses. We say that the parentheses in are balanced if and for all . The fact that says that contains the same number of left parentheses as right parentheses. The fact the means that the nesting of pairs of parentheses is correct: You can't have a right parenthesis unless it is balanced by a left parenthesis in the preceding part of the string. The language that consists of all balanced strings of parentheses is context-free. It is generated by the grammar The proof is similar to the preceding proof about strings of and . (It might seem that I've made an awfully big fuss about matching and balancing. The reason is that this is one of the few things that we can do with context-free languages that we can't do with regular languages.)  "
},
{
  "id": "thm-context-free-operations",
  "level": "2",
  "url": "sec-grammars.html#thm-context-free-operations",
  "type": "Theorem",
  "number": "17.5.8",
  "title": "",
  "body": "  Suppose that and are context-free languages. Then the languages , , and are also context-free.    I will prove only the first claim of the theorem, that is context-free. In the exercises for this section, you are asked to construct grammars for and (without giving formal proofs that your answers are correct).  Let and be context-free grammars such that and . We can assume that , since otherwise we could simply rename the non-terminal symbols in . The idea of the proof is that to generate a string in , we first decide whether we want a string in or a string in . Once that decision is made, to make a string in , we use production rules from , while to make a string in , we use rules from . We have to design a grammar, , to represent this process.  Let be a symbol that is not in any of the alphabets , , , or . will be the start symbol of . The production rules for consist of all the production rules from and together with two new rules: Formally, is defined to be the grammar Suppose that . That is , so there is a derivation . Since every rule from is also a rule in , if follows that . Combining this with the fact that , we have that , and . This shows that . In an exactly similar way, we can show that . Thus, .  It remains to show that . Suppose . Then there is a derivation . This derivation must begin with an application of one of the rules or , since these are the only rules in which appears. If the first rule applied in the derivation is , then the remainder of the derivation shows that . Starting from , the only rules that can be applied are rules from , so in fact we have . This shows that . Similarly, if the first rule applied in the derivation is , then . In any case, . This proves that .   "
},
{
  "id": "def-right-regular-grammar",
  "level": "2",
  "url": "sec-grammars.html#def-right-regular-grammar",
  "type": "Definition",
  "number": "17.5.9",
  "title": "Right-Regular Grammar.",
  "body": " Right-Regular Grammar   A right-regular grammar regular grammar is a context-free grammar in which the right-hand side of every production rule has one of the following forms: the empty string; a string consisting of a single non-terminal symbol; or a string consisting of a single terminal symbol followed by a single non-terminal symbol.   "
},
{
  "id": "thm-every-regular-context-free",
  "level": "2",
  "url": "sec-grammars.html#thm-every-regular-context-free",
  "type": "Theorem",
  "number": "17.5.10",
  "title": "",
  "body": "  A language is regular if and only if there is a right-regular grammar such that . In particular, every regular language is context-free.   "
},
{
  "id": "subsec-bnf-3",
  "level": "2",
  "url": "sec-grammars.html#subsec-bnf-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Backus-Naur Form "
},
{
  "id": "subsec-bnf-4",
  "level": "2",
  "url": "sec-grammars.html#subsec-bnf-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "syntactic category "
},
{
  "id": "subsec-bnf-7",
  "level": "2",
  "url": "sec-grammars.html#subsec-bnf-7",
  "type": "Example",
  "number": "17.5.11",
  "title": "",
  "body": " As an example of a complete BNF grammar, let's look at a BNF grammar for a very small subset of English. The start symbol for the grammar is , and the terminal symbols are English words. All the sentences that can be produced from this grammar are syntactically correct English sentences, although you wouldn't encounter many of them in conversation. Here is the grammar: This grammar can generate sentences such as A dog chases the cat and the cat hides and The man loves a woman who runs. The second sentence, for example, is generated by the derivation   "
},
{
  "id": "subsec-parsing-2",
  "level": "2",
  "url": "sec-grammars.html#subsec-parsing-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "parsing "
},
{
  "id": "subsec-parsing-4",
  "level": "2",
  "url": "sec-grammars.html#subsec-parsing-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "left derivation "
},
{
  "id": "subsec-parsing-5",
  "level": "2",
  "url": "sec-grammars.html#subsec-parsing-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "ambiguous "
},
{
  "id": "subsec-parsing-8",
  "level": "2",
  "url": "sec-grammars.html#subsec-parsing-8",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "LL(1) grammar L L 1 "
},
{
  "id": "subsec-parsing-10",
  "level": "2",
  "url": "sec-grammars.html#subsec-parsing-10",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "right derivation LR(1) grammar L R 1 "
},
{
  "id": "subsec-parsing-11",
  "level": "2",
  "url": "sec-grammars.html#subsec-parsing-11",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "shift\/reduce "
},
{
  "id": "subsec-parsing-14",
  "level": "2",
  "url": "sec-grammars.html#subsec-parsing-14",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "bottom-up parsing top-down parsing "
},
{
  "id": "subsec-parsing-15",
  "level": "2",
  "url": "sec-grammars.html#subsec-parsing-15",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "parse tree "
},
{
  "id": "fig-parsetree2",
  "level": "2",
  "url": "sec-grammars.html#fig-parsetree2",
  "type": "Figure",
  "number": "17.5.13",
  "title": "",
  "body": "  Figure showing the same two parse trees as above but with the non-terminals aligned at the bottom.   "
},
{
  "id": "thm-parsetree-leftderiv",
  "level": "2",
  "url": "sec-grammars.html#thm-parsetree-leftderiv",
  "type": "Theorem",
  "number": "17.5.14",
  "title": "",
  "body": "  Let be a context-free grammar. There is a one-to-one correspondence between parse trees and left derivations based on the grammar .   "
},
{
  "id": "exercises-17-5-2",
  "level": "2",
  "url": "sec-grammars.html#exercises-17-5-2",
  "type": "Exercise",
  "number": "17.5.4.1",
  "title": "",
  "body": "One of the examples in this section was a grammar for a subset of English. Give five more examples of sentences that can be generated from that grammar. Your examples should, collectively, use all the rules of the grammar. "
},
{
  "id": "exercises-17-5-3",
  "level": "2",
  "url": "sec-grammars.html#exercises-17-5-3",
  "type": "Exercise",
  "number": "17.5.4.2",
  "title": "",
  "body": "Rewrite the example BNF grammar for a subset of English as a context-free grammar. "
},
{
  "id": "exercises-17-5-4",
  "level": "2",
  "url": "sec-grammars.html#exercises-17-5-4",
  "type": "Exercise",
  "number": "17.5.4.3",
  "title": "",
  "body": "Write a single BNF production rule that is equivalent to the following context-free grammar:  "
},
{
  "id": "exercises-17-5-5",
  "level": "2",
  "url": "sec-grammars.html#exercises-17-5-5",
  "type": "Exercise",
  "number": "17.5.4.4",
  "title": "",
  "body": "Write a BNF production rule that specifies the syntax of real numbers, as they appear in programming languages such as Java and C. Real numbers can include a sign, a decimal point and an exponential part. Some examples are: 17.3, .73, 23.1e67, 1.34E 12, +0.2, 100E+100 "
},
{
  "id": "exercises-17-5-6",
  "level": "2",
  "url": "sec-grammars.html#exercises-17-5-6",
  "type": "Exercise",
  "number": "17.5.4.5",
  "title": "",
  "body": "Variable references in the Java programming language can be rather complicated. Some examples include:      . Write a BNF production rule for Java variables. You can use the token ident and the non-terminal in your rule. "
},
{
  "id": "exercises-17-5-7",
  "level": "2",
  "url": "sec-grammars.html#exercises-17-5-7",
  "type": "Exercise",
  "number": "17.5.4.6",
  "title": "",
  "body": "Use BNF to express the syntax of the try catch statement in the Java programming language. "
},
{
  "id": "exercises-17-5-8",
  "level": "2",
  "url": "sec-grammars.html#exercises-17-5-8",
  "type": "Exercise",
  "number": "17.5.4.7",
  "title": "",
  "body": "Give a BNF grammar for compound propositions made up of propositional variables, parentheses, and the logical operators , , and . Use the non-terminal symbol to represent a propositional variable. You do not have to give a definition of . "
},
{
  "id": "exercises-17-5-9",
  "level": "2",
  "url": "sec-grammars.html#exercises-17-5-9",
  "type": "Exercise",
  "number": "17.5.4.8",
  "title": "",
  "body": " Show that each of the following grammars is ambiguous by finding a string that has two left derivations according to the grammar:               There are many answers to these.                  "
},
{
  "id": "exercises-17-5-10",
  "level": "2",
  "url": "sec-grammars.html#exercises-17-5-10",
  "type": "Exercise",
  "number": "17.5.4.9",
  "title": "",
  "body": "Consider the string . Find a left derivation of this string according to each of the grammars , , and , as given in this section. "
},
{
  "id": "exercises-17-5-11",
  "level": "2",
  "url": "sec-grammars.html#exercises-17-5-11",
  "type": "Exercise",
  "number": "17.5.4.10",
  "title": "",
  "body": "Draw a parse tree for the string according to each of the grammars , , and , as given in this section. "
},
{
  "id": "exercises-17-5-12",
  "level": "2",
  "url": "sec-grammars.html#exercises-17-5-12",
  "type": "Exercise",
  "number": "17.5.4.11",
  "title": "",
  "body": "Draw three different parse trees for the string based on the grammar given in part a) of exercise 1. "
},
{
  "id": "exercises-17-5-13",
  "level": "2",
  "url": "sec-grammars.html#exercises-17-5-13",
  "type": "Exercise",
  "number": "17.5.4.12",
  "title": "",
  "body": "Suppose that the string has the following parse tree, according to some grammar :  parse tree for string     List five production rules that must be rules in the grammar , given that this is a valid parse tree.   Give a left derivation for the string according to the grammar .   Give a right derivation for the string according to the grammar .    "
},
{
  "id": "exercises-17-5-14",
  "level": "2",
  "url": "sec-grammars.html#exercises-17-5-14",
  "type": "Exercise",
  "number": "17.5.4.13",
  "title": "",
  "body": "Show the full sequence of shift and reduce operations that are used in the LR(1) parsing of the string according to the grammar , and give the corresponding right derivation of the string. "
},
{
  "id": "exercises-17-5-15",
  "level": "2",
  "url": "sec-grammars.html#exercises-17-5-15",
  "type": "Exercise",
  "number": "17.5.4.14",
  "title": "",
  "body": "This section showed how to use LL(1) and LR(1) parsing to find a derivation of a string in the language generated by some grammar . How is it possible to use LL(1) or LR(1) parsing to determine for an arbitrary string whether ? Give an example. "
},
{
  "id": "sec-turing-machines-comp",
  "level": "1",
  "url": "sec-turing-machines-comp.html",
  "type": "Section",
  "number": "17.6",
  "title": "Turing Machines and Computability",
  "body": " Turing Machines and Computability   Turing Machine  Computability   In , we saw that there is a neat correspondence between regular expressions and finite automata. That is, a language is generated by a regular expression if and only if that language is accepted by a finite automaton.  In , we introduced the class of context-free languages, and we have considered how context-free grammars can be used to generate context-free languages. You might wonder whether there is any type of automaton that can be used to recognize context-free languages. In fact, there is: The abstract machines known as pushdown automata that utilize a stack in addition to a finite automaton, can be used to define context-free languages. These and languages that are not context-free (or context-sensitive languages) will not be covered in this text. If you wish to learn more about pushdown automata, non-context-free languages, or general grammars please refer to the original source text for this chapter: Foundations of Computation , Chapter 4  We saw hints in the previous sections that ``computation'' is a more general concept than we might have thought. In this chapter, we will see that computer programs are equivalent, in terms of their computational power, to a particularly simple model of computation known as a Turing machine . We shall also see that there are limits to what can be done by computing.    Turing Machines  Historically, the theoretical study of computing began before computers existed. One of the early models of computation was developed in the 1930s by the British mathematician, Alan Turing, who was interested in studying the theoretical abilities and limitations of computation. His model for computation is a very simple abstract computing machine which has come to be known as a Turing machine . While Turing machines are not applicable in the same way that regular expressions, finite-state automata, and grammars are applicable, their use as a fundamental model for computation means that every computer scientist should be familiar with them, at least in a general way.  A Turing machine is really not much more complicated than a finite-state automaton or a pushdown automaton. In fact, Turing machines can be shown to be equivalent in their computational power to pushdown automata with two independent stacks. Like a FSA, a Turing machine has a finite number of possible states, and it changes from state to state as it computes. However, a Turing machine also has an infinitely long tape that it can use for input and output. The tape extends to infinity in both directions. The tape is divided into cells , which are in one-to-one correspondence with the integers, . Each cell can either be blank or it can hold a symbol from a specified alphabet. The Turing machine can move back and forth along this tape, reading and writing symbols and changing state. It can read only one cell at a time, and possibly write a new value in that cell. After doing this, it can change state and it can move by one cell either to the left or to the right. This is how the Turing machine computes. To use a Turing machine, you would write some input on its tape, start the machine, and let it compute until it halts. Whatever is written on the tape at that time is the output of the computation.  You might want to visualize a Turing machine as a physical machine such as in this simple diagram:   Basic graphical representation of a Turing machine.   Kevd1337> , Public domain, via Wikimedia Commons  However, these kinds of diagrams do not tell us anything about the functioning of a particular machine.  Although the tape is infinite, only a finite number of cells can be non-blank at any given time. If you don't like the idea of an infinite tape, you can think of a finite tape that can be extended to an arbitrarily large size as the Turing machine computes: If the Turing machine gets to either end of the tape, it will pause and wait politely until you add a new section of tape. In other words, it's not important that the Turing machine have an infinite amount of memory, only that it can use as much memory as it needs for a given computation, up to any arbitrarily large size. In this way, a Turing machine is like a computer that can ask you to buy it a new disk drive whenever it needs more storage space to continue a computation. The tape of a Turing machine can be used to store arbitrarily large amounts of information in a straightforward way. Although we can imagine using an arbitrary amount of memory with a computer, it's not so easy. Computers aren't set up to keep track of unlimited amounts of data. If you think about how it might be done, you probably won't come with anything better than an infinite tape. (The problem is that computers use integer-valued addresses to keep track of data locations. If a limit is put on the number of bits in an address, then only a fixed, finite amount of data can be addressed. If no limit is put on the number of bits in an address, then we are right back to the problem of storing an arbitrarily large piece of data---just to represent an address!)  A given Turing machine has a fixed, finite set of states. One of these states is designated as the start state . This is the state in which the Turing machine begins a computation. Another special state is the halt state . The Turing machine's computation ends when it enters its halt state. It is possible that a computation might never end because the machine never enters the halt state. This is analogous to an infinite loop in a computer program.  At each step in its computation, the Turing machine reads the contents of the tape cell where it is located. Depending on its state and the symbol that it reads, the machine writes a symbol (possibly the same symbol) to the cell, moves one cell either to the left or to the right, and (possibly) changes its state. The output symbol, direction of motion, and new state are determined by the current state and the input symbol. Note that either the input symbol, the output symbol, or both, can be blank. A Turing machine has a fixed set of rules that tell it how to compute. Each rule specifies the output symbol, direction of motion, and new state for some combination of current state and input symbol. The machine has a rule for every possible combination of current state and input symbol, except that there are no rules for what happens if the current state is the halt state. Of course, once the machine enters the halt state, its computation is complete and the machine simply stops.  I will use the character # to represent a blank in a way that makes it visible. I will always use to represent the halt state. I will indicate the directions, left and right, with and , so that is the set of possible directions of motion. With these conventions, we can give the formal definition of a Turing machine as follows:   Turing Machine  Turing Machine   A Turing machine is a 4-tuple , where:    is a finite set of states, including the halt state, .     is an alphabet which includes the blank symbol, #.     is the start state.     is the transition function. The fact that means that when the Turing machine is in state and reads the symbol , it writes the symbol , moves one cell in the direction , and enters state .       Even though this is the formal definition, it's easier to work with a transition diagram representation of Turing machines. The transition diagram for a Turing machine is similar to the transition diagram for a DFA. However, there are no ``accepting'' states (only a halt state). Furthermore, there must be a way to specify the output symbol and the direction of motion for each step of the computation. We do this by labeling arrows with notations of the form and , where and are symbols in the Turing machine's alphabet. For example,  A simple Turing machine transition diagram  indicates that when the machine is in state and reads an , it writes a , moves left, and enters state .  Here, for example, is a transition diagram for a simple Turing machine that moves to the right, changing 's to 's and vice versa, until it finds a . It leaves blanks (#'s) unchanged. When and if the machine encounters a , it moves to the left and halts:  Transition diagram for a simple Turing machine that moves to the right, changing 's to 's and vice versa, until it finds a .    To simplify the diagrams, I will leave out any transitions that are not relevant to the computation that I want the machine to perform. You can assume that the action for any omitted transition is to write the same symbol that was read, move right, and halt.  For example, shown below is a transition diagram for a Turing machine that makes a copy of a string of 's and 's. To use this machine, you would write a string of 's and 's on its tape, place the machine on the first character of the string, and start the machine in its start state, . When the machine halts, there will be two copies of the string on the tape, separated by a blank. The machine will be positioned on the first character of the leftmost copy of the string. Note that this machine uses 's and 's in addition to 's and 's. While it is copying the input string, it temporarily changes the 's and 's that it has copied to 's and 's, respectively. In this way it can keep track of which characters it has already copied. After the string has been copied, the machine changes the 's and 's back to 's and 's before halting.  Transition diagram for a Turing machine that copies strings of a's and b's.   In this machine, state checks whether the next character is an , a , or a # (indicating the end of the string). States and add an to the end of the new string, and states and do the same thing with a . States and return the machine to the next character in the input string. When the end of the input string is reached, state will move the machine back to the start of the input string, changing 's and 's back to 's and 's as it goes. Finally, when the machine hits the # that precedes the input string, it moves to the right and halts. This leave it back at the first character of the input string. It would be a good idea to work through the execution of this machine for a few sample input strings. You should also check that it works even for an input string of length zero.  Our primary interest in Turing machines is as language processors. Suppose that is a string over an alphabet . We will assume that does not contain the blank symbol. We can use as input to a Turing machine provided that . To use as input for , we will write on 's tape and assume that the remainder of the tape is blank. We place the machine on the cell containing the first character of the string, except that if then we simply place the machine on a completely blank tape. Then we start the machine in its initial state, , and see what computation it performs. We refer to this setup as ``running with input .''  When is run with input , it is possible that it will just keep running forever without halting. In that case, it doesn't make sense to ask about the output of the computation. Suppose however that does halt on input . Suppose, furthermore, that when halts, its tape is blank except for a string of non-blank symbols, and that the machine is located on the first character of . In this case, we will say that `` halts with output .'' In addition, if halts with an entirely blank tape, we say that `` halts with output .'' Note that when we run with input , one of three things can happen: (1) might halt with some string as output; (1) might fail to halt; or (3) might halt in some configuration that doesn't count as outputting any string.  The fact that a Turing machine can produce an output value allows us for the first time to deal with computation of functions . A function takes an input value in the set and produces an output value in the set . If the sets are sets of strings, we can now ask whether the values of the function can be computed by a Turing machine. That is, is there a Turing machine such that, given any string in the domain of as input, will compute as its output the string . If this is that case, then we say that is a Turing-computable function.   Turing-computable  Turing-computable   Suppose that and are alphabets that do not contain # and that is a function from to . We say that is Turing-computable if there is a Turing machine such that and and for each string , when is run with input , it halts with output . In this case, we say that  computes the function .    For example, let and define by , for . Then is Turing-computable since it is computed by this Turing machine:  Transition diagram for Turing machine described in text.    We can also use Turing machines to define ``computable languages.'' There are actually two different notions of Turing-computability for languages. One is based on the idea of Turing-computability for functions. Suppose that is an alphabet and that . The characteristic function of is the function defined by the fact that if and if . Note that given the function , can be obtained as the set . Given a language , we can ask whether the corresponding function is Turing-computable. If so, then we can use a Turing machine to decide whether or not a given string is in . Just run the machine with input . It will halt with output . (That is, it will halt and when it does so, the tape will be blank except for a 0 or a 1, and the machine will be positioned on the 0 or 1.) If the machine halts with output 1, then . If the machine halts with output 0, then .   Turing-decidable  Turing-decidable   Let be an alphabet that does not contain # and let be a language over . We say that is Turing-decidable if there is a Turing machine such that , , and for each , when is run with input , it halts with output . (That is, it halts with output 0 or 1, and the output is 0 if and is 1 if .) In this case, we say that  decides the language .    The second notion of computability for languages is based on the interesting fact that it is possible for a Turing machine to run forever, without ever halting. Whenever we run a Turing machine with input , we can ask the question, will ever halt or will it run forever? If halts on input , we will say that ``accepts'' . We can then look at all the strings over a given alphabet that are accepted by a given Turing machine. This leads to the notion of Turing-acceptable languages.   Turing-acceptable  Turing-acceptable   Let be an alphabet that does not contain #, and let be a language over . We say that is Turing-acceptable if there is a Turing machine such that , and for each , halts on input if and only if . In this case, we say that  accepts the language .    It should be clear that any Turing-decidable language is Turing-acceptable. In fact, if is a language over an alphabet , and if is a Turing machine that decides , then it is easy to modify to produce a Turing machine that accepts . At the point where enters the halt state with output 0, the new machine should enter a new state in which it simply moves to the right forever, without ever halting. Given an input , the modified machine will halt if and only if halts with output 1, that is, if and only if .    Computability  Computability  At this point, it would be useful to look at increasingly complex Turing machines, such as those with more tapes, which compute increasingly complex functions and languages. Although Turing machines are very simple devices, it turns out that they can perform very sophisticated computations. In fact, any computation that can be carried out by a modern digital computer---even one with an unlimited amount of memory---can be carried out by a Turing machine. Although it is not something that can be proved, it is widely believed that anything that can reasonably be called ``computation'' can be done by a Turing machine. This claim is known as the Church-Turing Thesis Church-Turing Thesis .  We do not have time to look at enough examples to convince you that Turing machines are as powerful as computers, but the proof reduces to the fact that computers are actually fairly simple in their basic operation. Everything that a computer does comes down to copying data from one place to another, making simple comparisons between two pieces of data, and performing some basic arithmetic operations. It's possible for Turing machines to do all these things. In fact, it's possible to build a Turing machine to simulate the step-by-step operation of a given computer. Doing so proves that the Turing machine can do any computation that the computer could do, although it will, of course, work much, much more slowly.  We have used Turing machines to define Turing-acceptable languages and Turing-decidable languages. The definitions seem to depend very much on the peculiarities of Turing machines. But the same classes of languages can be defined in other ways. For example, we could use programs running on an idealized computer, with an unlimited amount of memory, to accept or decide languages. Or we could use -tape Turing machines. The resulting classes of languages would be exactly the same as the Turing-acceptable and Turing-decidable languages.  We could look at other ways of specifying languages ``computationally.'' One of the most natural is to imagine a Turing machine or computer program that runs forever and outputs an infinite list of strings over some alphabet . In the case of Turing machines, it's convenient to think of a two-tape Turing machine that lists the strings on its second tape. The strings in the list form a language over . A language that can be listed in this way is said to be recursively enumerable language  recursively enumerable . Note that we make no assumption that the strings must be listed in any particular order, and we allow the same string to appear in the output any number of times. Clearly, a recursively enumerable language is ``computable'' in some sense. Perhaps we have found a new type of computable language. But no---it turns out that we have just found another way of describing the Turing-acceptable languages. The following theorem makes this fact official and adds one more way of describing the same class of languages: Discussion of the proof of this theorem can be found in the source document for this section: Section 5.2 of Foundations of Computation      Let be an alphabet and let be a language over . Then the following are equivalent:   There is a Turing machine that accepts .    There is a two-tape Turing machine that runs forever, making a list of strings on its second tape, such that a string is in the list if and only if .    There is a Turing-computable function such that is the range of the function .        Next, we compare Turing machines to a completely different method of specifying languages: grammars. Suppose is a general grammar and that is the language generated by . Then there is a Turing machine, , that accepts the same language, . The alphabet for will be , where $ is a symbol that is not in . (We also assume that # is not in .) Suppose that is started with input , where . We have to design so that it will halt if and only if . The idea is to have find each string that can be derived from the start symbol . The strings will be written to 's tape and separated by $'s. can begin by writing the start symbol, , on its tape, separated from by a $. Then it repeats the following process indefinitely: For each string on the tape and for each production rule, , of , search the string for occurrences of . When one is found, add a $ to the end of the tape and copy the string to the end of the tape, replacing the occurrence of by . The new string represents the results of applying the production rule to the string. Each time produces a new string, it compares that string to . If they are equal, then halts. If is in fact in , then eventually will produce the string and will halt. Conversely, if is not in , then will go on producing strings forever without ever finding , so will never halt. This shows that, in fact, the language is accepted by .  Conversely, suppose that is a language over an alphabet , and that is Turing-acceptable. Then it is possible to find a grammar that generates . To do this, it's convenient to use the fact that, as discussed above, there is a Turing-computable function such that is the range of . Let be a Turing machine that computes the function . We can build a grammar, , that imitates the computations performed by . The idea is that most of the production rules of will imitate steps in the computation of . Some additional rules (which we won't get into here) must be added to get things started, to clean up, and to otherwise bridge the conceptual gap between grammars and Turing machines.   We have now shown, very informally, that a language is Turing-acceptable if and only if there is a grammar that generates . Even though Turing machines and grammars are very different things, they are equivalent in terms of their ability to describe languages. We state this as a theorem:    A language is Turing acceptable (equivalently, recursively enumerable) if and only if there is a general grammar that generates .    In this section, we have been talking mostly about recursively enumerable languages (also known as the Turing-acceptable languages). What about the Turing-decidable languages? We already know that if a language is Turing-decidable, then it is Turing-acceptable. The converse is not true (although we won't be able to prove this yet). However, suppose that is a language over the alphabet and that both and its complement, , are Turing-acceptable. Then is Turing-decidable.  For suppose that is a Turing machine that accepts the language and that is a Turing machine that accepts . We must show that is Turing-decidable. That is, we have to build a Turing machine that decides . For each , when is run with input , it should halt with output 1 if and with output if . To do this, will simulate the computation of both and on input . (It will simulate one step in the computation of , then one step in the computation of , then one step of , then one step of , and so on.) If and when the simulated computation of halts, then will halt with output 1; since accepts , this will happen if and only if . If and when the simulated computation of halts, then will halt with output 0; since accepts , this will happen if and only if . So, for any , halts with the desired output. This means that does in fact decide the language .  It is easy to prove the converse, and the proof is left as an exercise. So we see that a language is Turing-decidable if and only if both it and its complement are Turing-acceptable. Since Turing-acceptability can be defined using other forms of computation besides Turing machines, so can Turing-decidability. For example, a language is Turing-decidable if and only if both it and its complement can be generated by general grammars. We introduced the term ``recursively enumerable'' as a synonym for Turing-acceptable, to get away from the association with a particular form of computation. Similarly, we define the term ``recursive'' as a synonym for Turing-decidable. That is, a language is said to be recursive language recursive if and only if it is Turing-decidable. We then have the theorem:    Let be an alphabet and let be a language over . Then is recursive if and only if both and its complement, , are recursively enumerable.       The Limits of Computation  Limits of Computation  Recursively enumerable languages are languages that can be defined by computation. We have seen that there are many different models of computation---Turing machines, two-tape Turing machines, grammars, computer programs---but they all lead to the same class of languages. In fact, every computational method for specifying languages that has ever been developed produces only recursively enumerable languages. There is something about these languages---some pattern or property---that makes them ``computable,'' and it is some intrinsic property of the languages themselves, not some peculiarity of any given model of computation.  This is especially interesting since most languages are not recursively enumerable. Given an alphabet , there are uncountably many languages over , but only countably many of them are recursively enumerable. The rest---the vast majority---are not recursively enumerable. What can we say about all these non-recursively-enumerable languages? If the language is not recursively enumerable, then there is no algorithm for listing the members of . It might be possible to define by specifying some property that all its members satisfy, but that property can't be computable. That is, there can be no computer program or Turing machine that tests whether a given string has the property, since if there were, then we could write a program that lists the members of .  So, even though almost every language is non-recursively-enumerable, it's difficult to find a particular language that is not recursively enumerable. Nevertheless, in this section we will find one such language. At that same time, we will find an example of a language that is recursively enumerable but not recursive. And we will discover some interesting limitations to the power of computation.  The examples that we will look at in this section involve Turing machines that work with other Turing machines as data. For this to work, we need a symbolic representation of Turing machines---a representation that can be written on the tape of another Turing machine. This will let us create two machines: First, a Turing machine that can generate Turing machines on demand by writing their symbolic representations on its tape. We will design a Turing machine to do this. And second, a Turing machine that can simulate the computation of other Turing machines whose descriptions are written on its tape.  In order to do all this, we must put some limitations on the states and alphabetic symbols that can be used in the Turing machines that we consider. Clearly, given any Turing machine, we can change the names of the states without changing the behavior of the machine. So, without any loss of generality, we can assume that all states have names chosen from the list: , , , , , , . We assume that is the halt state and is the start state. Note that there is an infinite number of possible states, but any given Turing machine will only use finitely many states from this list.  As for the alphabets of the Turing machines, I want to look at Turing machines whose alphabets include the symbols 0, 1, , and of course #. These are the symbols that the machines will use for input and output. The alphabets can also include other symbols. We will assume that these auxiliary symbols are chosen from the list: , , , , . Given a Turing machine whose alphabet includes the symbols 0, 1, , and #, we can rename any other symbols in its alphabet using names from this list. This renaming will not affect any of the behavior that we are interested in.  Now suppose we have one of these standard Turing machines---one whose states are chosen from the list , , , , , , whose start state is , and whose symbols are chosen from the list #, 0, 1, , , , , . Such a machine can be completely encoded as a string of symbols over the alphabet . A transition rule such as can be encoded as a string . To encode a complete machine, simply encode each of its transition rules in this way and join them together in a string, separated by $'s. We now have the symbolic representation for Turing machines that we need.  Note that a string over the alphabet might or might not encode a Turing machine. However, it is a simple matter to check whether such a string is the code for a Turing machine. We can imagine the following process: Generate all the strings over the alphabet . Check each string to see whether it encodes a Turing machine. If so, add the string to an output list. In this way, we can generate a list of all strings that encode standard Turing machines. In effect, the standard Turing machines, or at least their symbolic representations, form a recursively enumerable set. Let be the machine encoded by the first string in this list of standard Turing machines; let be the machine encoded by the second string; let be the machine encoded by the third string; and so on. The list , , , , includes every standard Turing machine. Furthermore, given , we can find the symbolic representation for by generating strings in the list until we have strings. Furthermore---and this is the essential point---we can use a Turing machine to do all these calculations. In fact, there is a Turing machine that, when run with input , will halt with the string representation of written on its tape as output. The Turing machine that does this is , the first of the two machines that we need.  The second machine that we need will be called . It is a so-called Universal Turing Machine . The single Turing machine can simulate the computation of any standard Turing machine, , on any input. Both the symbolic representation of and that of the input string are written to 's tape, separated by a space. As simulates the computation of , it will need some way to keep track of what state is in and of the position of on its (simulated) tape. It does this by writing the current state of on its tape, following 's input string, and by adding a special symbol, such as , to the input string to mark 's position. When is first started, it begins by adding the to the beginning of the input string and writing a after the string to represent the start state of . It is then relatively straightforward for to simulate the computation of . For each step in the computation of , it can determine the current state of (which is recorded on 's tape) and the symbol which is currently reading (which is on 's tape, after the ). searches the symbolic representation of for the rule that tells what to do in this situation. Using this rule, can update its representation of 's state, position, and tape to reflect the result of applying the rule. If the new state of is the halt state, then also halts. Otherwise, it goes on to simulate the next step in 's computation. Note that when is given and an input string as input, will halt if and only if halts on input . (Obviously, this is a very inefficient simulation, but we are not concerned with efficiency here.)  So, we have our two machines, and . After all this setup, we are finally in a position to look at the major theorem that we have been working towards.    Let , , , , be the standard Turing machines, as described above. Let be the language over the alphabet defined by Then is a recursively enumerable language, but is not recursive. The complement is a language that is not recursively enumerable.    First note that if both and were recursively enumerable, then would be recursive, by . So, once we show that is recursively enumerable but not recursive, it follows immediately that cannot be recursively enumerable. That is, the second part of the theorem follows from the first.  To show that is recursively enumerable, it suffices to find a Turing machine, , that accepts . That is, when run with input , for , should halt if and only if . We can build from the Turing machines and which were introduced above. When started with input , should proceed as follows: First copy the input. Run on the first copy of . This will produce a symbolic description of the Turing machine . Now run to simulate the computation of on input . This simulation will end if and only if halts when run with input , that is, if and only if . The Turing machine that performs the computation we have described accepts the language . This proves that is recursively enumerable.  To show that is not recursive, we need to show that there is no Turing machine that decides . Let be any Turing machine. We must show that no matter what does, it does not decide the language . We must do this without knowing anything more about that the fact that is it a Turing machine. To say that decides would mean that for any , when is run with input , will halt with output 1 if and will halt with output 0 if . To show that does not decide we need to show that there is some such that when is run with input , either fails to halt or else halts but gives the wrong output. Note in particular that we only need to find one  for which does not give the correct result. As we try to find , we have nothing much to work with but itself.  To find , we construct a Turing machine that is a simple variation on . When is run on any input, it duplicates the behavior of on that input until halts (if it ever does). At that point, should check 's output. If has halted with output , then should go into an infinite loop, so that never halts in this case. Otherwise, if the output of is not , then should halt. Now, we can assume that is one of the standard Turing machines, say . (If is not already one of these machines, it is because it uses different names for its states and symbols. Renaming the states and symbols will produce an equivalent machine with the same behavior as , and we can replace with this standard machine.)  We now have a Turing machine which has the following behavior when it is run with input (note that the here is the same as in ): If halts with output 1 on input , then will fail to halt on input . If halts with output 0 on input , then fails to halt on input . (What might do in other cases is not relevant here.)  Remember that we are trying to show that does not decide the language . I claim that, in fact, does not give the correct answer for . When is run with input , it is supposed to halt with output 1 if , and it is supposed to halt with output 0 if . Recall that if and only if halts when run with input .  Suppose that we run with input . If does not halt with output 0 or 1, then it has certainly not given the correct answer for . Now, suppose that halts with output 1 on input . In this case, by the properties of given above, we know that does not halt on input . But that means, by definition of , that . By halting with output 1 in this case, has given the wrong answer for . Finally, suppose that halts with output 0 on input . We then know that halts on input . But that means that . Again, by halting with output 0 in this case, has given the wrong answer for . So, in no case will give the correct answer for . This means that does not decide the language , because gives an incorrect answer when it is run with the particular input . does not decide , and since was an arbitrary Turing machine, we see that there is no Turing machine at all that decides the language . Thus, is not a recursive language, as the theorem claims.  To decide the language would be to solve the following problem: Given a Turing machine , decide whether or not will halt when it is run with input . This problem is called the Halting Problem Halting Problem . We have shown that there is no Turing machine that solves this problem. Given the equivalence of Turing machines and computer programs, we can also say that there is no computer program that solves the halting problem. We say that the halting problem is computational unsolvability computationally unsolvable .  The halting problem is just one of many problems that cannot be solved by Turing machines or computer programs. In fact, almost any interesting yes\/no question that can be asked about Turing machines or programs is in this class: Does this Turing machine halt for all possible inputs in ? Given this input, will this program ever halt? Do these two programs (or Turing machines) have the same output for each possible input? Will this Turing machine ever halt if it is started on a blank tape? All these problems are computationally unsolvable in the sense that there is no Turing machine or computer program that will answer them correctly in all cases. The existence of such problems is a real limitation on the power of computation.    Exercises  Let . Draw a transition diagram for a Turing machine that computes the function where , for . Draw a transition diagram for a Turing machine that computes the function where , for .  Let . Draw a transition diagram for a Turing machine that computes the function where .  Suppose that , , and are alphabets and that and are Turing-computable functions. Show that is Turing-computable.  We have defined computability for functions , where and are alphabets. How could Turing machines be used to define computable functions from to ? (Hint: Consider the alphabet .)  Let be an alphabet and let be a language over . Show that is Turing-decidable if and only if its complement, , is Turing-decidable.  Draw a transition diagram for a Turing machine which decides the language . (Hint: Change the 's and 's to \\$'s in pairs.) Explain in general terms how to make a Turing machine that decides the language .  Draw a transition diagram for a Turing machine which decides the language and is a multiple of . (Hint: Erase  's at a time.)  Based on your answer to the previous problem and the copying machine presented in this section, describe in general terms how you would build a Turing machine to decide the language is a prime number .  Let be the function such that for each , is the representation of as a binary number. Draw a transition diagram for a Turing machine that computes .  The language is the range of the function . Design a Turing machine that computes this function, and find the grammar that generates the language by imitating the computation of that machine.  Complete the proof of by proving the following: If is a recursive language over an alphabet , then both and are recursively enumerable.  Show that a language over an alphabet is recursive if and only if there are grammars and such that the language generated by is and the language generated by is .  This section discusses recursive languages and recursively enumerable languages. How could one define recursive subsets of and recursively enumerable subsets of ?  Give an informal argument to show that a subset is recursive if and only if there is a computer program that prints out the elements of  it in increasing order .   "
},
{
  "id": "sec-turing-machines-comp-4-2",
  "level": "2",
  "url": "sec-turing-machines-comp.html#sec-turing-machines-comp-4-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "pushdown automata "
},
{
  "id": "sec-turing-machines-comp-4-3",
  "level": "2",
  "url": "sec-turing-machines-comp.html#sec-turing-machines-comp-4-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Turing machine "
},
{
  "id": "subsec-turing-2",
  "level": "2",
  "url": "sec-turing-machines-comp.html#subsec-turing-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Turing machine "
},
{
  "id": "subsec-turing-3",
  "level": "2",
  "url": "sec-turing-machines-comp.html#subsec-turing-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "tape cells "
},
{
  "id": "fig-TM",
  "level": "2",
  "url": "sec-turing-machines-comp.html#fig-TM",
  "type": "Figure",
  "number": "17.6.1",
  "title": "",
  "body": "  Basic graphical representation of a Turing machine.   Kevd1337> , Public domain, via Wikimedia Commons  "
},
{
  "id": "subsec-turing-6",
  "level": "2",
  "url": "sec-turing-machines-comp.html#subsec-turing-6",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "start state halt state "
},
{
  "id": "subsec-turing-7",
  "level": "2",
  "url": "sec-turing-machines-comp.html#subsec-turing-7",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "rules "
},
{
  "id": "def-turing-machine",
  "level": "2",
  "url": "sec-turing-machines-comp.html#def-turing-machine",
  "type": "Definition",
  "number": "17.6.2",
  "title": "Turing Machine.",
  "body": " Turing Machine  Turing Machine   A Turing machine is a 4-tuple , where:    is a finite set of states, including the halt state, .     is an alphabet which includes the blank symbol, #.     is the start state.     is the transition function. The fact that means that when the Turing machine is in state and reads the symbol , it writes the symbol , moves one cell in the direction , and enters state .      "
},
{
  "id": "def-turing-computable",
  "level": "2",
  "url": "sec-turing-machines-comp.html#def-turing-computable",
  "type": "Definition",
  "number": "17.6.3",
  "title": "Turing-computable.",
  "body": " Turing-computable  Turing-computable   Suppose that and are alphabets that do not contain # and that is a function from to . We say that is Turing-computable if there is a Turing machine such that and and for each string , when is run with input , it halts with output . In this case, we say that  computes the function .   "
},
{
  "id": "subsec-turing-20",
  "level": "2",
  "url": "sec-turing-machines-comp.html#subsec-turing-20",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "characteristic function "
},
{
  "id": "def-turing-decidable",
  "level": "2",
  "url": "sec-turing-machines-comp.html#def-turing-decidable",
  "type": "Definition",
  "number": "17.6.4",
  "title": "Turing-decidable.",
  "body": " Turing-decidable  Turing-decidable   Let be an alphabet that does not contain # and let be a language over . We say that is Turing-decidable if there is a Turing machine such that , , and for each , when is run with input , it halts with output . (That is, it halts with output 0 or 1, and the output is 0 if and is 1 if .) In this case, we say that  decides the language .   "
},
{
  "id": "def-turing-acceptable",
  "level": "2",
  "url": "sec-turing-machines-comp.html#def-turing-acceptable",
  "type": "Definition",
  "number": "17.6.5",
  "title": "Turing-acceptable.",
  "body": " Turing-acceptable  Turing-acceptable   Let be an alphabet that does not contain #, and let be a language over . We say that is Turing-acceptable if there is a Turing machine such that , and for each , halts on input if and only if . In this case, we say that  accepts the language .   "
},
{
  "id": "subsec-computability-3",
  "level": "2",
  "url": "sec-turing-machines-comp.html#subsec-computability-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Church-Turing Thesis "
},
{
  "id": "subsec-computability-6",
  "level": "2",
  "url": "sec-turing-machines-comp.html#subsec-computability-6",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "recursively enumerable "
},
{
  "id": "thm-turing-equivalence",
  "level": "2",
  "url": "sec-turing-machines-comp.html#thm-turing-equivalence",
  "type": "Theorem",
  "number": "17.6.6",
  "title": "",
  "body": "  Let be an alphabet and let be a language over . Then the following are equivalent:   There is a Turing machine that accepts .    There is a two-tape Turing machine that runs forever, making a list of strings on its second tape, such that a string is in the list if and only if .    There is a Turing-computable function such that is the range of the function .      "
},
{
  "id": "thm-turing-iff-grammar",
  "level": "2",
  "url": "sec-turing-machines-comp.html#thm-turing-iff-grammar",
  "type": "Theorem",
  "number": "17.6.7",
  "title": "",
  "body": "  A language is Turing acceptable (equivalently, recursively enumerable) if and only if there is a general grammar that generates .   "
},
{
  "id": "subsec-computability-14",
  "level": "2",
  "url": "sec-turing-machines-comp.html#subsec-computability-14",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "recursive "
},
{
  "id": "thm-recursive-language",
  "level": "2",
  "url": "sec-turing-machines-comp.html#thm-recursive-language",
  "type": "Theorem",
  "number": "17.6.8",
  "title": "",
  "body": "  Let be an alphabet and let be a language over . Then is recursive if and only if both and its complement, , are recursively enumerable.   "
},
{
  "id": "subsec-limits-of-comp-11",
  "level": "2",
  "url": "sec-turing-machines-comp.html#subsec-limits-of-comp-11",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Universal Turing Machine "
},
{
  "id": "thm-halting-prob",
  "level": "2",
  "url": "sec-turing-machines-comp.html#thm-halting-prob",
  "type": "Theorem",
  "number": "17.6.9",
  "title": "",
  "body": "  Let , , , , be the standard Turing machines, as described above. Let be the language over the alphabet defined by Then is a recursively enumerable language, but is not recursive. The complement is a language that is not recursively enumerable.   "
},
{
  "id": "subsec-limits-of-comp-21",
  "level": "2",
  "url": "sec-turing-machines-comp.html#subsec-limits-of-comp-21",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Halting Problem computationally unsolvable "
},
{
  "id": "exercises-17-6-2",
  "level": "2",
  "url": "sec-turing-machines-comp.html#exercises-17-6-2",
  "type": "Exercise",
  "number": "17.6.4.1",
  "title": "",
  "body": "Let . Draw a transition diagram for a Turing machine that computes the function where , for . Draw a transition diagram for a Turing machine that computes the function where , for . "
},
{
  "id": "exercises-17-6-3",
  "level": "2",
  "url": "sec-turing-machines-comp.html#exercises-17-6-3",
  "type": "Exercise",
  "number": "17.6.4.2",
  "title": "",
  "body": "Let . Draw a transition diagram for a Turing machine that computes the function where . "
},
{
  "id": "exercises-17-6-4",
  "level": "2",
  "url": "sec-turing-machines-comp.html#exercises-17-6-4",
  "type": "Exercise",
  "number": "17.6.4.3",
  "title": "",
  "body": "Suppose that , , and are alphabets and that and are Turing-computable functions. Show that is Turing-computable. "
},
{
  "id": "exercises-17-6-5",
  "level": "2",
  "url": "sec-turing-machines-comp.html#exercises-17-6-5",
  "type": "Exercise",
  "number": "17.6.4.4",
  "title": "",
  "body": "We have defined computability for functions , where and are alphabets. How could Turing machines be used to define computable functions from to ? (Hint: Consider the alphabet .) "
},
{
  "id": "exercises-17-6-6",
  "level": "2",
  "url": "sec-turing-machines-comp.html#exercises-17-6-6",
  "type": "Exercise",
  "number": "17.6.4.5",
  "title": "",
  "body": "Let be an alphabet and let be a language over . Show that is Turing-decidable if and only if its complement, , is Turing-decidable. "
},
{
  "id": "exercises-17-6-7",
  "level": "2",
  "url": "sec-turing-machines-comp.html#exercises-17-6-7",
  "type": "Exercise",
  "number": "17.6.4.6",
  "title": "",
  "body": "Draw a transition diagram for a Turing machine which decides the language . (Hint: Change the 's and 's to \\$'s in pairs.) Explain in general terms how to make a Turing machine that decides the language . "
},
{
  "id": "exercises-17-6-8",
  "level": "2",
  "url": "sec-turing-machines-comp.html#exercises-17-6-8",
  "type": "Exercise",
  "number": "17.6.4.7",
  "title": "",
  "body": "Draw a transition diagram for a Turing machine which decides the language and is a multiple of . (Hint: Erase  's at a time.) "
},
{
  "id": "exercises-17-6-9",
  "level": "2",
  "url": "sec-turing-machines-comp.html#exercises-17-6-9",
  "type": "Exercise",
  "number": "17.6.4.8",
  "title": "",
  "body": "Based on your answer to the previous problem and the copying machine presented in this section, describe in general terms how you would build a Turing machine to decide the language is a prime number . "
},
{
  "id": "exercises-17-6-10",
  "level": "2",
  "url": "sec-turing-machines-comp.html#exercises-17-6-10",
  "type": "Exercise",
  "number": "17.6.4.9",
  "title": "",
  "body": "Let be the function such that for each , is the representation of as a binary number. Draw a transition diagram for a Turing machine that computes . "
},
{
  "id": "exercises-17-6-11",
  "level": "2",
  "url": "sec-turing-machines-comp.html#exercises-17-6-11",
  "type": "Exercise",
  "number": "17.6.4.10",
  "title": "",
  "body": "The language is the range of the function . Design a Turing machine that computes this function, and find the grammar that generates the language by imitating the computation of that machine. "
},
{
  "id": "exercises-17-6-12",
  "level": "2",
  "url": "sec-turing-machines-comp.html#exercises-17-6-12",
  "type": "Exercise",
  "number": "17.6.4.11",
  "title": "",
  "body": "Complete the proof of by proving the following: If is a recursive language over an alphabet , then both and are recursively enumerable. "
},
{
  "id": "exercises-17-6-13",
  "level": "2",
  "url": "sec-turing-machines-comp.html#exercises-17-6-13",
  "type": "Exercise",
  "number": "17.6.4.12",
  "title": "",
  "body": "Show that a language over an alphabet is recursive if and only if there are grammars and such that the language generated by is and the language generated by is . "
},
{
  "id": "exercises-17-6-14",
  "level": "2",
  "url": "sec-turing-machines-comp.html#exercises-17-6-14",
  "type": "Exercise",
  "number": "17.6.4.13",
  "title": "",
  "body": "This section discusses recursive languages and recursively enumerable languages. How could one define recursive subsets of and recursively enumerable subsets of ? "
},
{
  "id": "exercises-17-6-15",
  "level": "2",
  "url": "sec-turing-machines-comp.html#exercises-17-6-15",
  "type": "Exercise",
  "number": "17.6.4.14",
  "title": "",
  "body": "Give an informal argument to show that a subset is recursive if and only if there is a computer program that prints out the elements of  it in increasing order . "
},
{
  "id": "app-python-iterators",
  "level": "1",
  "url": "app-python-iterators.html",
  "type": "Section",
  "number": "A.1",
  "title": "Python Iterators",
  "body": "Python Iterators  All programming languages allow for looping. A common form of loop is one in which a series of instructions are executed for each value of some index variable, commonly for values between two integers. Python allows a bit more generality by having structures called iterators over which looping can be done. An iterator can be as simple as a list, such as [0,1,2,3] , but also can be a power set of a finite set, as we see below, or the keys in a dictionary, which is described in the next section.  Counting Subsets  Suppose we want to count the number of subsets of that contain no adjacent elements. First, we will define our universe and its power set. The plan will be to define a function that determines whether a subset is \"valid\" in the sense that it contains no adjacent elements. Then we will iterate over the subsets, counting the valid ones. We know that the number of all subsets will be 2 raised to the number of elements in , which would be , but let's check.   The validity check in this case is very simple. For each element, , of a set, , we ask whether its successor, , is also in the set. If we never get an answer of \"True\" then we consider the set valid. This function could be edited to define validity in other ways to answer different counting questions. It's always a good idea to test your functions, so we try two tests, one with a valid set and one with an invalid one.   Finally we do the counting over our power set, incrementing the count variable with each valid set.    "
},
{
  "id": "app-pythonsage-dictionaries",
  "level": "1",
  "url": "app-pythonsage-dictionaries.html",
  "type": "Section",
  "number": "A.2",
  "title": "Dictionaries",
  "body": "Dictionaries  Colors of Fruits  In Python and SageMath, a dictionary is a convenient data structure for establishing a relationship between sets of data. From the point of view of this text, we can think of a dictionary as a concrete realization of a relation between two sets or on a single set. A dictionary resembles a function in that there is a set of data values called the keys , and for each key, there is a value . The value associated with a key can be almost anything, but it is most commonly a list.  To illustrate the use of dictionaries, we will define a relationship between colors and fruits. The keys will be a set of colors and values associated with each color will be a list of fruits that can take on that color. We will demonstrate how to initialize the dictionary and how to add to it. The following series of assignments have no output, so we add a print statement to verify that this cell is completely evaluated.   We distinguish a color from a fruit by capitalizing colors but not fruit. The keys of this dictionary are the colors:   As an afterthough, we might add the information that a raspberry is red as follows. You have to be careful in that if 'Red' isn't already in the dictionary, it doesn't have a value. This is why we need an if statement.   A dictionary is iterable, with an iterator taking on values that are the keys. Here we iterate over the our dictionary to output lists consisting of a color followed by a list of fruits that come in that color.   We can view a graph of this relation between colors and fruits, but the default view is a bit unconventional.   With a some additional coding we can line up the colors and fruits in their own column. First we set the positions of colors on the left with all -coordinates equal to -5 using another dictionary called vertex_pos .   Next, we place the fruit vertices in another column with -coordinates all equal to 5. In order to do this, we first collect all the fruit values into one set we call fruits .   Now the graph looks like a conventional graph for a relation between two different sets. Notice that it's not a function    "
},
{
  "id": "backmatter-2",
  "level": "1",
  "url": "backmatter-2.html",
  "type": "Appendix",
  "number": "B",
  "title": "Hints and Solutions to Selected Exercises",
  "body": " Hints and Solutions to Selected Exercises  "
},
{
  "id": "backmatter-3",
  "level": "1",
  "url": "backmatter-3.html",
  "type": "Appendix",
  "number": "C",
  "title": "Notation",
  "body": "Notation  The following table defines the notation used in this book. Page numbers or references refer to the first appearance of each symbol.   "
},
{
  "id": "backmatter-4",
  "level": "1",
  "url": "backmatter-4.html",
  "type": "References",
  "number": "",
  "title": "References",
  "body": "References   Many of the references listed here were used in preparing the original 1980's version of this book. In most cases, the mathematics that they contain is still worth reading for further background. Many can be found online, in university libraries or used bookstores. A few references more current references have been added.   Allenby, R.B.J.T, Rings, Fields and Groups , Edward Arnold, 1983.  Appel, K., and W. Haken, Every Planar Map Is 4-colorable , Bull, Am. Math. Soc. 82 (1976): 711-12.  Arbib, M. A., A. J. Kfoury, and R. N. Moll, A Basis for Theoretical Computer Science , New York: Springer-Verlag, 1981.  Austin, A. Keith, An Elementary Approach to NP-Completeness American Math. Monthly 90 (1983): 398-99.  Beardwood, J., J. H. Halton, and J. M. Hammersley, The Shortest Path Through Many Points Proc. Cambridge Phil. Soc. 55 (1959): 299-327.  Ben-Ari, M, Principles of Concurrent Programming , Englewood Cliffs, NJ: Prentice-Hall, 1982.  Berge, C, The Theory of Graphs and Its Applications , New York: Wiley, 1962.  Bogart, Kenneth P, Combinatorics Through Guided Discovery , 2005. This book may be freely downloaded and redestributed under the terms of the GNU Free Documentation License (FDL), as published by the Free Software Foundation.  Bronson, Richard, Matrix Methods , New York: Academic Press, 1969.  Busacker, Robert G., and Thomas L. Saaty, Finite Graphs and Networks , New York: McGraw-Hill, 1965.  Connell, Ian, Modern Algebra, A Constructive Introduction , New York: North-Holland, 1982.  Denning, Peter J., Jack B. Dennis, and Joseph L. Qualitz, Machines, Languages, and Computation , Englewood Cliffs, NJ: Prentice-Hall, 1978.  Denning, Peter J, Multigrids and Hypercubes . American Scientist 75 (1987): 234-238.  Dornhoff, L. L., and F. E. Hohn, Applied Modern Algebra , New York: Macmillan, 1978.  Even, S, Graph Algorithms , Potomac, MD: Computer Science Press, 1979.  Fisher, J. L, Application-Oriented Algebra , New York: Harper and Row, 1977.  Ford, L. R., Jr., and D. R. Fulkerson, Flows in Networks , Princeton, NJ: Princeton Univesity Press, 1962.  Fraleigh, John B, A First Course in Abstract Algebra , 3rd ed. Reading, MA: Addison-Wesley, 1982.  Gallian, Joseph A, Contemporary Abstract Algebra , D.C. Heath, 1986.  Gallian, Joseph A, Group Theory and the Design of a Letter-Facing Machine , American Math. Monthly 84 (1977): 285-287.  Hamming, R. W, Coding and Information Theory , Englewood Cliffs, NJ: Prentice-Hall, 1980.  Hill, F. J., and G. R. Peterson, Switching Theory and Logical Design , 2nd ed. New York: Wiley, 1974.  Hofstadter, D. R, Godel, Escher, Bach: An Eternal Golden Braid , New York: Basic Books, 1979.  Hohn, F. E, Applied Boolean Algebra , 2nd ed. New York: Macmillan, 1966.  Hopcroft, J. E., and J. D. Ullman, Formal Languages and Their Relation to Automata , Reading, MA: Addison-Wesley, 1969.  Hu, T. C, Combinatorial Algorithms , Reading, MA: Addison-Wesley, 1982.  Knuth, D. E, The Art of Computer Programming. Vol. 1, Fundamental Algorithms , 2nd ed. Reading, MA: Addison-Wesley, 1973.  Knuth, D. E, The Art of Computer Programming. Vol. 2, Seminumerical Algorithms , 2nd ed., Reading, MA: Addison-Wesley, 1981.  Knuth, D. E, The Art of Computer Programming. Vol. 3, Sorting and Searching , Reading, MA: Addison-Wesley, 1973.  Knuth, D. E, The Art of Computer Programming. Vol. 4A, Combinatorial Algorithms, Part 1 , Upper Saddle River, New Jersey: Addison-Wesley, 2011. https:\/\/www-cs-faculty.stanford.edu\/~knuth\/taocp.html  Kulisch, U. W., and Miranker, W. L, Computer Arithmetic in Theory and Practice , New York: Academic Press, 1981.  Lipson, J. D, Elements of Algebra and Algebraic Computing , Reading, MA: Addison-Wesley, 1981.  Liu, C. L, Elements of Discrete Mathematics , New York: McGraw-Hill, 1977.  O'Donnell, Analysis of Boolean Functions . A book about Fourier analysis of boolean functions that is being developed online in a blog.  Ore, O, Graphs and Their Uses , New York: Random House, 1963.  Parry, R. T., and H. Pferrer, The Infamous Traveling-Salesman Problem: A Practical Approach Byte 6 (July 1981): 252-90.  Pless, V, Introduction to the Theory of Error-Correcting Codes , New York: Wiley-Interscience, 1982.  Purdom, P. W., and C. A. Brown, The Analysis of Algorithms , Holt, Rinehart, and Winston, 1985.  Quine, W. V, The Ways of Paradox and Other Essays , New York: Random House, 1966.  Ralston, A, The First Course in Computer Science Needs a Mathematics Corequisite , Communications of the ACM 27-10 (1984): 1002-1005.  Solow, Daniel, How to Read and Do Proofs , New York: Wiley, 1982.  Sopowit, K. J., E. M. Reingold, and D. A. Plaisted The Traveling Salesman Problem and Minimum Matching in the Unit Square . SIAM J. Computing , 1983, 12 , 144 56.  Standish, T. A, Data Structure Techniques , Reading, MA: Addison-Wesley, 1980.  Stoll, Robert R, Sets, Logic and Axiomatic Theories , San Francisco: W. H. Freeman, 1961.  Strang, G, Linear Algebra and Its Applications , 2nd ed. New York: Academic Press, 1980.  Tucker, Alan C, Applied Combinatorics , 2nd ed. New York: John Wiley and Sons, 1984.  Wand, Mitchell, Induction, Recursion, and Programming , New York: North-Holland, 1980.  Warshall, S, A Theorem on Boolean Matrices Journal of the Association of Computing Machinery, 1962, 11-12.  Weisstein, Eric W. Strassen Formulas , MathWorld--A Wolfram Web Resource, http:\/\/mathworld.wolfram.com\/StrassenFormulas.html.  Wilf, Herbert S, Some Examples of Combinatorial Averaging , American Math. Monthly 92 (1985).  Wilf, Herbert S. generatingfunctionology , A K Peters\/CRC Press, 2005 The 1990 edition of this book is available at https:\/\/www.math.upenn.edu\/~wilf\/DownldGF.html  Winograd, S, On the Time Required to Perform Addition , J. Assoc. Comp. Mach. 12 (1965): 277-85.  Wilson, R., Four Colors Suffice - How the Map Problem Was Solved Princeton, NJ: Princeton U. Press, 2013.  "
},
{
  "id": "biblio-bogart-2005-2",
  "level": "2",
  "url": "backmatter-4.html#biblio-bogart-2005-2",
  "type": "Note",
  "number": "8.1",
  "title": "",
  "body": "This book may be freely downloaded and redestributed under the terms of the GNU Free Documentation License (FDL), as published by the Free Software Foundation. "
},
{
  "id": "biblio-knuth-2011-2",
  "level": "2",
  "url": "backmatter-4.html#biblio-knuth-2011-2",
  "type": "Note",
  "number": "30.1",
  "title": "",
  "body": "https:\/\/www-cs-faculty.stanford.edu\/~knuth\/taocp.html "
},
{
  "id": "biblio-odonnell-1963-2",
  "level": "2",
  "url": "backmatter-4.html#biblio-odonnell-1963-2",
  "type": "Note",
  "number": "34.1",
  "title": "",
  "body": "A book about Fourier analysis of boolean functions that is being developed online in a blog. "
},
{
  "id": "biblio-wilf-1990-2",
  "level": "2",
  "url": "backmatter-4.html#biblio-wilf-1990-2",
  "type": "Note",
  "number": "51.1",
  "title": "",
  "body": "The 1990 edition of this book is available at https:\/\/www.math.upenn.edu\/~wilf\/DownldGF.html "
},
{
  "id": "backmatter-5",
  "level": "1",
  "url": "backmatter-5.html",
  "type": "Index",
  "number": "",
  "title": "Index",
  "body": " Index   "
}
]

var ptx_lunr_idx = lunr(function () {
  this.ref('id')
  this.field('title')
  this.field('body')
  this.metadataWhitelist = ['position']

  ptx_lunr_docs.forEach(function (doc) {
    this.add(doc)
  }, this)
})
